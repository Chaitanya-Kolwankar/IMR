using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Services;
using System.Web.UI.WebControls;
using System.Text.RegularExpressions;
using System.IO;
using System.Web.Script.Serialization;
using System.Globalization;



/// <summary>
/// Summary description for classWebMethods
/// </summary>
public class classWebMethods
{
    QueryClass qryCls = new QueryClass();
    Class2 cls1 = new Class2();
    SqlDataReader resultset;
    bool bolinsert;
    int intddno;

    Class2 cls = new Class2();
    public bool check_ins_updt(string ayid, string from_yr, string group_id, string subcourse_id, string subcrs_text, string stud_Id, string emp_id, string to_group, string unchk_id)
    {
        string str = "", check_updt = "";
        //DataSet ds = cls.fillDataset(str);
        if (stud_Id != "")
        {
            str = "select * from www_Eligibility where Group_id='" + group_id + "' and to_year='" + ayid + "' and From_year='" + from_yr + "' and stud_id='" + stud_Id + "' and del_flag=0";
            DataSet ds = cls.fillDataset(str);
            if (ds.Tables[0].Rows.Count > 0)
            {
                check_updt = "update www_Eligibility set is_eligible=1,to_group_id='" + to_group + "',mod_dt=getdate() where stud_id='" + stud_Id + "' and Group_id='" + group_id + "' and to_year='" + ayid + "' and From_year='" + from_yr + "'";
            }
            else
            {
                check_updt = "insert into www_Eligibility (Group_id,Stud_id,to_year,From_year,is_eligible,curr_dt,del_flag,to_group_id,emp_id) "
               + " values('" + group_id + "', '" + stud_Id + "', '" + ayid + "', '" + from_yr + "', 1, getdate(), 0, '" + to_group + "', '" + emp_id + "')";

            }
            cls.DMLqueries(check_updt);
        }
        else
        {
            str = "select * from www_Eligibility where Group_id='" + group_id + "' and to_year='" + ayid + "' and From_year='" + from_yr + "' and stud_id='" + unchk_id + "' and del_flag=0";
            DataSet ds = cls.fillDataset(str);
            if (ds.Tables[0].Rows.Count > 0)
            {
                check_updt = "update www_Eligibility set is_eligible=0,to_group_id='" + to_group + "',mod_dt=getdate()  where stud_id='" + unchk_id + "' and Group_id='" + group_id + "' and to_year='" + ayid + "' and From_year='" + from_yr + "'";
            }
            else
            {
                check_updt = "insert into www_Eligibility (Group_id,Stud_id,to_year,From_year,is_eligible,curr_dt,del_flag,to_group_id,emp_id) "
               + " values('" + group_id + "', '" + unchk_id + "', '" + ayid + "', '" + from_yr + "', 0, getdate(), 0, '" + to_group + "', '" + emp_id + "')";

            }
            cls.DMLqueries(check_updt);
        }


        //if (ds.Tables[0].Rows.Count > 0)
        //{
        //    check_updt = "update www_Eligibility set Group_id='" + group_id + "',to_year='" + ayid + "',From_year='" + from_yr + "',to_group_id='" + to_group + "' where stud_id='" + stud_Id + "'";
        //}
        //else
        //{
        //    check_updt = "insert into www_Eligibility (Group_id,Stud_id,to_year,From_year,is_eligible,curr_dt,del_flag,to_group_id,emp_id) "
        //   + " values('" + group_id + "', '" + stud_Id + "', '" + ayid + "', '" + from_yr + "', 1, getdate(), 0, '" + to_group + "', '" + emp_id + "')";
        //    cls.DMLqueries(check_updt);
        //}
        return true;

    }

    public stud_doc_data[] get_data(string sub_group)
    {
        string qry = "select a.formno,c.extra1,upper(isnull(b.F_name,'')+' '+isnull(b.m_name,'')+' '+isnull(b.l_name,'')) as names,case when Phone_No='' then Mob_No else Phone_No end as phone,Category  from OLA_FY_adm_CourseSelection a,d_adm_applicant b,d_adm_applicant_photo c  where  a.formno=b.Form_no  and b.Form_no=c.Form_no  and a.formno like '21%' and a.group_id in ("
      + " select Group_id from m_crs_subjectgroup_tbl where Subcourse_id='" + sub_group + "') and b.Del_Flag=0 order by formno";
        DataSet ds = cls.fillDataset(qry);
        List<stud_doc_data> details = new List<stud_doc_data>();
        if (ds.Tables[0].Rows.Count > 0)
        {
            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                stud_doc_data ove = new stud_doc_data();
                ove.form_id = drrow["formno"].ToString();
                ove.name = drrow["names"].ToString();
                ove.status = drrow["extra1"].ToString();
                ove.category = drrow["Category"].ToString();
                ove.phone = drrow["phone"].ToString();
                details.Add(ove);
            }
        }
        return details.ToArray();
    }
    //rohit student previous fee details
    public fee_det_stud[] getdata_fee_new(string ayid, string group)
    {
        List<fee_det_stud> details = new List<fee_det_stud>();
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataTable dt = new DataTable();
        SqlDataAdapter da;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("stud_feerpt", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@group_id", group);
                cmd.Parameters.AddWithValue("@ayid", ayid);
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
            }
        }
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {

                fee_det_stud regi = new fee_det_stud();
                regi.id = dtrow["stud_id"].ToString();
                regi.roll = dtrow["Roll_no"].ToString();
                regi.name = dtrow["names"].ToString();
                regi.grp_title = dtrow["Group_title"].ToString();
                regi.amt_paid1 = dtrow["amt_paid"].ToString();
                regi.amt_bal1 = dtrow["bal"].ToString();
                regi.remark = dtrow["Remark"].ToString();
                details.Add(regi);
            }
        }
        return details.ToArray();
    }
    public List<ListItem> courseChangeClass(string courseID, string finalGrp)
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select subcourse_id,subcourse_name from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + ") and course_id='" + courseID + "')";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString(),
                            Text = sdr["subcourse_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public exam_report[] getdata(string subcourse_id, string ayid)
    {
        string qry = "select a.stud_id,isnull(a.stud_F_Name,'')+' '+isnull(a.stud_M_Name,'')+' '+isnull(a.stud_L_Name,'') as names,case when (b.ID_No is null or b.ID_No='') then '' else CHAR(39)+substring(b.ID_No,0,17) end as PRN_Number,"
        + " c.sem1_cg,c.sem1_credit_earn,c.sem2_cg,c.sem2_credit_earn ,c.sem3_cg,c.sem3_credit_earn, c.sem4_cg,c.sem4_credit_earn"
        + " from m_std_personaldetails_tbl a,m_std_studentacademic_tbl b,cre_stud_academic c where a.stud_id=b.stud_id and b.stud_id=c.stud_id and b.subcourse_Id='" + subcourse_id + "'  and b.del_flag=0 and b.ayid='" + ayid + "' order by names";
        DataTable dss = cls1.fillDataTable(qry);

        List<exam_report> details = new List<exam_report>();
        if (dss.Rows.Count > 0)
        {

            foreach (DataRow dtrow in dss.Rows)
            {
                exam_report er = new exam_report();
                er.stud_id = dtrow["stud_id"].ToString();
                er.NAME = dtrow["names"].ToString();
                er.prn = dtrow["PRN_Number"].ToString();
                er.s1_cg = dtrow["sem1_cg"].ToString();
                er.s1_ce = dtrow["sem1_credit_earn"].ToString();

                er.s2_cg = dtrow["sem2_cg"].ToString();
                er.s2_ce = dtrow["sem2_credit_earn"].ToString();

                er.s3_cg = dtrow["sem3_cg"].ToString();
                er.s3_ce = dtrow["sem3_credit_earn"].ToString();

                er.s4_ce = dtrow["sem4_credit_earn"].ToString();
                er.s4_cg = dtrow["sem4_cg"].ToString();
                details.Add(er);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }

    }

    //employee details
    public employee[] getemployeedatacon(string roleid)
    {
        List<employee> details = new List<employee>();
        try
        {
            string str = "";
            string str1 = "";
            str = "select a.CURRENT_DEPARTMENT_NAME,w.role_id, a.emp_id,NAME+' '+FATHER+' '+SURNAME as SNAME, MOTHER as mothername,convert(varchar(10),DOB,103) as DOB,convert(varchar(10),DOJ,103) as DOJ,BLOOD_GROUP,GENDER,MARITIAL_STATUS,CATEGORY,case when CASTE like '%select%' then '' else CASTE end as empcaste,PHONE1,MOBILE1,EMAIL_ADDRESS,[PF.NO],[RATION.CARD.NO],[ELECTION.NO],[DRIV.LICS.NO],	[PAN.NO],	[PASSPORT.NO],	CURRENT_ADDRESS,	CURRENT_STATE,	CURRENT_PIN,NATIVE_ADDRESS,	NATIVE_STATE,	NATIVE_PIN,CURRENT_DESIGNATION from employeepersonal a,web_tp_roletype w,web_tp_login m  where a.del_flag=0 and a.emp_id not like '%VSS%'  and w.role_id='" + roleid + "' and a.emp_id=m.emp_id and m.role_id=w.role_id";

            DataTable dtfill = cls1.fillDataTable(str);

            if (dtfill.Rows.Count > 0)
            {
                str = "";
                dtfill.Columns.Add("course");
                dtfill.Columns.Add("degree");
                dtfill.Columns.Add("Class");
                dtfill.Columns.Add("Paper");
                dtfill.Columns.Add("Seminar");
                dtfill.Columns.Add("Semcount");
                string educount = "";

                for (int i = 0; i < dtfill.Rows.Count; i++)
                {
                    string semcount = "";
                    str = "select isnull(emp_degree_name,'') as course,' Year Of Passing:-'+isnull(emp_year_of_passing,'')+' Board/University:-'+isnull(emp_unversity_board_name,'') as D_YOP_UNI,isnull(emp_class_secured,'') as class from employee_education_details where emp_id='" + dtfill.Rows[i]["emp_id"].ToString() + "' ";
                    string edudata = "";
                    string eclass = "";
                    string course = "";
                    DataTable dtedu = cls1.fillDataTable(str);
                    if (dtedu.Rows.Count > 0)
                    {
                        educount = Convert.ToString(dtedu.Rows.Count);
                        for (int j = 0; j < dtedu.Rows.Count; j++)
                        {
                            if (j == dtedu.Rows.Count - 1)
                            {
                                course = course + dtedu.Rows[j]["course"].ToString();
                                edudata = edudata + dtedu.Rows[j]["D_YOP_UNI"].ToString();
                                eclass = eclass + dtedu.Rows[j]["class"].ToString();
                            }
                            else
                            {
                                course = course + dtedu.Rows[j]["course"].ToString() + " , ";
                                edudata = edudata + dtedu.Rows[j]["D_YOP_UNI"].ToString() + " , ";
                                eclass = eclass + dtedu.Rows[j]["class"].ToString() + " , ";
                            }
                        }
                        dtfill.Rows[i]["course"] = course;
                        dtfill.Rows[i]["degree"] = edudata;
                        dtfill.Rows[i]["Class"] = eclass;
                    }
                    else
                    {
                        dtfill.Rows[i]["course"] = course;
                        dtfill.Rows[i]["degree"] = edudata;
                        dtfill.Rows[i]["Class"] = eclass;

                    }

                    //str1 = "select * from employee_seminarwork where emp_id='" + dtfill.Rows[i]["emp_id"].ToString() + "' ";
                    //string seminar = "";
                    //string semidata = "";

                    //DataTable dtsem = cls1.fillDataTable(str1);
                    //if (dtsem.Rows.Count > 0)
                    //{
                    //    semcount = Convert.ToString(dtsem.Rows.Count);
                    //    for (int l = 0; l < dtsem.Rows.Count; l++)
                    //    {
                    //        if (l == dtsem.Rows.Count - 1)
                    //        {
                    //            seminar = seminar + dtsem.Rows[l]["swattend"].ToString();
                    //            semidata = semidata + dtsem.Rows[l]["othdet"].ToString();

                    //        }
                    //        else
                    //        {
                    //            seminar = seminar + dtsem.Rows[l]["swattend"].ToString() + " , ";
                    //            semidata = semidata + dtsem.Rows[l]["othdet"].ToString() + " , ";

                    //        }
                    //    }
                    //    dtfill.Rows[i]["Paper"] = seminar;
                    //    dtfill.Rows[i]["Seminar"] = semidata;
                    //    dtfill.Rows[i]["Semcount"] = semcount;
                    //}
                    //else
                    //{
                    //    dtfill.Rows[i]["Paper"] = seminar;
                    //    dtfill.Rows[i]["Seminar"] = semidata;
                    //    dtfill.Rows[i]["Semcount"] = semcount;
                    //}
                }

                foreach (DataRow drrow in dtfill.Rows)
                {
                    employee emp = new employee();
                    emp.fname = drrow["SNAME"].ToString();
                    //emp.mname = drrow["mname"].ToString();
                    //emp.lname = drrow["lname"].ToString();
                    emp.mothername = drrow["mothername"].ToString();

                    emp.department = drrow["CURRENT_DEPARTMENT_NAME"].ToString();

                    emp.emailid = drrow["EMAIL_ADDRESS"].ToString();
                    emp.empid = drrow["emp_id"].ToString();
                    emp.dob = drrow["DOB"].ToString();
                    emp.dojoin = drrow["DOJ"].ToString();
                    emp.bloodgrp = drrow["BLOOD_GROUP"].ToString();
                    emp.gender = drrow["GENDER"].ToString();
                    emp.marrst = drrow["MARITIAL_STATUS"].ToString();
                    emp.category = drrow["CATEGORY"].ToString();
                    emp.caste = drrow["empcaste"].ToString();
                    emp.phone = drrow["PHONE1"].ToString();
                    emp.mobile2 = drrow["MOBILE1"].ToString();
                    emp.address = drrow["CURRENT_ADDRESS"].ToString();
                    emp.pfno = drrow["PF.NO"].ToString();
                    emp.ration = drrow["RATION.CARD.NO"].ToString();
                    emp.election = drrow["ELECTION.NO"].ToString();
                    emp.driving = drrow["DRIV.LICS.NO"].ToString();
                    emp.panno = drrow["PAN.NO"].ToString();
                    //    emp.aadharno = drrow["Aadhar.No"].ToString();
                    emp.pincode = drrow["CURRENT_PIN"].ToString();
                    emp.state = drrow["CURRENT_STATE"].ToString();
                    emp.nativadd = drrow["NATIVE_ADDRESS"].ToString();
                    emp.nativst = drrow["NATIVE_STATE"].ToString();
                    //   emp.religion = drrow["RELIGION"].ToString();
                    emp.desig = drrow["CURRENT_DESIGNATION"].ToString();
                    emp.educnt = educount;
                    emp.degree = drrow["degree"].ToString();
                    emp.eclass = drrow["Class"].ToString();
                    emp.course = drrow["course"].ToString();
                    //    emp.aadharno = drrow["Aadhar.No"].ToString();
                    //  emp.bank_accno = drrow["Bank_Accno"].ToString();
                    //  emp.aadharno = drrow["Aadhar.No"].ToString();
                    //  emp.branch = drrow["Branch"].ToString();
                    //  emp.council = drrow["Council"].ToString();
                    //  emp.validity = drrow["Validity"].ToString();
                    //  emp.semcount = drrow["Semcount"].ToString();
                    emp.PAPER = drrow["Paper"].ToString();
                    emp.SEMINAR = drrow["Seminar"].ToString();
                    emp.msg = "";
                    details.Add(emp);
                }
            }
            else
            {
                foreach (DataRow drrow in dtfill.Rows)
                {
                    employee emp = new employee();
                    emp.msg = "No Data";
                    details.Add(emp);
                }
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }


    public bool URLExists(string url)
    {
        System.Net.WebRequest webRequest = System.Net.WebRequest.Create(url);
        webRequest.Method = "HEAD";
        try
        {
            using (System.Net.HttpWebResponse response = (System.Net.HttpWebResponse)webRequest.GetResponse())
            {
                if (response.StatusCode.ToString() == "OK")
                {
                    return true;
                }
                return false;
            }
        }
        catch
        {
            return false;
        }
    }
    public PartPaymentStudent[] searchstudent_BULK(string group, string year)
    {
        string qry = "";
        List<PartPaymentStudent> details = new List<PartPaymentStudent>();



        //qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
        //    + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no=substring(c.stud_id,0,6)  where a.Form_no=substring('" + id + "',0,6)  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1 and a.stud_id is nULL";

        //      qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
        //           + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id  where a.Form_no+substring(a.group_id,4,3)='" + id + "'  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1";  // and a.stud_id is nULl

        //        qry = "	  select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join "
        //+ " OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join      ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id   where a.group_id='" + group + "'  and a.ACDID='" + year + "' and Category <> 'OPEN'  and a.del_flag=0 and a.step7_flag=1"
        //             + "  UNION ALL select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join  "
        //                     + " ( select a.* from [grant_freeshipscholarship] a where a.del_flag=0 and ayid='" + year + "' ) c on a.stud_id=c.stud_id   where a.GROUP_ID='" + group + "' and stud_Category<>'OPEN'  and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id=A.STUD_ID) and a.del_flag=0";

        qry = " select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category, case when  a.Caste='NULL' or"
+ " a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,case when a.Is_Inhouse='0' then 'Inhouse' when a.Is_Inhouse='1' then 'Outsider' else 'Private' end as house,coalesce(c.curr_dt,'') curr_dt   from"
+ " ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id,a.Is_Inhouse   "
+ " from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join      "
+ " ( select a.* from [grant_freeshipscholarship] a where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id   where a.group_id='" + group + "'  and a.ACDID='" + year + "' and Category <> 'OPEN'  and a.del_flag=0 and a.step7_flag=1 "
+ "UNION ALL select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste, "
+ " case when c.stud_id is null then 0 else 1 end isallowed,'--',coalesce(c.curr_dt,'') curr_dt from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner "
+ " join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a where a.del_flag=0 and ayid='" + year + "' ) c on a.stud_id=c.stud_id"
  + " where a.GROUP_ID='" + group + "' and stud_Category <>'OPEN'  and a.ayid=(select MAX(ayid) from m_std_studentacademic_tbl where stud_id=A.STUD_ID) and a.del_flag=0 order by name";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = cls1.fillDataset(qry);
        // List<PartPaymentStudent> details = new List<PartPaymentStudent>();


        //if (ds.Tables[0].Rows.Count > 0)
        //{
        //    studentDetailfee stud = new studentDetailfee();
        //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
        //    details.Add(stud);
        //}

        foreach (DataRow dtrow in ds.Tables[0].Rows)
        {
            PartPaymentStudent stud = new PartPaymentStudent();
            stud.Roll_no = dtrow["Roll_no"].ToString();
            stud.stud_id = dtrow["stud_id"].ToString();
            stud.NAME = dtrow["NAME"].ToString();
            stud.isinhouse = dtrow["house"].ToString();
            stud.stud_Category = dtrow["stud_Category"].ToString();
            stud.stud_Caste = dtrow["stud_Caste"].ToString();

            stud.Group_title = dtrow["Group_title"].ToString();

            //  stud.empid = dtrow["empid"].ToString();
            if (dtrow["isallowed"].ToString() == "0")
            {
                stud.isallowed = "Not Allowed";

            }
            else
            {
                stud.isallowed = "Allowed";
            }
            bool fileExist = URLExists("http://vivacollege.in/fy_degree/2020_2021_DOC/" + dtrow["stud_id"].ToString().Substring(0, 5) + "/CAST_CERTIFICATE.jpg");
            if (fileExist)
            {
                stud.file_ex = "1";
            }
            else
            {
                stud.file_ex = "0";
            }
            //  stud.allow_amt = dtrow["allow_amt"].ToString();
            // stud.remark = dtrow["remark"].ToString();
            //  stud.empname = dtrow["empname"].ToString();


            if (dtrow["curr_dt"].ToString().Contains("1900"))
            {
                stud.curr_dt = "-";

            }
            else
            {
                stud.curr_dt = dtrow["curr_dt"].ToString();
            }





            details.Add(stud);
        }

        return details.ToArray();

    }


    //megha scholarship
    //    public PartPaymentStudent[] searchstudent_BULK(string group, string year)
    //    {
    //        string qry = "";
    //        List<PartPaymentStudent> details = new List<PartPaymentStudent>();



    //        //qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
    //        //    + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no=substring(c.stud_id,0,6)  where a.Form_no=substring('" + id + "',0,6)  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1 and a.stud_id is nULL";

    //        //      qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
    //        //           + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id  where a.Form_no+substring(a.group_id,4,3)='" + id + "'  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1";  // and a.stud_id is nULl

    //        qry = "	  select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join "
    //+ " OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join      ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id   where a.group_id='" + group + "'  and a.ACDID='" + year + "'  and a.del_flag=0 and a.step7_flag=1"
    //             + "  UNION ALL select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join  "
    //                     + " ( select a.* from [grant_freeshipscholarship] a where a.del_flag=0 and ayid='" + year + "' ) c on a.stud_id=c.stud_id   where a.GROUP_ID='" + group + "'  and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id=A.STUD_ID) and a.del_flag=0";



    //        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //        DataSet ds = cls1.fillDataset(qry);
    //        // List<PartPaymentStudent> details = new List<PartPaymentStudent>();


    //        //if (ds.Tables[0].Rows.Count > 0)
    //        //{
    //        //    studentDetailfee stud = new studentDetailfee();
    //        //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
    //        //    details.Add(stud);
    //        //}

    //        foreach (DataRow dtrow in ds.Tables[0].Rows)
    //        {
    //            PartPaymentStudent stud = new PartPaymentStudent();
    //            stud.Roll_no = dtrow["Roll_no"].ToString();
    //            stud.stud_id = dtrow["stud_id"].ToString();
    //            stud.NAME = dtrow["NAME"].ToString();

    //            stud.stud_Category = dtrow["stud_Category"].ToString();
    //            stud.stud_Caste = dtrow["stud_Caste"].ToString();

    //            stud.Group_title = dtrow["Group_title"].ToString();

    //            //  stud.empid = dtrow["empid"].ToString();
    //            if (dtrow["isallowed"].ToString() == "0")
    //            {
    //                stud.isallowed = "Not Allowed";

    //            }
    //            else
    //            {
    //                stud.isallowed = "Allowed";
    //            }

    //            //  stud.allow_amt = dtrow["allow_amt"].ToString();
    //            // stud.remark = dtrow["remark"].ToString();
    //            //  stud.empname = dtrow["empname"].ToString();


    //            if (dtrow["curr_dt"].ToString().Contains("-00"))
    //            {
    //                stud.curr_dt = "-";

    //            }
    //            else
    //            {
    //                stud.curr_dt = dtrow["curr_dt"].ToString();
    //            }





    //            details.Add(stud);
    //        }

    //        return details.ToArray();

    //    }

    //reservation
    //   public reservation[] getdata_res(string ayid)
    //   {
    //       Class1 cls = new Class1();
    //       string qryintake = "";
    //       //   qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b where a.group_id=b.Group_id and a.subcourse_id= b.Subcourse_id and a.ayid='" + ayid + "'";

    //       //   qryintake = " select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    //       //+" where a.group_id=b.Group_id and a.group_id=c.group_id and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    //       //+" and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title not like '%H.M.T%'";

    //       //       qryintake=" select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    //       //+" where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    //       //+" and a.ayid='"+ayid+"' and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
    //       //+" not like '%H.M.T%' and Group_title not like '%h.s%' and Group_title <> 'FYBCOM'";

    //       qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    // + " where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    // + " and a.ayid='" + ayid + "' and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
    // + " not like '%H.M.T%' and Group_title not like '%h.s%' ";// and Group_title <> 'FYBCOM'  and Group_title not like '%FYBA%'";  and Group_title not like '%CBZ%' and Group_title not like '%PCM%' ";and Group_title not like '%CHEM%'";
    //       DataSet ds = cls.fillDataset(qryintake);

    //       string qrypercentopen = "select percentage from merit_list_criteria where Category='OPEN';select percentage from merit_list_criteria where Category='SC';"
    //       + " select percentage from merit_list_criteria where Category='ST';select percentage from merit_list_criteria where Category='NT-1 (NT-B)';"
    //       + " select percentage from merit_list_criteria where Category='NT-2 (NT-C)';select percentage from merit_list_criteria where Category='NT-3 (NT-D)';"
    //       + " select percentage from merit_list_criteria where Category='VJ/DT(A)'; select percentage from merit_list_criteria where Category='OBC'; select percentage from merit_list_criteria where Category='SEBC';";
    //       DataSet dspercent = cls.fill_dataset(qrypercentopen);


    //       string o = "", sc = "", st = "", nt = "", nt2 = "", nt3 = "", vj = "", obc = "", sebc = "";
    //       //    int io = 0, isc = 0, nti = 0, int2 = 0, nt3i = 0, ivj = 0, obci = 0;
    //       o = dspercent.Tables[0].Rows[0]["percentage"].ToString();
    //       sc = dspercent.Tables[1].Rows[0]["percentage"].ToString();
    //       st = dspercent.Tables[2].Rows[0]["percentage"].ToString();
    //       nt = dspercent.Tables[3].Rows[0]["percentage"].ToString();
    //       nt2 = dspercent.Tables[4].Rows[0]["percentage"].ToString();
    //       nt3 = dspercent.Tables[5].Rows[0]["percentage"].ToString();
    //       vj = dspercent.Tables[6].Rows[0]["percentage"].ToString();
    //       obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
    //       sebc = dspercent.Tables[8].Rows[0]["percentage"].ToString();

    //       //nti = Convert.ToInt32(nt);
    //       //int2 = Convert.ToInt32(nt2);

    //       string remaining = "", mgm = "", intake = ""; int x = 0; int y = 0; int z = 0; int rem = 0;
    //       List<reservation> details = new List<reservation>();
    //       if (ds.Tables[0].Rows.Count > 0)
    //       {
    //           y = 15;
    //           z = 100;
    //           int a = 0;

    //           ds.Tables[0].Columns.Add("MGM 15%", typeof(string));
    //           ds.Tables[0].Columns.Add("REMAINING SEATS AVAILABLE", typeof(string));
    //           ds.Tables[0].Columns.Add("OPEN 50%", typeof(string));
    //           ds.Tables[0].Columns.Add("SEBC 16%", typeof(string));
    //           ds.Tables[0].Columns.Add("SC 13%", typeof(string));
    //           ds.Tables[0].Columns.Add("ST 7%", typeof(string));
    //           ds.Tables[0].Columns.Add("VJDT", typeof(string));
    //           ds.Tables[0].Columns.Add("NT1B", typeof(string));
    //           ds.Tables[0].Columns.Add("NT2C", typeof(string));
    //           ds.Tables[0].Columns.Add("NT3D", typeof(string));
    //           ds.Tables[0].Columns.Add("OBC 19%", typeof(string));

    //           ds.Tables[0].Columns.Add("total", typeof(string));
    //           ds.Tables[0].Columns.Add("total_in", typeof(string));
    //           ds.Tables[0].Columns.Add("total_out", typeof(string));

    //           //-------inhouse
    //           ds.Tables[0].Columns.Add("INOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("INsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("INSC", typeof(string));
    //           ds.Tables[0].Columns.Add("INST", typeof(string));
    //           ds.Tables[0].Columns.Add("INVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("INNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("INNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("INNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("INOBC", typeof(string));
    //           //outhouse
    //           ds.Tables[0].Columns.Add("outOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("outsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("outSC", typeof(string));
    //           ds.Tables[0].Columns.Add("outST", typeof(string));
    //           ds.Tables[0].Columns.Add("outVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("outNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("outNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("outNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("outOBC", typeof(string));

    //           //-----------cutoff inhouse
    //           ds.Tables[0].Columns.Add("INcutOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSC", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutST", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutOBC", typeof(string));
    //           //-----------cut off outsider
    //           ds.Tables[0].Columns.Add("outcutOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSC", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutST", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutOBC", typeof(string));

    //           //maximummmmmmmmmmmmmmmmmmm
    //           ds.Tables[0].Columns.Add("INcutOPENmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutsebcmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSCmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSTmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutVJDT(A)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutOBCmax", typeof(string));
    //           //-----------cut off outsider
    //           ds.Tables[0].Columns.Add("outcutOPENmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutsebcmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSCmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSTmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutVJDT(A)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutOBCmax", typeof(string));

    //           for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
    //           {
    //               intake = ds.Tables[0].Rows[i]["INTAKE CAPACITY"].ToString();
    //               a = Convert.ToInt32(intake);
    //               x = a * y / z;
    //               mgm = x.ToString();
    //               rem = Convert.ToInt32(intake) - Convert.ToInt32(mgm);


    //               decimal open = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(o)) / 100);
    //               decimal SC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(sc)) / 100);
    //               decimal ST = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(st)) / 100);
    //               decimal NTa = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(vj)) / 100);
    //               decimal NTb = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(nt))) / 100);
    //               decimal NTc = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(nt2))) / 100);
    //               decimal NTd = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(nt3)) / 100);
    //               decimal OBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(obc)) / 100);
    //               decimal SEBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(sebc)) / 100);

    //               ds.Tables[0].Rows[i]["MGM 15%"] = mgm;
    //               ds.Tables[0].Rows[i]["REMAINING SEATS AVAILABLE"] = rem;

    //               ds.Tables[0].Rows[i]["OPEN 50%"] = Convert.ToString(Math.Round(open, 0));
    //               ds.Tables[0].Rows[i]["SC 13%"] = Convert.ToString(Math.Round(SC, 0));
    //               ds.Tables[0].Rows[i]["ST 7%"] = Convert.ToString(Math.Round(ST, 0));
    //               ds.Tables[0].Rows[i]["VJDT"] = Convert.ToString(Math.Round(NTa, 0));
    //               ds.Tables[0].Rows[i]["NT1B"] = Convert.ToString(Math.Round(NTb, 0));
    //               ds.Tables[0].Rows[i]["NT2C"] = Convert.ToString(Math.Round(NTc, 0));
    //               ds.Tables[0].Rows[i]["NT3D"] = Convert.ToString(Math.Round(NTd, 0));
    //               ds.Tables[0].Rows[i]["OBC 19%"] = Convert.ToString(Math.Round(OBC, 0));
    //               ds.Tables[0].Rows[i]["SEBC 16%"] = Convert.ToString(Math.Round(SEBC, 0));

    //               string castestr = "select distinct Category from [dbo].[d_adm_applicant] where Del_Flag=0 and ACDID='" + ayid + "' and Category  is not null and Category <> 'SBC' and Category <> 'NT-2(NT-C)'";
    //               DataTable dtt = cls.fillDataTable(castestr);
    //               int inn = 0, outt = 0, tott = 0;
    //               for (int j = 0; j < dtt.Rows.Count; j++)
    //               {

    //                   //string qrycount = "select distinct count(d.stud_id) inhouse from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=0 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'; ";
    //                   //qrycount = qrycount + " select distinct count(d.stud_id) outsider from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=1 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'";

    //                   //string qrycnt = "select count(formno) inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
    //                   //qrycnt = qrycnt + "select  count(formno) outsider from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";


    //                   //            string qrycnt = "select count(formno) inhouse, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFin  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='"+ayid+"' and a.stud_id is null and (a.Form_no like '5%' or "
    //                   //+ " a.Form_no like '6%' ) and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);"
    //                   //+ " select count(formno) outsider, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or "
    //                   //+ " a.Form_no like '6%' ) and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

    //                   ////                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake "
    //                   ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake "
    //                   ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int) from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a"
    //                   ////+ " from merit_list_criteria where category<>'Institutional' and category='" + dtt.Rows[j]["Category"].ToString() + "') a";

    //                   string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and"
    //+ " group_id like '%" + ds.Tables[0].Rows[i]["group_id"].ToString() + "%')-(select cast(round(((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and group_id like '%" + ds.Tables[0].Rows[i]["group_id"].ToString() + "%') * (cast(percentage as decimal)/100)),0) as int)"
    // + " from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a from merit_list_criteria where category<>'Institutional' "
    // + " and category='" + dtt.Rows[j]["Category"].ToString() + "') a";
    //                   DataTable dt = cls.fillDataTable(str);


    //                   //                  string innerqry = " select top("+ dt.Rows[0]["a"].ToString() +") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout, Is_Inhouse from d_adm_applicant "
    //                   //+ " as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%' )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'"
    //                   //  + " and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";
    //                   //                  DataSet dsinner = cls.fill_dataset(innerqry);

    //                   //                  string qryall = "select inhouse,case when Cutt_OFFout is null then '0' else Cutt_OFFout end as Cutt_OFFout from ( select count(Form_no) inhouse,min(Cutt_OFFout) Cutt_OFFout from ( " + innerqry + ""
    //                   //                       +" )a ) y";
    //                   //                  DataSet dsqry = cls.fill_dataset(qryall);

    //                   //                    string qrycnt = "select inhouse,case when Cutt_OFFin is null then '0' else Cutt_OFFin end as Cutt_OFFin from (select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFin from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int)))))"
    //                   //                    + " Cutt_OFFin, Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //                   //                    + " and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) x;"
    //                   //                    + " select outsider,case when Cutt_OFFout is null then '0' else Cutt_OFFout end as Cutt_OFFout from ( select count(Form_no) outsider,min(Cutt_OFFout) Cutt_OFFout from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int)))))"
    //                   //                    + " Cutt_OFFout, Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%' ) "
    //                   //                    + " and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) y;"


    //                   //                    + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
    //                   //+ " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //                   // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //                   // +" ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
    //                   // + " select outsider_tot from (select count(Form_no) outsider_tot from "
    //                   //+ " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //                   // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //                   // +" ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";

    //                   if (ds.Tables[0].Rows[i]["group_id"].ToString() == "GRP155")
    //                   {
    //                   }


    //                   string qrycnt = "select inhouse,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFinmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFinmax from ("
    //       + " select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
    //       + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and"
    //       + " (a.Form_no like 'A%'  )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  desc)a"
    //       + " where Is_Inhouse=0"
    //       + " ) x;  "
    //       + " select outsider,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFoutmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFoutmax from ("
    //       + " select count(Form_no) outsider,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
    //       + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and"
    //       + " (a.Form_no like 'A%'  )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2)) desc) a"
    //       + " where Is_Inhouse=1"
    //       + " ) y;"
    //       + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
    //       + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //       + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //       + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
    //       + " select outsider_tot from (select count(Form_no) outsider_tot from "
    //       + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and (a.Form_no like 'A%'  ) "
    //       + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //       + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";



    //                   DataSet dt1 = cls.fill_dataset(qrycnt);
    //                   ds.Tables[0].Rows[i]["total_in"] = dt1.Tables[2].Rows[0]["inhouse_tot"].ToString();
    //                   ds.Tables[0].Rows[i]["total_out"] = dt1.Tables[3].Rows[0]["outsider_tot"].ToString();

    //                   inn = Convert.ToInt32(ds.Tables[0].Rows[i]["total_in"].ToString());
    //                   outt = Convert.ToInt32(ds.Tables[0].Rows[i]["total_out"].ToString());

    //                   tott = inn + outt;
    //                   ds.Tables[0].Rows[i]["total"] = tott;


    //                   if (dtt.Rows[j]["Category"].ToString().Contains("OPEN"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INOPEN"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outOPEN"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOPEN"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOPEN"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOPENmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOPENmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("VJ/DT(A)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INVJDT(A)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outVJDT(A)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutVJDT(A)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutVJDT(A)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutVJDT(A)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutVJDT(A)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();

    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("NT-1 (NT-B)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("NT-2 (NT-C)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("NT-3 (NT-D)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("OBC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INOBC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outOBC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOBC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOBC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOBCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOBCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("SC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INSC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outSC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutSC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutSC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutSCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutSCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("ST"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INST"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outST"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutST"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutST"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutSTmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutSTmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("SEBC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["INsebc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outsebc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutsebc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutsebc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutsebcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutsebcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }

    //                   //string qrymks = "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
    //                   //qrymks = qrymks + "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

    //                   //DataSet dsmks = cls.fill_dataset(qrymks);
    //                   //string obtain = "", outof = "",percenta="";
    //                   //int ob = 0, of = 0, per = 0, tot = 100;
    //                   //for (int m = 0; m < dsmks.Tables[0].Rows.Count; m++)
    //                   //{
    //                   //    int g = 100;
    //                   //    string qrypercent = "select Mks_Obtained,Mks_Outof from d_adm_applicant where Form_no='"+dsmks.Tables[0].Rows[m]["formno"].ToString()+"'";
    //                   //    DataSet dsperc = cls.fill_dataset(qrypercent);
    //                   //    obtain = dsperc.Tables[0].Rows[0]["Mks_Obtained"].ToString();
    //                   //    outof = dsperc.Tables[0].Rows[0]["Mks_Outof"].ToString();
    //                   //    ob = Convert.ToInt32(obtain);       of = Convert.ToInt32(outof);
    //                   //    per = ob * g;    tot = per / of;
    //                   //    percenta = tot.ToString();

    //                   //}
    //               }
    //           }

    //           foreach (DataRow drrow in ds.Tables[0].Rows)
    //           {
    //               reservation res = new reservation();


    //               res.totall = drrow["total"].ToString();
    //               res.tot_in = drrow["total_in"].ToString();
    //               res.tot_out = drrow["total_out"].ToString();

    //               res.mgmt = drrow["MGM 15%"].ToString();
    //               res.remain = drrow["REMAINING SEATS AVAILABLE"].ToString();
    //               res.intake = drrow["INTAKE CAPACITY"].ToString();
    //               res.group = drrow["FACULTY"].ToString();
    //               res.grp_id = drrow["group_id"].ToString();

    //               res.open = drrow["OPEN 50%"].ToString();
    //               res.sc = drrow["SC 13%"].ToString();
    //               res.st = drrow["ST 7%"].ToString();
    //               res.vjdt = drrow["VJDT"].ToString();
    //               res.ntb = drrow["NT1B"].ToString();
    //               res.ntc = drrow["NT2C"].ToString();
    //               res.ntd = drrow["NT3D"].ToString();
    //               res.obc = drrow["OBC 19%"].ToString();
    //               res.sebc = drrow["SEBC 16%"].ToString();

    //               //category wise intake capacity of inhouse
    //               res.in_open = drrow["INOPEN"].ToString();
    //               res.in_sc = drrow["INSC"].ToString();
    //               res.in_st = drrow["INST"].ToString();
    //               res.in_vjdt = drrow["INVJDT(A)"].ToString();
    //               res.in_ntb = drrow["INNT-1 (NT-B)"].ToString();
    //               res.in_ntc = drrow["INNT-2 (NT-C)"].ToString();
    //               res.in_ntd = drrow["INNT-3 (NT-D)"].ToString();
    //               res.in_obc = drrow["INOBC"].ToString();
    //               res.in_sebc = drrow["INsebc"].ToString();

    //               //category wise intake capacity of Outsider
    //               res.out_open = drrow["outOPEN"].ToString();
    //               res.out_sc = drrow["outSC"].ToString();
    //               res.out_st = drrow["outST"].ToString();
    //               res.out_vjdt = drrow["outVJDT(A)"].ToString();
    //               res.out_ntb = drrow["outNT-1 (NT-B)"].ToString();
    //               res.out_ntc = drrow["outNT-2 (NT-C)"].ToString();
    //               res.out_ntd = drrow["outNT-3 (NT-D)"].ToString();
    //               res.out_obc = drrow["outOBC"].ToString();
    //               res.out_sebc = drrow["outsebc"].ToString();


    //               //category wise cutoff of inhouse
    //               res.INcutOPEN = drrow["INcutOPEN"].ToString();
    //               res.INcutSC = drrow["INcutSC"].ToString();
    //               res.INcutST = drrow["INcutST"].ToString();
    //               res.INcutVJDT = drrow["INcutVJDT(A)"].ToString();
    //               res.INcutNTb = drrow["INcutNT-1 (NT-B)"].ToString();
    //               res.INcutNTc = drrow["INcutNT-2 (NT-C)"].ToString();
    //               res.INcutNTd = drrow["INcutNT-3 (NT-D)"].ToString();
    //               res.INcutOBC = drrow["INcutOBC"].ToString();
    //               res.INcutsebc = drrow["INcutsebc"].ToString();

    //               //category wise cutoff of outsider
    //               res.outcutOPEN = drrow["outcutOPEN"].ToString();
    //               res.outcutSC = drrow["outcutSC"].ToString();
    //               res.outcutST = drrow["outcutST"].ToString();
    //               res.outcutVJDT = drrow["outcutVJDT(A)"].ToString();
    //               res.outcutNTb = drrow["outcutNT-1 (NT-B)"].ToString();
    //               res.outcutNTc = drrow["outcutNT-2 (NT-C)"].ToString();
    //               res.outcutNTd = drrow["outcutNT-3 (NT-D)"].ToString();
    //               res.outcutOBC = drrow["outcutOBC"].ToString();
    //               res.outcutsebc = drrow["outcutsebc"].ToString();



    //               res.INcutOPENmax = drrow["INcutOPENmax"].ToString();
    //               res.INcutSCmax = drrow["INcutSCmax"].ToString();
    //               res.INcutSTmax = drrow["INcutSTmax"].ToString();
    //               res.INcutVJDTmax = drrow["INcutVJDT(A)max"].ToString();
    //               res.INcutNTbmax = drrow["INcutNT-1 (NT-B)max"].ToString();
    //               res.INcutNTcmax = drrow["INcutNT-2 (NT-C)max"].ToString();
    //               res.INcutNTdmax = drrow["INcutNT-3 (NT-D)max"].ToString();
    //               res.INcutOBCmax = drrow["INcutOBCmax"].ToString();
    //               res.INcutsebcmax = drrow["INcutsebcmax"].ToString();

    //               //category wise cutoff of outsider
    //               res.outcutOPENmax = drrow["outcutOPENmax"].ToString();
    //               res.outcutSCmax = drrow["outcutSCmax"].ToString();
    //               res.outcutSTmax = drrow["outcutSTmax"].ToString();
    //               res.outcutVJDTmax = drrow["outcutVJDT(A)max"].ToString();
    //               res.outcutNTbmax = drrow["outcutNT-1 (NT-B)max"].ToString();
    //               res.outcutNTcmax = drrow["outcutNT-2 (NT-C)max"].ToString();
    //               res.outcutNTdmax = drrow["outcutNT-3 (NT-D)max"].ToString();
    //               res.outcutOBCmax = drrow["outcutOBCmax"].ToString();
    //               res.outcutsebcmax = drrow["outcutsebcmax"].ToString();

    //               res.msg = "";
    //               details.Add(res);
    //           }

    //           //foreach (DataRow drrows in  dspercent.Tables[0].Rows)
    //           //{
    //           //     reservation res1 = new reservation();
    //           //     res1.per_open = dspercent.Tables[0].Rows[0]["percentage"].ToString();
    //           //     res1.per_st = dspercent.Tables[1].Rows[0]["percentage"].ToString();
    //           //     res1.per_sc = dspercent.Tables[2].Rows[0]["percentage"].ToString();
    //           //     res1.per_vg = dspercent.Tables[3].Rows[0]["percentage"].ToString();
    //           //     res1.per_ntb = dspercent.Tables[4].Rows[0]["percentage"].ToString();
    //           //     res1.per_ntc = dspercent.Tables[5].Rows[0]["percentage"].ToString();
    //           //     res1.per_ntd = dspercent.Tables[6].Rows[0]["percentage"].ToString();
    //           //     res1.per_obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
    //           //     details.Add(res1);
    //           //}
    //       }
    //       else
    //       {
    //           reservation res = new reservation();
    //           res.msg = "No Data Found";
    //           details.Add(res);
    //       }
    //       return details.ToArray();
    //   }



    //overall rerservation chart
    //salary statement by rohit
    public List<ListItem> emptype()
    {
        string qry = "select role_id,role_name from web_tp_roletype where del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        listData.Add(new ListItem
                        {
                            Value = sdr["role_id"].ToString(),
                            Text = sdr["role_name"].ToString()
                        });
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public salary[] getempsalary(string type, string year, string month, string monthval)
    {
        string rolechk = "select * from web_tp_roletype where role_id='" + type + "'";
        List<salary> details = new List<salary>();
        DataTable roledt = cls1.fillDataTable(rolechk);
        string str = "";
        if (type == "0" && year != "" && monthval != "")
        {
            //str = "select * from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and del_flag=0 order by role_id,CAST(extra3 AS INT) ";
            str = "select * from SalaryStatement_tbl_new where year='" + year + "' and month='" + monthval + "' and del_flag=0 ";

        }
        else
        {
            //str = "select * from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and role_id='" + type + "' and del_flag=0 ORDER BY CAST(extra3 AS INT) ASC";
            str = "select * from SalaryStatement_tbl_new where year='" + year + "' and month='" + monthval + "' and role_id='" + type + "' and del_flag=0 ";
        }

        DataTable dtchk = cls1.fillDataTable(str);
        dtchk.Columns.Add("roleidcount");

        str = "";
        str = "";
        if (dtchk.Rows.Count > 0)
        {
            //if (Convert.ToString(HttpContext.Current.Session["emp_id"]) == "ARCH0001")
            //{
            foreach (DataRow drrow in dtchk.Rows)
            {
                salary sal = new salary();
                sal.empid = drrow["emp_id"].ToString();
                sal.empname = drrow["emp_Name"].ToString();
                sal.doj = drrow["DOJ"].ToString();
                sal.designation = drrow["designation"].ToString();
                sal.totaldays = month;
                sal.PresentDay = drrow["PresentDay"].ToString();
                sal.exist_basic = drrow["exist_basic"].ToString();
                sal.agp = drrow["exist_basic"].ToString();
                sal.total = drrow["tot"].ToString();

                sal.incr_basc = drrow["incr_basic"].ToString();
                sal.new_basic = drrow["new_basic"].ToString();
                sal.dp_agp = drrow["dp_agp"].ToString();
                sal.total2 = drrow["tot_2"].ToString();
                sal.da = drrow["DA"].ToString();
                sal.HRA = drrow["HRA"].ToString();
                sal.ta = drrow["TA"].ToString();
                sal.others = drrow["others"].ToString();
                sal.gross_sal = drrow["gross_sal"].ToString();
                sal.arrears = drrow["arrers"].ToString();
                sal.tot_salary = drrow["tot_sal"].ToString();

                sal.pf_an = drrow["pf_an"].ToString();
                sal.pf_ded = drrow["pf_dedn"].ToString();
                sal.PT = drrow["PT"].ToString();
                sal.tds = drrow["TDS"].ToString();
                sal.others2 = drrow["others"].ToString();

                sal.tot_ded = drrow["tot_ded"].ToString();
                sal.net_sal = drrow["net_salary"].ToString();
                sal.pf_contr = drrow["pf_contr"].ToString();
                sal.tot_contr = drrow["tot_contr_pf"].ToString();
                sal.annual_sal = drrow["annual_sal"].ToString();
                sal.remarks = drrow["remark"].ToString();
                sal.msg = "";


                sal.type = "Update";
                details.Add(sal);
            }
            //}
            //else
            //{
            //    salary sal = new salary();
            //    sal.msg = "No Data Found";
            //    details.Add(sal);
            //}
        }
        else
        {
            string presentmnth = monthval;
            if (monthval != "")
            {
                if (monthval == "1")
                {
                    monthval = "12";
                    year = Convert.ToString(Convert.ToInt32(year) - 1);
                }
                else
                {
                    monthval = Convert.ToString(Convert.ToInt32(monthval) - 1);
                }
            }
            str = "";
            if (type == "0" && year != "" && monthval != "")
            {
                //str = "select ayid,role_id,year,month,emp_id,emp_name,designation,DOJ,total_days,PresentDay,Pay_band,total_pay,Basic,HRA,Conveyance,other_all,basictot,lastmntbal,lastmnttot,PT,TDS,lastmntded,tot_deduc,NET,bankacc_no,extra1,extra2,extra3,DA,CLA from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and del_flag=0 ORDER BY CAST(extra3 AS INT) ASC";
                //str = "select ayid,role_id,year,month,emp_id,emp_name,designation,DOJ,total_days,PresentDay,Pay_band,total_pay,Basic,HRA,Conveyance,other_all,basictot,lastmntbal,lastmnttot,PT,TDS,lastmntded,tot_deduc,NET,bankacc_no,extra1,extra2,extra3,DA,CLA from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and del_flag=0 ";
                str = "select * from SalaryStatement_tbl_new where year='" + year + "' and month='" + monthval + "' and del_flag=0 ";
            }
            else
            {
                //str = "select ayid,role_id,year,month,emp_id,emp_name,designation,DOJ,total_days,PresentDay,Pay_band,total_pay,Basic,HRA,Conveyance,other_all,basictot,lastmntbal,lastmnttot,PT,TDS,lastmntded,tot_deduc,NET,bankacc_no,extra1,extra2,extra3,DA,CLA from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and role_id='" + type + "' and del_flag=0 ORDER BY CAST(extra3 AS INT) ASC";
                //str = "select ayid,role_id,year,month,emp_id,emp_name,designation,DOJ,total_days,PresentDay,Pay_band,total_pay,Basic,HRA,Conveyance,other_all,basictot,lastmntbal,lastmnttot,PT,TDS,lastmntded,tot_deduc,NET,bankacc_no,extra1,extra2,extra3,DA,CLA from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and role_id='" + type + "' and del_flag=0 ";
                str = "select * from SalaryStatement_tbl_new where year='" + year + "' and month='" + monthval + "' and role_id='" + type + "' and del_flag=0 ";
            }

            DataTable dtprev = cls1.fillDataTable(str);

            if (dtprev.Rows.Count > 0)
            {
                str = "";
                if (type == "0" && year != "" && monthval != "")
                {
                    str = "select '' AYID,'" + type + "' Role_id,'" + year + "' year,'" + monthval + "' month,p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as emp_Name,CURRENT_DESIGNATION as Designation,CONVERT(varchar(10),p.DOJ,103) as DOJ,'' total_days,'' PresentDay,cast(CURRENT_SALARY as varchar) as exist_basic,'' AGP,'' tot,'' incr_basic,'' new_basic,'' dp_agp,'' tot_2,'' DA,'' HRA,'' TA,'' others,'' gross_sal,'' arrers,'' tot_sal,'' pf_an,'' pf_dedn,'' PT,'' TDS,'' tot_ded,'' net_salary,'' pf_contr,'' tot_contr_pf,'' annual_sal from web_tp_login l,EmployeePersonal p where l.emp_id=p.emp_id and p.del_flag=0 and l.del_flag=0 and role_id='" + type + "' and l.emp_id like '%ARCH%' and p.emp_id not in (select emp_id from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and del_flag=0) ";
                }
                else
                {
                    str = "select '' AYID,'" + type + "' Role_id,'" + year + "' year,'" + monthval + "' month,p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as emp_Name,CURRENT_DESIGNATION as Designation,CONVERT(varchar(10),p.DOJ,103) as DOJ,'' total_days,'' PresentDay,cast(CURRENT_SALARY as varchar) as exist_basic,'' AGP,'' tot,'' incr_basic,'' new_basic,'' dp_agp,'' tot_2,'' DA,'' HRA,'' TA,'' others,'' gross_sal,'' arrers,'' tot_sal,'' pf_an,'' pf_dedn,'' PT,'' TDS,'' tot_ded,'' net_salary,'' pf_contr,'' tot_contr_pf,'' annual_sal from web_tp_login l,EmployeePersonal p where l.emp_id=p.emp_id and p.del_flag=0 and l.del_flag=0 and role_id='" + type + "' and l.emp_id like '%ARCH%' and p.emp_id not in (select emp_id from SalaryStatement_tbl where year='" + year + "' and month='" + monthval + "' and role_id='" + type + "' and del_flag=0)";
                }
                DataTable dtextra = cls1.fillDataTable(str);

                dtprev.Merge(dtextra);

                //if (Convert.ToString(HttpContext.Current.Session["emp_id"]) == "ARCH0001")
                //{
                foreach (DataRow drrow in dtprev.Rows)
                {
                    salary sal = new salary();
                    //sal.empid = drrow["emp_id"].ToString();
                    //sal.empname = drrow["emp_Name"].ToString();
                    //sal.doj = drrow["DOJ"].ToString();
                    //sal.designation = drrow["designation"].ToString();
                    //sal.totaldays = month;
                    //sal.PresentDay = drrow["PresentDay"].ToString();
                    //sal.Pay_band = drrow["Pay_band"].ToString();
                    //sal.total_pay = drrow["total_pay"].ToString();
                    //sal.Basic = drrow["Basic"].ToString();
                    //sal.HRA = drrow["HRA"].ToString();
                    //sal.Conveyance = drrow["Conveyance"].ToString();
                    //sal.other_all = drrow["other_all"].ToString();
                    //sal.basictot = drrow["basictot"].ToString();
                    //sal.lastmntbal = drrow["lastmntbal"].ToString();
                    //sal.lastmnttot = drrow["lastmnttot"].ToString();
                    //sal.PT = drrow["PT"].ToString();
                    //sal.TDS = drrow["TDS"].ToString();
                    //sal.lastmntded = drrow["lastmntded"].ToString();
                    //sal.tot_deduc = drrow["tot_deduc"].ToString();
                    //sal.NET = drrow["NET"].ToString();
                    //sal.bankacc_no = drrow["bankacc_no"].ToString();
                    //sal.msg = "";
                    //sal.type = "previous";
                    //sal.nofhours = drrow["extra1"].ToString();
                    //sal.rateperhr = drrow["extra2"].ToString();
                    //sal.rank = drrow["extra3"].ToString();
                    //sal.roleid = drrow["role_id"].ToString();
                    //sal.da = drrow["DA"].ToString();
                    //sal.cla = drrow["CLA"].ToString();
                    //details.Add(sal);

                    sal.agp = drrow["AGP"].ToString();
                    sal.total = drrow["tot"].ToString();
                    sal.incr_basc = drrow["incr_basic"].ToString();
                    sal.new_basic = drrow["new_basic"].ToString();
                    sal.dp_agp = drrow["dp_agp"].ToString();
                    sal.total2 = drrow["tot_2"].ToString();
                    sal.da = drrow["DA"].ToString();
                    sal.HRA = drrow["HRA"].ToString();
                    sal.ta = drrow["TA"].ToString();
                    sal.others = drrow["others"].ToString();
                    sal.gross_sal = drrow["gross_sal"].ToString();
                    sal.arrears = drrow["arrers"].ToString();
                    sal.tot_salary = drrow["tot_sal"].ToString();

                    sal.pf_an = drrow["pf_an"].ToString();
                    sal.pf_ded = drrow["pf_dedn"].ToString();
                    sal.PT = drrow["PT"].ToString();
                    sal.tds = drrow["TDS"].ToString();
                    sal.tot_ded = drrow["tot_ded"].ToString();


                    sal.net_sal = drrow["net_salary"].ToString();
                    sal.pf_contr = drrow["pf_contr"].ToString();
                    sal.tot_contr = drrow["tot_contr_pf"].ToString();
                    sal.annual_sal = drrow["annual_sal"].ToString();
                    sal.remarks = drrow["remark"].ToString();
                    sal.msg = "";
                    sal.type = "previous";
                    details.Add(sal);
                }
                //}
                //else
                //{
                //    salary sal = new salary();
                //    sal.msg = "No Data Found";
                //    details.Add(sal);
                //}
            }
            else
            {
                string strqry = "";
                if (type == "0" && year != "" && monthval != "")
                {
                    //strqry = "select distinct p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Name,CURRENT_DESIGNATION,CONVERT(varchar(10),p.DOJ,103) as DOJ,CURRENT_SALARY from web_tp_login l,EmployeePersonal p where l.emp_id=p.emp_id and p.del_flag=0 and l.del_flag=0 and l.emp_id like '%ARCH%'";
                    strqry = "select distinct p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Name,CURRENT_DESIGNATION,CONVERT(varchar(10),p.DOJ,103) as DOJ,CURRENT_SALARY from web_tp_login l,EmployeePersonal p where l.emp_id=p.emp_id and p.del_flag=0 and l.del_flag=0 ";
                }
                else
                {
                    //strqry = "select distinct p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Name,CURRENT_DESIGNATION,CONVERT(varchar(10),p.DOJ,103) as DOJ,CURRENT_SALARY from web_tp_login l,EmployeePersonal p where l.emp_id=p.emp_id and p.del_flag=0 and l.del_flag=0 and role_id='" + type + "' and l.emp_id like '%ARCH%'";
                    strqry = "select distinct p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Name,CURRENT_DESIGNATION,CONVERT(varchar(10),p.DOJ,103) as DOJ,CURRENT_SALARY from web_tp_login l,EmployeePersonal p where l.emp_id=p.emp_id and p.del_flag=0 and l.del_flag=0 and role_id='" + type + "'";
                }

                DataTable dt = cls1.fillDataTable(strqry);
                if (dt.Rows.Count > 0)
                {
                    //if (Convert.ToString(HttpContext.Current.Session["emp_id"]) == "ARCH0001")
                    //{
                    foreach (DataRow drrow in dt.Rows)
                    {
                        salary sal = new salary();
                        sal.empid = drrow["emp_id"].ToString();
                        sal.empname = drrow["Name"].ToString();
                        sal.doj = drrow["DOJ"].ToString();
                        sal.designation = drrow["CURRENT_DESIGNATION"].ToString();
                        sal.Pay_band = drrow["CURRENT_SALARY"].ToString();
                        sal.totaldays = month;
                        sal.msg = "";
                        sal.type = "new";
                        details.Add(sal);
                    }
                    //}
                    //else
                    //{
                    //    salary sal = new salary();
                    //    sal.msg = "No Data Found";
                    //    details.Add(sal);
                    //}
                }
                else
                {
                    salary sal = new salary();
                    sal.msg = "No Data Found";
                    details.Add(sal);
                }
            }
        }

        return details.ToArray();
    }


    public AssessmentBilling[] getBilling_Data2(string emp_id, string billno)
    {
        List<AssessmentBilling> details = new List<AssessmentBilling>();
        try
        {
            // string str = "select Emp_Id,bank_acc_no,convert(varchar(10),senior_sup_on_dt,103) senior_sup_on_dt,convert(varchar(10),junior_sup_on_dt,103) junior_sup_on_dt,senior_sup_days,junior_sup_days,subject,sem,tot_stud,rate,net_tot,status,bill_no from emp_billing_details where bill_no='" + billno + "'";

            //  string str = "select Emp_Id,Exam,Course,Group_id,sem,bank_acc_no,convert(varchar(10),sjDate,103) sjdates,sjdays,subject,sem,tot_stud,rate,net_tot,status,bill_no from emp_billing_details where bill_no='" + billno + "'";
            string str = " select Emp_Id,Exam,Course,b.Group_id,Group_title,sem,bank_acc_no,convert(varchar(10),sjDate,103) sjdates,sjdays,subject,sem,tot_stud,rate,net_tot,status,bill_no"
      + " from emp_billing_details_non_mar2020 b,m_crs_subjectgroup_tbl a where bill_no='" + billno + "' and a.Group_id=b.Group_id";
            DataTable dtcls = cls1.fillDataTable(str);
            if (dtcls.Rows.Count > 0)
            {
                foreach (DataRow drrow in dtcls.Rows)
                {
                    AssessmentBilling mcls = new AssessmentBilling();
                    mcls.bnk_acc = drrow["bank_acc_no"].ToString();
                    mcls.exam = drrow["Exam"].ToString();
                    mcls.course = drrow["Course"].ToString();
                    mcls.group_id = drrow["Group_id"].ToString();
                    mcls.group = drrow["Group_title"].ToString();
                    mcls.emp_id = drrow["Emp_Id"].ToString();
                    mcls.sjdates = drrow["sjdates"].ToString();
                    mcls.sjdays = drrow["sjdays"].ToString();
                    //mcls.sub_id = drrow["subject_id"].ToString();
                    mcls.subject = drrow["subject"].ToString();
                    mcls.subjectid = drrow["subject"].ToString();
                    mcls.sem = drrow["sem"].ToString();
                    mcls.tot_stud = drrow["tot_stud"].ToString();
                    mcls.rate = drrow["rate"].ToString();
                    mcls.net_tot = drrow["net_tot"].ToString();
                    mcls.status = drrow["status"].ToString();
                    mcls.bill_no = drrow["bill_no"].ToString();

                    mcls.msg = "";
                    details.Add(mcls);
                }
            }
            else
            {
                AssessmentBilling mcls = new AssessmentBilling();
                mcls.msg = "No Data Found";
                details.Add(mcls);
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
            throw;
        }

        return details.ToArray();
    }

    public Modal_class[] getrates2(string ayid, string branch, string seme, string exam, string group)
    {
        string str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "'";
        // select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='"+seme+"' and group_id='"+group+"'";

        DataSet dtcls = cls1.fillDataset(str);
        List<Modal_class> details = new List<Modal_class>();

        string under = "", dispatch = "", bell = "", water = "", labast = "", labatt = "", prepar = "";

        if (dtcls.Tables[0].Rows.Count > 0)
        {
            Modal_class mcls = new Modal_class();
            for (int i = 0; i < dtcls.Tables[0].Rows.Count; i++)
            {
                if (dtcls.Tables[0].Rows[i]["status"].ToString() == "underst")
                {
                    under = under + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "discl")
                {
                    dispatch = dispatch + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "bm")
                {
                    bell = bell + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "wm")
                {
                    water = water + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("labass"))
                {
                    labast = labast + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("labatt"))
                {
                    labatt = labatt + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("pre"))
                {
                    prepar = prepar + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
            }
            mcls.under_st = under.TrimEnd(',');
            mcls.dis_cl = dispatch.TrimEnd(',');
            mcls.bell_m = bell.TrimEnd(',');
            mcls.water_m = water.TrimEnd(',');
            mcls.lab_ass = labast.TrimEnd(',');
            mcls.lab_att = labatt.TrimEnd(',');
            mcls.preparr = prepar.TrimEnd(',');

            details.Add(mcls);
        }
        return details.ToArray();
    }


    public Modal_class[] getbillno2(string branch, string seme, string exam, string group)
    {
        string str = "select distinct case when cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) is null then 1 else cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) end as billno from  emp_billing_details_non_mar2020";

        DataTable dtcls = cls1.fillDataTable(str);
        List<Modal_class> details = new List<Modal_class>();
        if (dtcls.Rows.Count > 0)
        {
            Modal_class mcls = new Modal_class();
            mcls.billno = dtcls.Rows[0]["billno"].ToString();
            //    mcls.count = dtcls.Rows[0]["Count"].ToString();
            details.Add(mcls);
        }
        return details.ToArray();
    }

    //old merit
    //   public reservation[] getdata_res(string ayid)
    //   {
    //       Class1 cls = new Class1();
    //       string qryintake = "";
    //       //   qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b where a.group_id=b.Group_id and a.subcourse_id= b.Subcourse_id and a.ayid='" + ayid + "'";

    //       //   qryintake = " select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    //       //+" where a.group_id=b.Group_id and a.group_id=c.group_id and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    //       //+" and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title not like '%H.M.T%'";

    //       //       qryintake=" select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    //       //+" where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    //       //+" and a.ayid='"+ayid+"' and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
    //       //+" not like '%H.M.T%' and Group_title not like '%h.s%' and Group_title <> 'FYBCOM'";

    //       qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    // + " where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    // + " and a.ayid='" + ayid + "' and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
    // + " not like '%H.M.T%' and Group_title not like '%h.s%' ";// and Group_title <> 'FYBCOM'  and Group_title not like '%FYBA%'";  and Group_title not like '%CBZ%' and Group_title not like '%PCM%' ";and Group_title not like '%CHEM%'";
    //       DataSet ds = cls.fillDataset(qryintake);

    //       string qrypercentopen = "select percentage from merit_list_criteria where Category='OPEN';select percentage from merit_list_criteria where Category='SC';"
    //       + " select percentage from merit_list_criteria where Category='ST';select percentage from merit_list_criteria where Category='NT-1 (NT-B)';"
    //       + " select percentage from merit_list_criteria where Category='NT-2 (NT-C)';select percentage from merit_list_criteria where Category='NT-3 (NT-D)';"
    //       + " select percentage from merit_list_criteria where Category='VJ/DT(A)'; select percentage from merit_list_criteria where Category='OBC'; select percentage from merit_list_criteria where Category='SEBC';select percentage from merit_list_criteria where Category='SBC'";
    //       DataSet dspercent = cls.fill_dataset(qrypercentopen);


    //       string o = "", sc = "", st = "", nt = "", nt2 = "", nt3 = "", vj = "", obc = "", sebc = "", sbc = "";
    //       //    int io = 0, isc = 0, nti = 0, int2 = 0, nt3i = 0, ivj = 0, obci = 0;
    //       o = dspercent.Tables[0].Rows[0]["percentage"].ToString();
    //       sc = dspercent.Tables[1].Rows[0]["percentage"].ToString();
    //       st = dspercent.Tables[2].Rows[0]["percentage"].ToString();
    //       nt = dspercent.Tables[3].Rows[0]["percentage"].ToString();
    //       nt2 = dspercent.Tables[4].Rows[0]["percentage"].ToString();
    //       nt3 = dspercent.Tables[5].Rows[0]["percentage"].ToString();
    //       vj = dspercent.Tables[6].Rows[0]["percentage"].ToString();
    //       obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
    //       sebc = dspercent.Tables[8].Rows[0]["percentage"].ToString();
    //       sbc = dspercent.Tables[9].Rows[0]["percentage"].ToString();

    //       //nti = Convert.ToInt32(nt);
    //       //int2 = Convert.ToInt32(nt2);

    //       string remaining = "", mgm = "", intake = ""; int x = 0; int y = 0; int z = 0; int rem = 0;
    //       List<reservation> details = new List<reservation>();
    //       if (ds.Tables[0].Rows.Count > 0)
    //       {
    //           y = 15;
    //           z = 100;
    //           int a = 0;


    //           //ds.Tables[0].Columns.Add("totadmi", typeof(string));

    //           ds.Tables[0].Columns.Add("MGM 15%", typeof(string));
    //           ds.Tables[0].Columns.Add("REMAINING SEATS AVAILABLE", typeof(string));
    //           ds.Tables[0].Columns.Add("OPEN 50%", typeof(string));
    //           ds.Tables[0].Columns.Add("SEBC 16%", typeof(string));
    //           ds.Tables[0].Columns.Add("SC 13%", typeof(string));
    //           ds.Tables[0].Columns.Add("ST 7%", typeof(string));
    //           ds.Tables[0].Columns.Add("VJDT", typeof(string));
    //           ds.Tables[0].Columns.Add("NT1B", typeof(string));
    //           ds.Tables[0].Columns.Add("NT2C", typeof(string));
    //           ds.Tables[0].Columns.Add("NT3D", typeof(string));
    //           ds.Tables[0].Columns.Add("OBC 19%", typeof(string));
    //           ds.Tables[0].Columns.Add("SBC 25%", typeof(string));

    //           ds.Tables[0].Columns.Add("total", typeof(string));
    //           ds.Tables[0].Columns.Add("total_in", typeof(string));
    //           ds.Tables[0].Columns.Add("total_out", typeof(string));

    //           //-------inhouse
    //           ds.Tables[0].Columns.Add("INOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("INsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("INSC", typeof(string));
    //           ds.Tables[0].Columns.Add("INST", typeof(string));
    //           ds.Tables[0].Columns.Add("INVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("INNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("INNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("INNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("INOBC", typeof(string));
    //           ds.Tables[0].Columns.Add("INsbc", typeof(string));
    //           //outhouse
    //           ds.Tables[0].Columns.Add("outOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("outsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("outSC", typeof(string));
    //           ds.Tables[0].Columns.Add("outST", typeof(string));
    //           ds.Tables[0].Columns.Add("outVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("outNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("outNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("outNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("outOBC", typeof(string));
    //           ds.Tables[0].Columns.Add("outsbc", typeof(string));

    //           //-----------cutoff inhouse
    //           ds.Tables[0].Columns.Add("INcutOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSC", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutST", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutOBC", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutsbc", typeof(string));
    //           //-----------cut off outsider
    //           ds.Tables[0].Columns.Add("outcutOPEN", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutsebc", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSC", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutST", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutVJDT(A)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutOBC", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutsbc", typeof(string));

    //           //maximummmmmmmmmmmmmmmmmmm
    //           ds.Tables[0].Columns.Add("INcutOPENmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutsebcmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSCmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSTmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutVJDT(A)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)max", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutOBCmax", typeof(string));
    //           ds.Tables[0].Columns.Add("INcutSBCmax", typeof(string));
    //           //-----------cut off outsider
    //           ds.Tables[0].Columns.Add("outcutOPENmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutsebcmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSCmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSTmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutVJDT(A)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)max", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutOBCmax", typeof(string));
    //           ds.Tables[0].Columns.Add("outcutSBCmax", typeof(string));

    //           for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
    //           {
    //               intake = ds.Tables[0].Rows[i]["INTAKE CAPACITY"].ToString();
    //               a = Convert.ToInt32(intake);
    //               x = a * y / z;
    //               mgm = x.ToString();
    //               rem = Convert.ToInt32(intake) - Convert.ToInt32(mgm);


    //               decimal open = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(o))) / 100);
    //               decimal SC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(sc)) / 100);
    //               decimal ST = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(st)) / 100);
    //               decimal NTa = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(vj)) / 100);
    //               decimal NTb = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(nt))) / 100);
    //               decimal NTc = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(nt2))) / 100);
    //               decimal NTd = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(nt3)) / 100);
    //               decimal OBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(obc)) / 100);
    //               decimal SEBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(sebc)) / 100);
    //               decimal SBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(sbc))) / 100);

    //               ds.Tables[0].Rows[i]["MGM 15%"] = mgm;
    //               ds.Tables[0].Rows[i]["REMAINING SEATS AVAILABLE"] = rem;

    //               ds.Tables[0].Rows[i]["OPEN 50%"] = Convert.ToString(Math.Round(open, 0));
    //               ds.Tables[0].Rows[i]["SC 13%"] = Convert.ToString(Math.Round(SC, 0));
    //               ds.Tables[0].Rows[i]["ST 7%"] = Convert.ToString(Math.Round(ST, 0));
    //               ds.Tables[0].Rows[i]["VJDT"] = Convert.ToString(Math.Round(NTa, 0));
    //               ds.Tables[0].Rows[i]["NT1B"] = Convert.ToString(Math.Round(NTb, 0));
    //               ds.Tables[0].Rows[i]["NT2C"] = Convert.ToString(Math.Round(NTc, 0));
    //               ds.Tables[0].Rows[i]["NT3D"] = Convert.ToString(Math.Round(NTd, 0));
    //               ds.Tables[0].Rows[i]["OBC 19%"] = Convert.ToString(Math.Round(OBC, 0));
    //               ds.Tables[0].Rows[i]["SEBC 16%"] = Convert.ToString(Math.Round(SEBC, 0));
    //               ds.Tables[0].Rows[i]["SBC 25%"] = Convert.ToString(Math.Round(SBC, 0));

    //               string castestr = "select distinct Category from [dbo].[d_adm_applicant] where Del_Flag=0 and ACDID='" + ayid + "' and Category  is not null  and Category <> 'NT-2(NT-C)'";
    //               DataTable dtt = cls.fillDataTable(castestr);
    //               int inn = 0, outt = 0, tott = 0;
    //               for (int j = 0; j < dtt.Rows.Count; j++)
    //               {

    //                   //string qrycount = "select distinct count(d.stud_id) inhouse from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=0 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'; ";
    //                   //qrycount = qrycount + " select distinct count(d.stud_id) outsider from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=1 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'";

    //                   //string qrycnt = "select count(formno) inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
    //                   //qrycnt = qrycnt + "select  count(formno) outsider from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";


    //                   //            string qrycnt = "select count(formno) inhouse, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFin  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='"+ayid+"' and a.stud_id is null and (a.Form_no like '5%' or "
    //                   //+ " a.Form_no like '6%' ) and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);"
    //                   //+ " select count(formno) outsider, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or "
    //                   //+ " a.Form_no like '6%' ) and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

    //                   ////                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake "
    //                   ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake "
    //                   ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int) from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a"
    //                   ////+ " from merit_list_criteria where category<>'Institutional' and category='" + dtt.Rows[j]["Category"].ToString() + "') a";

    //                   string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and"
    //+ " group_id like '%" + ds.Tables[0].Rows[i]["group_id"].ToString() + "%')-(select cast(round(((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and group_id like '%" + ds.Tables[0].Rows[i]["group_id"].ToString() + "%') * (cast(percentage as decimal)/100)),0) as int)"
    // + " from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a from merit_list_criteria where category<>'Institutional' "
    // + " and category='" + dtt.Rows[j]["Category"].ToString() + "') a";
    //                   DataTable dt = cls.fillDataTable(str);


    //                   //                  string innerqry = " select top("+ dt.Rows[0]["a"].ToString() +") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout, Is_Inhouse from d_adm_applicant "
    //                   //+ " as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%' )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'"
    //                   //  + " and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";
    //                   //                  DataSet dsinner = cls.fill_dataset(innerqry);

    //                   //                  string qryall = "select inhouse,case when Cutt_OFFout is null then '0' else Cutt_OFFout end as Cutt_OFFout from ( select count(Form_no) inhouse,min(Cutt_OFFout) Cutt_OFFout from ( " + innerqry + ""
    //                   //                       +" )a ) y";
    //                   //                  DataSet dsqry = cls.fill_dataset(qryall);

    //                   //                    string qrycnt = "select inhouse,case when Cutt_OFFin is null then '0' else Cutt_OFFin end as Cutt_OFFin from (select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFin from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int)))))"
    //                   //                    + " Cutt_OFFin, Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //                   //                    + " and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) x;"
    //                   //                    + " select outsider,case when Cutt_OFFout is null then '0' else Cutt_OFFout end as Cutt_OFFout from ( select count(Form_no) outsider,min(Cutt_OFFout) Cutt_OFFout from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int)))))"
    //                   //                    + " Cutt_OFFout, Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%' ) "
    //                   //                    + " and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) y;"


    //                   //                    + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
    //                   //+ " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //                   // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //                   // +" ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
    //                   // + " select outsider_tot from (select count(Form_no) outsider_tot from "
    //                   //+ " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //                   // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //                   // +" ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";

    //                   if (ds.Tables[0].Rows[i]["group_id"].ToString() == "GRP155")
    //                   {
    //                   }

    //                   if (dtt.Rows[j]["Category"].ToString().StartsWith("OBC"))
    //                   {
    //                   }
    //                   string countt = ""; string aaaa = "";
    //                   string str11 = "select stud_Category,count(stud_Category) as count from m_std_studentacademic_tbl a ,m_std_personaldetails_tbl b where a.stud_id=b.stud_id and ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and b.del_flag=0 and a.del_flag=0 and stud_Category='" + dtt.Rows[j]["Category"].ToString() + "' group by stud_Category";
    //                   DataTable dt11 = cls.fillDataTable(str11);
    //                   if (dt11.Rows.Count > 0)
    //                   {
    //                       //if (Convert.ToInt32(dt11.Rows[0]["count"].ToString()) >= Convert.ToInt32(dt.Rows[0]["a"].ToString()))
    //                       //{
    //                       countt = Convert.ToString(Convert.ToInt32(dt.Rows[0]["a"].ToString()) - Convert.ToInt32(dt11.Rows[0]["count"].ToString()));
    //                       //}
    //                       //else
    //                       //{
    //                       //    countt = dt.Rows[0]["a"].ToString();
    //                       //}
    //                       //if (dt.Rows[0]["a"].ToString().StartsWith("-"))
    //                       //{
    //                       //    dt.Rows[0]["a"] = "0";
    //                       //}
    //                   }
    //                   else
    //                   {
    //                       countt = dt.Rows[0]["a"].ToString();
    //                   }
    //                   if (countt.StartsWith("-"))
    //                   {
    //                       aaaa = "0";
    //                   }
    //                   else
    //                   {
    //                       aaaa = countt;
    //                   }
    //                   string qrycnt = "select inhouse,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFinmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFinmax from ("
    //       + " select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select top(" + aaaa + ") Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
    //       + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and"
    //       + " (a.Form_no like 'A%'  )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  desc)a"
    //       + " where Is_Inhouse=0"
    //       + " ) x;  "
    //       + " select outsider,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFoutmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFoutmax from ("
    //       + " select count(Form_no) outsider,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select top(" + aaaa + ") Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
    //       + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and"
    //       + " (a.Form_no like 'A%'  )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2)) desc) a"
    //       + " where Is_Inhouse=1"
    //       + " ) y;"
    //       + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
    //       + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //       + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //       + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
    //       + " select outsider_tot from (select count(Form_no) outsider_tot from "
    //       + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and (a.Form_no like 'A%'  ) "
    //       + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //       + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";




    //                   DataSet dt1 = cls.fill_dataset(qrycnt);



    //                   ds.Tables[0].Rows[i]["total_in"] = dt1.Tables[2].Rows[0]["inhouse_tot"].ToString();
    //                   ds.Tables[0].Rows[i]["total_out"] = dt1.Tables[3].Rows[0]["outsider_tot"].ToString();

    //                   inn = Convert.ToInt32(ds.Tables[0].Rows[i]["total_in"].ToString());
    //                   outt = Convert.ToInt32(ds.Tables[0].Rows[i]["total_out"].ToString());

    //                   tott = inn + outt;
    //                   ds.Tables[0].Rows[i]["total"] = tott;


    //                   if (dtt.Rows[j]["Category"].ToString().Contains("OPEN"))
    //                   {
    //                       ds.Tables[0].Rows[i]["OPEN 50%"] = countt;
    //                       ds.Tables[0].Rows[i]["INOPEN"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outOPEN"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOPEN"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOPEN"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOPENmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOPENmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("VJ/DT(A)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["VJDT"] = countt;
    //                       ds.Tables[0].Rows[i]["INVJDT(A)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outVJDT(A)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutVJDT(A)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutVJDT(A)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutVJDT(A)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutVJDT(A)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();

    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("NT-1 (NT-B)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["NT1B"] = countt;
    //                       ds.Tables[0].Rows[i]["INNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("NT-2 (NT-C)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["NT2C"] = countt;
    //                       ds.Tables[0].Rows[i]["INNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("NT-3 (NT-D)"))
    //                   {
    //                       ds.Tables[0].Rows[i]["NT3D"] = countt;

    //                       ds.Tables[0].Rows[i]["INNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("OBC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["OBC 19%"] = countt;
    //                       ds.Tables[0].Rows[i]["INOBC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outOBC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOBC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOBC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutOBCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutOBCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("SC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["SC 13%"] = countt;
    //                       ds.Tables[0].Rows[i]["INSC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outSC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutSC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutSC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutSCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutSCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("ST"))
    //                   {
    //                       ds.Tables[0].Rows[i]["ST 7%"] = countt;
    //                       ds.Tables[0].Rows[i]["INST"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outST"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutST"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutST"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutSTmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutSTmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }
    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("SEBC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["SEBC 16%"] = countt;
    //                       ds.Tables[0].Rows[i]["INsebc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outsebc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutsebc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutsebc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutsebcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutsebcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }

    //                   else if (dtt.Rows[j]["Category"].ToString().Contains("SBC"))
    //                   {
    //                       ds.Tables[0].Rows[i]["SBC 25%"] = countt;
    //                       ds.Tables[0].Rows[i]["INsbc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                       ds.Tables[0].Rows[i]["outsbc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutsbc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutsbc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                       ds.Tables[0].Rows[i]["INcutsbcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                       ds.Tables[0].Rows[i]["outcutsbcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                   }

    //                   //string qrymks = "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
    //                   //qrymks = qrymks + "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

    //                   //DataSet dsmks = cls.fill_dataset(qrymks);
    //                   //string obtain = "", outof = "",percenta="";
    //                   //int ob = 0, of = 0, per = 0, tot = 100;
    //                   //for (int m = 0; m < dsmks.Tables[0].Rows.Count; m++)
    //                   //{
    //                   //    int g = 100;
    //                   //    string qrypercent = "select Mks_Obtained,Mks_Outof from d_adm_applicant where Form_no='"+dsmks.Tables[0].Rows[m]["formno"].ToString()+"'";
    //                   //    DataSet dsperc = cls.fill_dataset(qrypercent);
    //                   //    obtain = dsperc.Tables[0].Rows[0]["Mks_Obtained"].ToString();
    //                   //    outof = dsperc.Tables[0].Rows[0]["Mks_Outof"].ToString();
    //                   //    ob = Convert.ToInt32(obtain);       of = Convert.ToInt32(outof);
    //                   //    per = ob * g;    tot = per / of;
    //                   //    percenta = tot.ToString();

    //                   //}
    //               }
    //           }

    //           foreach (DataRow drrow in ds.Tables[0].Rows)
    //           {
    //               reservation res = new reservation();


    //               res.totall = drrow["total"].ToString();
    //               res.tot_in = drrow["total_in"].ToString();
    //               res.tot_out = drrow["total_out"].ToString();

    //               res.mgmt = drrow["MGM 15%"].ToString();
    //               res.remain = drrow["REMAINING SEATS AVAILABLE"].ToString();
    //               res.intake = drrow["INTAKE CAPACITY"].ToString();
    //               res.group = drrow["FACULTY"].ToString();
    //               res.grp_id = drrow["group_id"].ToString();

    //               res.open = drrow["OPEN 50%"].ToString();
    //               res.sc = drrow["SC 13%"].ToString();
    //               res.st = drrow["ST 7%"].ToString();
    //               res.vjdt = drrow["VJDT"].ToString();
    //               res.ntb = drrow["NT1B"].ToString();
    //               res.ntc = drrow["NT2C"].ToString();
    //               res.ntd = drrow["NT3D"].ToString();
    //               res.obc = drrow["OBC 19%"].ToString();
    //               res.sebc = drrow["SEBC 16%"].ToString();
    //               res.sbc = drrow["SBC 25%"].ToString();

    //               //category wise intake capacity of inhouse
    //               res.in_open = drrow["INOPEN"].ToString();
    //               res.in_sc = drrow["INSC"].ToString();
    //               res.in_st = drrow["INST"].ToString();
    //               res.in_vjdt = drrow["INVJDT(A)"].ToString();
    //               res.in_ntb = drrow["INNT-1 (NT-B)"].ToString();
    //               res.in_ntc = drrow["INNT-2 (NT-C)"].ToString();
    //               res.in_ntd = drrow["INNT-3 (NT-D)"].ToString();
    //               res.in_obc = drrow["INOBC"].ToString();
    //               res.in_sebc = drrow["INsebc"].ToString();
    //               res.in_sbc = drrow["INsbc"].ToString();

    //               //category wise intake capacity of Outsider
    //               res.out_open = drrow["outOPEN"].ToString();
    //               res.out_sc = drrow["outSC"].ToString();
    //               res.out_st = drrow["outST"].ToString();
    //               res.out_vjdt = drrow["outVJDT(A)"].ToString();
    //               res.out_ntb = drrow["outNT-1 (NT-B)"].ToString();
    //               res.out_ntc = drrow["outNT-2 (NT-C)"].ToString();
    //               res.out_ntd = drrow["outNT-3 (NT-D)"].ToString();
    //               res.out_obc = drrow["outOBC"].ToString();
    //               res.out_sebc = drrow["outsebc"].ToString();
    //               res.out_sbc = drrow["outsbc"].ToString();


    //               //category wise cutoff of inhouse
    //               res.INcutOPEN = drrow["INcutOPEN"].ToString();
    //               res.INcutSC = drrow["INcutSC"].ToString();
    //               res.INcutST = drrow["INcutST"].ToString();
    //               res.INcutVJDT = drrow["INcutVJDT(A)"].ToString();
    //               res.INcutNTb = drrow["INcutNT-1 (NT-B)"].ToString();
    //               res.INcutNTc = drrow["INcutNT-2 (NT-C)"].ToString();
    //               res.INcutNTd = drrow["INcutNT-3 (NT-D)"].ToString();
    //               res.INcutOBC = drrow["INcutOBC"].ToString();
    //               res.INcutsebc = drrow["INcutsebc"].ToString();
    //               res.INcutsbc = drrow["INcutsbc"].ToString();

    //               //category wise cutoff of outsider
    //               res.outcutOPEN = drrow["outcutOPEN"].ToString();
    //               res.outcutSC = drrow["outcutSC"].ToString();
    //               res.outcutST = drrow["outcutST"].ToString();
    //               res.outcutVJDT = drrow["outcutVJDT(A)"].ToString();
    //               res.outcutNTb = drrow["outcutNT-1 (NT-B)"].ToString();
    //               res.outcutNTc = drrow["outcutNT-2 (NT-C)"].ToString();
    //               res.outcutNTd = drrow["outcutNT-3 (NT-D)"].ToString();
    //               res.outcutOBC = drrow["outcutOBC"].ToString();
    //               res.outcutsebc = drrow["outcutsebc"].ToString();
    //               res.outcutsbc = drrow["outcutsbc"].ToString();



    //               res.INcutOPENmax = drrow["INcutOPENmax"].ToString();
    //               res.INcutSCmax = drrow["INcutSCmax"].ToString();
    //               res.INcutSTmax = drrow["INcutSTmax"].ToString();
    //               res.INcutVJDTmax = drrow["INcutVJDT(A)max"].ToString();
    //               res.INcutNTbmax = drrow["INcutNT-1 (NT-B)max"].ToString();
    //               res.INcutNTcmax = drrow["INcutNT-2 (NT-C)max"].ToString();
    //               res.INcutNTdmax = drrow["INcutNT-3 (NT-D)max"].ToString();
    //               res.INcutOBCmax = drrow["INcutOBCmax"].ToString();
    //               res.INcutsebcmax = drrow["INcutsebcmax"].ToString();
    //               res.INcutsbcmax = drrow["INcutsbcmax"].ToString();

    //               //category wise cutoff of outsider
    //               res.outcutOPENmax = drrow["outcutOPENmax"].ToString();
    //               res.outcutSCmax = drrow["outcutSCmax"].ToString();
    //               res.outcutSTmax = drrow["outcutSTmax"].ToString();
    //               res.outcutVJDTmax = drrow["outcutVJDT(A)max"].ToString();
    //               res.outcutNTbmax = drrow["outcutNT-1 (NT-B)max"].ToString();
    //               res.outcutNTcmax = drrow["outcutNT-2 (NT-C)max"].ToString();
    //               res.outcutNTdmax = drrow["outcutNT-3 (NT-D)max"].ToString();
    //               res.outcutOBCmax = drrow["outcutOBCmax"].ToString();
    //               res.outcutsebcmax = drrow["outcutsebcmax"].ToString();
    //               res.outcutsbcmax = drrow["outcutsbcmax"].ToString();

    //               res.msg = "";
    //               details.Add(res);
    //           }

    //           //foreach (DataRow drrows in  dspercent.Tables[0].Rows)
    //           //{
    //           //     reservation res1 = new reservation();
    //           //     res1.per_open = dspercent.Tables[0].Rows[0]["percentage"].ToString();
    //           //     res1.per_st = dspercent.Tables[1].Rows[0]["percentage"].ToString();
    //           //     res1.per_sc = dspercent.Tables[2].Rows[0]["percentage"].ToString();
    //           //     res1.per_vg = dspercent.Tables[3].Rows[0]["percentage"].ToString();
    //           //     res1.per_ntb = dspercent.Tables[4].Rows[0]["percentage"].ToString();
    //           //     res1.per_ntc = dspercent.Tables[5].Rows[0]["percentage"].ToString();
    //           //     res1.per_ntd = dspercent.Tables[6].Rows[0]["percentage"].ToString();
    //           //     res1.per_obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
    //           //     details.Add(res1);
    //           //}
    //       }
    //       else
    //       {
    //           reservation res = new reservation();
    //           res.msg = "No Data Found";
    //           details.Add(res);
    //       }
    //       return details.ToArray();
    //   }
    public reservation[] getdata_res(string ayid)
    {
        
        string qryintake = "";
        //   qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b where a.group_id=b.Group_id and a.subcourse_id= b.Subcourse_id and a.ayid='" + ayid + "'";

        //   qryintake = " select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
        //+" where a.group_id=b.Group_id and a.group_id=c.group_id and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
        //+" and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title not like '%H.M.T%'";

        //       qryintake=" select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
        //+" where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
        //+" and a.ayid='"+ayid+"' and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
        //+" not like '%H.M.T%' and Group_title not like '%h.s%' and Group_title <> 'FYBCOM'";

        qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
  + " where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
  + " and a.ayid='" + ayid + "' and c.formno  like 'C%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
  + " not like '%H.M.T%' and Group_title not like '%h.s%' ";// and Group_title <> 'FYBCOM'  and Group_title not like '%FYBA%'";  and Group_title not like '%CBZ%' and Group_title not like '%PCM%' ";and Group_title not like '%CHEM%'";
        DataSet ds = cls.fillDataset(qryintake);

        string qrypercentopen = "select percentage from merit_list_criteria where Category='OPEN';select percentage from merit_list_criteria where Category='SC';"
        + " select percentage from merit_list_criteria where Category='ST';select percentage from merit_list_criteria where Category='NT-1 (NT-B)';"
        + " select percentage from merit_list_criteria where Category='NT-2 (NT-C)';select percentage from merit_list_criteria where Category='NT-3 (NT-D)';"
        + " select percentage from merit_list_criteria where Category='VJ/DT(A)'; select percentage from merit_list_criteria where Category='OBC'; select percentage from merit_list_criteria where Category='SEBC';select percentage from merit_list_criteria where Category='SBC'";
        DataSet dspercent = cls.fill_dataset(qrypercentopen);


        string o = "", sc = "", st = "", nt = "", nt2 = "", nt3 = "", vj = "", obc = "", sebc = "", sbc = "";
        //    int io = 0, isc = 0, nti = 0, int2 = 0, nt3i = 0, ivj = 0, obci = 0;
        o = dspercent.Tables[0].Rows[0]["percentage"].ToString();
        sc = dspercent.Tables[1].Rows[0]["percentage"].ToString();
        st = dspercent.Tables[2].Rows[0]["percentage"].ToString();
        nt = dspercent.Tables[3].Rows[0]["percentage"].ToString();
        nt2 = dspercent.Tables[4].Rows[0]["percentage"].ToString();
        nt3 = dspercent.Tables[5].Rows[0]["percentage"].ToString();
        vj = dspercent.Tables[6].Rows[0]["percentage"].ToString();
        obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
        sebc = dspercent.Tables[8].Rows[0]["percentage"].ToString();
        sbc = dspercent.Tables[9].Rows[0]["percentage"].ToString();

        //nti = Convert.ToInt32(nt);
        //int2 = Convert.ToInt32(nt2);

        string remaining = "", mgm = "", intake = ""; int x = 0; int y = 0; int z = 0; int rem = 0;
        List<reservation> details = new List<reservation>();
        if (ds.Tables[0].Rows.Count > 0)
        {
            y = 15;
            z = 100;
            int a = 0;


            //ds.Tables[0].Columns.Add("totadmi", typeof(string));

            ds.Tables[0].Columns.Add("MGM 15%", typeof(string));
            ds.Tables[0].Columns.Add("REMAINING SEATS AVAILABLE", typeof(string));
            ds.Tables[0].Columns.Add("OPEN 54%", typeof(string));
            ds.Tables[0].Columns.Add("SEBC 12%", typeof(string));
            ds.Tables[0].Columns.Add("SC 13%", typeof(string));
            ds.Tables[0].Columns.Add("ST 7%", typeof(string));
            ds.Tables[0].Columns.Add("VJDT", typeof(string));
            ds.Tables[0].Columns.Add("NT1B", typeof(string));
            ds.Tables[0].Columns.Add("NT2C", typeof(string));
            ds.Tables[0].Columns.Add("NT3D", typeof(string));
            ds.Tables[0].Columns.Add("OBC 19%", typeof(string));
            ds.Tables[0].Columns.Add("SBC 25%", typeof(string));

            ds.Tables[0].Columns.Add("total", typeof(string));
            ds.Tables[0].Columns.Add("total_in", typeof(string));
            ds.Tables[0].Columns.Add("total_out", typeof(string));

            //-------inhouse
            ds.Tables[0].Columns.Add("INOPEN", typeof(string));
            ds.Tables[0].Columns.Add("INsebc", typeof(string));
            ds.Tables[0].Columns.Add("INSC", typeof(string));
            ds.Tables[0].Columns.Add("INST", typeof(string));
            ds.Tables[0].Columns.Add("INVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("INNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("INNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("INNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("INOBC", typeof(string));
            ds.Tables[0].Columns.Add("INsbc", typeof(string));
            //outhouse
            ds.Tables[0].Columns.Add("outOPEN", typeof(string));
            ds.Tables[0].Columns.Add("outsebc", typeof(string));
            ds.Tables[0].Columns.Add("outSC", typeof(string));
            ds.Tables[0].Columns.Add("outST", typeof(string));
            ds.Tables[0].Columns.Add("outVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("outNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("outNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("outNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("outOBC", typeof(string));
            ds.Tables[0].Columns.Add("outsbc", typeof(string));

            //-----------cutoff inhouse
            ds.Tables[0].Columns.Add("INcutOPEN", typeof(string));
            ds.Tables[0].Columns.Add("INcutsebc", typeof(string));
            ds.Tables[0].Columns.Add("INcutSC", typeof(string));
            ds.Tables[0].Columns.Add("INcutST", typeof(string));
            ds.Tables[0].Columns.Add("INcutVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("INcutOBC", typeof(string));
            ds.Tables[0].Columns.Add("INcutsbc", typeof(string));
            //-----------cut off outsider
            ds.Tables[0].Columns.Add("outcutOPEN", typeof(string));
            ds.Tables[0].Columns.Add("outcutsebc", typeof(string));
            ds.Tables[0].Columns.Add("outcutSC", typeof(string));
            ds.Tables[0].Columns.Add("outcutST", typeof(string));
            ds.Tables[0].Columns.Add("outcutVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("outcutOBC", typeof(string));
            ds.Tables[0].Columns.Add("outcutsbc", typeof(string));

            //maximummmmmmmmmmmmmmmmmmm
            ds.Tables[0].Columns.Add("INcutOPENmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutsebcmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutSCmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutSTmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutVJDT(A)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutOBCmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutSBCmax", typeof(string));
            //-----------cut off outsider
            ds.Tables[0].Columns.Add("outcutOPENmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutsebcmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutSCmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutSTmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutVJDT(A)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutOBCmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutSBCmax", typeof(string));

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                intake = ds.Tables[0].Rows[i]["INTAKE CAPACITY"].ToString();
                a = Convert.ToInt32(intake);
                x = a * y / z;
                mgm = x.ToString();
                rem = Convert.ToInt32(intake) - Convert.ToInt32(mgm);


                decimal open = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(o))) / 100);
                decimal SC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(sc)) / 100);
                decimal ST = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(st)) / 100);
                decimal NTa = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(vj)) / 100);
                decimal NTb = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(nt))) / 100);
                decimal NTc = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(nt2))) / 100);
                decimal NTd = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(nt3)) / 100);
                decimal OBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(obc)) / 100);
                decimal SEBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(sebc)) / 100);
                decimal SBC = Convert.ToDecimal((Convert.ToDecimal(rem) * Convert.ToInt32(Convert.ToDecimal(sbc))) / 100);

                ds.Tables[0].Rows[i]["MGM 15%"] = mgm;
                ds.Tables[0].Rows[i]["REMAINING SEATS AVAILABLE"] = rem;

                ds.Tables[0].Rows[i]["OPEN 54%"] = Convert.ToString(Math.Round(open, 0));
                ds.Tables[0].Rows[i]["SC 13%"] = Convert.ToString(Math.Round(SC, 0));
                ds.Tables[0].Rows[i]["ST 7%"] = Convert.ToString(Math.Round(ST, 0));
                ds.Tables[0].Rows[i]["VJDT"] = Convert.ToString(Math.Round(NTa, 0));
                ds.Tables[0].Rows[i]["NT1B"] = Convert.ToString(Math.Round(NTb, 0));
                ds.Tables[0].Rows[i]["NT2C"] = Convert.ToString(Math.Round(NTc, 0));
                ds.Tables[0].Rows[i]["NT3D"] = Convert.ToString(Math.Round(NTd, 0));
                ds.Tables[0].Rows[i]["OBC 19%"] = Convert.ToString(Math.Round(OBC, 0));
                ds.Tables[0].Rows[i]["SEBC 12%"] = Convert.ToString(Math.Round(SEBC, 0));
                ds.Tables[0].Rows[i]["SBC 25%"] = Convert.ToString(Math.Round(SBC, 0));

                string castestr = "select distinct Category from [dbo].[d_adm_applicant] where Del_Flag=0 and ACDID='" + ayid + "' and Category  is not null  and Category <> 'NT-2(NT-C)'";
                DataTable dtt = cls.fillDataTable(castestr);
                int inn = 0, outt = 0, tott = 0;
                for (int j = 0; j < dtt.Rows.Count; j++)
                {

                    //string qrycount = "select distinct count(d.stud_id) inhouse from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=0 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'; ";
                    //qrycount = qrycount + " select distinct count(d.stud_id) outsider from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=1 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'";

                    //string qrycnt = "select count(formno) inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
                    //qrycnt = qrycnt + "select  count(formno) outsider from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";


                    //            string qrycnt = "select count(formno) inhouse, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFin  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='"+ayid+"' and a.stud_id is null and (a.Form_no like '5%' or "
                    //+ " a.Form_no like '6%' ) and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);"
                    //+ " select count(formno) outsider, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or "
                    //+ " a.Form_no like '6%' ) and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

                    ////                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake "
                    ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake "
                    ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int) from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a"
                    ////+ " from merit_list_criteria where category<>'Institutional' and category='" + dtt.Rows[j]["Category"].ToString() + "') a";

                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and"
 + " group_id like '%" + ds.Tables[0].Rows[i]["group_id"].ToString() + "%')-(select cast(round(((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and group_id like '%" + ds.Tables[0].Rows[i]["group_id"].ToString() + "%') * (cast(percentage as decimal)/100)),0) as int)"
  + " from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a from merit_list_criteria where category<>'Institutional' "
  + " and category='" + dtt.Rows[j]["Category"].ToString() + "') a";
                    DataTable dt = cls.fillDataTable(str);


                    //                  string innerqry = " select top("+ dt.Rows[0]["a"].ToString() +") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout, Is_Inhouse from d_adm_applicant "
                    //+ " as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%' )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'"
                    //  + " and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";
                    //                  DataSet dsinner = cls.fill_dataset(innerqry);

                    //                  string qryall = "select inhouse,case when Cutt_OFFout is null then '0' else Cutt_OFFout end as Cutt_OFFout from ( select count(Form_no) inhouse,min(Cutt_OFFout) Cutt_OFFout from ( " + innerqry + ""
                    //                       +" )a ) y";
                    //                  DataSet dsqry = cls.fill_dataset(qryall);

                    //                    string qrycnt = "select inhouse,case when Cutt_OFFin is null then '0' else Cutt_OFFin end as Cutt_OFFin from (select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFin from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int)))))"
                    //                    + " Cutt_OFFin, Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
                    //                    + " and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) x;"
                    //                    + " select outsider,case when Cutt_OFFout is null then '0' else Cutt_OFFout end as Cutt_OFFout from ( select count(Form_no) outsider,min(Cutt_OFFout) Cutt_OFFout from ( select top(" + dt.Rows[0]["a"].ToString() + ") Form_no,convert(decimal(6,0),(((cast(isnull(Mks_Obtained,0) as int))*100)/((cast(isnull(Mks_Outof,0) as int)))))"
                    //                    + " Cutt_OFFout, Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%' ) "
                    //                    + " and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) y;"


                    //                    + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
                    //+ " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
                    // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
                    // +" ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
                    // + " select outsider_tot from (select count(Form_no) outsider_tot from "
                    //+ " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
                    // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
                    // +" ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";

                    if (ds.Tables[0].Rows[i]["group_id"].ToString() == "GRP155")
                    {
                    }

                    if (dtt.Rows[j]["Category"].ToString().StartsWith("OBC"))
                    {
                    }
                    string countt = ""; string aaaa = "";
                    string str11 = "select stud_Category,count(stud_Category) as count from m_std_studentacademic_tbl a ,m_std_personaldetails_tbl b where a.stud_id=b.stud_id and ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and b.del_flag=0 and a.del_flag=0 and stud_Category='" + dtt.Rows[j]["Category"].ToString() + "' group by stud_Category";
                    DataTable dt11 = cls.fillDataTable(str11);
                    if (dt11.Rows.Count > 0)
                    {
                        //if (Convert.ToInt32(dt11.Rows[0]["count"].ToString()) >= Convert.ToInt32(dt.Rows[0]["a"].ToString()))
                        //{
                        countt = Convert.ToString(Convert.ToInt32(dt.Rows[0]["a"].ToString()) - Convert.ToInt32(dt11.Rows[0]["count"].ToString()));
                        //}
                        //else
                        //{
                        //    countt = dt.Rows[0]["a"].ToString();
                        //}
                        //if (dt.Rows[0]["a"].ToString().StartsWith("-"))
                        //{
                        //    dt.Rows[0]["a"] = "0";
                        //}
                    }
                    else
                    {
                        countt = dt.Rows[0]["a"].ToString();
                    }
                    if (countt.StartsWith("-"))
                    {
                        aaaa = "0";
                    }
                    else
                    {
                        aaaa = countt;
                    }
                    string qrycnt = "select inhouse,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFinmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFinmax from ("
        + " select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select top(" + aaaa + ") Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
        + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and"
                        // + "    a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  desc)a"
        + "    a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  desc)a"
        + " where Is_Inhouse=0"
        + " ) x;  "
        + " select outsider,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFoutmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFoutmax from ("
        + " select count(Form_no) outsider,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select top(" + aaaa + ") Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
        + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  and"
                        //+ "   a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2)) desc) a"
        + "   a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'   and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  order by cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2)) desc) a"
        + " where Is_Inhouse=1"
        + " ) y;"
        + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
        + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null   "
                        //  + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'   and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
        + " select outsider_tot from (select count(Form_no) outsider_tot from "
        + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  "
                        //+ " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'   and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";




                    DataSet dt1 = cls.fill_dataset(qrycnt);



                    ds.Tables[0].Rows[i]["total_in"] = dt1.Tables[2].Rows[0]["inhouse_tot"].ToString();
                    ds.Tables[0].Rows[i]["total_out"] = dt1.Tables[3].Rows[0]["outsider_tot"].ToString();

                    inn = Convert.ToInt32(ds.Tables[0].Rows[i]["total_in"].ToString());
                    outt = Convert.ToInt32(ds.Tables[0].Rows[i]["total_out"].ToString());

                    tott = inn + outt;
                    ds.Tables[0].Rows[i]["total"] = tott;


                    if (dtt.Rows[j]["Category"].ToString().Contains("OPEN"))
                    {
                        ds.Tables[0].Rows[i]["OPEN 54%"] = countt;
                        ds.Tables[0].Rows[i]["INOPEN"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outOPEN"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutOPEN"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutOPEN"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutOPENmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutOPENmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("VJ/DT(A)"))
                    {
                        ds.Tables[0].Rows[i]["VJDT"] = countt;
                        ds.Tables[0].Rows[i]["INVJDT(A)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outVJDT(A)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutVJDT(A)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutVJDT(A)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutVJDT(A)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutVJDT(A)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();

                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-1 (NT-B)"))
                    {
                        ds.Tables[0].Rows[i]["NT1B"] = countt;
                        ds.Tables[0].Rows[i]["INNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-2 (NT-C)"))
                    {
                        ds.Tables[0].Rows[i]["NT2C"] = countt;
                        ds.Tables[0].Rows[i]["INNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-3 (NT-D)"))
                    {
                        ds.Tables[0].Rows[i]["NT3D"] = countt;

                        ds.Tables[0].Rows[i]["INNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("OBC"))
                    {
                        ds.Tables[0].Rows[i]["OBC 19%"] = countt;
                        ds.Tables[0].Rows[i]["INOBC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outOBC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutOBC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutOBC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutOBCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutOBCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("SC"))
                    {
                        ds.Tables[0].Rows[i]["SC 13%"] = countt;
                        ds.Tables[0].Rows[i]["INSC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outSC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutSC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutSC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutSCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutSCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("ST"))
                    {
                        ds.Tables[0].Rows[i]["ST 7%"] = countt;
                        ds.Tables[0].Rows[i]["INST"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outST"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutST"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutST"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutSTmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutSTmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("SEBC"))
                    {
                        ds.Tables[0].Rows[i]["SEBC 12%"] = countt;
                        ds.Tables[0].Rows[i]["INsebc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outsebc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutsebc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutsebc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutsebcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutsebcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }

                    else if (dtt.Rows[j]["Category"].ToString().Contains("SBC"))
                    {
                        ds.Tables[0].Rows[i]["SBC 25%"] = countt;
                        ds.Tables[0].Rows[i]["INsbc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outsbc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutsbc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutsbc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutsbcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutsbcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }

                    //string qrymks = "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
                    //qrymks = qrymks + "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

                    //DataSet dsmks = cls.fill_dataset(qrymks);
                    //string obtain = "", outof = "",percenta="";
                    //int ob = 0, of = 0, per = 0, tot = 100;
                    //for (int m = 0; m < dsmks.Tables[0].Rows.Count; m++)
                    //{
                    //    int g = 100;
                    //    string qrypercent = "select Mks_Obtained,Mks_Outof from d_adm_applicant where Form_no='"+dsmks.Tables[0].Rows[m]["formno"].ToString()+"'";
                    //    DataSet dsperc = cls.fill_dataset(qrypercent);
                    //    obtain = dsperc.Tables[0].Rows[0]["Mks_Obtained"].ToString();
                    //    outof = dsperc.Tables[0].Rows[0]["Mks_Outof"].ToString();
                    //    ob = Convert.ToInt32(obtain);       of = Convert.ToInt32(outof);
                    //    per = ob * g;    tot = per / of;
                    //    percenta = tot.ToString();

                    //}
                }
            }

            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                reservation res = new reservation();


                res.totall = drrow["total"].ToString();
                res.tot_in = drrow["total_in"].ToString();
                res.tot_out = drrow["total_out"].ToString();

                res.mgmt = drrow["MGM 15%"].ToString();
                res.remain = drrow["REMAINING SEATS AVAILABLE"].ToString();
                res.intake = drrow["INTAKE CAPACITY"].ToString();
                res.group = drrow["FACULTY"].ToString();
                res.grp_id = drrow["group_id"].ToString();

                res.open = drrow["OPEN 54%"].ToString();
                res.sc = drrow["SC 13%"].ToString();
                res.st = drrow["ST 7%"].ToString();
                res.vjdt = drrow["VJDT"].ToString();
                res.ntb = drrow["NT1B"].ToString();
                res.ntc = drrow["NT2C"].ToString();
                res.ntd = drrow["NT3D"].ToString();
                res.obc = drrow["OBC 19%"].ToString();
                res.sebc = drrow["SEBC 12%"].ToString();
                res.sbc = drrow["SBC 25%"].ToString();

                //category wise intake capacity of inhouse
                res.in_open = drrow["INOPEN"].ToString();
                res.in_sc = drrow["INSC"].ToString();
                res.in_st = drrow["INST"].ToString();
                res.in_vjdt = drrow["INVJDT(A)"].ToString();
                res.in_ntb = drrow["INNT-1 (NT-B)"].ToString();
                res.in_ntc = drrow["INNT-2 (NT-C)"].ToString();
                res.in_ntd = drrow["INNT-3 (NT-D)"].ToString();
                res.in_obc = drrow["INOBC"].ToString();
                res.in_sebc = drrow["INsebc"].ToString();
                res.in_sbc = drrow["INsbc"].ToString();

                //category wise intake capacity of Outsider
                res.out_open = drrow["outOPEN"].ToString();
                res.out_sc = drrow["outSC"].ToString();
                res.out_st = drrow["outST"].ToString();
                res.out_vjdt = drrow["outVJDT(A)"].ToString();
                res.out_ntb = drrow["outNT-1 (NT-B)"].ToString();
                res.out_ntc = drrow["outNT-2 (NT-C)"].ToString();
                res.out_ntd = drrow["outNT-3 (NT-D)"].ToString();
                res.out_obc = drrow["outOBC"].ToString();
                res.out_sebc = drrow["outsebc"].ToString();
                res.out_sbc = drrow["outsbc"].ToString();


                //category wise cutoff of inhouse
                res.INcutOPEN = drrow["INcutOPEN"].ToString();
                res.INcutSC = drrow["INcutSC"].ToString();
                res.INcutST = drrow["INcutST"].ToString();
                res.INcutVJDT = drrow["INcutVJDT(A)"].ToString();
                res.INcutNTb = drrow["INcutNT-1 (NT-B)"].ToString();
                res.INcutNTc = drrow["INcutNT-2 (NT-C)"].ToString();
                res.INcutNTd = drrow["INcutNT-3 (NT-D)"].ToString();
                res.INcutOBC = drrow["INcutOBC"].ToString();
                res.INcutsebc = drrow["INcutsebc"].ToString();
                res.INcutsbc = drrow["INcutsbc"].ToString();

                //category wise cutoff of outsider
                res.outcutOPEN = drrow["outcutOPEN"].ToString();
                res.outcutSC = drrow["outcutSC"].ToString();
                res.outcutST = drrow["outcutST"].ToString();
                res.outcutVJDT = drrow["outcutVJDT(A)"].ToString();
                res.outcutNTb = drrow["outcutNT-1 (NT-B)"].ToString();
                res.outcutNTc = drrow["outcutNT-2 (NT-C)"].ToString();
                res.outcutNTd = drrow["outcutNT-3 (NT-D)"].ToString();
                res.outcutOBC = drrow["outcutOBC"].ToString();
                res.outcutsebc = drrow["outcutsebc"].ToString();
                res.outcutsbc = drrow["outcutsbc"].ToString();



                res.INcutOPENmax = drrow["INcutOPENmax"].ToString();
                res.INcutSCmax = drrow["INcutSCmax"].ToString();
                res.INcutSTmax = drrow["INcutSTmax"].ToString();
                res.INcutVJDTmax = drrow["INcutVJDT(A)max"].ToString();
                res.INcutNTbmax = drrow["INcutNT-1 (NT-B)max"].ToString();
                res.INcutNTcmax = drrow["INcutNT-2 (NT-C)max"].ToString();
                res.INcutNTdmax = drrow["INcutNT-3 (NT-D)max"].ToString();
                res.INcutOBCmax = drrow["INcutOBCmax"].ToString();
                res.INcutsebcmax = drrow["INcutsebcmax"].ToString();
                res.INcutsbcmax = drrow["INcutsbcmax"].ToString();

                //category wise cutoff of outsider
                res.outcutOPENmax = drrow["outcutOPENmax"].ToString();
                res.outcutSCmax = drrow["outcutSCmax"].ToString();
                res.outcutSTmax = drrow["outcutSTmax"].ToString();
                res.outcutVJDTmax = drrow["outcutVJDT(A)max"].ToString();
                res.outcutNTbmax = drrow["outcutNT-1 (NT-B)max"].ToString();
                res.outcutNTcmax = drrow["outcutNT-2 (NT-C)max"].ToString();
                res.outcutNTdmax = drrow["outcutNT-3 (NT-D)max"].ToString();
                res.outcutOBCmax = drrow["outcutOBCmax"].ToString();
                res.outcutsebcmax = drrow["outcutsebcmax"].ToString();
                res.outcutsbcmax = drrow["outcutsbcmax"].ToString();

                res.msg = "";
                details.Add(res);
            }

            //foreach (DataRow drrows in  dspercent.Tables[0].Rows)
            //{
            //     reservation res1 = new reservation();
            //     res1.per_open = dspercent.Tables[0].Rows[0]["percentage"].ToString();
            //     res1.per_st = dspercent.Tables[1].Rows[0]["percentage"].ToString();
            //     res1.per_sc = dspercent.Tables[2].Rows[0]["percentage"].ToString();
            //     res1.per_vg = dspercent.Tables[3].Rows[0]["percentage"].ToString();
            //     res1.per_ntb = dspercent.Tables[4].Rows[0]["percentage"].ToString();
            //     res1.per_ntc = dspercent.Tables[5].Rows[0]["percentage"].ToString();
            //     res1.per_ntd = dspercent.Tables[6].Rows[0]["percentage"].ToString();
            //     res1.per_obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
            //     details.Add(res1);
            //}
        }
        else
        {
            reservation res = new reservation();
            res.msg = "No Data Found";
            details.Add(res);
        }
        return details.ToArray();
    }

    //    public overallbill[] get_overall()
    //    {
    //        string qry = "";
    ////        qry = "select x.emp_id,upper(Employee_Name) as Employee_Name,isnull([Junior Supervision],'0') as js,isnull([Senior Supervision],'0') as ss,isnull([Chief Conductor],'0') as cc , isnull([Assessment],'0') "
    ////+ " as asses,isnull([Moderation],'0') moder,isnull([Revalutaion],'0') as rev,isnull([Proof Corr],'0') as prf,isnull([Translaiton],'0') as trans,isnull([Paper Setting],'0') Paper_set,isnull([Internals],'0') "
    ////+ " inter,isnull([Practicals],'0') practs, sum(cast(isnull([Junior Supervision],0)as int)+cast(isnull([Senior Supervision],0) as int)+cast(isnull([Proof Corr],0) as int)+cast(isnull([Paper Setting],0) as int)+cast(isnull([Assessment],0)"
    ////+ " as int)+ cast(isnull([Chief Conductor],0)  as int)+cast(isnull([Moderation],0) as int)+ cast(isnull([Internals],0) as int)+cast(isnull([Revalutaion],0) as int)+cast(isnull([Translaiton],0) "
    ////+ " as int)+cast(isnull([Practicals],0) as int)) as Total_Bill, convert(varchar(11) ,getdate(),100) as datee,max(Account_No) as Account_No  from (select emp_id,Employee_Name,[Junior Supervision],"
    ////+ " [Senior Supervision],[Chief Conductor],[Paper Setting],[Proof Corr],[Assessment],[Moderation],[Revalutaion],[Translaiton],[Internals],[Practicals],bank_acc_no as Account_No from"
    ////+ " (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='jun_sup' then 'Junior Supervision' "
    ////+ " when status='sen_sup'  then 'Senior Supervision'  when status='proof' then 'Proof Corr' when status='chief_con' then 'Chief Conductor' when status='asses' then 'Assessment' when status='moder' then 'Moderation' when status='inter'"
    ////+ " then 'Internals' when status='paper_set' then 'Paper Setting' when status='practs' then 'Practicals' when status='reval' then 'Revalutaion'  when status='trans' then 'Translaiton'"
    ////+ " when status='other' then '' end as status_final,bank_acc_no from emp_billing_details_oct_2019 b,EmployeePersonal p  where  b.Emp_Id=p.emp_id and status not"
    ////+ " like '%other%' group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no) as t pivot (max(amount) for status_final in ([Junior Supervision],[Senior Supervision],[Chief Conductor],"
    ////+ " [Paper Setting],[Revalutaion],[Translaiton],[Assessment],[Moderation],[Internals],[Practicals],[Proof Corr])) pvt) x  group by x.emp_id,employee_name,[Junior Supervision],[Senior Supervision],[Chief Conductor],"
    ////+ " [Paper Setting],[Assessment],[Moderation],[Internals],[Practicals], [Revalutaion],[Translaiton],[Proof Corr] ,Account_No order by emp_id,Employee_Name";

    //        //with ans key
    //        qry = "select x.emp_id,upper(Employee_Name) as Employee_Name,isnull([Junior Supervision],'0') as js,isnull([Senior Supervision],'0') as ss,isnull([Chief Conductor],'0') as cc , isnull([Assessment],'0')  as asses,"
    //+" isnull([Moderation],'0') moder,isnull([Revalutaion],'0') as rev,isnull([Proof Corr],'0') as prf,isnull([Translaiton],'0') as trans,isnull([Paper Setting],'0') Paper_set,isnull([Internals],'0')  inter,"
    //+" isnull([Practicals],'0') practs,isnull([Answer],'0') ans, sum(cast(isnull([Junior Supervision],0)as int)+cast(isnull([Senior Supervision],0) as int)+cast(isnull([Proof Corr],0) as int)+cast(isnull([Paper Setting],0) as int)+"
    //+" cast(isnull([Assessment],0) as int)+ cast(isnull([Chief Conductor],0)  as int)+cast(isnull([Moderation],0) as int)+ cast(isnull([Internals],0) as int)+cast(isnull([Revalutaion],0) as int)+cast(isnull([Translaiton],0) "
    // +" as int)+cast(isnull([Practicals],0) as int)+cast(isnull([Answer],0) as int)) as Total_Bill, convert(varchar(11) ,getdate(),100) as datee,max(Account_No) as Account_No  from (select emp_id,Employee_Name,[Junior Supervision], [Senior Supervision],"
    // +" [Chief Conductor],[Paper Setting],[Proof Corr],[Assessment],[Moderation],[Revalutaion],[Translaiton],[Internals],[Practicals],[Answer],bank_acc_no as Account_No from"
    //  +" (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='jun_sup' then 'Junior Supervision'  when status='sen_sup' "
    //   +" then 'Senior Supervision'  when status='proof' then 'Proof Corr' when status='chief_con' then 'Chief Conductor' when status='asses' then 'Assessment' when status='moder' then 'Moderation' when status='inter'"
    //    +" then 'Internals' when status='paper_set' then 'Paper Setting' when status='practs' then 'Practicals' when status='reval' then 'Revalutaion'  when status='trans' then 'Translaiton' when status='ans' then 'Answer' when status='other' then ''"
    //	 +" end as status_final,bank_acc_no from emp_billing_details_2020 b,EmployeePersonal p  where  b.Emp_Id=p.emp_id and status not like '%other%' group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no) as t"
    //	  +" pivot (max(amount) for status_final in ([Junior Supervision],[Senior Supervision],[Chief Conductor], [Paper Setting],[Revalutaion],[Translaiton],[Assessment],[Moderation],[Internals],[Practicals],[Proof Corr],[Answer])) pvt) "
    //	  +" x  group by x.emp_id,employee_name,[Junior Supervision],[Senior Supervision],[Chief Conductor], [Paper Setting],[Assessment],[Moderation],[Internals],[Practicals], [Revalutaion],[Translaiton],[Proof Corr] ,[Answer],"
    //	  +" Account_No order by emp_id,Employee_Name";
    //        DataSet ds = cls.fillDataset(qry);
    //        List<overallbill> details = new List<overallbill>();
    //        if (ds.Tables[0].Rows.Count>0)
    //        {
    //            foreach (DataRow drrow in ds.Tables[0].Rows)
    //            {
    //                overallbill ove = new overallbill();
    //                ove.staff_id = drrow["emp_id"].ToString();
    //                ove.emp_name = drrow["Employee_Name"].ToString();
    //                ove.emp_acc = drrow["Account_No"].ToString();


    //                ove.jun_sup = drrow["js"].ToString();
    //                ove.sen_sup = drrow["ss"].ToString();
    //                ove.chief_con = drrow["cc"].ToString();
    //                ove.paper_set = drrow["Paper_set"].ToString();
    //                ove.asses = drrow["asses"].ToString();
    //                ove.reval = drrow["rev"].ToString();
    //                ove.trans = drrow["trans"].ToString();
    //                ove.moderation = drrow["moder"].ToString();
    //                ove.inter = drrow["inter"].ToString();
    //                ove.practs = drrow["practs"].ToString();
    //                ove.proof = drrow["prf"].ToString();
    //                ove.ans = drrow["ans"].ToString();
    //                ove.totall = drrow["Total_Bill"].ToString();


    //                ove.msg = "";
    //                details.Add(ove);
    //            }

    //        }
    //        return details.ToArray();


    //    }

    //old merit
    //    public reservation[] getdata_res_overall(string ayid)
    //    {

    //        string qryintake = "";

    //        qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
    //+ " where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
    //+ " and a.ayid='" + ayid + "' and c.formno  like 'A%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
    //+ " not like '%H.M.T%' and Group_title not like '%h.s%' ";// and Group_title <> 'FYBCOM'  and Group_title not like '%FYBA%'";  and Group_title not like '%CBZ%' and Group_title not like '%PCM%' ";and Group_title not like '%CHEM%'";
    //        DataSet ds = cls.fillDataset(qryintake);

    //        string qrypercentopen = "select percentage from merit_list_criteria where Category='OPEN';select percentage from merit_list_criteria where Category='SC';"
    //        + " select percentage from merit_list_criteria where Category='ST';select percentage from merit_list_criteria where Category='NT-1 (NT-B)';"
    //        + " select percentage from merit_list_criteria where Category='NT-2 (NT-C)';select percentage from merit_list_criteria where Category='NT-3 (NT-D)';"
    //        + " select percentage from merit_list_criteria where Category='VJ/DT(A)'; select percentage from merit_list_criteria where Category='OBC'; select percentage from merit_list_criteria where Category='SEBC';";
    //        DataSet dspercent = cls.fill_dataset(qrypercentopen);


    //        string o = "", sc = "", st = "", nt = "", nt2 = "", nt3 = "", vj = "", obc = "", sebc = "";
    //        //    int io = 0, isc = 0, nti = 0, int2 = 0, nt3i = 0, ivj = 0, obci = 0;
    //        o = dspercent.Tables[0].Rows[0]["percentage"].ToString();
    //        sc = dspercent.Tables[1].Rows[0]["percentage"].ToString();
    //        st = dspercent.Tables[2].Rows[0]["percentage"].ToString();
    //        nt = dspercent.Tables[3].Rows[0]["percentage"].ToString();
    //        nt2 = dspercent.Tables[4].Rows[0]["percentage"].ToString();
    //        nt3 = dspercent.Tables[5].Rows[0]["percentage"].ToString();
    //        vj = dspercent.Tables[6].Rows[0]["percentage"].ToString();
    //        obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
    //        sebc = dspercent.Tables[8].Rows[0]["percentage"].ToString();

    //        //nti = Convert.ToInt32(nt);
    //        //int2 = Convert.ToInt32(nt2);

    //        string remaining = "", mgm = "", intake = ""; int x = 0; int y = 0; int z = 0; int rem = 0;
    //        List<reservation> details = new List<reservation>();
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            y = 15;
    //            z = 100;
    //            int a = 0;

    //            ds.Tables[0].Columns.Add("MGM 15%", typeof(string));
    //            ds.Tables[0].Columns.Add("REMAINING SEATS AVAILABLE", typeof(string));
    //            ds.Tables[0].Columns.Add("OPEN 50%", typeof(string));
    //            ds.Tables[0].Columns.Add("SEBC 16%", typeof(string));
    //            ds.Tables[0].Columns.Add("SC 13%", typeof(string));
    //            ds.Tables[0].Columns.Add("ST 7%", typeof(string));
    //            ds.Tables[0].Columns.Add("VJDT", typeof(string));
    //            ds.Tables[0].Columns.Add("NT1B", typeof(string));
    //            ds.Tables[0].Columns.Add("NT2C", typeof(string));
    //            ds.Tables[0].Columns.Add("NT3D", typeof(string));
    //            ds.Tables[0].Columns.Add("OBC 19%", typeof(string));

    //            ds.Tables[0].Columns.Add("total", typeof(string));
    //            ds.Tables[0].Columns.Add("total_in", typeof(string));
    //            ds.Tables[0].Columns.Add("total_out", typeof(string));

    //            //-------inhouse
    //            ds.Tables[0].Columns.Add("INOPEN", typeof(string));
    //            ds.Tables[0].Columns.Add("INsebc", typeof(string));
    //            ds.Tables[0].Columns.Add("INSC", typeof(string));
    //            ds.Tables[0].Columns.Add("INST", typeof(string));
    //            ds.Tables[0].Columns.Add("INVJDT(A)", typeof(string));
    //            ds.Tables[0].Columns.Add("INNT-1 (NT-B)", typeof(string));
    //            ds.Tables[0].Columns.Add("INNT-2 (NT-C)", typeof(string));
    //            ds.Tables[0].Columns.Add("INNT-3 (NT-D)", typeof(string));
    //            ds.Tables[0].Columns.Add("INOBC", typeof(string));
    //            //outhouse
    //            ds.Tables[0].Columns.Add("outOPEN", typeof(string));
    //            ds.Tables[0].Columns.Add("outsebc", typeof(string));
    //            ds.Tables[0].Columns.Add("outSC", typeof(string));
    //            ds.Tables[0].Columns.Add("outST", typeof(string));
    //            ds.Tables[0].Columns.Add("outVJDT(A)", typeof(string));
    //            ds.Tables[0].Columns.Add("outNT-1 (NT-B)", typeof(string));
    //            ds.Tables[0].Columns.Add("outNT-2 (NT-C)", typeof(string));
    //            ds.Tables[0].Columns.Add("outNT-3 (NT-D)", typeof(string));
    //            ds.Tables[0].Columns.Add("outOBC", typeof(string));

    //            //-----------cutoff inhouse
    //            ds.Tables[0].Columns.Add("INcutOPEN", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutsebc", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutSC", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutST", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutVJDT(A)", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutOBC", typeof(string));
    //            //-----------cut off outsider
    //            ds.Tables[0].Columns.Add("outcutOPEN", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutsebc", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutSC", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutST", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutVJDT(A)", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutOBC", typeof(string));

    //            //maximummm
    //            ds.Tables[0].Columns.Add("INcutOPENmax", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutsebcmax", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutSCmax", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutSTmax", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutVJDT(A)max", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)max", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)max", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)max", typeof(string));
    //            ds.Tables[0].Columns.Add("INcutOBCmax", typeof(string));
    //            //-----------cut off outsider
    //            ds.Tables[0].Columns.Add("outcutOPENmax", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutsebcmax", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutSCmax", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutSTmax", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutVJDT(A)max", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)max", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)max", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)max", typeof(string));
    //            ds.Tables[0].Columns.Add("outcutOBCmax", typeof(string));

    //            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
    //            {
    //                intake = ds.Tables[0].Rows[i]["INTAKE CAPACITY"].ToString();
    //                a = Convert.ToInt32(intake);
    //                x = a * y / z;
    //                mgm = x.ToString();
    //                rem = Convert.ToInt32(intake) - Convert.ToInt32(mgm);


    //                decimal open = Convert.ToDecimal((Convert.ToDecimal(rem)));
    //                decimal SC = Convert.ToDecimal((Convert.ToDecimal(rem))) ;
    //                decimal ST = Convert.ToDecimal((Convert.ToDecimal(rem))) ;
    //                decimal NTa = Convert.ToDecimal((Convert.ToDecimal(rem)));
    //                decimal NTb = Convert.ToDecimal((Convert.ToDecimal(rem)));
    //                decimal NTc = Convert.ToDecimal((Convert.ToDecimal(rem))) ;
    //                decimal NTd = Convert.ToDecimal((Convert.ToDecimal(rem)));
    //                decimal OBC = Convert.ToDecimal((Convert.ToDecimal(rem))) ;
    //                decimal SEBC = Convert.ToDecimal((Convert.ToDecimal(rem))) ;

    //                ds.Tables[0].Rows[i]["MGM 15%"] = mgm;
    //                ds.Tables[0].Rows[i]["REMAINING SEATS AVAILABLE"] = rem;

    //                ds.Tables[0].Rows[i]["OPEN 50%"] = Convert.ToString(Math.Round(open, 0));
    //                ds.Tables[0].Rows[i]["SC 13%"] = Convert.ToString(Math.Round(SC, 0));
    //                ds.Tables[0].Rows[i]["ST 7%"] = Convert.ToString(Math.Round(ST, 0));
    //                ds.Tables[0].Rows[i]["VJDT"] = Convert.ToString(Math.Round(NTa, 0));
    //                ds.Tables[0].Rows[i]["NT1B"] = Convert.ToString(Math.Round(NTb, 0));
    //                ds.Tables[0].Rows[i]["NT2C"] = Convert.ToString(Math.Round(NTc, 0));
    //                ds.Tables[0].Rows[i]["NT3D"] = Convert.ToString(Math.Round(NTd, 0));
    //                ds.Tables[0].Rows[i]["OBC 19%"] = Convert.ToString(Math.Round(OBC, 0));
    //                ds.Tables[0].Rows[i]["SEBC 16%"] = Convert.ToString(Math.Round(SEBC, 0));

    //                string castestr = "select distinct Category from [dbo].[d_adm_applicant] where Del_Flag=0 and ACDID='" + ayid + "' and Category  is not null and Category <> 'SBC' and Category <> 'NT-2(NT-C)'";
    //                DataTable dtt = cls.fillDataTable(castestr);
    //                int inn = 0, outt = 0, tott = 0;
    //                for (int j = 0; j < dtt.Rows.Count; j++)
    //                {

    //                    //string qrycount = "select distinct count(d.stud_id) inhouse from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=0 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'; ";
    //                    //qrycount = qrycount + " select distinct count(d.stud_id) outsider from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=1 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'";

    //                    //string qrycnt = "select count(formno) inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
    //                    //qrycnt = qrycnt + "select  count(formno) outsider from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";


    //                    //            string qrycnt = "select count(formno) inhouse, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFin  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='"+ayid+"' and a.stud_id is null and (a.Form_no like '5%' or "
    //                    //+ " a.Form_no like '6%' ) and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);"
    //                    //+ " select count(formno) outsider, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or "
    //                    //+ " a.Form_no like '6%' ) and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

    //                    ////                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake "
    //                    ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake "
    //                    ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int) from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a"
    //                    ////+ " from merit_list_criteria where category<>'Institutional' and category='" + dtt.Rows[j]["Category"].ToString() + "') a";

    //                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and"
    // + " group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int)"
    //  + " from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a from merit_list_criteria where category<>'Institutional' "
    //  + " and category='" + dtt.Rows[j]["Category"].ToString() + "') a";
    //                    DataTable dt = cls.fillDataTable(str);


    //                    string qrycnt = "select inhouse,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFinmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFinmax from ("
    //        + " select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
    //        + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and"
    //        + " (a.Form_no like 'A%'  )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0') )a"
    //        + " where Is_Inhouse=0"
    //        + " ) x;  "
    //        + " select outsider,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFoutmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFoutmax from ("
    //        + " select count(Form_no) outsider,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
    //        + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and"
    //        + " (a.Form_no like 'A%'  )  and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  ) a"
    //        + " where Is_Inhouse=1"
    //        + " ) y;"
    //        + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
    //        + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //        + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //        + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
    //        + " select outsider_tot from (select count(Form_no) outsider_tot from "
    //        + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like 'A%'  ) "
    //        + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
    //        + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";

    //                    string str11 = "select * from d_adm_applicant as a,OLA_FY_adm_CourseSelection as b where a.form_no=b.formno and category='" + dtt.Rows[j]["Category"].ToString() + "' and b.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and ACDID='" + ayid + "' and a.stud_id is null and submit_dt is not null";
    //                    DataTable dt11 = cls.fillDataTable(str11);
    //                    string a11 = "";
    //                    if (dt11.Rows.Count > 0)
    //                    {
    //                        a11 = dt11.Rows.Count.ToString();
    //                    }
    //                    else
    //                    {
    //                        a11 = "0";
    //                    }
    //                    DataSet dt1 = cls.fill_dataset(qrycnt);
    //                    ds.Tables[0].Rows[i]["total_in"] = dt1.Tables[2].Rows[0]["inhouse_tot"].ToString();
    //                    ds.Tables[0].Rows[i]["total_out"] = dt1.Tables[3].Rows[0]["outsider_tot"].ToString();

    //                    inn = Convert.ToInt32(ds.Tables[0].Rows[i]["total_in"].ToString());
    //                    outt = Convert.ToInt32(ds.Tables[0].Rows[i]["total_out"].ToString());

    //                    tott = inn + outt;
    //                    ds.Tables[0].Rows[i]["total"] = tott;


    //                    if (dtt.Rows[j]["Category"].ToString().Contains("OPEN"))
    //                    {
    //                        ds.Tables[0].Rows[i]["OPEN 50%"] =a11;


    //                        ds.Tables[0].Rows[i]["INcutOPEN"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutOPEN"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutOPENmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutOPENmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("VJ/DT(A)"))
    //                    {
    //                        ds.Tables[0].Rows[i]["VJDT"] = a11;
    //                        ds.Tables[0].Rows[i]["INVJDT(A)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outVJDT(A)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutVJDT(A)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutVJDT(A)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutVJDT(A)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutVJDT(A)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();

    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-1 (NT-B)"))
    //                    {
    //                        ds.Tables[0].Rows[i]["NT1B"] = a11;
    //                        ds.Tables[0].Rows[i]["INNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-2 (NT-C)"))
    //                    {



    //                        ds.Tables[0].Rows[i]["NT2C"] = a11;

    //                        ds.Tables[0].Rows[i]["INNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-3 (NT-D)"))
    //                    {
    //                        ds.Tables[0].Rows[i]["NT3D"] = a11;

    //                        ds.Tables[0].Rows[i]["INNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("OBC"))
    //                    {
    //                        ds.Tables[0].Rows[i]["OBC 19%"] = a11;

    //                        ds.Tables[0].Rows[i]["INOBC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outOBC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutOBC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutOBC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutOBCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutOBCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("SC"))
    //                    {
    //                        ds.Tables[0].Rows[i]["SC 13%"] = a11;

    //                        ds.Tables[0].Rows[i]["INSC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outSC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutSC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutSC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutSCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutSCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("ST"))
    //                    {
    //                        ds.Tables[0].Rows[i]["ST 7%"] = a11;
    //                        ds.Tables[0].Rows[i]["INST"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outST"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutST"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutST"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutSTmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutSTmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }
    //                    else if (dtt.Rows[j]["Category"].ToString().Contains("SEBC"))
    //                    {
    //                        ds.Tables[0].Rows[i]["SEBC 16%"] = a11;

    //                        ds.Tables[0].Rows[i]["INsebc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
    //                        ds.Tables[0].Rows[i]["outsebc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutsebc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutsebc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

    //                        ds.Tables[0].Rows[i]["INcutsebcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
    //                        ds.Tables[0].Rows[i]["outcutsebcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
    //                    }

    //                    //string qrymks = "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
    //                    //qrymks = qrymks + "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

    //                    //DataSet dsmks = cls.fill_dataset(qrymks);
    //                    //string obtain = "", outof = "",percenta="";
    //                    //int ob = 0, of = 0, per = 0, tot = 100;
    //                    //for (int m = 0; m < dsmks.Tables[0].Rows.Count; m++)
    //                    //{
    //                    //    int g = 100;
    //                    //    string qrypercent = "select Mks_Obtained,Mks_Outof from d_adm_applicant where Form_no='"+dsmks.Tables[0].Rows[m]["formno"].ToString()+"'";
    //                    //    DataSet dsperc = cls.fill_dataset(qrypercent);
    //                    //    obtain = dsperc.Tables[0].Rows[0]["Mks_Obtained"].ToString();
    //                    //    outof = dsperc.Tables[0].Rows[0]["Mks_Outof"].ToString();
    //                    //    ob = Convert.ToInt32(obtain);       of = Convert.ToInt32(outof);
    //                    //    per = ob * g;    tot = per / of;
    //                    //    percenta = tot.ToString();

    //                    //}
    //                }
    //            }

    //            foreach (DataRow drrow in ds.Tables[0].Rows)
    //            {
    //                reservation res = new reservation();


    //                res.totall = drrow["total"].ToString();
    //                res.tot_in = drrow["total_in"].ToString();
    //                res.tot_out = drrow["total_out"].ToString();

    //                res.mgmt = drrow["MGM 15%"].ToString();
    //                res.remain = drrow["REMAINING SEATS AVAILABLE"].ToString();
    //                res.intake = drrow["INTAKE CAPACITY"].ToString();
    //                res.group = drrow["FACULTY"].ToString();
    //                res.grp_id = drrow["group_id"].ToString();

    //                res.open = drrow["OPEN 50%"].ToString();
    //                res.sc = drrow["SC 13%"].ToString();
    //                res.st = drrow["ST 7%"].ToString();
    //                res.vjdt = drrow["VJDT"].ToString();
    //                res.ntb = drrow["NT1B"].ToString();
    //                res.ntc = drrow["NT2C"].ToString();
    //                res.ntd = drrow["NT3D"].ToString();
    //                res.obc = drrow["OBC 19%"].ToString();
    //                res.sebc = drrow["SEBC 16%"].ToString();

    //                //category wise intake capacity of inhouse
    //                res.in_open = drrow["INOPEN"].ToString();
    //                res.in_sc = drrow["INSC"].ToString();
    //                res.in_st = drrow["INST"].ToString();
    //                res.in_vjdt = drrow["INVJDT(A)"].ToString();
    //                res.in_ntb = drrow["INNT-1 (NT-B)"].ToString();
    //                res.in_ntc = drrow["INNT-2 (NT-C)"].ToString();
    //                res.in_ntd = drrow["INNT-3 (NT-D)"].ToString();
    //                res.in_obc = drrow["INOBC"].ToString();
    //                res.in_sebc = drrow["INsebc"].ToString();

    //                //category wise intake capacity of Outsider
    //                res.out_open = drrow["outOPEN"].ToString();
    //                res.out_sc = drrow["outSC"].ToString();
    //                res.out_st = drrow["outST"].ToString();
    //                res.out_vjdt = drrow["outVJDT(A)"].ToString();
    //                res.out_ntb = drrow["outNT-1 (NT-B)"].ToString();
    //                res.out_ntc = drrow["outNT-2 (NT-C)"].ToString();
    //                res.out_ntd = drrow["outNT-3 (NT-D)"].ToString();
    //                res.out_obc = drrow["outOBC"].ToString();
    //                res.out_sebc = drrow["outsebc"].ToString();


    //                //category wise cutoff of inhouse
    //                res.INcutOPEN = drrow["INcutOPEN"].ToString();
    //                res.INcutSC = drrow["INcutSC"].ToString();
    //                res.INcutST = drrow["INcutST"].ToString();
    //                res.INcutVJDT = drrow["INcutVJDT(A)"].ToString();
    //                res.INcutNTb = drrow["INcutNT-1 (NT-B)"].ToString();
    //                res.INcutNTc = drrow["INcutNT-2 (NT-C)"].ToString();
    //                res.INcutNTd = drrow["INcutNT-3 (NT-D)"].ToString();
    //                res.INcutOBC = drrow["INcutOBC"].ToString();
    //                res.INcutsebc = drrow["INcutsebc"].ToString();

    //                //category wise cutoff of outsider
    //                res.outcutOPEN = drrow["outcutOPEN"].ToString();
    //                res.outcutSC = drrow["outcutSC"].ToString();
    //                res.outcutST = drrow["outcutST"].ToString();
    //                res.outcutVJDT = drrow["outcutVJDT(A)"].ToString();
    //                res.outcutNTb = drrow["outcutNT-1 (NT-B)"].ToString();
    //                res.outcutNTc = drrow["outcutNT-2 (NT-C)"].ToString();
    //                res.outcutNTd = drrow["outcutNT-3 (NT-D)"].ToString();
    //                res.outcutOBC = drrow["outcutOBC"].ToString();
    //                res.outcutsebc = drrow["outcutsebc"].ToString();



    //                res.INcutOPENmax = drrow["INcutOPENmax"].ToString();
    //                res.INcutSCmax = drrow["INcutSCmax"].ToString();
    //                res.INcutSTmax = drrow["INcutSTmax"].ToString();
    //                res.INcutVJDTmax = drrow["INcutVJDT(A)max"].ToString();
    //                res.INcutNTbmax = drrow["INcutNT-1 (NT-B)max"].ToString();
    //                res.INcutNTcmax = drrow["INcutNT-2 (NT-C)max"].ToString();
    //                res.INcutNTdmax = drrow["INcutNT-3 (NT-D)max"].ToString();
    //                res.INcutOBCmax = drrow["INcutOBCmax"].ToString();
    //                res.INcutsebcmax = drrow["INcutsebcmax"].ToString();

    //                //category wise cutoff of outsider
    //                res.outcutOPENmax = drrow["outcutOPENmax"].ToString();
    //                res.outcutSCmax = drrow["outcutSCmax"].ToString();
    //                res.outcutSTmax = drrow["outcutSTmax"].ToString();
    //                res.outcutVJDTmax = drrow["outcutVJDT(A)max"].ToString();
    //                res.outcutNTbmax = drrow["outcutNT-1 (NT-B)max"].ToString();
    //                res.outcutNTcmax = drrow["outcutNT-2 (NT-C)max"].ToString();
    //                res.outcutNTdmax = drrow["outcutNT-3 (NT-D)max"].ToString();
    //                res.outcutOBCmax = drrow["outcutOBCmax"].ToString();
    //                res.outcutsebcmax = drrow["outcutsebcmax"].ToString();

    //                res.msg = "";
    //                details.Add(res);
    //            }

    //            //foreach (DataRow drrows in  dspercent.Tables[0].Rows)
    //            //{
    //            //     reservation res1 = new reservation();
    //            //     res1.per_open = dspercent.Tables[0].Rows[0]["percentage"].ToString();
    //            //     res1.per_st = dspercent.Tables[1].Rows[0]["percentage"].ToString();
    //            //     res1.per_sc = dspercent.Tables[2].Rows[0]["percentage"].ToString();
    //            //     res1.per_vg = dspercent.Tables[3].Rows[0]["percentage"].ToString();
    //            //     res1.per_ntb = dspercent.Tables[4].Rows[0]["percentage"].ToString();
    //            //     res1.per_ntc = dspercent.Tables[5].Rows[0]["percentage"].ToString();
    //            //     res1.per_ntd = dspercent.Tables[6].Rows[0]["percentage"].ToString();
    //            //     res1.per_obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
    //            //     details.Add(res1);
    //            //}
    //        }
    //        else
    //        {
    //            reservation res = new reservation();
    //            res.msg = "No Data Found";
    //            details.Add(res);
    //        }
    //        return details.ToArray();
    //    }
    public reservation[] getdata_res_overall(string ayid)
    {

        string qryintake = "";

        qryintake = "select distinct intake as [INTAKE CAPACITY],Group_title as FACULTY,b.group_id from m_intake a ,m_crs_subjectgroup_tbl b,OLA_FY_adm_CourseSelection c"
+ " where a.Group_id like  '%'+b.group_id+'%' and a.group_id like '%'+c.group_id+'%' and b.Group_id=c.group_id and c.del_flag=0 and a.subcourse_id= b.Subcourse_id"
+ " and a.ayid='" + ayid + "' and c.formno  like 'C%' and Group_title not like 's%' and Group_title not like 't%' and Group_title not like '%hs%' and Group_title "
+ " not like '%H.M.T%' and Group_title not like '%h.s%' ";// and Group_title <> 'FYBCOM'  and Group_title not like '%FYBA%'";  and Group_title not like '%CBZ%' and Group_title not like '%PCM%' ";and Group_title not like '%CHEM%'";
        DataSet ds = cls.fillDataset(qryintake);

        string qrypercentopen = "select percentage from merit_list_criteria where Category='OPEN';select percentage from merit_list_criteria where Category='SC';"
        + " select percentage from merit_list_criteria where Category='ST';select percentage from merit_list_criteria where Category='NT-1 (NT-B)';"
        + " select percentage from merit_list_criteria where Category='NT-2 (NT-C)';select percentage from merit_list_criteria where Category='NT-3 (NT-D)';"
        + " select percentage from merit_list_criteria where Category='VJ/DT(A)'; select percentage from merit_list_criteria where Category='OBC'; select percentage from merit_list_criteria where Category='SEBC';";
        DataSet dspercent = cls.fill_dataset(qrypercentopen);


        string o = "", sc = "", st = "", nt = "", nt2 = "", nt3 = "", vj = "", obc = "", sebc = "";
        //    int io = 0, isc = 0, nti = 0, int2 = 0, nt3i = 0, ivj = 0, obci = 0;
        o = dspercent.Tables[0].Rows[0]["percentage"].ToString();
        sc = dspercent.Tables[1].Rows[0]["percentage"].ToString();
        st = dspercent.Tables[2].Rows[0]["percentage"].ToString();
        nt = dspercent.Tables[3].Rows[0]["percentage"].ToString();
        nt2 = dspercent.Tables[4].Rows[0]["percentage"].ToString();
        nt3 = dspercent.Tables[5].Rows[0]["percentage"].ToString();
        vj = dspercent.Tables[6].Rows[0]["percentage"].ToString();
        obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
        sebc = dspercent.Tables[8].Rows[0]["percentage"].ToString();

        //nti = Convert.ToInt32(nt);
        //int2 = Convert.ToInt32(nt2);

        string remaining = "", mgm = "", intake = ""; int x = 0; int y = 0; int z = 0; int rem = 0;
        List<reservation> details = new List<reservation>();
        if (ds.Tables[0].Rows.Count > 0)
        {
            y = 15;
            z = 100;
            int a = 0;

            ds.Tables[0].Columns.Add("MGM 15%", typeof(string));
            ds.Tables[0].Columns.Add("REMAINING SEATS AVAILABLE", typeof(string));
            ds.Tables[0].Columns.Add("OPEN 54%", typeof(string));
            ds.Tables[0].Columns.Add("SEBC 12%", typeof(string));
            ds.Tables[0].Columns.Add("SC 13%", typeof(string));
            ds.Tables[0].Columns.Add("ST 7%", typeof(string));
            ds.Tables[0].Columns.Add("VJDT", typeof(string));
            ds.Tables[0].Columns.Add("NT1B", typeof(string));
            ds.Tables[0].Columns.Add("NT2C", typeof(string));
            ds.Tables[0].Columns.Add("NT3D", typeof(string));
            ds.Tables[0].Columns.Add("OBC 19%", typeof(string));

            ds.Tables[0].Columns.Add("total", typeof(string));
            ds.Tables[0].Columns.Add("total_in", typeof(string));
            ds.Tables[0].Columns.Add("total_out", typeof(string));

            //-------inhouse
            ds.Tables[0].Columns.Add("INOPEN", typeof(string));
            ds.Tables[0].Columns.Add("INsebc", typeof(string));
            ds.Tables[0].Columns.Add("INSC", typeof(string));
            ds.Tables[0].Columns.Add("INST", typeof(string));
            ds.Tables[0].Columns.Add("INVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("INNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("INNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("INNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("INOBC", typeof(string));
            //outhouse
            ds.Tables[0].Columns.Add("outOPEN", typeof(string));
            ds.Tables[0].Columns.Add("outsebc", typeof(string));
            ds.Tables[0].Columns.Add("outSC", typeof(string));
            ds.Tables[0].Columns.Add("outST", typeof(string));
            ds.Tables[0].Columns.Add("outVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("outNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("outNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("outNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("outOBC", typeof(string));

            //-----------cutoff inhouse
            ds.Tables[0].Columns.Add("INcutOPEN", typeof(string));
            ds.Tables[0].Columns.Add("INcutsebc", typeof(string));
            ds.Tables[0].Columns.Add("INcutSC", typeof(string));
            ds.Tables[0].Columns.Add("INcutST", typeof(string));
            ds.Tables[0].Columns.Add("INcutVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("INcutOBC", typeof(string));
            //-----------cut off outsider
            ds.Tables[0].Columns.Add("outcutOPEN", typeof(string));
            ds.Tables[0].Columns.Add("outcutsebc", typeof(string));
            ds.Tables[0].Columns.Add("outcutSC", typeof(string));
            ds.Tables[0].Columns.Add("outcutST", typeof(string));
            ds.Tables[0].Columns.Add("outcutVJDT(A)", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)", typeof(string));
            ds.Tables[0].Columns.Add("outcutOBC", typeof(string));

            //maximummm
            ds.Tables[0].Columns.Add("INcutOPENmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutsebcmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutSCmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutSTmax", typeof(string));
            ds.Tables[0].Columns.Add("INcutVJDT(A)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-1 (NT-B)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-2 (NT-C)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutNT-3 (NT-D)max", typeof(string));
            ds.Tables[0].Columns.Add("INcutOBCmax", typeof(string));
            //-----------cut off outsider
            ds.Tables[0].Columns.Add("outcutOPENmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutsebcmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutSCmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutSTmax", typeof(string));
            ds.Tables[0].Columns.Add("outcutVJDT(A)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-1 (NT-B)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-2 (NT-C)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutNT-3 (NT-D)max", typeof(string));
            ds.Tables[0].Columns.Add("outcutOBCmax", typeof(string));

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                intake = ds.Tables[0].Rows[i]["INTAKE CAPACITY"].ToString();
                a = Convert.ToInt32(intake);
                x = a * y / z;
                mgm = x.ToString();
                rem = Convert.ToInt32(intake) - Convert.ToInt32(mgm);


                decimal open = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal SC = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal ST = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal NTa = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal NTb = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal NTc = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal NTd = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal OBC = Convert.ToDecimal((Convert.ToDecimal(rem)));
                decimal SEBC = Convert.ToDecimal((Convert.ToDecimal(rem)));

                ds.Tables[0].Rows[i]["MGM 15%"] = mgm;
                ds.Tables[0].Rows[i]["REMAINING SEATS AVAILABLE"] = rem;

                ds.Tables[0].Rows[i]["OPEN 54%"] = Convert.ToString(Math.Round(open, 0));
                ds.Tables[0].Rows[i]["SC 13%"] = Convert.ToString(Math.Round(SC, 0));
                ds.Tables[0].Rows[i]["ST 7%"] = Convert.ToString(Math.Round(ST, 0));
                ds.Tables[0].Rows[i]["VJDT"] = Convert.ToString(Math.Round(NTa, 0));
                ds.Tables[0].Rows[i]["NT1B"] = Convert.ToString(Math.Round(NTb, 0));
                ds.Tables[0].Rows[i]["NT2C"] = Convert.ToString(Math.Round(NTc, 0));
                ds.Tables[0].Rows[i]["NT3D"] = Convert.ToString(Math.Round(NTd, 0));
                ds.Tables[0].Rows[i]["OBC 19%"] = Convert.ToString(Math.Round(OBC, 0));
                ds.Tables[0].Rows[i]["SEBC 12%"] = Convert.ToString(Math.Round(SEBC, 0));

                string castestr = "select distinct Category from [dbo].[d_adm_applicant] where Del_Flag=0 and ACDID='" + ayid + "' and Category  is not null and Category <> 'SBC' and Category <> 'NT-2(NT-C)'";
                DataTable dtt = cls.fillDataTable(castestr);
                int inn = 0, outt = 0, tott = 0;
                for (int j = 0; j < dtt.Rows.Count; j++)
                {

                    //string qrycount = "select distinct count(d.stud_id) inhouse from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=0 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'; ";
                    //qrycount = qrycount + " select distinct count(d.stud_id) outsider from [dbo].[d_adm_applicant] d,OLA_FY_adm_CourseSelection o where Is_Inhouse=1 and d.Del_Flag=0 and d.stud_id is not null and d.Form_no=o.formno and d.stud_id=o.stud_id and ACDID='" + ayid + "' and d.stud_id <> ' ' and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'";

                    //string qrycnt = "select count(formno) inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
                    //qrycnt = qrycnt + "select  count(formno) outsider from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";


                    //            string qrycnt = "select count(formno) inhouse, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFin  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='"+ayid+"' and a.stud_id is null and (a.Form_no like '5%' or "
                    //+ " a.Form_no like '6%' ) and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);"
                    //+ " select count(formno) outsider, convert(decimal(6,0),((min(cast(isnull(Mks_Obtained,0) as int))*100)/(min(cast(isnull(Mks_Outof,0) as int))))) Cutt_OFFout  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or "
                    //+ " a.Form_no like '6%' ) and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

                    ////                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake "
                    ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake "
                    ////+ " where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int) from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a"
                    ////+ " from merit_list_criteria where category<>'Institutional' and category='" + dtt.Rows[j]["Category"].ToString() + "') a";

                    string str = "select category,case when a is null then '0' else a end as a from (select category,cast(round((((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and"
 + " group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "')-(select cast(round(((select cast(intake as decimal) from m_intake  where ayid='" + ayid + "' and group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "') * (cast(percentage as decimal)/100)),0) as int)"
  + " from merit_list_criteria where category='Institutional')) * (cast(percentage as decimal)/100)),0) as int) as a from merit_list_criteria where category<>'Institutional' "
  + " and category='" + dtt.Rows[j]["Category"].ToString() + "') a";
                    DataTable dt = cls.fillDataTable(str);


                    string qrycnt = "select inhouse,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFinmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFinmax from ("
        + " select count(Form_no) inhouse,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
        + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and"
                        //+ "    a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0') )a"
        + "    a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0') )a"
        + " where Is_Inhouse=0"
        + " ) x;  "
        + " select outsider,case when Cutt_OFFinmin is null then '0' else Cutt_OFFinmin end as Cutt_OFFoutmin,case when Cutt_OFFinmax is null then '0' else Cutt_OFFinmax end as Cutt_OFFoutmax from ("
        + " select count(Form_no) outsider,min(Cutt_OFFin) Cutt_OFFinmin,max(Cutt_OFFin) Cutt_OFFinmax from ( select Form_no,cast(round(COALESCE (Mks_Obtained,0)*100.0/COALESCE (Mks_Outof,1),2,2)AS DECIMAL(18, 2))  Cutt_OFFin, "
        + " Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and"
                        //+ "    a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  ) a"
        + "    a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "'  and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and ( Mks_Outof <> null or Mks_Outof <> '0')  ) a"
        + " where Is_Inhouse=1"
        + " ) y;"
        + " select inhouse_tot from (select count(Form_no) inhouse_tot from "
        + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  "
                        // + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=0) v; "
        + " select outsider_tot from (select count(Form_no) outsider_tot from "
        + " (select  Form_no,Is_Inhouse from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null  "
                        //+ " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and submit_dt is not null  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " and a.Del_Flag=0   and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list) and Is_Inhouse <> '2' and "
        + " ( Mks_Outof <> null or Mks_Outof <> '0'))a where Is_Inhouse=1) w; ";

                    //  string str11 = "select * from d_adm_applicant as a,OLA_FY_adm_CourseSelection as b where a.form_no=b.formno and category='" + dtt.Rows[j]["Category"].ToString() + "' and b.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and ACDID='" + ayid + "' and a.stud_id is null and submit_dt is not null";
                    string str11 = "select * from d_adm_applicant as a,OLA_FY_adm_CourseSelection as b where a.form_no=b.formno and category='" + dtt.Rows[j]["Category"].ToString() + "' and b.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "' and ACDID='" + ayid + "' and a.stud_id is null ";
                    DataTable dt11 = cls.fillDataTable(str11);
                    string a11 = "";
                    if (dt11.Rows.Count > 0)
                    {
                        a11 = dt11.Rows.Count.ToString();
                    }
                    else
                    {
                        a11 = "0";
                    }
                    DataSet dt1 = cls.fill_dataset(qrycnt);
                    ds.Tables[0].Rows[i]["total_in"] = dt1.Tables[2].Rows[0]["inhouse_tot"].ToString();
                    ds.Tables[0].Rows[i]["total_out"] = dt1.Tables[3].Rows[0]["outsider_tot"].ToString();

                    inn = Convert.ToInt32(ds.Tables[0].Rows[i]["total_in"].ToString());
                    outt = Convert.ToInt32(ds.Tables[0].Rows[i]["total_out"].ToString());

                    tott = inn + outt;
                    ds.Tables[0].Rows[i]["total"] = tott;


                    if (dtt.Rows[j]["Category"].ToString().Contains("OPEN"))
                    {
                        ds.Tables[0].Rows[i]["OPEN 54%"] = a11;


                        ds.Tables[0].Rows[i]["INcutOPEN"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutOPEN"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutOPENmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutOPENmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("VJ/DT(A)"))
                    {
                        ds.Tables[0].Rows[i]["VJDT"] = a11;
                        ds.Tables[0].Rows[i]["INVJDT(A)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outVJDT(A)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutVJDT(A)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutVJDT(A)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutVJDT(A)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutVJDT(A)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();

                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-1 (NT-B)"))
                    {
                        ds.Tables[0].Rows[i]["NT1B"] = a11;
                        ds.Tables[0].Rows[i]["INNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-1 (NT-B)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-1 (NT-B)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-2 (NT-C)"))
                    {



                        ds.Tables[0].Rows[i]["NT2C"] = a11;

                        ds.Tables[0].Rows[i]["INNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-2 (NT-C)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-2 (NT-C)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("NT-3 (NT-D)"))
                    {
                        ds.Tables[0].Rows[i]["NT3D"] = a11;

                        ds.Tables[0].Rows[i]["INNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutNT-3 (NT-D)max"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutNT-3 (NT-D)max"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("OBC"))
                    {
                        ds.Tables[0].Rows[i]["OBC 19%"] = a11;

                        ds.Tables[0].Rows[i]["INOBC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outOBC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutOBC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutOBC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutOBCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutOBCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("SC"))
                    {
                        ds.Tables[0].Rows[i]["SC 13%"] = a11;

                        ds.Tables[0].Rows[i]["INSC"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outSC"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutSC"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutSC"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutSCmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutSCmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("ST"))
                    {
                        ds.Tables[0].Rows[i]["ST 7%"] = a11;
                        ds.Tables[0].Rows[i]["INST"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outST"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutST"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutST"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutSTmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutSTmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }
                    else if (dtt.Rows[j]["Category"].ToString().Contains("SEBC"))
                    {
                        ds.Tables[0].Rows[i]["SEBC 12%"] = a11;

                        ds.Tables[0].Rows[i]["INsebc"] = dt1.Tables[0].Rows[0]["inhouse"].ToString();
                        ds.Tables[0].Rows[i]["outsebc"] = dt1.Tables[1].Rows[0]["outsider"].ToString();

                        ds.Tables[0].Rows[i]["INcutsebc"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmin"].ToString();
                        ds.Tables[0].Rows[i]["outcutsebc"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmin"].ToString();

                        ds.Tables[0].Rows[i]["INcutsebcmax"] = dt1.Tables[0].Rows[0]["Cutt_OFFinmax"].ToString();
                        ds.Tables[0].Rows[i]["outcutsebcmax"] = dt1.Tables[1].Rows[0]["Cutt_OFFoutmax"].ToString();
                    }

                    //string qrymks = "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=0 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list);";
                    //qrymks = qrymks + "select formno  from d_adm_applicant as a,OLA_FY_adm_CourseSelection as o where a.Form_no=o.formno and ACDID='" + ayid + "' and a.stud_id is null and (a.Form_no like '5%' or a.Form_no like '6%' ) and submit_dt is not null and Is_Inhouse=1 and a.Del_Flag=0 and Category='" + dtt.Rows[j]["Category"].ToString() + "' and o.group_id='" + ds.Tables[0].Rows[i]["group_id"].ToString() + "'  and a.Form_no  not in (select formno= substring(formno,1,5)  from merit_list)";

                    //DataSet dsmks = cls.fill_dataset(qrymks);
                    //string obtain = "", outof = "",percenta="";
                    //int ob = 0, of = 0, per = 0, tot = 100;
                    //for (int m = 0; m < dsmks.Tables[0].Rows.Count; m++)
                    //{
                    //    int g = 100;
                    //    string qrypercent = "select Mks_Obtained,Mks_Outof from d_adm_applicant where Form_no='"+dsmks.Tables[0].Rows[m]["formno"].ToString()+"'";
                    //    DataSet dsperc = cls.fill_dataset(qrypercent);
                    //    obtain = dsperc.Tables[0].Rows[0]["Mks_Obtained"].ToString();
                    //    outof = dsperc.Tables[0].Rows[0]["Mks_Outof"].ToString();
                    //    ob = Convert.ToInt32(obtain);       of = Convert.ToInt32(outof);
                    //    per = ob * g;    tot = per / of;
                    //    percenta = tot.ToString();

                    //}
                }
            }

            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                reservation res = new reservation();


                res.totall = drrow["total"].ToString();
                res.tot_in = drrow["total_in"].ToString();
                res.tot_out = drrow["total_out"].ToString();

                res.mgmt = drrow["MGM 15%"].ToString();
                res.remain = drrow["REMAINING SEATS AVAILABLE"].ToString();
                res.intake = drrow["INTAKE CAPACITY"].ToString();
                res.group = drrow["FACULTY"].ToString();
                res.grp_id = drrow["group_id"].ToString();

                res.open = drrow["OPEN 54%"].ToString();
                res.sc = drrow["SC 13%"].ToString();
                res.st = drrow["ST 7%"].ToString();
                res.vjdt = drrow["VJDT"].ToString();
                res.ntb = drrow["NT1B"].ToString();
                res.ntc = drrow["NT2C"].ToString();
                res.ntd = drrow["NT3D"].ToString();
                res.obc = drrow["OBC 19%"].ToString();
                res.sebc = drrow["SEBC 12%"].ToString();

                //category wise intake capacity of inhouse
                res.in_open = drrow["INOPEN"].ToString();
                res.in_sc = drrow["INSC"].ToString();
                res.in_st = drrow["INST"].ToString();
                res.in_vjdt = drrow["INVJDT(A)"].ToString();
                res.in_ntb = drrow["INNT-1 (NT-B)"].ToString();
                res.in_ntc = drrow["INNT-2 (NT-C)"].ToString();
                res.in_ntd = drrow["INNT-3 (NT-D)"].ToString();
                res.in_obc = drrow["INOBC"].ToString();
                res.in_sebc = drrow["INsebc"].ToString();

                //category wise intake capacity of Outsider
                res.out_open = drrow["outOPEN"].ToString();
                res.out_sc = drrow["outSC"].ToString();
                res.out_st = drrow["outST"].ToString();
                res.out_vjdt = drrow["outVJDT(A)"].ToString();
                res.out_ntb = drrow["outNT-1 (NT-B)"].ToString();
                res.out_ntc = drrow["outNT-2 (NT-C)"].ToString();
                res.out_ntd = drrow["outNT-3 (NT-D)"].ToString();
                res.out_obc = drrow["outOBC"].ToString();
                res.out_sebc = drrow["outsebc"].ToString();


                //category wise cutoff of inhouse
                res.INcutOPEN = drrow["INcutOPEN"].ToString();
                res.INcutSC = drrow["INcutSC"].ToString();
                res.INcutST = drrow["INcutST"].ToString();
                res.INcutVJDT = drrow["INcutVJDT(A)"].ToString();
                res.INcutNTb = drrow["INcutNT-1 (NT-B)"].ToString();
                res.INcutNTc = drrow["INcutNT-2 (NT-C)"].ToString();
                res.INcutNTd = drrow["INcutNT-3 (NT-D)"].ToString();
                res.INcutOBC = drrow["INcutOBC"].ToString();
                res.INcutsebc = drrow["INcutsebc"].ToString();

                //category wise cutoff of outsider
                res.outcutOPEN = drrow["outcutOPEN"].ToString();
                res.outcutSC = drrow["outcutSC"].ToString();
                res.outcutST = drrow["outcutST"].ToString();
                res.outcutVJDT = drrow["outcutVJDT(A)"].ToString();
                res.outcutNTb = drrow["outcutNT-1 (NT-B)"].ToString();
                res.outcutNTc = drrow["outcutNT-2 (NT-C)"].ToString();
                res.outcutNTd = drrow["outcutNT-3 (NT-D)"].ToString();
                res.outcutOBC = drrow["outcutOBC"].ToString();
                res.outcutsebc = drrow["outcutsebc"].ToString();



                res.INcutOPENmax = drrow["INcutOPENmax"].ToString();
                res.INcutSCmax = drrow["INcutSCmax"].ToString();
                res.INcutSTmax = drrow["INcutSTmax"].ToString();
                res.INcutVJDTmax = drrow["INcutVJDT(A)max"].ToString();
                res.INcutNTbmax = drrow["INcutNT-1 (NT-B)max"].ToString();
                res.INcutNTcmax = drrow["INcutNT-2 (NT-C)max"].ToString();
                res.INcutNTdmax = drrow["INcutNT-3 (NT-D)max"].ToString();
                res.INcutOBCmax = drrow["INcutOBCmax"].ToString();
                res.INcutsebcmax = drrow["INcutsebcmax"].ToString();

                //category wise cutoff of outsider
                res.outcutOPENmax = drrow["outcutOPENmax"].ToString();
                res.outcutSCmax = drrow["outcutSCmax"].ToString();
                res.outcutSTmax = drrow["outcutSTmax"].ToString();
                res.outcutVJDTmax = drrow["outcutVJDT(A)max"].ToString();
                res.outcutNTbmax = drrow["outcutNT-1 (NT-B)max"].ToString();
                res.outcutNTcmax = drrow["outcutNT-2 (NT-C)max"].ToString();
                res.outcutNTdmax = drrow["outcutNT-3 (NT-D)max"].ToString();
                res.outcutOBCmax = drrow["outcutOBCmax"].ToString();
                res.outcutsebcmax = drrow["outcutsebcmax"].ToString();

                res.msg = "";
                details.Add(res);
            }

            //foreach (DataRow drrows in  dspercent.Tables[0].Rows)
            //{
            //     reservation res1 = new reservation();
            //     res1.per_open = dspercent.Tables[0].Rows[0]["percentage"].ToString();
            //     res1.per_st = dspercent.Tables[1].Rows[0]["percentage"].ToString();
            //     res1.per_sc = dspercent.Tables[2].Rows[0]["percentage"].ToString();
            //     res1.per_vg = dspercent.Tables[3].Rows[0]["percentage"].ToString();
            //     res1.per_ntb = dspercent.Tables[4].Rows[0]["percentage"].ToString();
            //     res1.per_ntc = dspercent.Tables[5].Rows[0]["percentage"].ToString();
            //     res1.per_ntd = dspercent.Tables[6].Rows[0]["percentage"].ToString();
            //     res1.per_obc = dspercent.Tables[7].Rows[0]["percentage"].ToString();
            //     details.Add(res1);
            //}
        }
        else
        {
            reservation res = new reservation();
            res.msg = "No Data Found";
            details.Add(res);
        }
        return details.ToArray();
    }
    public fee_report_gen[] subcourseChange_data(string ayid, string course, string sub_crs)
    {
        // string query="";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataTable dt = new DataTable();
        SqlDataAdapter da;
        //SqlCommand cmd = new SqlCommand();
        //SqlParameter param ;

        List<fee_report_gen> details = new List<fee_report_gen>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("sp_feereport_groupwise", con))
            {
                // List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@groupid", sub_crs);
                cmd.Parameters.AddWithValue("@ayid", ayid);
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

            }
        }
        int col = 0;
        if (dt.Rows.Count > 0)
        {
            col = dt.Columns.Count;
            int rowcnt = 0;
            // int sumtotalpay, sumcoursefees,sumbal,sumrefund= 0;
            int colind1 = 17;
            int[] arr = new int[col - 17];
            int arrindx = 0;
            for (int y = 17; y < dt.Columns.Count; y++)
            {
                if (colind1 < col)
                {

                    arr[arrindx] = dt.AsEnumerable().Sum(r => r.Field<int>(colind1));
                    colind1++;
                    arrindx++;
                }
            }
            int sumtot = Convert.ToInt32(dt.Compute("SUM(amountpaid)", string.Empty));
            int sumcrsfee = Convert.ToInt32(dt.Compute("SUM(TOTAL_COURSE_FEES)", string.Empty));
            int sumbala = Convert.ToInt32(dt.Compute("SUM(BALANCE)", string.Empty));
            int sumrefu = Convert.ToInt32(dt.Compute("SUM([Refundable Amount])", string.Empty));



            foreach (DataRow dtrow in dt.Rows)
            {
                fee_report_gen fee = new fee_report_gen();
                fee.id = dtrow["ID"].ToString();
                fee.Name = dtrow["Student Name"].ToString();
                fee.roll_no = dtrow["Roll_No"].ToString();
                fee.category = dtrow["category"].ToString();
                fee.part_pay = dtrow["Part Payment Amount"].ToString();
                fee.amnt_paid = dtrow["amountpaid"].ToString();
                fee.balance = dtrow["BALANCE"].ToString();
                fee.crs_fee = dtrow["TOTAL_COURSE_FEES"].ToString();
                fee.gender = dtrow["Gender"].ToString();
                fee.refund_amt = dtrow["Refundable Amount"].ToString();
                fee.installment = dtrow["No. of Installments"].ToString();
                fee.remark = dtrow["Remark"].ToString();
                fee.status = dtrow["Status"].ToString();
                fee.paydate = dtrow["Pay date"].ToString();
                fee.group_title = dtrow["group_title"].ToString();
                int colind = 17;
                int k = 0;

                for (int y = 17; y < dt.Columns.Count; y++)
                {
                    if (colind < col)
                    {
                        fee.colname += dt.Columns[colind].ColumnName.ToString() + ",";
                        fee.colvalue += dt.Rows[rowcnt][colind].ToString() + ",";
                        fee.totalparticulars += arr[k].ToString() + ",";
                        k++;
                        colind++;
                    }
                }
                fee.totalfeespay = sumtot.ToString();
                fee.totalcoursefees = sumcrsfee.ToString();
                fee.totalbal = sumbala.ToString();
                fee.totalrefund = sumrefu.ToString();


                fee.colvalue = fee.colvalue.Substring(0, fee.colvalue.LastIndexOf(","));
                fee.colname = fee.colname.Substring(0, fee.colname.LastIndexOf(","));
                fee.totalparticulars = fee.totalparticulars.Substring(0, fee.totalparticulars.LastIndexOf(","));


                details.Add(fee);
                rowcnt++;
            }
        }
        return details.ToArray();
    }
    public List<ListItem> subcourseChangeClass(string subcourseID, string finalGrp)
    {
        String qry = "select Group_id,Group_title from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + ") and subcourse_id='" + subcourseID + "' ";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }
    }
    public List<ListItem> courseChangefee(string cat, string subcourseID)
    {
        String qry = "";
        if (cat != "")
        {
            qry = "select subcourse_id,subcourse_name from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where Group_id in (" + subcourseID + ")) and subcourse_name like '" + cat + "%'";
        }
        else
        {
            qry = "select subcourse_id,subcourse_name from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where Group_id in (" + subcourseID + ")) and subcourse_name not like 'F%' and subcourse_name not like 'S%' and subcourse_name not like 'T%' and subcourse_name not like 'M%'";
        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString(),
                            Text = sdr["subcourse_name"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }
    }

    public List<ListItem> fillListClass(string subcourseID, string grpID, string finalGrp)
    {
        string qry = "select s.Subject_Id,s.Subject_Name from dbo.d_crs_subjectgroup_tbl sg, dbo.m_crs_subject_tbl s where sg.Subject_id=s.Subject_Id and s.del_flag=0 and Group_id in (" + finalGrp + ") order by Subject_Name";
        if (subcourseID != "")
        {
            qry = "select Subject_Id,Subject_Name from dbo.m_crs_subject_tbl where SubCourse_Id='" + subcourseID + "' and del_flag=0 order by Subject_Name";
        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        listData.Add(new ListItem
                        {
                            Value = sdr["Subject_Id"].ToString(),
                            Text = sdr["Subject_Name"].ToString()
                        });
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> fillSubjectListClass(string grpID, string semid)
    {
        string qry = "select subject_id,subject_name,subject_code from dbo.cre_subject where group_id like '%" + grpID + "%' and sem_id='" + semid + "' and del_flag=0 order by subject_name";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        listData.Add(new ListItem
                        {
                            Value = sdr["subject_id"].ToString(),
                            Text = sdr["subject_name"].ToString()
                        });
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> fillTeacherClass(string grpID)
    {
        //  string qry = "select emp_id,emp_name from dbo.web_tp_login where group_ids like '%" + grpID + "%' and del_flag=0";

        string qry = "select l.emp_id,NAME +' '+FATHER+' '+SURNAME  emp_name from dbo.web_tp_login l inner join EmployeePersonal e on l.emp_id=e.emp_id where l.group_ids like '%" + grpID + "%' and l.del_flag=0 and l.role_id in(select role_id from web_tp_roletype where role_name like 'Teaching%' or role_name like'hod%' or role_name like'princi%')";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        listData.Add(new ListItem
                        {
                            Value = sdr["emp_id"].ToString(),
                            Text = sdr["emp_name"].ToString()
                        });
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> fillDivBatchClass(string grpID, string year)
    {

        string qry = " select distinct NULLIF(Division, '') as [Div] from dbo.m_std_studentacademic_tbl where  ayid='" + year + "' and group_id='" + grpID + "' and del_flag=0  union all  select distinct NULLIF(Batch_id, '') from dbo.m_std_studentacademic_tbl where  ayid='" + year + "' and group_id='" + grpID + "' and del_flag=0";
        List<ListItem> listData = new List<ListItem>();
        DataSet ds = cls1.fillDataset(qry);
        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[0].Rows[i][0])))
            {
                listData.Add(new ListItem
                {
                    Value = ds.Tables[0].Rows[i][0].ToString(),
                    Text = ds.Tables[0].Rows[i][0].ToString()
                });
            }
        }
        return listData;
    }

    public bool saveAccessClass(accessClass accessclass)
    {
        bool retVal = false;
        //string ins = "insert into dbo.web_tp_access values('" + accessclass.empid + "','" + accessclass.ayid + "','" + accessclass.subcrs + "','" + accessclass.divBatch + "','" + accessclass.subid + "','" + accessclass.semid + "',null,null,getdate(),0,null)";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("webtp_sp_save_access", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@empid", SqlDbType.VarChar).Value = accessclass.empid;
                cmd.Parameters.Add("@ayid", SqlDbType.VarChar).Value = accessclass.ayid;
                cmd.Parameters.Add("@groupid", SqlDbType.VarChar).Value = accessclass.groupid;
                cmd.Parameters.Add("@divBatch", SqlDbType.VarChar).Value = accessclass.divBatch;
                cmd.Parameters.Add("@subid", SqlDbType.VarChar).Value = accessclass.subid;
                cmd.Parameters.Add("@semid", SqlDbType.VarChar).Value = accessclass.semid;
                cmd.Parameters.Add("@userid", SqlDbType.VarChar).Value = Convert.ToString(HttpContext.Current.Session["emp_id"]);
                cmd.Parameters.Add("@dmlType", SqlDbType.VarChar).Value = accessclass.dmlType;

                cmd.Connection = con;
                con.Open();
                string message = Convert.ToString(cmd.ExecuteScalar());
                con.Close();

                if (message == "exists" || message == "saved" || message == "updated" || message == "deleted")
                {
                    retVal = true;
                }
                else //error
                { }
            }
        }
        return retVal;
    }

    public List<ListItem> getDataClass(string empid, string ayid, string semid, string groupid)
    {
        string qry = " select div_batch_id,sub_id from dbo.web_tp_access where emp_id='" + empid + "' and ayid='" + ayid + "' and sem_id='" + semid + "' and group_id='" + groupid + "'  and del_flag=0";
        List<ListItem> listData = new List<ListItem>();

        DataSet ds = cls1.fillDataset(qry);
        if (ds.Tables[0].Rows.Count > 0)
        {
            // string[] div = ds.Tables[0].Rows[0]["div_batch_id"].ToString().Split(',');
            // string[] subj = ds.Tables[0].Rows[0]["sub_id"].ToString().Split(',');
            if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[0].Rows[0]["div_batch_id"])))
            {
                listData.Add(new ListItem
                {
                    Value = ds.Tables[0].Rows[0]["div_batch_id"].ToString(),
                    Text = "DivBatch"
                });
            }
            if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[0].Rows[0]["sub_id"])))
            {
                listData.Add(new ListItem
                {
                    Value = ds.Tables[0].Rows[0]["sub_id"].ToString(),
                    Text = "Subject"
                });
            }
        }
        return listData;
    }

    public List<ListItem> fillDivBatchClass(string empid, string groupid, string semid, string year)
    {
        string qry = "select * from dbo.BreakStringIntoRows(convert(varchar(max),(select div_batch_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + groupid + "' and sem_id='" + semid + "' and ayid='" + year + "' and del_flag=0)))";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr[0].ToString(),
                                Text = sdr[0].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> fillSubjectClass(string empid, string groupid, string semid, string year)
    {
        string qry = "select subject_id,subject_name,subject_code from dbo.cre_subject where subject_id in (select * from dbo.BreakStringIntoRows(convert(varchar(max),(select sub_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + groupid + "' and sem_id='" + semid + "' and ayid='" + year + "' and del_flag=0))))";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["subject_id"].ToString(),
                                Text = sdr["subject_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> getSemClass(string empid, string groupid, string year)
    {
        string qry = "select sem_id from dbo.web_tp_access where emp_id='" + empid + "' and ayid='" + year + "' and group_id='" + groupid + "' and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["sem_id"].ToString(),
                                Text = sdr["sem_id"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public LogDetailClass[] getExistAttendanceClass(string grpid, string divBatch, string ayid, string empid, string semid, string logdttime)
    {
        string qry = "select log_id,l.emp_id,NAME +' '+FATHER+' '+SURNAME  emp_name,sub_id,(select subject_name from dbo.cre_subject where subject_id=l.sub_id) as [subjName],div_batch_id,log_type,l.group_id,(select Group_title from dbo.m_crs_subjectgroup_tbl where Group_id=l.group_id) as [GrpName],l.sem_id,l.ayid,remark, convert(varchar(20), start_time, 0) start_time,CONVERT(varchar(15),CAST(convert(varchar(8), end_time, 108) AS TIME),100) end_time from dbo.web_tp_log l inner join dbo.web_tp_login lo on l.emp_id=lo.emp_id inner join EmployeePersonal e on l.emp_id=e.emp_id where l.del_flag=0 "
     + " and  ('" + logdttime + "' between start_time and end_time) and l.div_batch_id='" + divBatch + "' and l.group_id='" + grpid + "' and l.sem_id='" + semid + "' and l.ayid='" + ayid + "' ";
        List<LogDetailClass> details = new List<LogDetailClass>();
        DataSet dss = cls1.fillDataset(qry);
        if (dss.Tables.Count > 0)
        {
            if (dss.Tables[0].Rows.Count != 0)
            {
                foreach (DataRow dtrow in dss.Tables[0].Rows)
                {
                    LogDetailClass log = new LogDetailClass();
                    log.logid = dtrow["log_id"].ToString();
                    log.empid = dtrow["emp_id"].ToString();
                    log.empname = dtrow["emp_name"].ToString();
                    log.subid = dtrow["sub_id"].ToString();
                    log.divBatchid = dtrow["div_batch_id"].ToString();
                    log.logtype = dtrow["log_type"].ToString();
                    log.grpid = dtrow["group_id"].ToString();
                    log.semid = dtrow["sem_id"].ToString();
                    log.ayid = dtrow["ayid"].ToString();
                    log.remark = dtrow["remark"].ToString();
                    log.strtime = dtrow["start_time"].ToString();
                    log.endtime = dtrow["end_time"].ToString();
                    log.grpname = Convert.ToString(dtrow["GrpName"]);
                    log.subname = Convert.ToString(dtrow["subjName"]);
                    details.Add(log);

                }

                return details.ToArray();
            }
            else
            {
                return details.ToArray();

            }
        }
        else
        {
            return details.ToArray();

        }

    }

    public studentDetailClass[] changeDivBatchClass(string grpid, string divBatch, string ayid, string empid, string semid, string divbatchid, string subid, string date, string logdttime)
    {
        List<studentDetailClass> details1 = new List<studentDetailClass>();

        //karishma
        string qry = "select * from web_tp_log where ('" + logdttime + "' between start_time and end_time) and div_batch_id='" + divBatch + "' and group_id='" + grpid + "' and sem_id='" + semid + "' and ayid='" + ayid + "' and del_flag=0";

        DataSet dss = cls1.fillDataset(qry);
        if (dss.Tables.Count > 0)
        {
            if (dss.Tables[0].Rows.Count == 0)
            {
                DateTime dateLog = Convert.ToDateTime(date);
                qry = "select a.stud_id,a.Roll_no,coalesce(p.stud_L_Name,'') +' '+coalesce( p.stud_F_Name,'') + ' '+coalesce( p.stud_M_Name,'') as [Name],Division,Batch_id from dbo.m_std_studentacademic_tbl a, dbo.m_std_personaldetails_tbl p where a.stud_id=p.stud_id and ayid='" + ayid + "' and group_id='" + grpid + "' and (Division='" + divBatch + "' or Batch_id='" + divBatch + "') and a.del_flag=0 order by LEFT(a.Roll_no ,PATINDEX('%[0-9]%',a.Roll_no )-1), CONVERT(INT,SUBSTRING(a.Roll_no ,PATINDEX('%[0-9]%',a.Roll_no ),LEN(a.Roll_no ))),Name; select log_type from dbo.web_tp_log where emp_id='" + empid + "' and group_id='" + grpid + "' and sem_id='" + semid + "' and ayid='" + ayid + "' and div_batch_id='" + divbatchid + "' and sub_id='" + subid + "' and CAST(start_time AS DATE) = CAST('" + dateLog + "' AS DATE) and del_flag=0";

                string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
                DataSet ds = new DataSet();
                List<studentDetailClass> details = new List<studentDetailClass>();
                using (SqlConnection con = new SqlConnection(constr))
                {
                    using (SqlCommand cmd = new SqlCommand(qry))
                    {
                        List<ListItem> listData = new List<ListItem>();
                        cmd.CommandType = CommandType.Text;
                        cmd.Connection = con;
                        con.Open();
                        SqlDataAdapter da = new SqlDataAdapter(cmd);
                        da.Fill(ds);
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            studentDetailClass stud = new studentDetailClass();
                            stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                            details.Add(stud);
                        }

                        foreach (DataRow dtrow in ds.Tables[0].Rows)
                        {
                            studentDetailClass stud = new studentDetailClass();
                            stud.rollno = dtrow["Roll_no"].ToString();
                            stud.studid = dtrow["stud_id"].ToString();
                            stud.name = dtrow["Name"].ToString();
                            stud.div = dtrow["Division"].ToString();
                            stud.batch = dtrow["Batch_id"].ToString();
                            details.Add(stud);
                        }
                        con.Close();
                        return details.ToArray();
                    }
                }
            }
            else
            {
                return details1.ToArray();

            }
        }
        else
        {
            return details1.ToArray();

        }
    }

    public bool saveLogClass(logClass logclass)
    {
        bool retVal = false;
        //string ins = "insert into dbo.web_tp_access values('" + accessclass.empid + "','" + accessclass.ayid + "','" + accessclass.subcrs + "','" + accessclass.divBatch + "','" + accessclass.subid + "','" + accessclass.semid + "',null,null,getdate(),0,null)";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("webtp_sp_save_logAttendence", con))
            {
                DateTime dateStr = Convert.ToDateTime(logclass.strTime), dateEnd = Convert.ToDateTime(logclass.endTime);

                cmd.CommandType = CommandType.StoredProcedure;

                if (logclass.logType == "Log")
                {
                    cmd.Parameters.Add("@empid", SqlDbType.VarChar).Value = logclass.empid;
                    cmd.Parameters.Add("@ayid", SqlDbType.VarChar).Value = logclass.ayid;
                    cmd.Parameters.Add("@logType", SqlDbType.VarChar).Value = logclass.logType;
                    cmd.Parameters.Add("@strTime", SqlDbType.DateTime).Value = dateStr;
                    cmd.Parameters.Add("@endTime", SqlDbType.DateTime).Value = dateEnd;
                    cmd.Parameters.Add("@empRemark", SqlDbType.VarChar).Value = logclass.remarkEmp;
                    cmd.Parameters.Add("@semid", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@subid", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@divBatch", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@groupid", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@logidParam", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@dmlType", SqlDbType.VarChar).Value = logclass.dmlType;
                    //cmd.Parameters.Add("@studArray", SqlDbType.VarChar).Value = logclass.studarray;
                }
                else
                {
                    logCollection logColl = new logCollection();

                    for (int i = 0; i < logclass.studarray.Count(); i++)
                    {
                        logColl.Add(new studArrayClass { isPresent = logclass.studarray[i].isPresent, studid = logclass.studarray[i].studid, remark = logclass.studarray[i].remark });
                    }

                    cmd.Parameters.Add("@empid", SqlDbType.VarChar).Value = logclass.empid;
                    cmd.Parameters.Add("@ayid", SqlDbType.VarChar).Value = logclass.ayid;
                    cmd.Parameters.Add("@logType", SqlDbType.VarChar).Value = logclass.logType;
                    cmd.Parameters.Add("@strTime", SqlDbType.DateTime).Value = dateStr;
                    cmd.Parameters.Add("@endTime", SqlDbType.DateTime).Value = dateEnd;
                    cmd.Parameters.Add("@empRemark", SqlDbType.VarChar).Value = logclass.remarkEmp;
                    cmd.Parameters.Add("@semid", SqlDbType.VarChar).Value = logclass.semid;
                    cmd.Parameters.Add("@subid", SqlDbType.VarChar).Value = logclass.subid;
                    cmd.Parameters.Add("@divBatch", SqlDbType.VarChar).Value = logclass.divBatch;
                    cmd.Parameters.Add("@groupid", SqlDbType.VarChar).Value = logclass.groupid;
                    cmd.Parameters.Add("@dmlType", SqlDbType.VarChar).Value = logclass.dmlType;
                    cmd.Parameters.Add("@logidParam", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@studArray", SqlDbType.Structured).Value = logColl;
                }

                cmd.Connection = con;
                con.Open();
                string message = Convert.ToString(cmd.ExecuteScalar());
                con.Close();

                if (message == "exists" || message == "saved")
                {
                    retVal = true;
                }
                else //error
                { }
            }
        }
        return retVal;
    }

    public LogDetailClass[] checkLogClass(string logDate, string empid)
    {
        // string qry = "select log_id,emp_id,sub_id,div_batch_id,log_type,group_id,sem_id,ayid,remark,start_time,end_time from dbo.web_tp_log where emp_id='" + empid + "' and ('" + logDate + "' between start_time and end_time) and del_flag=0";
        string qry = "select log_id,emp_id,sub_id,div_batch_id,log_type,group_id,sem_id,ayid,remark,start_time,end_time from dbo.web_tp_log where emp_id='" + empid + "' and ('" + logDate + "' between start_time and dateadd(minute,-1,end_time)) and del_flag=0";

        //bool hasData = false;
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<LogDetailClass> details = new List<LogDetailClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                //List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    LogDetailClass log = new LogDetailClass();
                    log.logid = dtrow["log_id"].ToString();
                    log.empid = dtrow["emp_id"].ToString();
                    log.subid = dtrow["sub_id"].ToString();
                    log.divBatchid = dtrow["div_batch_id"].ToString();
                    log.logtype = dtrow["log_type"].ToString();
                    log.grpid = dtrow["group_id"].ToString();
                    log.semid = dtrow["sem_id"].ToString();
                    log.ayid = dtrow["ayid"].ToString();
                    log.remark = dtrow["remark"].ToString();
                    log.strtime = dtrow["start_time"].ToString();
                    log.endtime = dtrow["end_time"].ToString();
                    details.Add(log);
                }
                con.Close();
                return details.ToArray();
            }
        }
    }

    public LogDetailClass[] getEditDataClass(string logDate, string empid)
    {
        string qry = "select log_id,l.emp_id,NAME +' '+FATHER+' '+SURNAME  emp_name,sub_id,(select subject_name from dbo.cre_subject where subject_id=l.sub_id) as [subjName],div_batch_id,log_type,l.group_id,(select Group_title from dbo.m_crs_subjectgroup_tbl where Group_id=l.group_id) as [GrpName],l.sem_id,l.ayid,remark, convert(varchar(20), start_time, 0) start_time,CONVERT(varchar(15),CAST(convert(varchar(8), end_time, 108) AS TIME),100) end_time from dbo.web_tp_log l inner join dbo.web_tp_login lo on l.emp_id=lo.emp_id inner join EmployeePersonal e on l.emp_id=e.emp_id where l.del_flag=0  and l.emp_id='" + empid + "' and cast(start_time as date) = cast('" + logDate + "' as date) order by start_time";
        //string qry = "select log_id,l.emp_id,lo.emp_name,sub_id,subject_name,div_batch_id,log_type,l.group_id,g.Group_title,l.sem_id,l.ayid,remark,start_time,end_time "+
        //    "from dbo.web_tp_log l,dbo.cre_subject s, dbo.m_crs_subjectgroup_tbl g, dbo.web_tp_login lo "+
        //    "where l.sub_id=s.subject_id and l.group_id=g.Group_id and lo.emp_id=l.emp_id and l.del_flag=0 and l.emp_id='" + empid + "' and cast(start_time as date) = cast('" + logDate + "' as date) order by start_time";
        //bool hasData = false;
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<LogDetailClass> details = new List<LogDetailClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                //List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    LogDetailClass log = new LogDetailClass();
                    log.logid = dtrow["log_id"].ToString();
                    log.empid = dtrow["emp_id"].ToString();
                    log.empname = dtrow["emp_name"].ToString();
                    log.subid = dtrow["sub_id"].ToString();
                    log.divBatchid = dtrow["div_batch_id"].ToString();
                    log.logtype = dtrow["log_type"].ToString();
                    log.grpid = dtrow["group_id"].ToString();
                    log.semid = dtrow["sem_id"].ToString();
                    log.ayid = dtrow["ayid"].ToString();
                    log.remark = dtrow["remark"].ToString();
                    log.strtime = dtrow["start_time"].ToString();
                    log.endtime = dtrow["end_time"].ToString();
                    log.grpname = Convert.ToString(dtrow["GrpName"]);
                    log.subname = Convert.ToString(dtrow["subjName"]);
                    details.Add(log);
                }
                con.Close();
                return details.ToArray();
            }
        }
    }

    public LogDetailClass[] getEditLogClass(string ayid, string empid, string logid, string logtype, string grpid, string divbatchid)
    {
        string qry = "";
        if (logtype == "Log")
        {
            // qry += "select log_id,l.emp_id,lo.emp_name,sub_id,div_batch_id,log_type,l.group_id,l.sem_id,l.ayid,remark,start_time,end_time from dbo.web_tp_log l,dbo.web_tp_login lo where l.emp_id=lo.emp_id and l.emp_id='" + empid + "' and log_id='" + logid + "' and ayid='" + ayid + "' and l.del_flag=0 ";
            qry += "select log_id,l.emp_id,l.emp_id,NAME +' '+FATHER+' '+SURNAME emp_name,sub_id,div_batch_id,log_type,l.group_id,l.sem_id,l.ayid,remark,start_time,end_time,convert(varchar(20), start_time, 0) +' To '+CONVERT(varchar(15),CAST(convert(varchar(8), end_time, 108) AS TIME),100) endtime1 from dbo.web_tp_log l inner join dbo.web_tp_login lo on l.emp_id=lo.emp_id inner join EmployeePersonal e on l.emp_id=e.emp_id where l.emp_id='" + empid + "' and log_id='" + logid + "' and ayid='" + ayid + "' and l.del_flag=0 ";

        }
        else if (logtype == "Attendance")
        {
            qry += "select log_id,l.emp_id,NAME +' '+FATHER+' '+SURNAME emp_name ,sub_id,subject_name,div_batch_id,log_type,l.group_id,g.Group_title,l.sem_id,l.ayid,remark,start_time,end_time,convert(varchar(20), start_time, 0) +' To '+CONVERT(varchar(15),CAST(convert(varchar(8), end_time, 108) AS TIME),100) endtime1 from dbo.web_tp_log l inner join dbo.cre_subject s on l.sub_id=s.subject_id and l.sub_id=s.subject_id inner join dbo.m_crs_subjectgroup_tbl g on  l.group_id=g.Group_id ";
            qry += "inner join dbo.web_tp_login lo on lo.emp_id=l.emp_id inner join EmployeePersonal e on l.emp_id=e.emp_id where l.del_flag=0 and l.group_id='" + grpid + "' and div_batch_id='" + divbatchid + "' and l.emp_id='" + empid + "' and l.ayid='" + ayid + "' and l.log_id='" + logid + "';";


            //qry += "select at.stud_id,ac.Roll_no,stud_L_Name+' '+stud_F_Name+' '+stud_M_Name as [studName],is_present,remark from dbo.web_tp_stud_attendence at,dbo.m_std_studentacademic_tbl ac,dbo.m_std_personaldetails_tbl p ";
            //qry += "where at.stud_id=ac.stud_id and at.stud_id=p.stud_id and at.ayid=ac.ayid and emp_id='" + empid + "' and ac.group_id='" + grpid + "' and (ac.Division='" + divbatchid + "' or ac.Batch_id='" + divbatchid + "') and log_id='" + logid + "' and at.ayid='" + ayid + "' and at.del_flag=0 ";
            //qry += "order by LEFT(ac.Roll_no ,PATINDEX('%[0-9]%',ac.Roll_no )-1), CONVERT(INT,SUBSTRING(ac.Roll_no ,PATINDEX('%[0-9]%',ac.Roll_no ),LEN(ac.Roll_no ))),studName";



            qry += "  select ac.stud_id,ac.Roll_no,stud_L_Name+' '+stud_F_Name+' '+stud_M_Name as [studName],case when is_present IS null then 0 else is_present end is_present,case when at.remark is null then '' else at.remark end remark from (select ac.stud_id,Division,Batch_id,Roll_no,ayid,stud_L_Name,stud_F_Name,stud_M_Name from  dbo.m_std_studentacademic_tbl ac "
                + "  inner join dbo.m_std_personaldetails_tbl p on ac.stud_id=p.stud_id where  ac.group_id='" + grpid + "'  and ayid='" + ayid + "' and (ac.Division='" + divbatchid + "' or ac.Batch_id='" + divbatchid + "'))  ac left join dbo.web_tp_stud_attendence at on  ac.stud_id=at.stud_id and at.ayid=ac.ayid and at.emp_id='" + empid + "' and at.log_id='" + logid + "' and at.ayid='" + ayid + "' and at.del_flag=0 order by LEFT(ac.Roll_no ,PATINDEX('%[0-9]%',ac.Roll_no )-1), CONVERT(INT,SUBSTRING(ac.Roll_no ,"
                + " PATINDEX('%[0-9]%',ac.Roll_no ),LEN(ac.Roll_no ))),studName";
        }

        //string qry = "select log_id,l.emp_id,lo.emp_name,sub_id,subject_name,div_batch_id,log_type,l.group_id,g.Group_title,l.sem_id,l.ayid,remark,start_time,end_time "+
        //    "from dbo.web_tp_log l,dbo.cre_subject s, dbo.m_crs_subjectgroup_tbl g, dbo.web_tp_login lo "+
        //    "where l.sub_id=s.subject_id and l.group_id=g.Group_id and lo.emp_id=l.emp_id and l.del_flag=0 and l.emp_id='" + empid + "' and cast(start_time as date) = cast('" + logDate + "' as date) order by start_time";
        //bool hasData = false;
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<LogDetailClass> details = new List<LogDetailClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                //List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                if (logtype == "Log")
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        LogDetailClass log = new LogDetailClass();
                        log.logid = ds.Tables[0].Rows[0]["log_id"].ToString();
                        log.empid = ds.Tables[0].Rows[0]["emp_id"].ToString();
                        log.empname = ds.Tables[0].Rows[0]["emp_name"].ToString();
                        log.subid = ds.Tables[0].Rows[0]["sub_id"].ToString();
                        log.divBatchid = ds.Tables[0].Rows[0]["div_batch_id"].ToString();
                        log.logtype = ds.Tables[0].Rows[0]["log_type"].ToString();
                        log.grpid = ds.Tables[0].Rows[0]["group_id"].ToString();
                        log.semid = ds.Tables[0].Rows[0]["sem_id"].ToString();
                        log.ayid = ds.Tables[0].Rows[0]["ayid"].ToString();
                        log.remark = ds.Tables[0].Rows[0]["remark"].ToString();
                        log.strtime = ds.Tables[0].Rows[0]["start_time"].ToString();
                        log.endtime = ds.Tables[0].Rows[0]["end_time"].ToString();
                        log.endtime1 = ds.Tables[0].Rows[0]["endtime1"].ToString();

                        details.Add(log);
                    }
                }
                else if (logtype == "Attendance")
                {
                    LogDetailClass log = new LogDetailClass();
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        log.logid = ds.Tables[0].Rows[0]["log_id"].ToString();
                        log.empid = ds.Tables[0].Rows[0]["emp_id"].ToString();
                        log.empname = ds.Tables[0].Rows[0]["emp_name"].ToString();
                        log.subid = ds.Tables[0].Rows[0]["sub_id"].ToString();
                        log.subname = ds.Tables[0].Rows[0]["subject_name"].ToString();
                        log.divBatchid = ds.Tables[0].Rows[0]["div_batch_id"].ToString();
                        log.logtype = ds.Tables[0].Rows[0]["log_type"].ToString();
                        log.grpid = ds.Tables[0].Rows[0]["group_id"].ToString();
                        log.grpname = ds.Tables[0].Rows[0]["Group_title"].ToString();
                        log.semid = ds.Tables[0].Rows[0]["sem_id"].ToString();
                        log.ayid = ds.Tables[0].Rows[0]["ayid"].ToString();
                        log.remark = ds.Tables[0].Rows[0]["remark"].ToString();
                        log.strtime = ds.Tables[0].Rows[0]["start_time"].ToString();
                        log.endtime = ds.Tables[0].Rows[0]["end_time"].ToString();
                        log.endtime1 = ds.Tables[0].Rows[0]["endtime1"].ToString();

                    }
                    List<studArrayClassEdit> studDetail = new List<studArrayClassEdit>();
                    foreach (DataRow dtrow in ds.Tables[1].Rows)
                    {
                        studArrayClassEdit studAttend = new studArrayClassEdit();
                        studAttend.studid = dtrow["stud_id"].ToString();
                        studAttend.isPresent = Convert.ToBoolean(dtrow["is_present"]);
                        studAttend.remark = dtrow["remark"].ToString();
                        studAttend.studName = dtrow["studName"].ToString();
                        studAttend.rollno = dtrow["Roll_no"].ToString();
                        studDetail.Add(studAttend);
                    }
                    log.studarray = studDetail.ToArray();
                    details.Add(log);
                }
                con.Close();
                return details.ToArray();
            }
        }
    }

    public bool updateLogClass(logClass logclass)
    {
        bool retVal = false;
        //string ins = "insert into dbo.web_tp_access values('" + accessclass.empid + "','" + accessclass.ayid + "','" + accessclass.subcrs + "','" + accessclass.divBatch + "','" + accessclass.subid + "','" + accessclass.semid + "',null,null,getdate(),0,null)";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("webtp_sp_save_logAttendence", con))
            {
                DateTime dateStr = Convert.ToDateTime(logclass.strTime), dateEnd = Convert.ToDateTime(logclass.endTime);

                cmd.CommandType = CommandType.StoredProcedure;

                if (logclass.logType == "Log")
                {
                    cmd.Parameters.Add("@empid", SqlDbType.VarChar).Value = logclass.empid;
                    cmd.Parameters.Add("@ayid", SqlDbType.VarChar).Value = logclass.ayid;
                    cmd.Parameters.Add("@logType", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@strTime", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@endTime", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@empRemark", SqlDbType.VarChar).Value = logclass.remarkEmp;
                    cmd.Parameters.Add("@semid", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@subid", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@divBatch", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@groupid", SqlDbType.VarChar).Value = "";
                    cmd.Parameters.Add("@logidParam", SqlDbType.VarChar).Value = logclass.logidParam;
                    cmd.Parameters.Add("@dmlType", SqlDbType.VarChar).Value = logclass.dmlType;
                    //cmd.Parameters.Add("@studArray", SqlDbType.VarChar).Value = logclass.studarray;
                }
                else if (logclass.logType == "Attendance")
                {

                    if (logclass.dmlType == "updateAttendance" || logclass.dmlType == "mergeAttendance")
                    {
                        logCollection logColl = new logCollection();

                        for (int i = 0; i < logclass.studarray.Count(); i++)
                        {
                            logColl.Add(new studArrayClass { isPresent = logclass.studarray[i].isPresent, studid = logclass.studarray[i].studid, remark = logclass.studarray[i].remark });
                        }
                        cmd.Parameters.Add("@studArray", SqlDbType.Structured).Value = logColl;
                    }
                    if (logclass.dmlType == "mergeAttendance")
                    {
                        cmd.Parameters.Add("@semid", SqlDbType.VarChar).Value = logclass.semid;
                        cmd.Parameters.Add("@subid", SqlDbType.VarChar).Value = logclass.subid;
                    }
                    else
                    {
                        cmd.Parameters.Add("@semid", SqlDbType.VarChar).Value = "";
                        cmd.Parameters.Add("@subid", SqlDbType.VarChar).Value = "";
                    }

                    cmd.Parameters.Add("@divBatch", SqlDbType.VarChar).Value = logclass.divBatch;
                    cmd.Parameters.Add("@groupid", SqlDbType.VarChar).Value = logclass.groupid;
                    cmd.Parameters.Add("@empid", SqlDbType.VarChar).Value = logclass.empid;
                    cmd.Parameters.Add("@ayid", SqlDbType.VarChar).Value = logclass.ayid;
                    cmd.Parameters.Add("@logType", SqlDbType.VarChar).Value = logclass.logType;
                    cmd.Parameters.Add("@strTime", SqlDbType.DateTime).Value = DateTime.Now; ;
                    cmd.Parameters.Add("@endTime", SqlDbType.DateTime).Value = DateTime.Now; ;
                    cmd.Parameters.Add("@empRemark", SqlDbType.VarChar).Value = logclass.remarkEmp;
                    cmd.Parameters.Add("@dmlType", SqlDbType.VarChar).Value = logclass.dmlType;
                    cmd.Parameters.Add("@logidParam", SqlDbType.VarChar).Value = logclass.logidParam;
                }

                cmd.Connection = con;
                con.Open();
                string message = Convert.ToString(cmd.ExecuteScalar());
                con.Close();

                if (message == "updated" || message == "deleted" || message == "merged")
                {
                    retVal = true;
                }
                else //error
                { }
            }
            return retVal;
        }

    }

    public bool checkMergeLogClass(string grpid, string divBatch, string ayid, string empid, string semid, string logid)
    {
        //DateTime dateLog = Convert.ToDateTime(date);
        string qry = "select start_time,end_time from dbo.web_tp_log where emp_id='" + empid + "' and group_id='" + grpid + "' and sem_id='" + semid + "' and ayid='" + ayid + "' and div_batch_id='" + divBatch + "'  and log_id='" + logid + "' and del_flag=0";
        bool val = true;
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<logClass> details = new List<logClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                //List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //foreach (DataRow dtrow in ds.Tables[0].Rows)
                //{
                //    logClass log = new logClass();
                //    log.strTime = dtrow["start_time"].ToString();
                //    log.endTime = dtrow["end_time"].ToString();
                //    details.Add(log);
                //}
                if (ds.Tables[0].Rows.Count > 0)
                {
                    val = false;
                }
                con.Close();
                return val;
            }
        }
    }

    public studentDetailClass[] changeDivBatchMergeClass(string grpid, string divBatch, string ayid)
    {
        //DateTime dateLog = Convert.ToDateTime(date);
        string qry = "select a.stud_id,a.Roll_no,p.stud_L_Name +' '+ p.stud_F_Name + ' '+ p.stud_M_Name as [Name],Division,Batch_id from dbo.m_std_studentacademic_tbl a, dbo.m_std_personaldetails_tbl p where a.stud_id=p.stud_id and ayid='" + ayid + "' and group_id='" + grpid + "' and (Division='" + divBatch + "' or Batch_id='" + divBatch + "') and a.del_flag=0 order by LEFT(a.Roll_no ,PATINDEX('%[0-9]%',a.Roll_no )-1), CONVERT(INT,SUBSTRING(a.Roll_no ,PATINDEX('%[0-9]%',a.Roll_no ),LEN(a.Roll_no ))),Name;";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<studentDetailClass> details = new List<studentDetailClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    studentDetailClass stud = new studentDetailClass();
                    stud.rollno = dtrow["Roll_no"].ToString();
                    stud.studid = dtrow["stud_id"].ToString();
                    stud.name = dtrow["Name"].ToString();
                    stud.div = dtrow["Division"].ToString();
                    stud.batch = dtrow["Batch_id"].ToString();
                    details.Add(stud);
                }
                con.Close();
                return details.ToArray();
            }
        }
    }


    //shweta========================================
    public List<ListItem> fillSubject(string empid, string subcourseID, string role, string sem, string ayid)
    {
        string qry = "";
        if (role == "Hod" || role == "principal")
        {
            qry = "select subject_id,subject_name,subject_code from dbo.cre_subject where group_id='" + subcourseID + "' and sem_id='" + sem + "'";
        }
        else
        {
            qry = "select subject_id,subject_name,subject_code from dbo.cre_subject where subject_id in (select * from dbo.BreakStringIntoRows(convert(varchar(max),(select sub_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + subcourseID + "' and sem_id='" + sem + "' and ayid='" + ayid + "' and del_flag=0))))";
        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["subject_id"].ToString(),
                                Text = sdr["subject_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }


    public List<ListItem> fillDiv(string empid, string subcourseID, string role, string ayid)
    {
        List<ListItem> listData = new List<ListItem>();
        //string qry1 = "select role_name from web_tp_roletype where role_id in(select role_id from web_tp_login where emp_id='"+empid +"')";

        //DataSet ds = cls1.fillDataset(qry1);
        //if (ds.Tables.Count > 0)
        //{
        //    if (ds.Tables[0].Rows.Count > 0)
        //    {
        //        string role = ds.Tables[0].Rows[0]["role_name"].ToString();
        //        if (role.Contains("Hod") || role.Contains("principal"))
        //        {
        //            qry1 = "select distinct div_batch_id  from web_tp_access where group_id ='" + subcourseID + "'";

        //        }
        //        else
        // {
        string qry1 = "";
        if (role == "Hod" || role == "principal")
        {

            qry1 = "select distinct column1 from dbo.BreakStringIntoRows(convert(varchar(max),(SELECT (STUFF((SELECT ', ' + div FROM (select distinct coalesce (Division,'')+','+coalesce(Batch_id,'')as 'div'  from m_std_studentacademic_tbl where (Division is not null OR Batch_id   is not null) and group_id in (select distinct column1 from dbo.BreakStringIntoRows(convert(varchar(max),(select group_ids from dbo.web_tp_login where emp_id='" + empid + "' and del_flag=0)))) and coalesce (Division,'')+','+coalesce(Batch_id,'') <>',' and ayid ='" + ayid + "'"  //(select ayid from m_academic where IsCurrent=1)
                + ") a  FOR XML PATH('')        ), 1, 2, '')    ) AS StringValue)))a";
            //     qry1 = "select distinct SUBSTRING ( coalesce (Division,'')+','+coalesce(Batch_id,''),1,(len(coalesce (Division,'')+','+coalesce(Batch_id,''))-1)) 'div'   from m_std_studentacademic_tbl "
            //         +"where (Division is not null OR Batch_id   is not null) and group_id in (select distinct column1 from dbo.BreakStringIntoRows(convert(varchar(max),(select group_ids from dbo.web_tp_login where emp_id='"+empid +"'and del_flag=0)))) "
            //         +"and coalesce (Division,'')+','+coalesce(Batch_id,'') <>',' and ayid =(select ayid from m_academic where IsCurrent=1)";
            //
        }
        else
        {
            qry1 = "select * from dbo.BreakStringIntoRows(convert(varchar(max),(select distinct div_batch_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + subcourseID + "' and del_flag=0  and ayid ='" + ayid + "' )))"; //ayid=(select max(ayid) from m_academic)

        }
        //  string    qry1 = "select * from dbo.BreakStringIntoRows(convert(varchar,(select div_batch_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + subcourseID + "' and del_flag=0)))";

        //  }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry1))
            {

                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr[0].ToString(),
                                Text = sdr[0].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }

        //    }
        //}

        // return listData;

    }

    public List<ListItem> fillSem(string empid, string subcourseID, string role)
    {

        List<ListItem> listData = new List<ListItem>();
        String[] arr = new String[2];

        if (subcourseID.Contains("F.Y") || subcourseID.Contains("FY"))
        {
            //arr[0] = "--select--";
            arr[0] = "Sem-1";
            arr[1] = "Sem-2";


        }
        else if (subcourseID.Contains("S.Y") || subcourseID.Contains("SY"))
        {
            // arr[0] = "--select--";
            arr[0] = "Sem-3";
            arr[1] = "Sem-4";
        }
        else if (subcourseID.Contains("T.Y") || subcourseID.Contains("TY"))
        {
            // arr[0] = "--select--";
            arr[0] = "Sem-5";
            arr[1] = "Sem-6";
        }
        else
        {
            //arr[0] = "--select--";
            arr[0] = "";
            arr[1] = "";
        }

        for (int i = 0; arr.Length > 0; i++)
        {
            if (i >= (arr.Length))
            {
                break;

            }
            else
            {
                listData.Add(new ListItem
                {
                    Value = arr[i].ToString(),
                    Text = arr[i].ToString()
                });
            }
        }

        // List<ListItem> listData = new List<ListItem>();

        //string qry1 = "";
        //if (role == "Hod" || role == "principal")
        //{
        //    qry1 = "select * from  dbo.BreakStringIntoRows(convert(varchar(max),(select STUFF((    SELECT ',' + semester    FROM (select distinct s.semester  from m_crs_subcourse_tbl s inner join m_crs_subjectgroup_tbl g  on s.subcourse_id=g.Subcourse_id inner join (select column1 as 'group_id' from dbo.BreakStringIntoRows(convert(varchar(max),(select group_ids from web_tp_login where emp_id='"+empid+"'  and del_flag=0))))a"
        //        + " on a.group_id=g.Group_id and g.Group_id='"+subcourseID+"') a    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')))) b";
        //}
        //else
        //{
        //    qry1 = "select * from dbo.BreakStringIntoRows(convert(varchar,(select sem_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + subcourseID + "' and del_flag=0)))";

        //}
        ////  string    qry1 = "select * from dbo.BreakStringIntoRows(convert(varchar,(select div_batch_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + subcourseID + "' and del_flag=0)))";

        ////  }

        //string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        //using (SqlConnection con = new SqlConnection(constr))
        //{
        //    using (SqlCommand cmd = new SqlCommand(qry1))
        //    {

        //        cmd.CommandType = CommandType.Text;
        //        cmd.Connection = con;
        //        con.Open();
        //        using (SqlDataReader sdr = cmd.ExecuteReader())
        //        {
        //            while (sdr.Read())
        //            {
        //                if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
        //                {
        //                    listData.Add(new ListItem
        //                    {
        //                        Value = sdr[0].ToString(),
        //                        Text = sdr[0].ToString()
        //                    });
        //                }
        //            }
        //        }
        //        con.Close();
        //        return listData;
        //    }
        //}





        //    }
        //}

        return listData;

    }
    //blacklist report

    public string getreport(string grpid, string subjectid, string divbatch, string empid, string strttime, string endtime, string year, string subjectname, string sem, string role)
    {

        String daresult = null;


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();

        using (SqlConnection con = new SqlConnection(constr))
        {
            string qry = "";
            string qry3 = "";
            if (role == "Hod" || role == "principal")
            {
                qry3 = "select sub_id from dbo.web_tp_access where group_id='" + grpid + "' and sem_id='" + sem + "' and del_flag=0";
                //string qry1 = "select substring((select distinct (', '+ c.subject_name)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "' for xml path('')),2,200000) as subject union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "'for xml path('')),2,200000) as subject ";
            }
            else
            {
                qry3 = "select sub_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + grpid + "' and sem_id='" + sem + "' and del_flag=0";

            }
            string qry1 = "";
            if (role == "Hod" || role == "principal")
            {
                qry1 = "select substring((select distinct (', '+ c.subject_name)+'('+convert(varchar(10),COUNT(tp.start_time))+')'+'/'+tp.sub_id   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and  tp.group_id='" + grpid + "' and div_batch_id='" + divbatch + "' group by subject_name,sub_id order by 1 desc for xml path('')),2,200000) as subject"; //union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and tp.group_id='" + grpid + "' and div_batch_id='" + divbatch + "'  for xml path('')),2,200000) as subject ";
            }
            else
            {
                qry1 = "select substring((select distinct (', '+ c.subject_name)+'('+convert(varchar(10),COUNT(tp.start_time))+')'+'/'+tp.sub_id   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and  tp.group_id='" + grpid + "' and tp.emp_id='" + empid + "' and div_batch_id='" + divbatch + "' group by subject_name,sub_id order by 1 desc for xml path('')),2,200000) as subject";// union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and tp.group_id='" + grpid + "' and tp.emp_id='" + empid + "'  and div_batch_id='" + divbatch + "'  for xml path('')),2,200000) as subject ";
            }
            //string qry3 = "select sub_id from dbo.web_tp_access where (emp_id='" + empid + "' or emp_id in( select emp_id from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',','" + grpid + "' ,'contains')) ) and group_id='" + grpid + "' and del_flag=0";
            //string qry1 = "select substring((select distinct (', '+ c.subject_name)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "' and (emp_id='" + empid + "' or emp_id in (select emp_id from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',','" + grpid + "' ,'contains'))) for xml path('')),2,200000) as subject union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "' and (emp_id='" + empid + "' or emp_id in( select emp_id from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',','" + grpid + "' ,'contains')) )for xml path('')),2,200000) as subject ";

            SqlCommand cmd1 = new SqlCommand(qry1, con);
            cmd1.CommandType = CommandType.Text;
            SqlDataAdapter da1 = new SqlDataAdapter();
            da1.SelectCommand = cmd1;
            DataTable dt1 = new DataTable();
            da1.Fill(dt1);

            SqlCommand cmd3 = new SqlCommand(qry3, con);
            cmd1.CommandType = CommandType.Text;
            SqlDataAdapter da3 = new SqlDataAdapter();
            da3.SelectCommand = cmd3;
            DataTable dt3 = new DataTable();
            da3.Fill(dt3);

            string sub_id = "";
            string sub_name = "";
            string[] tokens = dt1.Rows[0]["subject"].ToString().Split(',');
            for (int i = 0; i < tokens.Length; i++)
            {
                if (sub_id.ToString() == "" && sub_name.ToString() == "")
                {
                    sub_id = tokens[i].ToString().Split('/').Last();
                    sub_name = tokens[i].ToString().Split('/')[0].Trim();
                }
                else
                {
                    sub_id = sub_id + ',' + tokens[i].ToString().Split('/').Last();
                    sub_name = sub_name + ',' + tokens[i].ToString().Split('/')[0].Trim();
                }
            }

            if (dt1.Rows.Count > 0)
            {

                if (subjectid == "" || subjectid == "0" || subjectid == "null")
                {
                    if (role == "Hod" || role == "principal")
                    {

                        qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , (case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id  and acd.ayid=tp.ayid  and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)   and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "' and att.ayid='" + year + "' and tp.del_flag=0   group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id ,att.is_present  )  x PIVOT(max([cnt]) FOR [att] IN (" + sub_id + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id  and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and acd.ayid=tp.ayid and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)   and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "' and att.ayid='" + year + "' and tp.del_flag=0  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + sub_id + ")) pvt ";
                    }
                    else
                    {
                        qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,(case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and acd.ayid=tp.ayid and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "' and att.ayid='" + year + "' and tp.del_flag=0   group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id,att.is_present )  x PIVOT(max([cnt]) FOR [att] IN (" + sub_id + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id  and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  and tp.sem_id='" + sem + "' and att.ayid='" + year + "' and tp.del_flag=0  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + sub_id + ")) pvt ";
                    }


                }
                else
                {

                    if (role == "Hod" || role == "principal")
                    {

                        qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,(case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and acd.ayid=tp.ayid and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)   and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "' and att.ayid='" + year + "' and tp.del_flag=0   group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id,att.is_present)  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and acd.ayid=tp.ayid and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "' and att.ayid='" + year + "' and tp.del_flag=0 group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";

                    }
                    else
                    {

                        //qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , (case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id ,att.is_present)  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "'  and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";
                        qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , (case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and acd.ayid=tp.ayid and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "'  and att.ayid='" + year + "' and tp.del_flag=0  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id ,att.is_present)  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and acd.ayid=tp.ayid and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "'  and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and tp.sem_id='" + sem + "' and  att.ayid='" + year + "' and tp.del_flag=0  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";
                    }



                }

                using (SqlCommand cmd = new SqlCommand(qry))
                {
                    List<String> listData = new List<String>();

                    cmd.CommandType = CommandType.Text;
                    SqlCommand cmd2 = new SqlCommand(qry, con);
                    cmd.CommandType = CommandType.Text;
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = cmd2;
                    DataSet dt2 = new DataSet();
                    da.Fill(dt2);
                    if (dt2.Tables[0].Rows.Count > 0)
                    {

                        DataSet dsexcel = new DataSet();

                        dt2.Tables[0].Columns.Add("subject");

                        dt2.Tables[0].Columns[0].SetOrdinal(0);

                        dt2.Tables[1].Columns.Add("subject");

                        dt2.Tables[0].Columns["subject"].SetOrdinal(0);

                        dt2.Tables[1].Columns["subject"].SetOrdinal(0);


                        if (dt2.Tables[1].Rows[0][4].ToString() == "")
                        {
                            dt2.Tables[1].Rows[0][4] = 0;
                        }

                        if (subjectid == "" || subjectid == "0" || subjectid == "null")
                        {

                            dt2.Tables[0].Rows[0]["subject"] = sub_name; //dt1.Rows[0]["subject"].ToString() + "(" + dt2.Tables[1].Rows[0][4].ToString() + ")";

                        }
                        else
                        {
                            dt2.Tables[0].Rows[0]["subject"] = subjectname; //+ "(" + dt2.Tables[1].Rows[0][4].ToString() + ")";

                        }

                        for (int k = 0; k < dt2.Tables[0].Rows.Count; k++)
                        {
                            for (int i = 4; i < dt2.Tables[0].Columns.Count; i++)
                            {

                                if (dt2.Tables[0].Rows[k][i].ToString() == "")
                                {
                                    dt2.Tables[0].Rows[k][i] = 0;
                                }
                                if (dt2.Tables[1].Rows[0][i].ToString() == "")
                                {
                                    dt2.Tables[1].Rows[0][i] = 0;
                                }
                                string s;
                                double t;


                                if (Convert.ToInt32(dt2.Tables[0].Rows[k][i]) == 0 || Convert.ToInt32(dt2.Tables[1].Rows[0][i]) == 0)
                                {
                                    t = 0;
                                }
                                else
                                {
                                    t = ((Convert.ToDouble(dt2.Tables[0].Rows[k][i].ToString().Trim()) / Convert.ToDouble((dt2.Tables[1].Rows[0][i].ToString().Trim()))));
                                    t = Math.Round(t * 100);
                                    // t = Convert.ToInt32(dt2.Tables[1].Rows[k][i].ToString());
                                }
                                s = (dt2.Tables[0].Rows[k][i].ToString()) + " / " + (dt2.Tables[1].Rows[0][i].ToString()) + " / " + t.ToString() + " % ";
                                dt2.Tables[0].Rows[k][i] = s;
                                //int.Parse(s).ToString()

                            }

                        }
                        DataTable uniqueCols = dt2.Tables[0].DefaultView.ToTable(true, dt2.Tables[0].Columns[4].ToString());

                        dt2.Tables[0].Columns.Add("Filter");
                        for (int i = 0; uniqueCols.Rows.Count > 0; i++)
                        {
                            if (i == uniqueCols.Rows.Count)
                            {
                                break;
                            }
                            dt2.Tables[0].Rows[i]["Filter"] = uniqueCols.Rows[i][dt2.Tables[0].Columns[4].ToString()].ToString();

                        }


                        daresult = DataSetToJSON(dt2);
                        return daresult;
                    }
                    else
                    {
                        return daresult;
                    }
                }
            }
            else
            {
                return daresult;
            }

        }
    }
    //public string getreport(string grpid, string subjectid, string divbatch, string empid, string strttime, string endtime, string year, string subjectname,string sem,string role)
    //{

    //    String daresult = null;


    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    DataSet ds = new DataSet();

    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        string qry="";
    //        string qry3 = "";
    //        if (role == "Hod" || role == "principal")
    //        {
    //            qry3 = "select sub_id from dbo.web_tp_access where group_id='" + grpid + "' and sem_id='" + sem + "' and del_flag=0";
    //            //string qry1 = "select substring((select distinct (', '+ c.subject_name)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "' for xml path('')),2,200000) as subject union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "'for xml path('')),2,200000) as subject ";
    //        }
    //        else
    //        {
    //            qry3 = "select sub_id from dbo.web_tp_access where emp_id='"+empid+"' and group_id='" + grpid + "' and sem_id='" + sem + "' and del_flag=0";

    //        }
    //        string qry1 = "select substring((select distinct (', '+ c.subject_name)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and  tp.group_id='" + grpid + "' and div_batch_id='" + divbatch + "' for xml path('')),2,200000) as subject union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and tp.group_id='"+grpid +"'  and div_batch_id='" + divbatch + "'for xml path('')),2,200000) as subject ";
    //       //string qry3 = "select sub_id from dbo.web_tp_access where (emp_id='" + empid + "' or emp_id in( select emp_id from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',','" + grpid + "' ,'contains')) ) and group_id='" + grpid + "' and del_flag=0";
    //       //string qry1 = "select substring((select distinct (', '+ c.subject_name)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "' and (emp_id='" + empid + "' or emp_id in (select emp_id from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',','" + grpid + "' ,'contains'))) for xml path('')),2,200000) as subject union select substring((select distinct (', '+ tp.sub_id)   from web_tp_log  as tp  ,cre_subject as c where  tp.sub_id=c.subject_id and cast(tp.start_time as date) between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE) and div_batch_id='" + divbatch + "' and (emp_id='" + empid + "' or emp_id in( select emp_id from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',','" + grpid + "' ,'contains')) )for xml path('')),2,200000) as subject ";

    //        SqlCommand cmd1 = new SqlCommand(qry1, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da1 = new SqlDataAdapter();
    //        da1.SelectCommand = cmd1;
    //        DataTable dt1 = new DataTable();
    //        da1.Fill(dt1);

    //        SqlCommand cmd3 = new SqlCommand(qry3, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da3 = new SqlDataAdapter();
    //        da3.SelectCommand = cmd3;
    //        DataTable dt3 = new DataTable();
    //        da3.Fill(dt3);

    //        if (dt1.Rows.Count > 1)
    //        {

    //            if (subjectid == "" || subjectid == "0" || subjectid == "null")
    //            {
    //                if (role == "Hod" || role == "principal")
    //                {

    //                   qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , (case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)   and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id ,att.is_present  )  x PIVOT(max([cnt]) FOR [att] IN (" + dt1.Rows[1]["subject"].ToString() + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id  and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)   and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + dt1.Rows[1]["subject"].ToString() + ")) pvt ";
    //                }
    //                else
    //                {
    //                  qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,(case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id,att.is_present )  x PIVOT(max([cnt]) FOR [att] IN (" + dt1.Rows[1]["subject"].ToString() + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id  and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + dt1.Rows[1]["subject"].ToString() + ")) pvt ";
    //                }


    //            }
    //            else
    //            {

    //                if (role == "Hod" || role == "principal")
    //                {

    //                    qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,(case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)   and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id,att.is_present)  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";

    //                }
    //                else
    //                {

    //                    //qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , (case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id ,att.is_present)  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "'  and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";
    //                    qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , (case WHEN att.is_present = '1' THEN CAST( COUNT(att.stud_id) as CHAR) else ''  END) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id ,att.is_present)  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id and tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "'  and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";
    //                }



    //            }

    //            using (SqlCommand cmd = new SqlCommand(qry))
    //            {
    //                List<String> listData = new List<String>();

    //                cmd.CommandType = CommandType.Text;
    //                SqlCommand cmd2 = new SqlCommand(qry, con);
    //                cmd.CommandType = CommandType.Text;
    //                SqlDataAdapter da = new SqlDataAdapter();
    //                da.SelectCommand = cmd2;
    //                DataSet dt2 = new DataSet();
    //                da.Fill(dt2);
    //                if (dt2.Tables[0].Rows.Count > 0)
    //                {

    //                    DataSet dsexcel = new DataSet();

    //                    dt2.Tables[0].Columns.Add("subject");

    //                    dt2.Tables[0].Columns[0].SetOrdinal(0);

    //                    dt2.Tables[1].Columns.Add("subject");

    //                    dt2.Tables[0].Columns["subject"].SetOrdinal(0);

    //                    dt2.Tables[1].Columns["subject"].SetOrdinal(0);

    //                    if (subjectid == "" || subjectid == "0" || subjectid == "null")
    //                    {
    //                        dt2.Tables[0].Rows[0]["subject"] = dt1.Rows[0]["subject"].ToString();
    //                    }
    //                    else
    //                    {
    //                        dt2.Tables[0].Rows[0]["subject"] = subjectname;

    //                    }


    //                    for (int k = 0; k < dt2.Tables[0].Rows.Count; k++)
    //                    {
    //                        for (int i = 4; i < dt2.Tables[0].Columns.Count; i++)
    //                        {

    //                            if (dt2.Tables[0].Rows[k][i].ToString() == "")
    //                            {
    //                                dt2.Tables[0].Rows[k][i] = 0;
    //                            }
    //                            if (dt2.Tables[1].Rows[k][i].ToString() == "")
    //                            {
    //                                dt2.Tables[1].Rows[k][i] = 0;
    //                            }
    //                            string s;
    //                            double t;


    //                            //if (Convert.ToInt32(dt2.Tables[0].Rows[k][i]) == 0 || Convert.ToInt32(dt2.Tables[1].Rows[k][0]) == 0)
    //                            //{
    //                            //    t = 0;
    //                            //}
    //                            //else
    //                            //{
    //                                t = ((Convert.ToDouble(dt2.Tables[0].Rows[k][i].ToString().Trim()) / Convert.ToDouble((dt2.Tables[1].Rows[0][i].ToString().Trim()))));
    //                                t = Math.Round(t * 100);
    //                                // t = Convert.ToInt32(dt2.Tables[1].Rows[k][i].ToString());
    //                            //}
    //                            s = (dt2.Tables[0].Rows[k][i].ToString()) + " / " + (dt2.Tables[1].Rows[0][i].ToString()) + "   =   " + t.ToString() + " % ";
    //                            dt2.Tables[0].Rows[k][i] = s;
    //                            //int.Parse(s).ToString()

    //                        }

    //                    }



    //                    daresult = DataSetToJSON(dt2);
    //                    return daresult;
    //                }
    //                else
    //                {
    //                    return daresult;
    //                }
    //            }
    //        }
    //        else
    //        {
    //            return daresult;
    //        }

    //    }
    //}
    //public string getreport(string grpid, string subjectid, string divbatch, string empid, string strttime, string endtime, string year, string subjectname)
    //{    

    //    String daresult = null;

    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    DataSet ds = new DataSet();
    //   // List<studentreport> report = new List<studentreport>();
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        string qry3 = "select sub_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + grpid + "' and del_flag=0";
    //        string qry1 = "select distinct substring((select (','+ subject_name)  from dbo.cre_subject where subject_id in (select * from dbo.BreakStringIntoRows(convert(varchar,(select sub_id from dbo.web_tp_access where emp_id='" + empid + "' and group_id='" + grpid + "' and del_flag=0)))) for xml path('')),2,200000) as subject";
    //        SqlCommand cmd1 = new SqlCommand(qry1, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da1 = new SqlDataAdapter();
    //        da1.SelectCommand = cmd1;
    //        DataTable dt1 = new DataTable();
    //        da1.Fill(dt1);

    //        SqlCommand cmd3 = new SqlCommand(qry3, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da3 = new SqlDataAdapter();
    //        da3.SelectCommand = cmd3;
    //        DataTable dt3 = new DataTable();
    //        da3.Fill(dt3);
    //        string qry;
    //        if (dt1.Rows.Count > 0)
    //        {

    //            if (subjectid == "" || subjectid == "0" || subjectid == "null")
    //            {
    //                qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , CAST( COUNT(att.stud_id) as CHAR) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id AND  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and att.is_present=1 group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + dt3.Rows[0]["sub_id"].ToString() + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + dt3.Rows[0]["sub_id"].ToString() + ")) pvt ";
    //            }
    //            else
    //            {
    //                qry = "select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att , CAST( COUNT(att.stud_id) as CHAR) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id  AND  tp.emp_id=att.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "' and att.is_present=1 group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt   select * from( select CAST( acd.Roll_no as int) as Roll_no,att.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + subjectid + ")) pvt ";
    //            }


    //            // string qry5 = "select * from( select att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tp.sub_id as att ,COUNT(att.stud_id) as cnt from m_std_studentacademic_tbl as acd,web_tp_stud_attendence as att  left join web_tp_log as tp on tp.log_id=att.log_id left join m_std_personaldetails_tbl as std on std.stud_id=att.stud_id  where acd.stud_id=std.stud_id and cast(tp.start_time as date)   between cast('" + strttime + "'as date) and cast('" + endtime + "'as DATE)  and tp.emp_id='" + empid + "' and tp.group_id= '" + grpid + "' and tp.div_batch_id='" + divbatch + "'  group by att.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name,tp.sub_id   )  x PIVOT(max([cnt]) FOR [att] IN (" + dt3.Rows[0]["sub_id"].ToString() + ")) pvt ";
    //            using (SqlCommand cmd = new SqlCommand(qry))
    //            {
    //                List<String> listData = new List<String>();

    //                cmd.CommandType = CommandType.Text;
    //                SqlCommand cmd2 = new SqlCommand(qry, con);
    //                cmd.CommandType = CommandType.Text;
    //                SqlDataAdapter da = new SqlDataAdapter();
    //                da.SelectCommand = cmd2;
    //                DataSet dt2 = new DataSet();
    //                da.Fill(dt2);
    //                if (dt2.Tables[0].Rows.Count > 0)
    //                {

    //                    DataSet dsexcel = new DataSet();

    //                    dt2.Tables[0].Columns.Add("subject");

    //                    dt2.Tables[0].Columns[0].SetOrdinal(0);
    //                    // dt2.Tables[0].Columns[1].SetOrdinal(2);
    //                    dt2.Tables[1].Columns.Add("subject");

    //                    dt2.Tables[0].Columns["subject"].SetOrdinal(0);

    //                    dt2.Tables[1].Columns["subject"].SetOrdinal(0);

    //                    if (subjectid == "" || subjectid == "0" || subjectid == "null")
    //                    {
    //                        dt2.Tables[0].Rows[0]["subject"] = dt1.Rows[0]["subject"].ToString();
    //                    }
    //                    else
    //                    {
    //                        dt2.Tables[0].Rows[0]["subject"] = subjectname;

    //                    }


    //                    for (int k = 0; k < dt2.Tables[0].Rows.Count; k++)
    //                    {
    //                        for (int i = 4; i < dt2.Tables[0].Columns.Count; i++)
    //                        {

    //                            if (dt2.Tables[0].Rows[k][i].ToString() == "")
    //                            {
    //                                dt2.Tables[0].Rows[k][i] = 0;
    //                            }
    //                            if (dt2.Tables[1].Rows[k][i].ToString() == "")
    //                            {
    //                                dt2.Tables[1].Rows[k][i] = 0;
    //                            }
    //                            string s;
    //                            double t;


    //                            if (Convert.ToInt32(dt2.Tables[0].Rows[k][i]) == 0 || Convert.ToInt32(dt2.Tables[1].Rows[k][i]) == 0)
    //                            {
    //                                t = 0;
    //                            }
    //                            else
    //                            {
    //                                t = ((Convert.ToDouble(dt2.Tables[1].Rows[k][i].ToString().Trim()) / Convert.ToDouble((dt2.Tables[0].Rows[k][i].ToString().Trim()))));
    //                                t = Math.Round(t * 100);
    //                                // t = Convert.ToInt32(dt2.Tables[1].Rows[k][i].ToString());
    //                            }
    //                            s = (dt2.Tables[1].Rows[k][i].ToString()) + " / " + (dt2.Tables[0].Rows[k][i].ToString()) + "   =   " + t.ToString() + " % ";
    //                            dt2.Tables[0].Rows[k][i] = s;
    //                            //int.Parse(s).ToString();

    //                            //if (Convert.ToInt32(dt2.Tables[0].Rows[k][i]) == 0 || Convert.ToInt32(dt2.Tables[1].Rows[k][i]) == 0)
    //                            //{
    //                            //    t = 0;
    //                            //}
    //                            //else
    //                            //{
    //                            //    t = ((Convert.ToDouble(dt2.Tables[0].Rows[k][i].ToString().Trim()) / Convert.ToDouble((dt2.Tables[1].Rows[k][i].ToString().Trim())) * 100));
    //                            //    // t = Convert.ToInt32(dt2.Tables[1].Rows[k][i].ToString());
    //                            //}
    //                            //s = (dt2.Tables[0].Rows[k][i].ToString()) + " / " + (dt2.Tables[1].Rows[k][i].ToString()) + "   =   " + t.ToString() + " % ";
    //                            //dt2.Tables[0].Rows[k][i] = s;
    //                            ////int.Parse(s).ToString();


    //                        }

    //                    }



    //                    daresult = DataSetToJSON(dt2);
    //                    return daresult;
    //                }
    //                else
    //                {
    //                    return daresult;
    //                }
    //            }
    //        }
    //        else
    //        {
    //            return daresult;
    //        }

    //    }
    //}


    public string DataSetToJSON(DataSet ds)
    {

        Dictionary<string, object> dict = new Dictionary<string, object>();

        foreach (DataTable dt in ds.Tables)
        {
            object[] arr = new object[dt.Rows.Count + 1];

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                arr[i] = dt.Rows[i].ItemArray;
            }

            dict.Add(dt.TableName, arr);
        }

        JavaScriptSerializer json = new JavaScriptSerializer();
        return json.Serialize(dict);
        //  return dict.ToString(); 
    }


    /////////////////////////////////shafeen//////////////////////////////////
    public string fillexcel1(string empid, string subcourseID, string subid, string div, string strdate, string enddate, string ayid, string sem, string role)
    {

        //strdate=strdate.Select
        DateTime dts = Convert.ToDateTime(strdate);
        DateTime dte = Convert.ToDateTime(enddate);
        string st = dts.ToString("yyyy-MM-dd");
        string et = dte.ToString("yyyy-MM-dd");
        String daresult = null;

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        string qry1 = "";
        if (role == "Hod" || role == "principal")
        {
            qry1 = "select distinct substring(( select (',['+CONVERT(CHAR(10),tplog.start_time,120) +'  '+ CONVERT(CHAR(10),tplog.start_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by CONVERT(CHAR(10),tplog.start_time,120) for xml path('')),2,200000) as Date" //orignal
                + ", substring(( select(',['+ CONVERT(CHAR(10),tplog.end_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by CONVERT(CHAR(10),tplog.start_time,120) for xml path('')),2,200000) as END_TIME ,substring(( select(',['+CAST(DateDiff(MI, start_time , end_time )/60 AS varchar)+'Hrs :'+Cast(DateDiff(MI, start_time ,end_time )%60 AS varchar)+'Mins :'+cast(DateDiff(s, start_time, end_time )%60 AS varchar) +'Sec' )  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by CONVERT(CHAR(10),tplog.start_time,120)  for xml path('')),2,200000) as MinuteDiff  ,(select stuff(( select ', ' + cnt from (select cast(COUNT(CONVERT(CHAR(10),tplog.start_time,120)) as varchar(10))+'['+ CONVERT(CHAR(10),start_time,120) as 'cnt' from web_tp_log as tplog where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' group by CONVERT(CHAR(10),tplog.start_time,120) )g for xml path('') ),1,2,'') as name_csv)  as Ddldatecount ,  CONVERT(varchar(max), SUM(hr) +SUM(mins)/60)+' HRS '+ CONVERT(varchar(max), SUM(mins)%60 )+' MINS'  as Totalhours ,SUM(sec) from (select convert(int,CAST(DateDiff(MI, start_time , end_time )/60 AS varchar)) hr,convert(int,Cast(DateDiff(MI, start_time ,end_time )%60 AS varchar)) mins,convert(int,cast(DateDiff(s, start_time, end_time )%60 AS varchar) )sec from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "') a ";


        }
        else
        {

            qry1 = "select distinct substring(( select (',['+CONVERT(CHAR(10),tplog.start_time,120) +'  '+ CONVERT(CHAR(10),tplog.start_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "' and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0  and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by CONVERT(CHAR(10),tplog.start_time,120)  for xml path('')),2,200000) as Date" //orignal
                + ", substring(( select(',['+ CONVERT(CHAR(10),tplog.end_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.emp_id='" + empid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.end_time ,CONVERT(CHAR(10),tplog.start_time,120)  for xml path('')),2,200000) as END_TIME ,substring(( select(',['+CAST(DateDiff(MI, start_time , end_time )/60 AS varchar)+'Hrs :'+Cast(DateDiff(MI, start_time ,end_time )%60 AS varchar)+'Mins :'+cast(DateDiff(s, start_time, end_time )%60 AS varchar) +'Sec' )  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "' and  tplog.emp_id='" + empid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by CONVERT(CHAR(10),tplog.start_time,120)  for xml path('')),2,200000) as MinuteDiff  ,(select stuff(( select ', ' + cnt from (select cast(COUNT(CONVERT(CHAR(10),tplog.start_time,120)) as varchar(10))+'['+ CONVERT(CHAR(10),start_time,120) as 'cnt' from web_tp_log as tplog where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.emp_id='" + empid + "'  and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' group by CONVERT(CHAR(10),tplog.start_time,120) )g for xml path('') ),1,2,'') as name_csv)  as Ddldatecount ,  CONVERT(varchar(max), SUM(hr) +SUM(mins)/60)+' HRS '+ CONVERT(varchar(max), SUM(mins)%60 )+' MINS'  as Totalhours ,SUM(sec) from (select convert(int,CAST(DateDiff(MI, start_time , end_time )/60 AS varchar)) hr,convert(int,Cast(DateDiff(MI, start_time ,end_time )%60 AS varchar)) mins,convert(int,cast(DateDiff(s, start_time, end_time )%60 AS varchar) )sec from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "') a  ";


        }//  string qry1 = "select  distinct substring(( select (',[' + CONVERT(CHAR(10),tplog.start_time,120) + ']') from dbo.web_tp_log as tplog where   CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date";
        using (SqlConnection con = new SqlConnection(constr))
        {
            SqlCommand cmd1 = new SqlCommand(qry1, con);
            cmd1.CommandType = CommandType.Text;
            SqlDataAdapter da1 = new SqlDataAdapter();
            da1.SelectCommand = cmd1;
            DataTable dt1 = new DataTable();
            da1.Fill(dt1);
            string qry = "";
            if (dt1.Rows[0]["Date"].ToString() != "")
            {
                if (role == "Hod" || role == "principal")
                {
                    //  qry = " SELECT * from  (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time as Date from m_std_studentacademic_tbl as acd, web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and acd.ayid=tpatt.ayid and tplog.group_id= '" + subcourseID + "' and tplog.sem_id='" + sem + "'  and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0  ) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt "; //orignal
                    qry = "select * from (select a.*,b.Totalhours 'STD_HRS',c.p_cnt,c.a_cnt,c.perc from (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name   +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then   'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time  as Date  from m_std_studentacademic_tbl as acd,"
                        + "  web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id    left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and acd.ayid=tpatt.ayid and tplog.group_id= '" + subcourseID + "' and tplog.sem_id='" + sem + "'  and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0  "
                        + "  ) a  inner join    ( select stud_id ,  CONVERT(varchar(max),SUM(hr) +SUM(mins)/60)+' HRS '+   CONVERT(varchar(max), SUM(mins)%60 )+' MINS'  as Totalhours    from (  select case when is_present=1 then convert(int,CAST(DateDiff(MI, start_time , end_time )/60 AS varchar)) else 0 end hr,case when is_present=1  then convert(int,Cast(DateDiff(MI, start_time ,end_time )%60 AS varchar)) else 0 end   mins,case when is_present=1 then convert(int,cast(DateDiff(s, start_time, end_time )%60 AS varchar) ) else 0 end sec,stud_id from dbo.web_tp_log as tplog inner join web_tp_stud_attendence att on tplog.emp_id=att.emp_id  and tplog.log_id=att.log_id and tplog.ayid =att.ayid "
                        + " where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "'"
                        + "  )           a group by stud_id) b on a.stud_id=b.stud_id inner join    (   select SUM(cast(is_present as int)) p_cnt,SUM(CASE WHEN is_present=0 THEN 1 ELSE 0 END)a_cnt, case when SUM(CASE WHEN is_present=0 THEN 1 ELSE 0 END)<>0 then  CAST( SUM(cast(is_present as int)) as varchar)+'/'+ CAST( COUNT(tplog.log_id) as varchar)+'= '+cast( ((CAST(SUM(cast(is_present as int))as float)/cast(COUNT(tplog.log_id) as float))*100) AS varchar(max)) +'%' else CAST( COUNT(tplog.log_id) as varchar)+'/'+CAST( COUNT(tplog.log_id) as varchar)+'= '+'100%' end as perc,stud_id from dbo.web_tp_log as tplog inner join web_tp_stud_attendence att on tplog.emp_id=att.emp_id and tplog.log_id=att.log_id and tplog.ayid =att.ayid "
                        + " where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' group by stud_id   )c       on a.stud_id=c.stud_id) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt ";
                }
                else
                {
                    // qry = " SELECT * from  (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time as Date from m_std_studentacademic_tbl as acd, web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and acd.ayid=tpatt.ayid and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sem_id='" + sem + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' ) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt "; //orignal
                    qry = "select * from (select a.*,b.Totalhours 'STD_HRS',c.p_cnt,c.a_cnt,c.perc from (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name   +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then   'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time  as Date  from m_std_studentacademic_tbl as acd,"
                       + "  web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id    left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and acd.ayid=tpatt.ayid and  tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sem_id='" + sem + "'  and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0  "
                       + "  ) a  inner join    ( select stud_id ,  CONVERT(varchar(max),SUM(hr) +SUM(mins)/60)+' HRS '+   CONVERT(varchar(max), SUM(mins)%60 )+' MINS'  as Totalhours    from (  select case when is_present=1 then convert(int,CAST(DateDiff(MI, start_time , end_time )/60 AS varchar)) else 0 end hr,case when is_present=1  then convert(int,Cast(DateDiff(MI, start_time ,end_time )%60 AS varchar)) else 0 end   mins,case when is_present=1 then convert(int,cast(DateDiff(s, start_time, end_time )%60 AS varchar) ) else 0 end sec,stud_id from dbo.web_tp_log as tplog inner join web_tp_stud_attendence att on tplog.emp_id=att.emp_id  and tplog.log_id=att.log_id and tplog.ayid =att.ayid "
                        + " where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "'"
                        + "  )           a group by stud_id) b on a.stud_id=b.stud_id inner join    (   select SUM(cast(is_present as int)) p_cnt,SUM(CASE WHEN is_present=0 THEN 1 ELSE 0 END)a_cnt, case when SUM(CASE WHEN is_present=0 THEN 1 ELSE 0 END)<>0 then  CAST( SUM(cast(is_present as int)) as varchar)+'/'+ CAST( COUNT(tplog.log_id) as varchar)+'= '+cast( ((CAST(SUM(cast(is_present as int))as float)/cast(COUNT(tplog.log_id) as float))*100) AS varchar(max)) +'%' else CAST( COUNT(tplog.log_id) as varchar)+'/'+CAST( COUNT(tplog.log_id) as varchar)+'= '+'100%' end as perc,stud_id from dbo.web_tp_log as tplog inner join web_tp_stud_attendence att on tplog.emp_id=att.emp_id and tplog.log_id=att.log_id and tplog.ayid =att.ayid "
                       + " where  tplog.ayid='" + ayid + "'  and  tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' group by stud_id   )c       on a.stud_id=c.stud_id) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt ";

                }
                using (SqlCommand cmd = new SqlCommand(qry))
                {
                    List<String> listData = new List<String>();

                    cmd.CommandType = CommandType.Text;
                    SqlCommand cmd2 = new SqlCommand(qry, con);
                    cmd.CommandType = CommandType.Text;
                    SqlDataAdapter da = new SqlDataAdapter();
                    da.SelectCommand = cmd2;
                    DataTable dt2 = new DataTable();
                    da.Fill(dt2);
                    dt2.DefaultView.Sort = "Roll_no asc";


                    DataSet dsexcel = new DataSet();
                    dt2.Columns.Add("Daterange");
                    dt2.Columns.Add("Endtime");
                    dt2.Columns.Add("MinuteDiff");
                    dt2.Columns.Add("Ddldatecount");
                    dt2.Columns.Add("Totalhours");

                    dt2.Columns["Daterange"].SetOrdinal(0);
                    dt2.Columns["Endtime"].SetOrdinal(1);
                    dt2.Columns["MinuteDiff"].SetOrdinal(2);
                    dt2.Columns["Ddldatecount"].SetOrdinal(3);
                    dt2.Columns["Totalhours"].SetOrdinal(4);

                    dt2.Rows[0]["Daterange"] = dt1.Rows[0]["Date"].ToString();
                    dt2.Rows[0]["Endtime"] = dt1.Rows[0]["END_TIME"].ToString();
                    dt2.Rows[0]["MinuteDiff"] = dt1.Rows[0]["MinuteDiff"].ToString();
                    dt2.Rows[0]["Ddldatecount"] = dt1.Rows[0]["Ddldatecount"].ToString();
                    dt2.Rows[0]["Totalhours"] = dt1.Rows[0]["Totalhours"].ToString();



                    dsexcel.Tables.Add(dt2);

                    daresult = DataSetToJSON(dsexcel);
                    return daresult;

                }
            }
            else
            {
                return daresult;
            }
        }
    }

    //public string fillexcel1(string empid, string subcourseID, string subid, string div, string strdate, string enddate, string ayid,string sem,string role)
    //{

    //    //strdate=strdate.Select
    //    DateTime dts = Convert.ToDateTime(strdate);
    //    DateTime dte = Convert.ToDateTime(enddate);
    //    string st = dts.ToString("yyyy-MM-dd");
    //    string et = dte.ToString("yyyy-MM-dd");
    //    String daresult = null;

    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    string qry1 = "";
    //    if (role == "Hod" || role == "principal")
    //    {
    //        qry1 = "select distinct substring(( select (',['+CONVERT(CHAR(10),tplog.start_time,120) +'  '+ CONVERT(CHAR(10),tplog.start_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "'  and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date" //orignal
    //            + ", substring(( select(',['+ CONVERT(CHAR(10),tplog.end_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='"+ayid+"'  and tplog.group_id= '"+subcourseID+"' and tplog.sub_id = '"+subid+"'and tplog.sem_id='"+sem+"' and tplog.div_batch_id='"+div+"' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '"+st+"' and '"+et+"' order by tplog.end_time  for xml path('')),2,200000) as END_TIME  ";

    //    }
    //    else {

    //        qry1 = "select distinct substring(( select (',['+CONVERT(CHAR(10),tplog.start_time,120) +'  '+ CONVERT(CHAR(10),tplog.start_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "' and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "'and tplog.sem_id='" + sem + "' and tplog.div_batch_id='" + div + "' and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date" //orignal
    //            + ", substring(( select(',['+ CONVERT(CHAR(10),tplog.end_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='"+ayid+"'  and tplog.group_id= '"+subcourseID+"' and tplog.sub_id = '"+subid+"'and tplog.sem_id='"+sem+"' and tplog.div_batch_id='"+div+"' and tplog.del_flag=0 and CONVERT(CHAR(10),tplog.start_time,120) between '"+st+"' and '"+et+"' order by tplog.end_time  for xml path('')),2,200000) as END_TIME  ";


    //    }//  string qry1 = "select  distinct substring(( select (',[' + CONVERT(CHAR(10),tplog.start_time,120) + ']') from dbo.web_tp_log as tplog where   CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date";
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        SqlCommand cmd1 = new SqlCommand(qry1, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da1 = new SqlDataAdapter();
    //        da1.SelectCommand = cmd1;
    //        DataTable dt1 = new DataTable();
    //        da1.Fill(dt1);
    //        string qry = "";
    //        if (dt1.Rows[0]["Date"].ToString() != "")
    //        {
    //            if (role == "Hod" || role == "principal")
    //            {
    //                qry = " SELECT * from  (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time as Date from m_std_studentacademic_tbl as acd, web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and acd.ayid=tpatt.ayid and tplog.group_id= '" + subcourseID + "' and tplog.sem_id='" + sem + "'  and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and tplog.del_flag=0  ) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt "; //orignal

    //            }
    //            else
    //            {
    //                qry = " SELECT * from  (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time as Date from m_std_studentacademic_tbl as acd, web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and acd.ayid=tpatt.ayid and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sem_id='" + sem + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' ) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt "; //orignal

    //            }
    //            using (SqlCommand cmd = new SqlCommand(qry))
    //            {
    //                List<String> listData = new List<String>();

    //                cmd.CommandType = CommandType.Text;
    //                SqlCommand cmd2 = new SqlCommand(qry, con);
    //                cmd.CommandType = CommandType.Text;
    //                SqlDataAdapter da = new SqlDataAdapter();
    //                da.SelectCommand = cmd2;
    //                DataTable dt2 = new DataTable();
    //                da.Fill(dt2);
    //                dt2.DefaultView.Sort = "Roll_no asc";


    //                DataSet dsexcel = new DataSet();
    //                dt2.Columns.Add("Daterange");

    //                dt2.Columns["Daterange"].SetOrdinal(0);
    //                // dt2.Rows[0]["Daterange"].ToString() = dt1.Rows[0]["Date"].ToString();
    //                // dt2.Rows.Add(dt1.Rows[0]["Date"].ToString());

    //                dt2.Rows[0]["Daterange"] = dt1.Rows[0]["Date"].ToString();
    //                dt2.Rows[1]["Daterange"] = dt1.Rows[0]["END_TIME"].ToString();
    //                //  dt1.Rows[0]["Date"].ToString().Substring(8);


    //                dsexcel.Tables.Add(dt2);

    //                daresult = DataSetToJSON(dsexcel);
    //                return daresult;

    //            }
    //        }
    //        else
    //        {
    //            return daresult;
    //        }
    //    }
    //}

    //public string fillexcel1(string empid, string subcourseID, string subid, string div, string strdate, string enddate, string ayid)
    //{

    //    //strdate=strdate.Select
    //    DateTime dts = Convert.ToDateTime(strdate);
    //    DateTime dte = Convert.ToDateTime(enddate);
    //    string st = dts.ToString("yyyy-MM-dd");
    //    string et = dte.ToString("yyyy-MM-dd");
    //    String daresult = null;

    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    string qry1 = "select distinct substring(( select (',['+CONVERT(CHAR(10),tplog.start_time,120) +'  '+ CONVERT(CHAR(10),tplog.start_time,108) +']')  from dbo.web_tp_log as tplog  where  tplog.ayid='" + ayid + "' and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date"; //orignal
    //    //  string qry1 = "select  distinct substring(( select (',[' + CONVERT(CHAR(10),tplog.start_time,120) + ']') from dbo.web_tp_log as tplog where   CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date";
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        SqlCommand cmd1 = new SqlCommand(qry1, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da1 = new SqlDataAdapter();
    //        da1.SelectCommand = cmd1;
    //        DataTable dt1 = new DataTable();
    //        da1.Fill(dt1);
    //        string qry = "";
    //        if (dt1.Rows[0]["Date"].ToString() != "")
    //        {
    //            qry = " SELECT * from  (select CAST( acd.Roll_no as int) as Roll_no,tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time as Date from m_std_studentacademic_tbl as acd, web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and tplog.emp_id=tpatt.emp_id  left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' ) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt "; //orignal

    //            using (SqlCommand cmd = new SqlCommand(qry))
    //            {
    //                List<String> listData = new List<String>();

    //                cmd.CommandType = CommandType.Text;
    //                SqlCommand cmd2 = new SqlCommand(qry, con);
    //                cmd.CommandType = CommandType.Text;
    //                SqlDataAdapter da = new SqlDataAdapter();
    //                da.SelectCommand = cmd2;
    //                DataTable dt2 = new DataTable();
    //                da.Fill(dt2);
    //                dt2.DefaultView.Sort = "Roll_no asc";


    //                DataSet dsexcel = new DataSet();
    //                dt2.Columns.Add("Daterange");

    //                dt2.Columns["Daterange"].SetOrdinal(0);
    //                // dt2.Rows[0]["Daterange"].ToString() = dt1.Rows[0]["Date"].ToString();
    //                // dt2.Rows.Add(dt1.Rows[0]["Date"].ToString());

    //                dt2.Rows[0]["Daterange"] = dt1.Rows[0]["Date"].ToString();
    //                //  dt1.Rows[0]["Date"].ToString().Substring(8);


    //                dsexcel.Tables.Add(dt2);

    //                daresult = DataSetToJSON(dsexcel);
    //                return daresult;

    //            }
    //        }
    //        else
    //        {
    //            return daresult;
    //        }
    //    }
    //}

    public ChartDetails[] fillexcelDate(string empid, string subcourseID, string subid, string div, string strdate, string enddate, string ayid)
    {

        //strdate=strdate.Select
        DateTime dts = Convert.ToDateTime(strdate);
        DateTime dte = Convert.ToDateTime(enddate);
        string st = dts.ToString("yyyy/MM/dd");
        string et = dte.ToString("yyyy/MM/dd");

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        string qry1 = "select distinct substring(( select (',['+CONVERT(CHAR(10),tplog.start_time,120)+' '+ CONVERT(CHAR(10),tplog.start_time,108)+']') from dbo.web_tp_log as tplog  where tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date"; //orignal
        //  string qry1 = "select  distinct substring(( select (',[' + CONVERT(CHAR(10),tplog.start_time,120) + ']') from dbo.web_tp_log as tplog where   CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + et + "' order by tplog.start_time for xml path('')),2,200000) as Date";
        using (SqlConnection con = new SqlConnection(constr))
        {
            SqlCommand cmd1 = new SqlCommand(qry1, con);
            cmd1.CommandType = CommandType.Text;
            SqlDataAdapter da1 = new SqlDataAdapter();
            da1.SelectCommand = cmd1;
            DataTable dt1 = new DataTable();
            da1.Fill(dt1);

            if (dt1.Rows.Count < 0)
            {

            }
            // }
            // string qry = "select tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],tpatt.is_present from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where tplog.emp_id='" + empid + "' and tplog.subcourse_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id=" + div + "' and CONVERT(CHAR(10),tplog.start_time,120)='" + strdate+ "' ";
            string qry = " SELECT * from  (select tpatt.stud_id,acd.Roll_no,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,tplog.start_time as Date from m_std_studentacademic_tbl as acd, web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id where acd.stud_id=std.stud_id and tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' ) x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt "; //orignal
            // string qry = " SELECT * from  (select tpatt.stud_id,std.stud_L_Name +' '+ std.stud_F_Name + ' '+ std.stud_M_Name as [Name],case when (tpatt.is_present)=1 then 'P' when (tpatt.is_present)=0 then 'AB' Else '' end  as att,CONVERT(CHAR(10),tplog.start_time,120) as Date from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id left join m_std_personaldetails_tbl as std on std.stud_id=tpatt.stud_id  where tplog.emp_id='" + empid + "') x  PIVOT(max([att]) FOR [Date] IN (" + dt1.Rows[0]["Date"].ToString() + ")) pvt ";

            // using (SqlConnection con = new SqlConnection(constr))
            // {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ChartDetails> listData = new List<ChartDetails>();

                cmd.CommandType = CommandType.Text;


                SqlCommand cmd2 = new SqlCommand(qry, con);
                cmd.CommandType = CommandType.Text;
                SqlDataAdapter da = new SqlDataAdapter();
                da.SelectCommand = cmd2;
                DataTable dt2 = new DataTable();
                da.Fill(dt2);
                foreach (DataRow dtrow in dt2.Rows)
                {
                    ChartDetails details = new ChartDetails();
                    string date = string.Empty;

                    //string date = dt1.Rows[0]["Date"].ToString();
                    date = date + dt1.Rows[0]["Date"].ToString();
                    date += (0 < dt1.Rows.Count - 1) ? "," : string.Empty;

                    string[] str1 = Regex.Split(date, ",");

                    List<string> distinctdate = new List<string>();
                    foreach (string s in str1)
                    {
                        string i = Convert.ToString(s);
                        if (!distinctdate.Contains(i))
                        {
                            if (i != "")
                            {
                                distinctdate.Add(i);
                            }
                        }
                    }

                    string[] distinctArray = distinctdate.ToArray();

                    details.stud_id = dtrow[0].ToString();
                    details.Roll_no = dtrow[1].ToString();
                    details.Name = dtrow[2].ToString();

                    for (int i = 0; distinctArray.Length > 0; i++)
                    {
                        int j = i + 2;
                        if (i == distinctArray.Length)
                        {
                            break;
                        }
                        details.att = dtrow[j].ToString();

                        // details.att.Replace("att", distinctArray[i]);

                        // listData.Add(details);
                        i = j - 2;
                        // details.att.Replace("att", distinctArray[i]);
                    }
                    listData.Add(details);

                }



                return listData.ToArray();
            }
        }
    }


    public ChartDetails[] GetChart(string empid, string subcourseID, string subid, string div, string strdate, string enddate, string ayid, string role, string sem)
    {
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();

        using (SqlConnection con = new SqlConnection(constr))
        {
            DateTime dts = Convert.ToDateTime(strdate);
            string st = dts.ToString("yyyy-MM-dd");
            DateTime dtse = Convert.ToDateTime(enddate);
            string ste = dtse.ToString("yyyy-MM-dd");

            String qry = "";
            // String qry = (" select CONVERT(CHAR(10),start_time,120)+' '+CONVERT(CHAR(10),start_time,108) as Date ,COUNT(start_time) as studcount from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id where  tplog.emp_id='" + empid + "' and tpatt.ayid='" + ayid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and  CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + ste + "' and is_present=1 group by start_time");
            if (role == "Hod" || role == "principal")
            {
                qry = ("select CONVERT(CHAR(10),start_time,120)+' '+CONVERT(CHAR(10),start_time,108) as Date ,COUNT(start_time) as studcount from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id where  tpatt.ayid='" + ayid + "' and tplog.sem_id= '" + sem + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and  CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + ste + "' and is_present=1 and  tpatt.del_flag=0 and tplog.del_flag=0 group by start_time");

            }
            else
            {
                qry = ("select CONVERT(CHAR(10),start_time,120)+' '+CONVERT(CHAR(10),start_time,108) as Date ,COUNT(start_time) as studcount from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and  tplog.emp_id=tpatt.emp_id where  tplog.emp_id='" + empid + "'  and tpatt.ayid='" + ayid + "' and tplog.group_id= '" + subcourseID + "'and tplog.sem_id= '" + sem + "'  and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and  CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + ste + "' and is_present=1  and tpatt.del_flag=0 and tplog.del_flag=0 group by start_time");

            }
            String qry1 = ("select COUNT(stud_id) as overall from m_std_studentacademic_tbl where  ayid='" + ayid + "' and group_id='" + subcourseID + "' and (Division='" + div + "' or Batch_id='" + div + "') and del_flag=0");

            SqlCommand cmd = new SqlCommand(qry, con);
            cmd.CommandType = CommandType.Text;
            SqlDataAdapter da = new SqlDataAdapter();
            da.SelectCommand = cmd;
            DataTable dt = new DataTable();
            da.Fill(dt);

            SqlCommand cmd1 = new SqlCommand(qry1, con);
            cmd1.CommandType = CommandType.Text;
            SqlDataAdapter da1 = new SqlDataAdapter();
            da1.SelectCommand = cmd1;
            DataTable dt1 = new DataTable();
            da1.Fill(dt1);

            List<ChartDetails> dataList = new List<ChartDetails>();


            dt.Columns.Add("studabscount");

            foreach (DataRow dr in dt.Rows)
            {

                //Double percentage = (Convert.ToDouble(dr["studcount"].ToString()) / Convert.ToDouble(dt1.Rows[0]["overall"].ToString())) * 100;

                //dr["studcount"] = Math.Round(percentage);
                //dr["studabscount"] = Math.Round(100 - percentage);
                dr["studabscount"] = int.Parse(dt1.Rows[0]["overall"].ToString()) - int.Parse(dr["studcount"].ToString());

            }

            foreach (DataRow dtrow in dt.Rows)
            {
                ChartDetails details = new ChartDetails();

                details.Date = dtrow[0].ToString();
                details.studcount = Convert.ToInt32((dtrow[1].ToString()));
                details.studabscount = Convert.ToInt32(dtrow[2].ToString());

                dataList.Add(details);
            }
            return dataList.ToArray();
        }


    }
    //public ChartDetails[] GetChart(string empid, string subcourseID, string subid, string div, string strdate, string enddate, string ayid)
    //{
    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    DataSet ds = new DataSet();

    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        DateTime dts = Convert.ToDateTime(strdate);
    //        string st = dts.ToString("yyyy-MM-dd");
    //        DateTime dtse = Convert.ToDateTime(enddate);
    //        string ste = dtse.ToString("yyyy-MM-dd");



    //        // String qry = (" select CONVERT(CHAR(10),start_time,120) as Date ,COUNT(start_time) as studcount from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id where tplog.emp_id='VSS00024' and tplog.group_id= 'GRP035' and tplog.sub_id = 'SUB130' and tplog.div_batch_id='A' and  CONVERT(CHAR(10),tplog.start_time,120) between '2016-08-28' and '2016-08-29' and is_present=1 group by start_time");
    //        // String qry1 = (" select COUNT(stud_id) as overall from m_std_studentacademic_tbl where group_id='GRP035'   and Division='A'");
    //        String qry = (" select CONVERT(CHAR(10),start_time,120)+' '+CONVERT(CHAR(10),start_time,108) as Date ,COUNT(start_time) as studcount from web_tp_log as tplog left join web_tp_stud_attendence as tpatt on tplog.log_id=tpatt.log_id and tplog.emp_id=tpatt.emp_id  where  tplog.emp_id='" + empid + "' and tpatt.ayid='" + ayid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and  CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + ste + "' and is_present=1 group by start_time");
    //        String qry1 = ("select COUNT(stud_id) as overall from m_std_studentacademic_tbl where  ayid='" + ayid + "' and group_id='" + subcourseID + "' and Division='" + div + "' or Batch_id='" + div + "'");
    //        //   String qry2 =  "select  distinct substring(( select (',[' + CONVERT(CHAR(10),tplog.start_time,120) + ']') from dbo.web_tp_log as tplog  where tplog.emp_id='" + empid + "' and tplog.group_id= '" + subcourseID + "' and tplog.sub_id = '" + subid + "' and tplog.div_batch_id='" + div + "' and CONVERT(CHAR(10),tplog.start_time,120) between '" + st + "' and '" + ste + "' order by tplog.start_time for xml path('')),2,200000) as Date"; //orignal

    //        //  DataTable dt = .fillDataTable(qry);

    //        SqlCommand cmd = new SqlCommand(qry, con);
    //        cmd.CommandType = CommandType.Text;
    //        SqlDataAdapter da = new SqlDataAdapter();
    //        da.SelectCommand = cmd;
    //        DataTable dt = new DataTable();
    //        da.Fill(dt);

    //        SqlCommand cmd1 = new SqlCommand(qry1, con);
    //        cmd1.CommandType = CommandType.Text;
    //        SqlDataAdapter da1 = new SqlDataAdapter();
    //        da1.SelectCommand = cmd1;
    //        DataTable dt1 = new DataTable();
    //        da1.Fill(dt1);


    //        // SqlCommand cmd2 = new SqlCommand(qry2, con);
    //        // cmd1.CommandType = CommandType.Text;
    //        // SqlDataAdapter da2 = new SqlDataAdapter();
    //        // da2.SelectCommand = cmd2;
    //        // DataTable dt2 = new DataTable();
    //        // da1.Fill(dt2);

    //        //string Dateexcel= dt1.Rows[0]["Date"].ToString();

    //        List<ChartDetails> dataList = new List<ChartDetails>();


    //        dt.Columns.Add("studabscount");
    //        //  dt.Columns.Add("Date");

    //        foreach (DataRow dr in dt.Rows)
    //        {
    //            // int sc =Convert.ToDouble( dr["studcount"].ToString());
    //            Double percentage = (Convert.ToDouble(dr["studcount"].ToString()) / Convert.ToDouble(dt1.Rows[0]["overall"].ToString())) * 100;

    //            dr["studcount"] = Math.Round(percentage);
    //            dr["studabscount"] = Math.Round(100 - percentage);
    //            //foreach (DataRow dr1 in dt1.Rows)
    //            //{

    //            //Math.Round( (Convert.ToInt64( dr["studcount"].ToString()) / Convert.ToInt64( dt1.Rows[0]["overall"].ToString())) * 100);
    //            //}
    //        }

    //        foreach (DataRow dtrow in dt.Rows)
    //        {
    //            ChartDetails details = new ChartDetails();
    //            // details.PlanName = dtrow[0].ToString();
    //            // details.PaymentAmount = Convert.ToInt32(dtrow[1]);
    //            details.Date = dtrow[0].ToString();
    //            details.studcount = Convert.ToInt32((dtrow[1].ToString()));
    //            details.studabscount = Convert.ToInt32(dtrow[2].ToString());

    //            dataList.Add(details);
    //        }
    //        return dataList.ToArray();
    //    }


    //}

    public List<ListItem> getExcel()
    {
        throw new NotImplementedException();
    }



    /////////////////////////Freeship/Scholarship/////////////////////

    public studentDetailfee_transac[] getfeereport_details1(string stud_id)
    {
        HttpContext context = HttpContext.Current;
        List<studentDetailfee_transac> details = new List<studentDetailfee_transac>();


        if (context.Session["fee_details"] != null)
        {
            DataTable dtt = (DataTable)context.Session["fee_details"];
            DataView dv = dtt.DefaultView;
            string[] id = stud_id.Split('<');

            dv.RowFilter = "Stud_id='" + id[0] + "'";
            DataTable dt = dv.ToTable();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    studentDetailfee_transac stud = new studentDetailfee_transac();
                    stud.stud_id = dtrow["Stud_id"].ToString();
                    stud.Recpt_mode = dtrow["Recpt_mode"].ToString();

                    stud.Amount = dtrow["Amount"].ToString();

                    stud.Chq_status = dtrow["Chq_status"].ToString();
                    stud.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                    stud.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                    stud.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();
                    stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();
                    details.Add(stud);


                }
                return details.ToArray();

            }
            else
            {
                return null;


            }
        }
        else
        {
            return null;
        }
    }

    public List<ListItem> subcourseChangeClass1(string subcourseID, string finalGrp)
    {
        String qry = "select Group_id,Group_title from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + ") and subcourse_id='" + subcourseID + "'";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }
    }


    public studentDetailfee[] getfeereport1(string groupid, string year, string subcrs_id, string report1, string remark, string category)
    {

        String daresult = null;
        string qry = "";

        //if (report1.Trim() == "With Freeship / Scholarship")
        //{
        string remarkcondition = "(Remark like '%freeship%' or Remark like '%Scholarship%')";
        if (remark != string.Empty)
        {
            if (remark != "--Select--")
            {
                remarkcondition = "ltrim(Remark) like '" + remark + "'";
            }
        }

        if (category != string.Empty)
        {
            if (category != "0")
            {

                remarkcondition += "and per.stud_Category like '" + category + "'";

            }
        }


        if (groupid == "0")
        {
            qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid"
                + ",STUFF((SELECT ', ' + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id and  Ayid='" + year + "' FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', '  + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id and  Ayid='" + year + "' FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
                + "FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,"
                + "m_std_personaldetails_tbl as per,m_FeeMaster as fm,  m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
                //+"--, v5_new as t"
            + "  where sb.Group_id=aca.group_id and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0 and s.subcourse_id=aca.subcourse_Id and " + remarkcondition
                //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
            + " and aca.subcourse_Id='" + subcrs_id + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
            + " select  f.Stud_id, Recpt_mode,Amount,Chq_status,  coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch, isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt from m_FeeEntry f inner join m_std_studentacademic_tbl aca on  f.Stud_id=aca.stud_id and f.Ayid=aca.ayid   inner join m_std_personaldetails_tbl as per on  aca.Stud_id=per.Stud_id where f.Ayid='" + year + "' and f.del_flag=0   and " + remarkcondition + " and  aca.subcourse_Id='" + subcrs_id + "' and aca.del_flag=0 order by f.Stud_id";
        }
        else
        {
            qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid"
                          + ",STUFF((SELECT ', '  + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id and  Ayid='" + year + "' FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', ' + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id and  Ayid='" + year
                            + "' FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
                          + "FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,"
                          + "m_std_personaldetails_tbl as per,m_FeeMaster as fm, m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
                //+"--, v5_new as t"
                      + " where sb.Group_id=aca.group_id  and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and s.subcourse_id=aca.subcourse_Id and " + remarkcondition
                //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
                      + " and aca.subcourse_Id='" + subcrs_id + "' and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
                      + "select  f.Stud_id, Recpt_mode,Amount,Chq_status,  coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch, isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt from m_FeeEntry f inner join m_std_studentacademic_tbl aca on  f.Stud_id=aca.stud_id and f.Ayid=aca.ayid   inner join m_std_personaldetails_tbl as per on  aca.Stud_id=per.Stud_id where f.Ayid='" + year + "' and f.del_flag=0   and " + remarkcondition + " and  aca.subcourse_Id='" + subcrs_id + "' and aca.del_flag=0 order by f.Stud_id";

        }

        //}
        //else if (report1.Trim () == "Without Freeship / Scholarship")
        //{

        //    if (groupid == "0")
        //    {
        //        qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid"
        //            + ",STUFF((SELECT ', ' + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', '  + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
        //            + "FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,"
        //            + "m_std_personaldetails_tbl as per,m_FeeMaster as fm,  m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
        //            //+"--, v5_new as t"
        //        + "  where sb.Group_id=aca.group_id and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0 and s.subcourse_id=aca.subcourse_Id and (Remark not like '%freeship%' or Remark not like '%Scholarship%') "
        //            //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
        //        + " and aca.subcourse_Id='" + subcrs_id + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
        //        + "select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt from m_FeeEntry where Ayid='" + year + "' and del_flag=0 ";
        //    }
        //    else
        //    {
        //        qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid"
        //                      + ",STUFF((SELECT ', '  + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', ' + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
        //                      + "FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,"
        //                      + "m_std_personaldetails_tbl as per,m_FeeMaster as fm, m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
        //            //+"--, v5_new as t"
        //                  + " where sb.Group_id=aca.group_id  and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and s.subcourse_id=aca.subcourse_Id and (Remark not like '%freeship%' or Remark not like '%Scholarship%') "
        //            //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
        //                  + " and aca.subcourse_Id='" + subcrs_id + "' and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
        //                  + "select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt  from m_FeeEntry where Ayid='" + year + "' and del_flag=0 ";

        //    }
        //}
        //else if (report1 == "Full Paid")
        //{

        //    if (groupid == "0")
        //    {
        //        qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid"
        //            + ",STUFF((SELECT ', ' + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', '  + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
        //            + "FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,"
        //            + "m_std_personaldetails_tbl as per,m_FeeMaster as fm,  m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
        //            //+"--, v5_new as t"
        //        + "  where sb.Group_id=aca.group_id and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0 and s.subcourse_id=aca.subcourse_Id and (Remark like '%freeship%' or Remark like '%Scholarship%') "
        //            //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
        //        + " and aca.subcourse_Id='" + subcrs_id + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
        //        + "select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt from m_FeeEntry where Ayid='" + year + "' and del_flag=0 ";
        //    }
        //    else
        //    {
        //        qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid"
        //                      + ",STUFF((SELECT ', '  + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', ' + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
        //                      + "FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,"
        //                      + "m_std_personaldetails_tbl as per,m_FeeMaster as fm, m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
        //            //+"--, v5_new as t"
        //                  + " where sb.Group_id=aca.group_id  and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and s.subcourse_id=aca.subcourse_Id and (Remark like '%freeship%' or Remark like '%Scholarship%') "
        //            //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
        //                  + " and aca.subcourse_Id='" + subcrs_id + "' and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
        //                  + "select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt  from m_FeeEntry where Ayid='" + year + "' and del_flag=0 ";

        //    }
        //}



        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<studentDetailfee> details = new List<studentDetailfee>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    studentDetailfee stud = new studentDetailfee();
                //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                //    details.Add(stud);
                //}

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    studentDetailfee stud = new studentDetailfee();
                    stud.Roll_no = dtrow["Roll no"].ToString();
                    stud.stud_id = dtrow["Student ID"].ToString();
                    stud.Student_Name = dtrow["Student Name"].ToString();
                    stud.Gender = dtrow["Gender"].ToString();
                    stud.stud_Category = dtrow["Category"].ToString();
                    stud.CourseFees = dtrow["CourseFees"].ToString();
                    stud.FeesPaid = dtrow["FeesPaid"].ToString();
                    stud.Group_title = dtrow["Group_title"].ToString();

                    stud.FeesBal = dtrow["FeesBal"].ToString();
                    stud.Remark = dtrow["Remark"].ToString();
                    stud.Authorized_By = dtrow["Authorized By"].ToString();

                    //string[] remrk = dtrow["Remark"].ToString().Split(',');
                    //System.Text.StringBuilder str = new System.Text.StringBuilder();
                    //foreach (string s in remrk)
                    //{
                    //    str.Append(s);
                    //    str.Append(Environment.NewLine);
                    //}
                    //stud.Remark = str.ToString().Replace(Environment.NewLine, "<br />");



                    //string[] auth = dtrow["Authorized By"].ToString().Split(',');
                    //System.Text.StringBuilder str1 = new System.Text.StringBuilder();
                    //foreach (string s in auth)
                    //{
                    //    str1.Append(s);
                    //    str1.Append(Environment.NewLine);
                    //}
                    //stud.Authorized_By = str1.ToString().Replace(Environment.NewLine, "<br />");


                    details.Add(stud);
                }
                con.Close();
                HttpContext context = HttpContext.Current;
                context.Session["fee_details"] = ds.Tables[1];
                return details.ToArray();

            }
        }

    }

    public studentDetailfee[] getStudfeereport1(string student_id)
    {

        String daresult = null;
        string qry = "";



        if (student_id != string.Empty)
        {
            qry = "select aca.ayid ,aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By' from (SELECT  stud_id,amount,Ayid,STUFF((SELECT ', '  + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry "
            + " WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', '  + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid) t GROUP BY stud_id,amount,ayid) as fee,m_std_studentacademic_tbl as aca,m_std_personaldetails_tbl as per,m_FeeMaster as fm, m_crs_subcourse_tbl s ,m_crs_subjectgroup_tbl as sb"
            + " where sb.Group_id=aca.group_id and  aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and s.subcourse_id=aca.subcourse_Id  and aca.stud_id='" + student_id + "' order by ayid desc;"
            + " select  ayid,Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt  from m_FeeEntry where Stud_id='" + student_id + "' and del_flag=0";

        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<studentDetailfee> details = new List<studentDetailfee>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    studentDetailfee stud = new studentDetailfee();
                //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                //    details.Add(stud);
                //}

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    studentDetailfee stud = new studentDetailfee();
                    stud.AYID = dtrow["ayid"].ToString();

                    stud.Roll_no = dtrow["Roll no"].ToString();
                    stud.stud_id = dtrow["Student ID"].ToString();
                    stud.Student_Name = dtrow["Student Name"].ToString();
                    stud.Gender = dtrow["Gender"].ToString();
                    stud.stud_Category = dtrow["Category"].ToString();
                    stud.CourseFees = dtrow["CourseFees"].ToString();
                    stud.FeesPaid = dtrow["FeesPaid"].ToString();
                    stud.Group_title = dtrow["Group_title"].ToString();

                    stud.FeesBal = dtrow["FeesBal"].ToString();
                    stud.Remark = dtrow["Remark"].ToString();
                    //string[] remrk = dtrow["Remark"].ToString().Split(',');
                    //System.Text.StringBuilder str = new System.Text.StringBuilder();

                    //foreach (string s in remrk)
                    //{
                    //    str.Append(s);
                    //    str.Append(Environment.NewLine);
                    //}
                    //stud.Remark = str.ToString().Replace(Environment.NewLine, "<br />");



                    //string[] auth = dtrow["Authorized By"].ToString().Split(',');
                    //System.Text.StringBuilder str1 = new System.Text.StringBuilder();
                    //foreach (string s in auth)
                    //{
                    //    str1.Append(s);
                    //    str1.Append(Environment.NewLine);
                    //}
                    stud.Authorized_By = dtrow["Authorized By"].ToString();


                    details.Add(stud);
                }
                con.Close();
                HttpContext context = HttpContext.Current;
                context.Session["stud_fee_details"] = ds.Tables[1];
                return details.ToArray();

            }
        }

    }

    public studentDetailfee_transac[] getstudfeereport_details1(string ayid)
    {
        HttpContext context = HttpContext.Current;
        List<studentDetailfee_transac> details = new List<studentDetailfee_transac>();


        if (context.Session["stud_fee_details"] != null)
        {
            DataTable dtt = (DataTable)context.Session["stud_fee_details"];
            DataView dv = dtt.DefaultView;
            string[] id = ayid.Split(':');

            dv.RowFilter = "ayid='" + id[2].Trim() + "'";
            DataTable dt = dv.ToTable();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    studentDetailfee_transac stud = new studentDetailfee_transac();
                    stud.stud_id = dtrow["Stud_id"].ToString();
                    stud.Recpt_mode = dtrow["Recpt_mode"].ToString();

                    stud.Amount = dtrow["Amount"].ToString();

                    stud.Chq_status = dtrow["Chq_status"].ToString();
                    stud.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                    stud.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                    stud.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();
                    stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();

                    details.Add(stud);


                }
                return details.ToArray();

            }
            else
            {
                return null;


            }
        }
        else
        {
            return null;

        }
    }






    ///////////////////////////////FeeReport////////////////////////////////////
    public studentDetailfee_transac[] getfeereport_details(string stud_id)
    {
        HttpContext context = HttpContext.Current;
        List<studentDetailfee_transac> details = new List<studentDetailfee_transac>();


        if (context.Session["fee_details"] != null)
        {
            DataTable dtt = (DataTable)context.Session["fee_details"];
            DataView dv = dtt.DefaultView;
            string[] id = stud_id.Split('<');

            dv.RowFilter = "Stud_id='" + id[0] + "'";
            DataTable dt = dv.ToTable();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    studentDetailfee_transac stud = new studentDetailfee_transac();
                    stud.stud_id = dtrow["Stud_id"].ToString();
                    stud.Recpt_mode = dtrow["Recpt_mode"].ToString();

                    stud.Amount = dtrow["Amount"].ToString();
                    stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();
                    stud.Chq_status = dtrow["Chq_status"].ToString();
                    stud.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                    stud.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                    stud.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();
                    stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();
                    details.Add(stud);


                }
                return details.ToArray();

            }
            else
            {
                return null;


            }
        }
        else
        {
            return null;

        }
    }
    public studentDetailfee[] getfeereport(string groupid, string year, string subcrs_id)
    {

        String daresult = null;
        string qry = "";

        // string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        //  DataSet ds = new DataSet();

        //using (SqlConnection con = new SqlConnection(constr))
        //{
        //    //using (SqlCommand cmd = new SqlCommand(qry))
        //    //{
        //        qry = "select  aca.Roll_no,fee.stud_id,per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Name],per.stud_Gender as Gender,per.stud_Category, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By from dbo.m_FeeEntry as fee,m_std_studentacademic_tbl as aca,m_std_personaldetails_tbl as per,m_FeeMaster as fm, v5_new as t where  aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and t.Stud_id=aca.stud_id and t.ayid=aca.ayid and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category order by LEN( aca.Roll_no),aca.Roll_no";
        //        List<String> listData = new List<String>();
        //       // qry = "select  aca.Roll_no,fee.stud_id,per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Name],per.stud_Gender as Gender,per.stud_Category, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By from dbo.m_FeeEntry as fee,m_std_studentacademic_tbl as aca,m_std_personaldetails_tbl as per,m_FeeMaster as fm, v5_new as t where  aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and t.Stud_id=aca.stud_id and t.ayid=aca.ayid and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category order by LEN( aca.Roll_no),aca.Roll_no";
        //       SqlCommand cmd = new SqlCommand(qry, con);
        //        cmd.CommandType = CommandType.Text;
        //        SqlDataAdapter da = new SqlDataAdapter();
        //        da.SelectCommand = cmd;
        //        DataTable dt = new DataTable();
        //        DataSet dsexcel = new DataSet();
        //        da.Fill(dt);
        //        dsexcel.Tables.Add(dt);
        //        daresult = DataSetToJSON(dsexcel);
        //        return daresult;

        //}


        // qry = "select  aca.Roll_no,fee.stud_id,per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student_Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By from dbo.m_FeeEntry as fee,m_std_studentacademic_tbl as aca,m_std_personaldetails_tbl as per,m_FeeMaster as fm, v5_new as t where  aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and t.Stud_id=aca.stud_id and t.ayid=aca.ayid and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category order by LEN( aca.Roll_no),aca.Roll_no";
        if (groupid == "0")
        {
            qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By', Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,fee.Recpt_Chq_dt from (SELECT  stud_id,amount,Ayid"
                + ",STUFF((SELECT ', ' + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id and Ayid='" + year + "' FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', '  + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id and Ayid='" + year + "' FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By , Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,Recpt_Chq_dt"
                + " FROM (select  Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt,stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid, Recpt_mode,Chq_status,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Recpt_Chq_dt) t GROUP BY stud_id,amount,ayid, Recpt_mode,Amount,Chq_status,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Recpt_Chq_dt) as fee,m_std_studentacademic_tbl as aca,"
                + "m_std_personaldetails_tbl as per,m_FeeMaster as fm,  m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
                //+"--, v5_new as t"
            + "  where sb.Group_id=aca.group_id and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0 and s.subcourse_id=aca.subcourse_Id "
                //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
            + " and aca.subcourse_Id='" + subcrs_id + "' and aca.ayid='" + year + "' group by  Recpt_mode,Chq_status,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Recpt_Chq_dt,aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category  order by LEN( aca.Roll_no),aca.Roll_no;"
            + "select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt from m_FeeEntry where Ayid='" + year + "' and del_flag=0 ";
        }
        else
        {
            qry = "select  aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By', Recpt_mode,Chq_status, Recpt_Chq_No, Recpt_Bnk_Name,Recpt_Bnk_Branch, Recpt_Chq_dt from (SELECT  stud_id,amount,Ayid"
                          + ",STUFF((SELECT ', '  + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = t.Stud_id and Ayid='" + year + "' FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', ' + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id and Ayid='" + year + "' FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By "
                          + ", Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt FROM (select stud_id,SUM(case when Chq_status='Clear' then amount else 0 end) - SUM( case when Chq_status='Refund' then amount else 0 end) Amount,Ayid, Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch, Recpt_Chq_dt  from m_FeeEntry  where del_flag=0 group by stud_id,Ayid, Recpt_mode,Chq_status,Recpt_Chq_No, Recpt_Bnk_Name,Recpt_Bnk_Branch, Recpt_Chq_dt) t GROUP BY stud_id,amount,ayid, Recpt_mode,Chq_status,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Recpt_Chq_dt) as fee,m_std_studentacademic_tbl as aca,"
                          + "m_std_personaldetails_tbl as per,m_FeeMaster as fm, m_crs_subcourse_tbl s,m_crs_subjectgroup_tbl as sb"
                //+"--, v5_new as t"
                      + " where sb.Group_id=aca.group_id  and aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and s.subcourse_id=aca.subcourse_Id "
                //+"--and t.Stud_id=aca.stud_id --and t.ayid=aca.ayid" 
                      + " and aca.subcourse_Id='" + subcrs_id + "' and aca.group_id='" + groupid + "' and aca.ayid='" + year + "' group by aca.Roll_no,fee.stud_id,fm.Amount,fee.Amount,per.stud_F_Name,per.stud_M_Name,per.stud_L_Name,sb.Group_title,per.stud_Gender,fee.Remark,fee.Authorized_By,per.stud_Category ,aca.ayid,per.stud_Category,Recpt_mode,Chq_status, Recpt_Chq_No, Recpt_Bnk_Name,Recpt_Bnk_Branch, Recpt_Chq_dt   order by LEN( aca.Roll_no),aca.Roll_no;"
                      + "select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt  from m_FeeEntry where Ayid='" + year + "' and del_flag=0 ";

        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<studentDetailfee> details = new List<studentDetailfee>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                cmd.CommandTimeout = 100000000;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    studentDetailfee stud = new studentDetailfee();
                //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                //    details.Add(stud);
                //}

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    studentDetailfee stud = new studentDetailfee();
                    stud.Roll_no = dtrow["Roll no"].ToString();
                    stud.stud_id = dtrow["Student ID"].ToString();
                    stud.Student_Name = dtrow["Student Name"].ToString();
                    stud.Gender = dtrow["Gender"].ToString();
                    stud.stud_Category = dtrow["Category"].ToString();
                    stud.CourseFees = dtrow["CourseFees"].ToString();
                    stud.FeesPaid = dtrow["FeesPaid"].ToString();
                    stud.subcourse_name = dtrow["Group_title"].ToString();

                    stud.FeesBal = dtrow["FeesBal"].ToString();
                    stud.Remark = dtrow["Remark"].ToString();
                    stud.Authorized_By = dtrow["Authorized By"].ToString();

                    stud.Recpt_mode = dtrow["Recpt_mode"].ToString();

                    // stud.Amount = dtrow["Amount"].ToString();
                    stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();
                    stud.Chq_status = dtrow["Chq_status"].ToString();
                    stud.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                    stud.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                    stud.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();

                    //string[] remrk = dtrow["Remark"].ToString().Split(',');
                    //System.Text.StringBuilder str = new System.Text.StringBuilder();
                    //foreach (string s in remrk)
                    //{
                    //    str.Append(s);
                    //    str.Append(Environment.NewLine);
                    //}
                    //stud.Remark = str.ToString().Replace(Environment.NewLine, "<br />");



                    //string[] auth = dtrow["Authorized By"].ToString().Split(',');
                    //System.Text.StringBuilder str1 = new System.Text.StringBuilder();
                    //foreach (string s in auth)
                    //{
                    //    str1.Append(s);
                    //    str1.Append(Environment.NewLine);
                    //}
                    //stud.Authorized_By = str1.ToString().Replace(Environment.NewLine, "<br />");


                    details.Add(stud);
                }
                con.Close();
                HttpContext context = HttpContext.Current;
                context.Session["fee_details"] = ds.Tables[1];
                return details.ToArray();

            }
        }
    }

    public studentDetailfee_transac[] getstudfeereport_details(string ayid)
    {
        HttpContext context = HttpContext.Current;
        List<studentDetailfee_transac> details = new List<studentDetailfee_transac>();


        if (context.Session["stud_fee_details"] != null)
        {
            DataTable dtt = (DataTable)context.Session["stud_fee_details"];
            DataView dv = dtt.DefaultView;
            string[] id = ayid.Split(':');

            dv.RowFilter = "ayid='" + id[2].Trim() + "'";
            DataTable dt = dv.ToTable();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    studentDetailfee_transac stud = new studentDetailfee_transac();
                    stud.stud_id = dtrow["Stud_id"].ToString();
                    stud.Recpt_mode = dtrow["Recpt_mode"].ToString();

                    stud.Amount = dtrow["Amount"].ToString();
                    stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();
                    stud.Chq_status = dtrow["Chq_status"].ToString();
                    stud.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                    stud.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                    stud.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();

                    details.Add(stud);


                }
                return details.ToArray();

            }
            else
            {
                return null;


            }
        }
        else
        {
            return null;

        }
    }
    public studentDetailfee[] getStudfeereport(string student_id)
    {

        String daresult = null;
        string qry = "";



        if (student_id != string.Empty)
        {
            qry = "select aca.ayid ,aca.Roll_no 'Roll No',fee.stud_id 'Student ID',per.stud_L_Name+' '+per.stud_F_Name+' '+per.stud_M_Name as [Student Name],(case  when per.stud_Gender=0 then 'Female' else 'Male' end) as Gender,per.stud_Category as 'Category',sb.Group_title,s.subcourse_name, fm.Amount as CourseFees,fee.Amount as FeesPaid ,(fm.Amount - fee.Amount) as FeesBal,fee.Remark,fee.Authorized_By as 'Authorized By',Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch from (SELECT  stud_id,amount,Ayid,Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,STUFF((SELECT ', '  + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry "
            + " WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark,STUFF((SELECT ', '  + CAST(Authorized_By AS VARCHAR(max))   FROM m_FeeEntry WHERE stud_id = t.Stud_id FOR XML PATH(''), TYPE)       .value('.', 'varchar(max)'), 1, 1, '') Authorized_By FROM (select Recpt_mode,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,stud_id,SUM(case when Chq_status='Clear' then amount else 0 end)Amount,Ayid from m_FeeEntry  where del_flag=0 group by stud_id,Ayid,Recpt_mode,Chq_status,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch) t GROUP BY stud_id,amount,ayid,Recpt_mode,Chq_status,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch) as fee,m_std_studentacademic_tbl as aca,m_std_personaldetails_tbl as per,m_FeeMaster as fm, m_crs_subcourse_tbl s ,m_crs_subjectgroup_tbl as sb"
            + " where sb.Group_id=aca.group_id and  aca.Stud_id=per.Stud_id and Aca.Stud_id = fee.Stud_id And Aca.ayid = fee.ayid and fm.Group_id=aca.Group_id and  fm.Ayid=aca.ayid and aca.del_flag=0  and s.subcourse_id=aca.subcourse_Id  and aca.stud_id='" + student_id + "' order by ayid desc;"
            + " select  ayid,Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch,isnull(cast(cast(Recpt_Chq_dt as date)as varchar),'NA') as Recpt_Chq_dt  from m_FeeEntry where Stud_id='" + student_id + "' and del_flag=0";

        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<studentDetailfee> details = new List<studentDetailfee>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    studentDetailfee stud = new studentDetailfee();
                //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                //    details.Add(stud);
                //}

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    studentDetailfee stud = new studentDetailfee();
                    stud.AYID = dtrow["ayid"].ToString();

                    stud.Roll_no = dtrow["Roll no"].ToString();
                    stud.stud_id = dtrow["Student ID"].ToString();
                    stud.Student_Name = dtrow["Student Name"].ToString();
                    stud.Gender = dtrow["Gender"].ToString();
                    stud.stud_Category = dtrow["Category"].ToString();
                    stud.CourseFees = dtrow["CourseFees"].ToString();
                    stud.FeesPaid = dtrow["FeesPaid"].ToString();
                    stud.subcourse_name = dtrow["subcourse_name"].ToString();

                    stud.FeesBal = dtrow["FeesBal"].ToString();
                    stud.Remark = dtrow["Remark"].ToString();


                    stud.Recpt_mode = dtrow["Recpt_mode"].ToString();

                    // stud.Amount = dtrow["Amount"].ToString();
                    //  stud.Recpt_Chq_dt = dtrow["Recpt_Chq_dt"].ToString();
                    stud.Chq_status = dtrow["Chq_status"].ToString();
                    stud.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                    stud.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                    stud.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();


                    //string[] remrk = dtrow["Remark"].ToString().Split(',');
                    //System.Text.StringBuilder str = new System.Text.StringBuilder();

                    //foreach (string s in remrk)
                    //{
                    //    str.Append(s);
                    //    str.Append(Environment.NewLine);
                    //}
                    //stud.Remark = str.ToString().Replace(Environment.NewLine, "<br />");



                    //string[] auth = dtrow["Authorized By"].ToString().Split(',');
                    //System.Text.StringBuilder str1 = new System.Text.StringBuilder();
                    //foreach (string s in auth)
                    //{
                    //    str1.Append(s);
                    //    str1.Append(Environment.NewLine);
                    //}
                    stud.Authorized_By = dtrow["Authorized By"].ToString();


                    details.Add(stud);
                }
                con.Close();
                HttpContext context = HttpContext.Current;
                context.Session["stud_fee_details"] = ds.Tables[1];
                return details.ToArray();

            }
        }

    }

    //-------------shweta------

    //-------------shweta------

    public bool submitclass(string emp_id, string emp_previous_organization, string emp_previous_designation, string emp_previous_job_dept, string emp_previous_salary, string emp_previous_job_from, string emp_previous_job_to, string status)   //(logClass logclass)
    {
        bool stateNotes = false;
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand("sp_professional_experience_insert", con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;


                if (status == "Insert")
                {
                    cmd.Parameters.AddWithValue("@emp_id", emp_id);
                    cmd.Parameters.AddWithValue("@emp_previous_organization", emp_previous_organization);
                    cmd.Parameters.AddWithValue("@emp_previous_designation", emp_previous_designation);
                    cmd.Parameters.AddWithValue("@emp_previous_job_dept", emp_previous_job_dept);
                    cmd.Parameters.AddWithValue("@emp_previous_salary", emp_previous_salary);
                    cmd.Parameters.AddWithValue("@emp_previous_job_from", emp_previous_job_from);
                    cmd.Parameters.AddWithValue("@emp_previous_job_to", emp_previous_job_to);
                    cmd.Parameters.AddWithValue("@del_id", 0);
                    cmd.Parameters.AddWithValue("@Status", status);



                    string message = Convert.ToString(cmd.ExecuteScalar());
                }

            }
        }
        return stateNotes;

    }


    public bool updateclass(string emp_id, string emp_previous_organization, string emp_previous_designation, string emp_previous_job_dept, string emp_previous_salary, string emp_previous_job_from, string emp_previous_job_to, string status, string dbemp_previous_organization, string dbemp_previous_designation, string dbemp_previous_job_dept, string dbemp_previous_salary, string dbemp_previous_job_from, string dbemp_previous_job_to)   //(logClass logclass)
    {
        bool stateNotes = false;
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand("sp_professional_experience_update", con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                DateTime dtfrom = Convert.ToDateTime(emp_previous_job_from);
                DateTime dtto = Convert.ToDateTime(emp_previous_job_to);

                if (status == "Update")
                {
                    cmd.Parameters.AddWithValue("@emp_id", emp_id);
                    cmd.Parameters.AddWithValue("@emp_previous_organization", emp_previous_organization);
                    cmd.Parameters.AddWithValue("@emp_previous_designation", emp_previous_designation);
                    cmd.Parameters.AddWithValue("@emp_previous_job_dept", emp_previous_job_dept);
                    cmd.Parameters.AddWithValue("@emp_previous_salary", emp_previous_salary);
                    cmd.Parameters.AddWithValue("@emp_previous_job_from", emp_previous_job_from);
                    cmd.Parameters.AddWithValue("@emp_previous_job_to", emp_previous_job_to);
                    cmd.Parameters.AddWithValue("@del_id", 0);
                    cmd.Parameters.AddWithValue("@Status", status);

                    cmd.Parameters.AddWithValue("@dbemp_previous_organization", dbemp_previous_organization);
                    cmd.Parameters.AddWithValue("@dbemp_previous_designation", dbemp_previous_designation);
                    cmd.Parameters.AddWithValue("@dbemp_previous_job_dept", dbemp_previous_job_dept);
                    cmd.Parameters.AddWithValue("@dbemp_previous_salary", dbemp_previous_salary);
                    cmd.Parameters.AddWithValue("@dbemp_previous_job_from", dbemp_previous_job_from);
                    cmd.Parameters.AddWithValue("@dbemp_previous_job_to", dbemp_previous_job_to);

                    string message = Convert.ToString(cmd.ExecuteScalar());
                }
                else if (status == "Delete")
                {
                    cmd.Parameters.AddWithValue("@emp_id", emp_id);
                    cmd.Parameters.AddWithValue("@emp_previous_organization", emp_previous_organization);
                    cmd.Parameters.AddWithValue("@emp_previous_designation", emp_previous_designation);
                    cmd.Parameters.AddWithValue("@emp_previous_job_dept", emp_previous_job_dept);
                    cmd.Parameters.AddWithValue("@emp_previous_salary", emp_previous_salary);
                    cmd.Parameters.AddWithValue("@emp_previous_job_from", emp_previous_job_from);
                    cmd.Parameters.AddWithValue("@emp_previous_job_to", emp_previous_job_to);
                    cmd.Parameters.AddWithValue("@del_id", 0);
                    cmd.Parameters.AddWithValue("@Status", status);

                    cmd.Parameters.AddWithValue("@dbemp_previous_organization", dbemp_previous_organization);
                    cmd.Parameters.AddWithValue("@dbemp_previous_designation", dbemp_previous_designation);
                    cmd.Parameters.AddWithValue("@dbemp_previous_job_dept", dbemp_previous_job_dept);
                    cmd.Parameters.AddWithValue("@dbemp_previous_salary", dbemp_previous_salary);
                    cmd.Parameters.AddWithValue("@dbemp_previous_job_from", dbemp_previous_job_from);
                    cmd.Parameters.AddWithValue("@dbemp_previous_job_to", dbemp_previous_job_to);

                    string message = Convert.ToString(cmd.ExecuteScalar());
                }


            }
        }
        return stateNotes;

    }


    //test creation
    public string saveTestUrl(string id, string url, string empid, string name, string type)
    {


        if (type == "insert")
        {
            DataTable dt = cls1.fillDataTable("select url from web_tp_testmaster where url='" + url + "' and del_flag=0");
            if (dt.Rows.Count == 0)
            {

                if (cls1.DMLqueries("insert into web_tp_testmaster values ('" + id + "','" + name + "','" + url + "','" + empid + "',0,getdate())"))
                {

                    return "saved";
                }
                else
                {
                    return "error";
                }
            }
            else
            {
                return "exists";

            }
        }
        else
        {
            if (cls1.DMLqueries("update web_tp_testmaster set del_Flag=1 where testid='" + id + "'"))
            {
                return "updated";
            }
            else
            {
                return "error";
            }

        }
    }
    public string[] EmpTest(string empid)
    {
        string qry = "select distinct url+'|'+test_name+'|'+testid from web_tp_testmaster where emp_id='" + empid + "' and del_flag=0";
        string[] arr;

        DataTable dt = cls1.fillDataTable(qry);
        if (dt.Rows.Count > 0)
        {
            arr = new string[dt.Rows.Count];
            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                arr[i] = dt.Rows[i][0].ToString();
            }
        }
        else
        {

            arr = new string[1];
            arr[0] = "";
        }
        return arr;


    }

    public logreport[] getLog(string empid, string strtdt, string enddt)
    {


        string qry = "";



        if (strtdt == "" && enddt == "")
        {

            qry = "select top 20 log_id,log_type,coalesce(b.Group_title,'-') Group_title,c.subject_name ,coalesce(case when div_batch_id='' then '-' else div_batch_id end ,'-') div_batch_id, substring(cast(start_time as varchar),0,len(start_time )-1) start_time,substring(cast(end_time as varchar),0,len(end_time )-1) end_time,remark from web_tp_log a left join dbo.m_crs_subjectgroup_tbl b on a.group_id=b.group_id inner join cre_subject c on a.sub_id=c.subject_id "
                         + " where emp_id='" + empid + "' and a.del_flag=0 order by start_time desc";


        }
        else
        {
            qry = "select   log_id,log_type,coalesce(b.Group_title,'-') Group_title,c.subject_name ,coalesce(case when div_batch_id='' then '-' else div_batch_id end ,'-') div_batch_id, substring(cast(start_time as varchar),0,len(start_time )-1) start_time,substring(cast(end_time as varchar),0,len(end_time )-1) end_time,remark from web_tp_log a left join dbo.m_crs_subjectgroup_tbl b on a.group_id=b.group_id inner join cre_subject c on a.sub_id=c.subject_id "
                + " where emp_id='" + empid + "' and a.del_flag=0 and start_time>=convert(datetime,'" + strtdt + "',105) and end_time <=convert(datetime,'" + enddt + "',105) order by start_time desc";
        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<logreport> details = new List<logreport>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    studentDetailfee stud = new studentDetailfee();
                //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                //    details.Add(stud);
                //}

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    logreport stud = new logreport();
                    stud.log_type = dtrow["log_type"].ToString();
                    stud.log_id = dtrow["log_id"].ToString();
                    stud.subject_name = dtrow["subject_name"].ToString();

                    stud.Group_title = dtrow["Group_title"].ToString();
                    stud.div_batch_id = dtrow["div_batch_id"].ToString();
                    stud.start_time = dtrow["start_time"].ToString();
                    stud.end_time = dtrow["end_time"].ToString();
                    stud.remark = dtrow["remark"].ToString();




                    details.Add(stud);
                }
                con.Close();

                return details.ToArray();

            }
        }

    }


    //define eligibility prtima
    public Modal_class[] Modal_grid(string stud_id, string final_grp)
    {

        string qry = "";
        qry = qry + "select isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,(select ayid from m_academic where IsCurrent=1) as curr,a.ayid,i.Duration ,s.subcourse_name as Subcourse ,";
        qry = qry + "g.Group_title as Subcourse_Group,a.group_id,a.subcourse_Id,c.course_id,a.Roll_no from m_std_studentacademic_tbl as a ,";
        qry = qry + "m_crs_subjectgroup_tbl as g,m_crs_subcourse_tbl as s,m_academic as i ,m_std_personaldetails_tbl as p,m_crs_course_tbl as c ";
        qry = qry + "where a.stud_id='" + stud_id + "' and a.group_id=g.Group_id and s.subcourse_id=g.Subcourse_id and i.AYID=a.ayid and p.stud_id=a.stud_id and c.course_id=s.course_id and a.group_id in (" + final_grp + ") order by ayid desc";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        List<Modal_class> details = new List<Modal_class>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                Modal_class modal = new Modal_class();
                modal.curr_ayd = dtrow["curr"].ToString();
                modal.Name = dtrow["Student_Name"].ToString();
                modal.ayid = dtrow["ayid"].ToString();
                modal.duration = dtrow["Duration"].ToString();
                modal.subcourse = dtrow["Subcourse"].ToString();
                modal.sub_crs_id = dtrow["subcourse_Id"].ToString();
                modal.group_title = dtrow["Subcourse_Group"].ToString();
                modal.course = dtrow["course_id"].ToString();
                modal.grp_id = dtrow["group_id"].ToString();
                modal.roll_no = dtrow["Roll_no"].ToString();
                modal.msg = "";
                details.Add(modal);
            }
            return details.ToArray();
        }
        else
        {
            Modal_class modal = new Modal_class();
            modal.msg = "Not Related to Group";
            details.Add(modal);
            return details.ToArray();
        }
    }

    public EligibilityClass[] changesubgroup(string ayid, string group_id, string subcourse_id, string subcrs_text, string stud_Id, string from_roll_no, string to_roll_no)
    {
        string last = ayid.Substring(5, 2);
        string new_ay = Convert.ToString(Convert.ToInt32(last) + 1);
        string new_ayid = string.Concat("AYD00", new_ay);
        string query = "";

        if (stud_Id != "")
        {
            DataTable dt1 = cls1.fillDataTable("select COUNT(*) from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "' and del_flag=0");
            if (int.Parse(dt1.Rows[0][0].ToString()) > 0)
            {
                //update data
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + "  is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + "  cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join ";
                    query = query + "  (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + "  and a.stud_id=p.stud_id and c.stud_id=a.stud_id  and a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int) asc";
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + " c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + "  is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + "  cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join ";
                    query = query + "  (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + "  and a.stud_id=p.stud_id and c.stud_id=a.stud_id  and a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int) asc";
                }
                else
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + "  case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + "  c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + "  else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + "  c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + "  c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + "  else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + "  c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                    query = query + "  c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                    query = query + "   else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                    query = query + "   is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + "   cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join ";
                    query = query + "   (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + "   and a.stud_id=p.stud_id and c.stud_id=a.stud_id  and a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int) asc";
                }
            }
            else
            {
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + "case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + "c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + "case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,a.Roll_no from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + "a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id and a.stud_id='" + stud_Id + "'  order by p.stud_id";
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,a.Roll_no from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id and a.stud_id='" + stud_Id + "' order by p.stud_id";
                }
                else
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                    query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                    query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                    query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,a.Roll_no from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id and a.stud_id='" + stud_Id + "' order by p.stud_id";
                }
            }
        }
        else if (from_roll_no != "" && to_roll_no != "")
        {
            DataTable dt2 = cls1.fillDataTable("select COUNT(*) from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id in (select stud_id from m_std_studentacademic_tbl where cast(Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " and Group_id='" + group_id + "') and del_flag=0");
            if (int.Parse(dt2.Rows[0][0].ToString()) > 0)
            {
                //update data
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id in (select stud_id from m_std_studentacademic_tbl where cast(Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " and group_id='" + group_id + "')) as e on a.stud_id=e.Stud_id left join ";
                    query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + " and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    query = " select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type ,cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id in (select stud_id from m_std_studentacademic_tbl where cast(Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " and group_id='" + group_id + "')) as e on a.stud_id=e.Stud_id left join ";
                    query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + " and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
                }
                else
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                    query = query + "  case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                    query = query + "  c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                    query = query + "  else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                    query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id in (select stud_id from m_std_studentacademic_tbl where cast(Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " and group_id='" + group_id + "')) as e on a.stud_id=e.Stud_id left join ";
                    query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + " and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
                }
            }
            else
            {
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + "case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + "c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + "case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + "a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
                }
                else
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                    query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                    query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                    query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
                }
            }
        }
        else
        {
            DataTable dt2 = cls1.fillDataTable("select COUNT(*) from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and del_flag=0");
            if (int.Parse(dt2.Rows[0][0].ToString()) > 0)
            {
                //update data
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 0 end as form_filled,case when e.Stud_id is null then 'insert' else  'update' end  type,cast(a.Roll_no as int)Roll_no  from m_std_personaldetails_tbl as p,";
                    query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join ";
                    query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + " and a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 0 end as form_filled,case when e.Stud_id is null then 'insert' else  'update' end  type,cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p,";
                    query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join ";
                    query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + " and a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                }
                else
                {
                    query = "  select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                    query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                    query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                    query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 0 end as form_filled,case when e.Stud_id is null then 'insert' else  'update' end  type,cast(a.Roll_no as int)Roll_no  from m_std_personaldetails_tbl as p,";
                    query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join ";
                    query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                    query = query + " and a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                }
            }
            else
            {
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + "case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + "c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                    query = query + "case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no  from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + "a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                    query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no  from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                }
                else
                {
                    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                    query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                    query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                    query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                    query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                    query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                    query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                    query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no  from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                    query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and c.stud_id=a.stud_id order by cast(a.Roll_no as int) asc";
                }
            }
        }



        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        List<EligibilityClass> details = new List<EligibilityClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(query))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                cmd.CommandTimeout = 100;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                // da.Fill(ds);
                da.Fill(dt);



                string[] semArr = new string[0];
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    semArr = new string[2];
                    semArr[0] = "Sem-1";
                    semArr[1] = "Sem-2";
                    dt.Columns.Add("Sem1_KT");
                    dt.Columns.Add("Sem2_KT");
                    dt.Columns.Add("STATUS");
                    // dt.Columns.Add("Form_filled");
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    semArr = new string[4];
                    semArr[0] = "Sem-1";
                    semArr[1] = "Sem-2";
                    semArr[2] = "Sem-3";
                    semArr[3] = "Sem-4";
                    dt.Columns.Add("Sem1_KT");
                    dt.Columns.Add("Sem2_KT");
                    dt.Columns.Add("Sem3_KT");
                    dt.Columns.Add("Sem4_KT");
                    dt.Columns.Add("STATUS");
                    //dt.Columns.Add("Form_filled");
                }
                else if (subcrs_text.StartsWith("T"))
                {
                    semArr = new string[6];
                    semArr[0] = "Sem-1";
                    semArr[1] = "Sem-2";
                    semArr[2] = "Sem-3";
                    semArr[3] = "Sem-4";
                    semArr[4] = "Sem-5";
                    semArr[5] = "Sem-6";
                    dt.Columns.Add("Sem1_KT");
                    dt.Columns.Add("Sem2_KT");
                    dt.Columns.Add("Sem3_KT");
                    dt.Columns.Add("Sem4_KT");
                    dt.Columns.Add("Sem5_KT");
                    dt.Columns.Add("Sem6_KT");
                    dt.Columns.Add("STATUS");
                    //dt.Columns.Add("Form_filled");
                }
                else
                {
                    semArr = new string[6];
                    semArr[0] = "Sem-1";
                    semArr[1] = "Sem-2";
                    semArr[2] = "Sem-3";
                    semArr[3] = "Sem-4";
                    semArr[4] = "Sem-5";
                    semArr[5] = "Sem-6";
                    dt.Columns.Add("Sem1_KT");
                    dt.Columns.Add("Sem2_KT");
                    dt.Columns.Add("Sem3_KT");
                    dt.Columns.Add("Sem4_KT");
                    dt.Columns.Add("Sem5_KT");
                    dt.Columns.Add("Sem6_KT");
                    dt.Columns.Add("STATUS");
                    // dt.Columns.Add("Form_filled");
                }
                DataSet ds1 = new DataSet();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string qry;
                    for (int j = 0; j < semArr.Length; j++)
                    {
                        //qry = "select case when count(ISNULL(c.remark,0))=0 then '' else COUNT(ISNULL(c.remark,0)) end as KT_Count from m_std_studentacademic_tbl as a,cre_marks_tbl as c ";
                        //qry = qry + "where exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' order by curr_date DESC) and a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and ";
                        //qry = qry + "a.stud_id=c.stud_id and c.stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and c.sem_id='" + semArr[j] + "' GROUP BY c.remark HAVING c.remark = 'UnSuccessful'";

                        qry = "select case when count(ISNULL(c.remark,0))=0 then '' else COUNT(ISNULL(c.remark,0)) end as KT_Count from(select distinct c.* from m_std_studentacademic_tbl as a,cre_marks_tbl as c ";
                        qry = qry + "where exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' order by curr_date DESC) and a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and ";
                        qry = qry + "a.stud_id=c.stud_id and c.stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and c.sem_id='" + semArr[j] + "') c GROUP BY c.remark HAVING c.remark = 'UnSuccessful'";


                        ds1 = cls1.fillDataset(qry);
                        if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("Part I"))
                        {
                            if (j == 0)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];

                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem1_KT"] = 0;
                                }
                            }
                            else if (j == 1)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem2_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem2_KT"] = 0;
                                }
                            }
                        }
                        else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II"))
                        {
                            if (j == 0)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem1_KT"] = 0;
                                }
                            }
                            else if (j == 1)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem2_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem2_KT"] = 0;
                                }
                            }
                            else if (j == 2)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem3_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem3_KT"] = 0;
                                }
                            }
                            else if (j == 3)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem4_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem4_KT"] = 0;
                                }
                            }
                        }
                        else if (subcrs_text.StartsWith("T"))
                        {
                            if (j == 0)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem1_KT"] = 0;
                                }
                            }
                            else if (j == 1)
                            {
                                if (j == 1 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem2_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem2_KT"] = 0;
                                }
                            }
                            else if (j == 2)
                            {
                                if (j == 2 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem3_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem3_KT"] = 0;
                                }
                            }
                            else if (j == 3)
                            {
                                if (j == 3 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem4_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem4_KT"] = 0;
                                }
                            }
                            else if (j == 4)
                            {
                                if (j == 4 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem5_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem5_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem5_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem5_KT"] = 0;
                                }
                            }
                            else if (j == 5)
                            {
                                if (j == 5 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem6_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem6_KT"] = 0;
                                }
                            }
                        }
                        else
                        {
                            if (j == 0)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 1)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem1_KT"] = 0;
                                }
                            }
                            else if (j == 1)
                            {
                                if (j == 1 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 1)
                                    {
                                        dt.Rows[i]["sem2_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem2_KT"] = 0;
                                }
                            }
                            else if (j == 2)
                            {
                                if (j == 2 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 1)
                                    {
                                        dt.Rows[i]["sem3_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem3_KT"] = 0;
                                }
                            }
                            else if (j == 3)
                            {
                                if (j == 3 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 1)
                                    {
                                        dt.Rows[i]["sem4_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem4_KT"] = 0;
                                }
                            }
                            else if (j == 4)
                            {
                                if (j == 4 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem5_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem5_KT"]) > 1)
                                    {
                                        dt.Rows[i]["sem5_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem5_KT"] = 0;
                                }
                            }
                            else if (j == 5)
                            {
                                if (j == 5 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem6_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem6_KT"]) > 1)
                                    {
                                        dt.Rows[i]["sem6_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem6_KT"] = 0;
                                }
                            }
                        }
                    }

                    if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                    {
                        if (string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_cg"])) == true)
                        {
                            dt.Rows[i]["STATUS"] = "No Data";
                        }
                        else
                        {
                            if (group_id == "GRP012" || group_id == "GRP012" || group_id == "GRP013" || group_id == "GRP145" || group_id == "GRP148" || group_id == "GRP149" || group_id == "GRP011" || group_id == "GRP147" || group_id == "GRP098" || group_id == "GRP150" || group_id == "GRP191" || group_id == "GRP206" || group_id == "GRP188")
                            {
                                if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 3 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 3)
                                {
                                    dt.Rows[i]["STATUS"] = "Eligible";
                                }
                                else
                                {
                                    dt.Rows[i]["STATUS"] = "Not Eligible";
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 2 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 2)
                                {
                                    dt.Rows[i]["STATUS"] = "Eligible";
                                }
                                else
                                {
                                    dt.Rows[i]["STATUS"] = "Not Eligible";
                                }
                            }
                        }
                    }
                    else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                    {
                        int yr1 = Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) + Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString());
                        int yr2 = Convert.ToInt32(dt.Rows[i]["Sem3_KT"].ToString()) + Convert.ToInt32(dt.Rows[i]["Sem4_KT"].ToString());

                        if (string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem3_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem3_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem4_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem4_cg"])) == true)
                        {
                            dt.Rows[i]["STATUS"] = "No Data";
                        }
                        else
                        {
                            if (yr1 > 0 && yr2 > 0)
                            {
                                dt.Rows[i]["STATUS"] = "Not Eligible";
                            }
                            else if (yr1 > 0 || yr2 > 0)
                            {
                                if (yr1 > 0)
                                {
                                    if (group_id == "GRP166" || group_id == "GRP021" || group_id == "GRP168" || group_id == "GRP169" || group_id == "GRP170" || group_id == "GRP117" || group_id == "GRP012" || group_id == "GRP023" || group_id == "GRP024" || group_id == "GRP025" || group_id == "GRP171" || group_id == "GRP032" || group_id == "GRP111" || group_id == "GRP179" || group_id == "GRP186" || group_id == "GRP206" || group_id == "GRP188")
                                    {
                                        if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 3 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 3)
                                        {
                                            dt.Rows[i]["STATUS"] = "Eligible";
                                        }
                                        else
                                        {
                                            dt.Rows[i]["STATUS"] = "Not Eligible";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 2 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 2)
                                        {
                                            dt.Rows[i]["STATUS"] = "Eligible";
                                        }
                                        else
                                        {
                                            dt.Rows[i]["STATUS"] = "Not Eligible";
                                        }
                                    }
                                }
                                else if (yr2 > 0)
                                {
                                    if (group_id == "GRP166" || group_id == "GRP021" || group_id == "GRP168" || group_id == "GRP169" || group_id == "GRP170" || group_id == "GRP117" || group_id == "GRP012" || group_id == "GRP023" || group_id == "GRP024" || group_id == "GRP025" || group_id == "GRP171" || group_id == "GRP032" || group_id == "GRP111" || group_id == "GRP179" || group_id == "GRP186" || group_id == "GRP188")
                                    {
                                        if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"].ToString()) <= 3 && Convert.ToInt32(dt.Rows[i]["Sem4_KT"].ToString()) <= 3)
                                        {
                                            dt.Rows[i]["STATUS"] = "Eligible";
                                        }
                                        else
                                        {
                                            dt.Rows[i]["STATUS"] = "Not Eligible";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"].ToString()) <= 2 && Convert.ToInt32(dt.Rows[i]["Sem4_KT"].ToString()) <= 2)
                                        {
                                            dt.Rows[i]["STATUS"] = "Eligible";
                                        }
                                        else
                                        {
                                            dt.Rows[i]["STATUS"] = "Not Eligible";
                                        }
                                    }
                                }
                            }
                            else
                            {
                                dt.Rows[i]["STATUS"] = "Eligible";
                            }
                        }
                    }
                    else if (subcrs_text.StartsWith("T"))
                    {

                    }
                    else
                    {

                    }
                }


                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                {
                    foreach (DataRow dtrow in dt.Rows)
                    {
                        EligibilityClass elig = new EligibilityClass();
                        elig.studid = dtrow["stud_id"].ToString();
                        elig.name = dtrow["Student_Name"].ToString();
                        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                        elig.Status = dtrow["STATUS"].ToString();
                        elig.formfilled = dtrow["form_filled"].ToString();
                        elig.exist = dtrow["Status"].ToString();
                        elig.type = dtrow["type"].ToString();//Roll_no
                        elig.roll_no = dtrow["Roll_no"].ToString();
                        details.Add(elig);
                    }
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith(" II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    foreach (DataRow dtrow in dt.Rows)
                    {
                        EligibilityClass elig = new EligibilityClass();
                        elig.studid = dtrow["stud_id"].ToString();
                        elig.name = dtrow["Student_Name"].ToString();
                        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                        elig.Status = dtrow["STATUS"].ToString();
                        elig.formfilled = dtrow["form_filled"].ToString();
                        elig.exist = dtrow["Status"].ToString();
                        elig.type = dtrow["type"].ToString();
                        elig.roll_no = dtrow["Roll_no"].ToString();
                        details.Add(elig);
                    }
                }
                else if (subcrs_text.StartsWith("T"))
                {
                    foreach (DataRow dtrow in dt.Rows)
                    {
                        EligibilityClass elig = new EligibilityClass();
                        elig.studid = dtrow["stud_id"].ToString();
                        elig.name = dtrow["Student_Name"].ToString();
                        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                        elig.sem5_cg = dtrow["sem5_cg"].ToString();
                        elig.sem5_ce = dtrow["sem5_credit_earn"].ToString();
                        elig.sem5_sgpi = dtrow["sem5_SGPI"].ToString();
                        elig.sem6_cg = dtrow["sem6_cg"].ToString();
                        elig.sem6_ce = dtrow["sem6_credit_earn"].ToString();
                        elig.sem6_sgpi = dtrow["sem6_SGPI"].ToString();
                        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                        elig.sem5_KT = dtrow["Sem5_KT"].ToString();
                        elig.sem6_KT = dtrow["Sem6_KT"].ToString();
                        elig.Status = dtrow["STATUS"].ToString();
                        elig.formfilled = dtrow["form_filled"].ToString();
                        elig.exist = dtrow["Status"].ToString();
                        elig.type = dtrow["type"].ToString();
                        elig.roll_no = dtrow["Roll_no"].ToString();
                        details.Add(elig);
                    }
                }
                else
                {
                    foreach (DataRow dtrow in dt.Rows)
                    {
                        EligibilityClass elig = new EligibilityClass();
                        elig.studid = dtrow["stud_id"].ToString();
                        elig.name = dtrow["Student_Name"].ToString();
                        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                        elig.sem5_cg = dtrow["sem5_cg"].ToString();
                        elig.sem5_ce = dtrow["sem5_credit_earn"].ToString();
                        elig.sem5_sgpi = dtrow["sem5_SGPI"].ToString();
                        elig.sem6_cg = dtrow["sem6_cg"].ToString();
                        elig.sem6_ce = dtrow["sem6_credit_earn"].ToString();
                        elig.sem6_sgpi = dtrow["sem6_SGPI"].ToString();
                        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                        elig.sem5_KT = dtrow["Sem5_KT"].ToString();
                        elig.sem6_KT = dtrow["Sem6_KT"].ToString();
                        elig.Status = dtrow["STATUS"].ToString();
                        elig.formfilled = dtrow["form_filled"].ToString();
                        elig.exist = dtrow["Status"].ToString();
                        elig.type = dtrow["type"].ToString();
                        elig.roll_no = dtrow["Roll_no"].ToString();
                        details.Add(elig);
                    }
                }
                con.Close();
                return details.ToArray();
            }
        }
    }


    public bool checkstuddata(string stud_id)
    {
        string query = "select * from cre_stud_academic where stud_id='" + stud_id + "'";
        DataSet ds = cls1.fill_dataset(query);
        if (ds.Tables[0].Rows.Count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool saveData1(string qry, string id)
    {
        string str = "select * from cre_stud_academic where stud_id='" + id + "'";
        DataSet ds = cls1.fill_dataset(str);
        if (ds.Tables[0].Rows.Count > 0)
        {
            return false;
        }
        else
        {
            return cls1.DMLqueries(qry);
        }
    }




    public List<ListItem> subgroup(string grp_id)
    {
        // String qry = "select s.Group_id,s.Group_title from m_crs_subjectgroup_tbl as s,Group_Mapping as m where m.Group_id ='" + grp_id + "' and m.Map_Group_Id=s.Group_id";
        string qry = "";
        qry = "select distinct s.Group_id,s.Group_title from m_crs_subjectgroup_tbl as s,Group_Mapping as m where m.Group_id ='" + grp_id + "' and m.Map_Group_Id=s.Group_id";
        DataSet dsfi = cls1.fill_dataset(qry);
        if (dsfi.Tables[0].Rows.Count > 0)
        {

        }
        else
        {
            string subcrs = "select subcourse_id from m_crs_subjectgroup_tbl where group_id='" + grp_id + "'";
            DataSet ds = cls1.fill_dataset(subcrs);
            qry = "select distinct s.Group_id,s.Group_title from m_crs_subjectgroup_tbl as s,Group_Mapping as m where m.Map_Group_Id=s.Group_id and m.Group_id in (select group_id from m_crs_subjectgroup_tbl where subcourse_id='" + ds.Tables[0].Rows[0][0].ToString() + "' and group_title not like '%2015%' and group_title not like '%2016%' and group_title not like '%2014%' and group_title not like '%OLD%')";
        }


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> subgrp = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subgrp.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return subgrp;
            }
        }
    }

    public bool saveData(string qry)
    {
        return cls1.DMLqueries(qry);
    }

    public bool checkfreeship(string stud_id, string ayid, string attend, string remark, string user_id)
    {

        string str, updateqry;
        DataTable dt = new DataTable();
        if (stud_id != "" || ayid != "" || attend != "" || remark != "" || user_id != "")
        {
            str = "select * from freeship_scholorship_attendance where stud_id='" + stud_id + "' and ayid='" + ayid + "' and del_flag=0";
            dt = cls.fillDataTable(str);
            if (dt.Rows.Count > 0)
            {
                updateqry = "update freeship_scholorship_attendance set attendance='" + attend + "' ,Remark='" + remark + "',mod_dt=GETDATE() where stud_id='" + stud_id + "' and ayid='" + ayid + "' and del_flag=0";
                cls.DMLqueries(updateqry);
            }
            else
            {
                updateqry = "insert into freeship_scholorship_attendance (stud_id,attendance,ayid,remark,curr_dt,del_flag,user_id) values ('" + stud_id + "','" + attend + "','" + ayid + "','" + remark + "',GETDATE(),0,'" + user_id + "')";
                cls.DMLqueries(updateqry);
            }
            return true;
        }
        else
        {
            return false;
        }

    }
    public bool Backup_data(string stud_id, string from_roll, string to_roll, string ayid, string group_id, string subcourse_id)
    {
        string qry = "";
        //delete backup data first
        if (stud_id != "")
        {
            qry += "delete from cre_stud_Log_academic where stud_id='" + stud_id + "'";
        }
        //else if(from_roll !="" && to_roll !="")
        //{
        //    qry += "delete from cre_stud_Log_academic where stud_id in (select stud_id from m_std_studentacademic_tbl where Roll_no between '"+from_roll+"' and '"+to_roll+"' and group_id='"+group_id+"' and subcourse_Id='"+subcourse_id+"' and ayid='"+ayid+"')";
        //}
        else
        {
            qry += "delete from cre_stud_Log_academic";
        }
        cls1.DMLqueries(qry);

        bool value = false;
        string ins_qry = "";
        //insert new data from cre_stud_academic to cre_stud_Log_academic----take backup
        if (stud_id != "")
        {
            ins_qry += "insert into cre_stud_Log_academic select * from cre_stud_academic where stud_id='" + stud_id + "'";
        }
        //else if (from_roll != "" && to_roll != "")
        //{
        //    qry += "insert into cre_stud_Log_academic select * from cre_stud_academic where stud_id in (select stud_id from m_std_studentacademic_tbl where Roll_no between '" + from_roll + "' and '" + to_roll + "' and group_id='" + group_id + "' and subcourse_Id='" + subcourse_id + "' and ayid='" + ayid + "')";
        //}
        else
        {
            ins_qry += "insert into cre_stud_Log_academic select * from cre_stud_academic";
        }
        value = cls1.DMLqueries(ins_qry);

        return value;
    }

    public EligibilityClass[] report_new(string ayid, string group_id, string subcourse_id, string subcrs_text, string from_roll_no, string to_roll_no)
    {
        string last = ayid.Substring(5, 2);
        string new_ay = Convert.ToString(Convert.ToInt32(last) + 1);
        string new_ayid = string.Concat("AYD00", new_ay);
        string query = "";
        //if (to_roll_no != "" || from_roll_no != "")
        //{
        //update data
        //    if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I"))
        //    {
        //        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,case when (a.ID_No is null or a.ID_No='') then '' else CHAR(39)+substring(a.ID_No,0,17) end as PRN_Number,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit, case when (sem1_credit_earn =0 or sem1_credit_earn='') then '0' else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
        //        query = query + "c.sem2_credit_earn,c.sem2_credit,case when (sem2_credit_earn =0 or sem2_credit_earn='') then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
        //        query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
        //        query = query + " cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p, cre_stud_academic as c,m_std_studentacademic_tbl a where a.group_id='" + group_id + "' ";
        //        query = query + " and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0  and a.stud_id=p.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " and c.stud_id=a.stud_id order by cast(a.Roll_no as int) asc";
        //    }
        //    else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
        //    {
        //        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,case when (a.ID_No is null or a.ID_No='') then '' else CHAR(39)+substring(a.ID_No,0,17) end as PRN_Number,c.sem1_cg,c.sem1_credit_earn,";
        //        query = query + " c.sem1_credit, case when (sem1_credit_earn =0 or sem1_credit_earn='') then '0' else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,c.sem2_credit_earn,";
        //        query = query + " c.sem2_credit,case when (sem2_credit_earn =0 or sem2_credit_earn='') then '0' else cast(cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) as decimal(10,2)) end as sem2_SGPI,case when c.sem3_cg='' then 0 ";
        //        query = query + " else c.sem3_cg end as sem3_cg ,case when c.sem3_credit_earn='' then 0 else c.sem3_credit_earn end as sem3_credit_earn,case when c.sem3_credit='' then 0 else c.sem3_credit end as sem3_credit , case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
        //        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) ";
        //        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
        //        query = query + " cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p, cre_stud_academic as c,m_std_studentacademic_tbl a where a.group_id='" + group_id + "' ";
        //        query = query + " and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0  and a.stud_id=p.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " and c.stud_id=a.stud_id order by cast(a.Roll_no as int) asc";
        //    }
        //    else
        //    {
        //        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,case when (a.ID_No is null or a.ID_No='') then '' else CHAR(39)+substring(a.ID_No,0,17) end as PRN_Number,case when c.sem1_cg='' then 0 else c.sem1_cg end as sem1_cg,case when c.sem1_credit_earn='' then 0 else c.sem1_credit_earn end as sem1_credit_earn,";
        //        query = query + " case when c.sem1_credit='' then 0 else c.sem1_credit end as sem1_credit, case when (sem1_credit_earn =0 or sem1_credit_earn='') then '0' else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
        //        query = query + "  c.sem2_credit_earn,c.sem2_credit,case when (sem2_credit_earn =0 or sem2_credit_earn='') then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
        //        query = query + "  else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,case when c.sem3_cg='' then 0 ";
        //        query = query + " else c.sem3_cg end as sem3_cg ,case when c.sem3_credit_earn='' then 0 else c.sem3_credit_earn end as sem3_credit_earn,case when c.sem3_credit='' then 0 else c.sem3_credit end as sem3_credit , case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
        //        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) ";
        //        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
        //        query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
        //        query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
        //        query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
        //        query = query + " cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p, cre_stud_academic as c,m_std_studentacademic_tbl a where a.group_id='" + group_id + "' ";
        //        query = query + " and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0  and a.stud_id=p.stud_id and c.stud_id=a.stud_id and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " order by cast(a.Roll_no as int) asc";
        //    }
        //}
        //else
        //{
        //update data
        if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I"))
        {
            query = "select a.*,case when a.sem1_credit=a.sem1_credit_earn then [dbo].[grade](cast(a.sem1_SGPI as float),(select Descritption from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0)) else 'NA' end as sem1_grade,case when a.sem2_credit=a.sem2_credit_earn then [dbo].[grade](cast(a.sem2_SGPI as float),(select Descritption from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0)) else 'NA' end as sem2_grade from (select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,case when (a.ID_No is null or a.ID_No='') then '' else CHAR(39)+substring(a.ID_No,0,17) end as PRN_Number,case when c.sem1_cg='' then 0 else c.sem1_cg end as sem1_cg,case when c.sem1_credit_earn='' then 0 else c.sem1_credit_earn end as sem1_credit_earn,case when c.sem1_credit='' then 0 else c.sem1_credit end as sem1_credit, case when (sem1_credit_earn =0 or sem1_credit_earn='') then '0' else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
            query = query + "c.sem2_credit_earn,c.sem2_credit,case when (sem2_credit_earn =0 or sem2_credit_earn='') then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
            query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) as varchar(max)) end as sem2_SGPI,";
            query = query + " cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p, cre_stud_academic as c,m_std_studentacademic_tbl a where a.group_id='" + group_id + "' ";
            query = query + " and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0  and a.stud_id=p.stud_id and c.stud_id=a.stud_id ";
        }
        else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith(" II") || subcrs_text.StartsWith("T") || subcrs_text.EndsWith(" III") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
        {
            query = "select a.*,case when a.sem1_credit=a.sem1_credit_earn then [dbo].[grade](cast(a.sem1_SGPI as float),(select Descritption from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0)) else 'NA' end as sem1_grade,case when a.sem2_credit=a.sem2_credit_earn then [dbo].[grade](cast(a.sem2_SGPI as float),(select Descritption from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0)) else 'NA' end as sem2_grade,case when a.sem3_credit=a.sem3_credit_earn then [dbo].[grade](cast(a.sem3_SGPI as float),(select Descritption from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0)) else 'NA' end as sem3_grade,case when a.sem4_credit=a.sem4_credit_earn then [dbo].[grade](cast(a.sem4_SGPI as float),(select Descritption from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0)) else 'NA' end as sem4_grade from (select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,case when (a.ID_No is null or a.ID_No='') then '' else CHAR(39)+substring(a.ID_No,0,17) end as PRN_Number,c.sem1_cg,c.sem1_credit_earn,";
            query = query + " c.sem1_credit, case when (sem1_credit_earn =0 or sem1_credit_earn='') then '0' else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,c.sem2_credit_earn,";
            query = query + " c.sem2_credit,case when (sem2_credit_earn =0 or sem2_credit_earn='') then '0' else cast(cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) as varchar(max)) as decimal(10,2)) end as sem2_SGPI,";
            query = query + " c.sem3_cg,c.sem3_credit_earn,c.sem3_credit , case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
            query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) ";
            query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) as varchar(max)) end as sem4_SGPI,";
            query = query + " cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p, cre_stud_academic as c,m_std_studentacademic_tbl a where a.group_id='" + group_id + "' ";
            query = query + " and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0  and a.stud_id=p.stud_id and c.stud_id=a.stud_id ";
        }
        //else
        //{
        //    query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,case when (a.ID_No is null or a.ID_No='') then '' else CHAR(39)+substring(a.ID_No,0,17) end as PRN_Number,c.sem1_cg,c.sem1_credit_earn,";
        //    query = query + " c.sem1_credit, case when (sem1_credit_earn =0 or sem1_credit_earn='') then '0' else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,c.sem2_credit_earn,";
        //    query = query + " c.sem2_credit,case when (sem2_credit_earn =0 or sem2_credit_earn='') then '0' else cast(cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) as decimal(10,2)) end as sem2_SGPI,";
        //    query = query + " c.sem3_cg ,c.sem3_credit_earn,c.sem3_credit , case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
        //    query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) ";
        //    query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
        //    query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
        //    query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
        //    query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
        //    query = query + " cast(a.Roll_no as int)Roll_no from m_std_personaldetails_tbl as p, cre_stud_academic as c,m_std_studentacademic_tbl a where a.group_id='" + group_id + "' ";
        //    query = query + " and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0  and a.stud_id=p.stud_id and c.stud_id=a.stud_id ";
        //}
        if (to_roll_no != "" || from_roll_no != "")
        {
            query = query + " and cast(a.Roll_no as int) between " + from_roll_no + " and " + to_roll_no + " ";
        }

        query = query + ")a order by cast(a.Roll_no as int) asc; ";
        //}
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        List<EligibilityClass> details = new List<EligibilityClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(query))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                cmd.CommandTimeout = 100;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                // da.Fill(ds);
                da.Fill(dt);



                string[] semArr = new string[0];
                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I"))
                {
                    semArr = new string[2];
                    semArr[0] = "Sem-1";
                    semArr[1] = "Sem-2";
                    dt.Columns.Add("Sem1_KT");
                    dt.Columns.Add("Sem2_KT");
                    dt.Columns.Add("Sem1_total");
                    dt.Columns.Add("Sem2_total");
                    dt.Columns.Add("STATUS");
                    // dt.Columns.Add("Form_filled");
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.StartsWith("T") || subcrs_text.EndsWith(" II") || subcrs_text.EndsWith(" III") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                {
                    semArr = new string[4];
                    semArr[0] = "Sem-1";
                    semArr[1] = "Sem-2";
                    semArr[2] = "Sem-3";
                    semArr[3] = "Sem-4";
                    dt.Columns.Add("Sem1_KT");
                    dt.Columns.Add("Sem2_KT");
                    dt.Columns.Add("Sem3_KT");
                    dt.Columns.Add("Sem4_KT");
                    dt.Columns.Add("Sem1_total");
                    dt.Columns.Add("Sem2_total");
                    dt.Columns.Add("Sem3_total");
                    dt.Columns.Add("Sem4_total");
                    dt.Columns.Add("STATUS");
                    //dt.Columns.Add("Form_filled");
                }
                //else if (subcrs_text.StartsWith("T"))
                //{
                //    semArr = new string[6];
                //    semArr[0] = "Sem-1";
                //    semArr[1] = "Sem-2";
                //    semArr[2] = "Sem-3";
                //    semArr[3] = "Sem-4";
                //    semArr[4] = "Sem-5";
                //    semArr[5] = "Sem-6";
                //    dt.Columns.Add("Sem1_KT");
                //    dt.Columns.Add("Sem2_KT");
                //    dt.Columns.Add("Sem3_KT");
                //    dt.Columns.Add("Sem4_KT");
                //    dt.Columns.Add("Sem5_KT");
                //    dt.Columns.Add("Sem6_KT");
                //    dt.Columns.Add("STATUS");
                //    //dt.Columns.Add("Form_filled");
                //}
                //else
                //{
                //    semArr = new string[6];
                //    semArr[0] = "Sem-1";
                //    semArr[1] = "Sem-2";
                //    semArr[2] = "Sem-3";
                //    semArr[3] = "Sem-4";
                //    semArr[4] = "Sem-5";
                //    semArr[5] = "Sem-6";
                //    dt.Columns.Add("Sem1_KT");
                //    dt.Columns.Add("Sem2_KT");
                //    dt.Columns.Add("Sem3_KT");
                //    dt.Columns.Add("Sem4_KT");
                //    dt.Columns.Add("Sem5_KT");
                //    dt.Columns.Add("Sem6_KT");
                //    dt.Columns.Add("STATUS");
                //    // dt.Columns.Add("Form_filled");
                //}
                DataSet ds1 = new DataSet();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string qry;
                    for (int j = 0; j < semArr.Length; j++)
                    {
                        //qry = "select case when count(ISNULL(c.remark,0))=0 then '' else COUNT(ISNULL(c.remark,0)) end as KT_Count from m_std_studentacademic_tbl as a,cre_marks_tbl as c ";
                        //qry = qry + "where exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' order by curr_date DESC) and a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and ";
                        //qry = qry + "a.stud_id=c.stud_id and c.stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and c.sem_id='" + semArr[j] + "' GROUP BY c.remark HAVING c.remark = 'UnSuccessful'";

                        qry = "select case when count(ISNULL(c.remark,0))=0 then '' else COUNT(ISNULL(c.remark,0)) end as KT_Count from(select distinct c.* from m_std_studentacademic_tbl as a,cre_marks_tbl as c ";
                        qry = qry + "where exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' and del_flag=0 order by curr_date DESC) and a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and ";
                        qry = qry + "a.stud_id=c.stud_id and c.stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and c.sem_id='" + semArr[j] + "') c GROUP BY c.remark HAVING c.remark = 'UnSuccessful'; ";
                        qry = qry + " select cast(sum(cast(replace(replace(replace(h1,'+',''),'Ab','0'),'','0') as int))+sum(cast(replace(replace(replace(h2,'+',''),'Ab','0'),'','0') as int))+ sum(cast(( dbo.SplitString_sum_col(replace(replace(replace(replace(h1_grace,'^',''),'*',''),'@',''),'','0') ,',')) as int))+sum(cast((dbo.SplitString_sum_col(replace(replace(replace(replace(h2_grace,'^',''),'*',''),'@',''),'','0'),',')) as int)) as int) as total from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' and del_flag=0 and exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' and del_flag=0 order by curr_date DESC)";


                        ds1 = cls1.fillDataset(qry);
                        if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I"))
                        {
                            if (j == 0)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];

                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem1_KT"] = 0;
                                }
                                if (ds1.Tables[1].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_total"] = ds1.Tables[1].Rows[0]["total"];
                                }
                            }
                            else if (j == 1)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem2_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem2_KT"] = 0;
                                }
                                if (ds1.Tables[1].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_total"] = ds1.Tables[1].Rows[0]["total"];
                                }
                            }
                        }
                        else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith(" II") || subcrs_text.StartsWith("T") || subcrs_text.EndsWith(" III"))
                        {
                            if (j == 0)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem1_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem1_KT"] = 0;
                                }
                                if (ds1.Tables[1].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem1_total"] = ds1.Tables[1].Rows[0]["total"];
                                }
                            }
                            else if (j == 1)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem2_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem2_KT"] = 0;
                                }
                                if (ds1.Tables[1].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem2_total"] = ds1.Tables[1].Rows[0]["total"];
                                }
                            }
                            else if (j == 2)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem3_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem3_KT"] = 0;
                                }
                                if (ds1.Tables[1].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem3_total"] = ds1.Tables[1].Rows[0]["total"];
                                }
                            }
                            else if (j == 3)
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 0)
                                    {
                                        dt.Rows[i]["sem4_SGPI"] = 0;
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                    dt.Rows[i]["Sem4_KT"] = 0;
                                }
                                if (ds1.Tables[1].Rows.Count > 0)
                                {
                                    dt.Rows[i]["Sem4_total"] = ds1.Tables[1].Rows[0]["total"];
                                }
                            }
                        }
                        //else if (subcrs_text.StartsWith("T"))
                        //{
                        //    if (j == 0)
                        //    {
                        //        if (ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                        //            {
                        //                dt.Rows[i]["sem1_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem1_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 1)
                        //    {
                        //        if (j == 1 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                        //            {
                        //                dt.Rows[i]["sem2_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem2_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 2)
                        //    {
                        //        if (j == 2 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 0)
                        //            {
                        //                dt.Rows[i]["sem3_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem3_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 3)
                        //    {
                        //        if (j == 3 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 0)
                        //            {
                        //                dt.Rows[i]["sem4_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem4_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 4)
                        //    {
                        //        if (j == 4 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem5_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem5_KT"]) > 0)
                        //            {
                        //                dt.Rows[i]["sem5_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem5_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 5)
                        //    {
                        //        if (j == 5 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem6_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                        //            {
                        //                dt.Rows[i]["sem1_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem6_KT"] = 0;
                        //        }
                        //    }
                        //}
                        //else
                        //{
                        //    if (j == 0)
                        //    {
                        //        if (ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 1)
                        //            {
                        //                dt.Rows[i]["sem1_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem1_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 1)
                        //    {
                        //        if (j == 1 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 1)
                        //            {
                        //                dt.Rows[i]["sem2_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem2_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 2)
                        //    {
                        //        if (j == 2 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 1)
                        //            {
                        //                dt.Rows[i]["sem3_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem3_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 3)
                        //    {
                        //        if (j == 3 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 1)
                        //            {
                        //                dt.Rows[i]["sem4_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem4_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 4)
                        //    {
                        //        if (j == 4 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem5_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem5_KT"]) > 1)
                        //            {
                        //                dt.Rows[i]["sem5_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem5_KT"] = 0;
                        //        }
                        //    }
                        //    else if (j == 5)
                        //    {
                        //        if (j == 5 && ds1.Tables[0].Rows.Count > 0)
                        //        {
                        //            dt.Rows[i]["Sem6_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                        //            if (Convert.ToInt32(dt.Rows[i]["Sem6_KT"]) > 1)
                        //            {
                        //                dt.Rows[i]["sem6_SGPI"] = 0;
                        //            }
                        //            else
                        //            {
                        //            }
                        //        }
                        //        else
                        //        {
                        //            dt.Rows[i]["Sem6_KT"] = 0;
                        //        }
                        //    }
                        //}
                    }
                }


                if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I"))
                {
                    foreach (DataRow dtrow in dt.Rows)
                    {
                        EligibilityClass elig = new EligibilityClass();
                        elig.studid = dtrow["stud_id"].ToString();
                        elig.name = dtrow["Student_Name"].ToString();
                        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                        elig.sem1_total = dtrow["Sem1_total"].ToString();
                        elig.sem2_total = dtrow["Sem2_total"].ToString();
                        elig.sem1_grade = dtrow["sem1_grade"].ToString();
                        elig.sem2_grade = dtrow["sem2_grade"].ToString();
                        //elig.Status = dtrow["STATUS"].ToString();
                        //elig.formfilled = dtrow["form_filled"].ToString();
                        //elig.exist = dtrow["Status"].ToString();
                        //elig.type = dtrow["type"].ToString();//Roll_no
                        elig.roll_no = dtrow["Roll_no"].ToString();
                        elig.prn_no = dtrow["PRN_Number"].ToString();
                        details.Add(elig);
                    }
                }
                else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith(" II") || subcrs_text.StartsWith("T") || subcrs_text.EndsWith(" III"))
                {
                    foreach (DataRow dtrow in dt.Rows)
                    {
                        EligibilityClass elig = new EligibilityClass();
                        elig.studid = dtrow["stud_id"].ToString();
                        elig.name = dtrow["Student_Name"].ToString();
                        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                        elig.sem1_total = dtrow["Sem1_total"].ToString();
                        elig.sem2_total = dtrow["Sem2_total"].ToString();
                        elig.sem3_total = dtrow["Sem3_total"].ToString();
                        elig.sem4_total = dtrow["Sem4_total"].ToString();
                        elig.sem1_grade = dtrow["sem1_grade"].ToString();
                        elig.sem2_grade = dtrow["sem2_grade"].ToString();
                        elig.sem3_grade = dtrow["sem3_grade"].ToString();
                        elig.sem4_grade = dtrow["sem4_grade"].ToString();
                        //elig.Status = dtrow["STATUS"].ToString();
                        // elig.formfilled = dtrow["form_filled"].ToString();
                        // elig.exist = dtrow["Status"].ToString();
                        //elig.type = dtrow["type"].ToString();
                        elig.roll_no = dtrow["Roll_no"].ToString();
                        elig.prn_no = dtrow["PRN_Number"].ToString();
                        details.Add(elig);
                    }
                }
                //else if (subcrs_text.StartsWith("T"))
                //{
                //    foreach (DataRow dtrow in dt.Rows)
                //    {
                //        EligibilityClass elig = new EligibilityClass();
                //        elig.studid = dtrow["stud_id"].ToString();
                //        elig.name = dtrow["Student_Name"].ToString();
                //        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                //        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                //        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                //        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                //        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                //        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                //        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                //        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                //        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                //        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                //        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                //        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                //        elig.sem5_cg = dtrow["sem5_cg"].ToString();
                //        elig.sem5_ce = dtrow["sem5_credit_earn"].ToString();
                //        elig.sem5_sgpi = dtrow["sem5_SGPI"].ToString();
                //        elig.sem6_cg = dtrow["sem6_cg"].ToString();
                //        elig.sem6_ce = dtrow["sem6_credit_earn"].ToString();
                //        elig.sem6_sgpi = dtrow["sem6_SGPI"].ToString();
                //        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                //        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                //        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                //        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                //        elig.sem5_KT = dtrow["Sem5_KT"].ToString();
                //        elig.sem6_KT = dtrow["Sem6_KT"].ToString();
                //        //elig.Status = dtrow["STATUS"].ToString();
                //        // elig.formfilled = dtrow["form_filled"].ToString();
                //        //elig.exist = dtrow["Status"].ToString();
                //        //elig.type = dtrow["type"].ToString();
                //        elig.roll_no = dtrow["Roll_no"].ToString();
                //        elig.prn_no = dtrow["PRN_Number"].ToString();
                //        details.Add(elig);
                //    }
                //}
                //else
                //{
                //    foreach (DataRow dtrow in dt.Rows)
                //    {
                //        EligibilityClass elig = new EligibilityClass();
                //        elig.studid = dtrow["stud_id"].ToString();
                //        elig.name = dtrow["Student_Name"].ToString();
                //        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                //        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                //        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                //        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                //        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                //        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                //        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                //        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                //        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                //        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                //        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                //        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                //        elig.sem5_cg = dtrow["sem5_cg"].ToString();
                //        elig.sem5_ce = dtrow["sem5_credit_earn"].ToString();
                //        elig.sem5_sgpi = dtrow["sem5_SGPI"].ToString();
                //        elig.sem6_cg = dtrow["sem6_cg"].ToString();
                //        elig.sem6_ce = dtrow["sem6_credit_earn"].ToString();
                //        elig.sem6_sgpi = dtrow["sem6_SGPI"].ToString();
                //        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                //        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                //        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                //        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                //        elig.sem5_KT = dtrow["Sem5_KT"].ToString();
                //        elig.sem6_KT = dtrow["Sem6_KT"].ToString();
                //        //elig.Status = dtrow["STATUS"].ToString();
                //        //elig.formfilled = dtrow["form_filled"].ToString();
                //        //elig.exist = dtrow["Status"].ToString();
                //        //elig.type = dtrow["type"].ToString();
                //        elig.roll_no = dtrow["Roll_no"].ToString();
                //        elig.prn_no = dtrow["PRN_Number"].ToString();
                //        details.Add(elig);
                //    }
                //}
                con.Close();
                return details.ToArray();
            }
        }
    }

    public BlockStudent[] searchstudent(string id, string fname, string lname, string mname, string dept)
    {



        string qry = "";

        if (id != "")
        {


            qry = "select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,case when c.stud_id is null then 0 else 1 end isblocked,coalesce (c.reason,'-')reason,coalesce(c.block_dt,'') block_dt,coalesce(c.department,'-') department from m_std_studentacademic_tbl a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id"
            + " left join ( select * from block_Admission where department='" + dept + "' and del_flag=0) c on a.stud_id=c.stud_id ";
            qry += " where a.stud_id='" + id + "' and a.ayid=(select MAX(ayid) from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";


            //qry = "select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,case when c.stud_id is null then 0 else 1 end isblocked,coalesce (c.reason,'-')reason,coalesce(c.block_dt,'') block_dt,coalesce(c.department,'-') department,coalesce(c.emp_id,'-')  as empid "
            //    + " from m_std_studentacademic_tbl a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from block_Admission a inner join m_employee_personal b on a.emp_id=b.emp_id where a.del_flag=0 and department='"+dept+"' ) c  on a.stud_id=c.stud_id  where a.stud_id='"+id+"' "
            //    + " and a.ayid=(select MAX(ayid) from m_std_studentacademic_tbl where stud_id='"+id+"') and a.del_flag=0";
        }
        else if (fname != "" || lname != "" || mname != "")
        {
            qry = " WITH CTE AS(SELECT a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,case when c.stud_id is null then 0 else 1 end isblocked,coalesce (c.reason,'-')reason,coalesce(c.block_dt,'') block_dt ,coalesce(c.department,'-') department "
                + "    , RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc)FROM  m_std_studentacademic_tbl a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join  (select * from block_Admission  where department='" + dept + "' and del_flag=0) c on a.stud_id=c.stud_id  where";
            if (fname != "" && fname != "undefined")
            {
                qry += " b.stud_F_Name like '%" + fname + "%' and ";

            }
            if (mname != "" && mname != "undefined")
            {
                qry += " b.stud_m_Name like '%" + mname + "%' and ";

            }
            if (lname != "" && lname != "undefined")
            {
                qry += " b.stud_l_Name like '%" + lname + "%' and ";

            }

            int ind = qry.LastIndexOf("and");
            qry = qry.Substring(0, ind);


            qry += "and a.del_flag=0  ) SELECT Roll_no,stud_id, NAME,Group_title, isblocked,reason,block_dt,department  FROM CTE WHERE RN = 1 order by stud_id";
        }


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<BlockStudent> details = new List<BlockStudent>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    studentDetailfee stud = new studentDetailfee();
                //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                //    details.Add(stud);
                //}

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    BlockStudent stud = new BlockStudent();
                    stud.Roll_no = dtrow["Roll_no"].ToString();
                    stud.stud_id = dtrow["stud_id"].ToString();
                    stud.NAME = dtrow["NAME"].ToString();
                    stud.department = dtrow["department"].ToString();
                    stud.Group_title = dtrow["Group_title"].ToString();
                    stud.emp_id = "";
                    if (dtrow["isblocked"].ToString() == "0")
                    {
                        stud.isblocked = "Unblocked";

                    }
                    else
                    {
                        stud.isblocked = "Blocked";
                    }

                    stud.reason = dtrow["reason"].ToString();
                    if (dtrow["block_dt"].ToString() == "01/01/1900 12:00:00 AM")
                    {
                        stud.block_dt = "-";

                    }
                    else
                    {
                        stud.block_dt = dtrow["block_dt"].ToString();
                    }
                    //  stud.block_dt = dtrow["block_dt"].ToString();





                    details.Add(stud);
                }
                con.Close();

                return details.ToArray();

            }
        }

    }

    //allow part payment


    public PartPaymentStudent[] searchstudent(string id, string fname, string lname, string mname, string form, string year, string dummy)
    {
        string qry = "";
        List<PartPaymentStudent> details = new List<PartPaymentStudent>();

        if (form == "partpayment")
        {
            if (id != "")
            {

                if (id.StartsWith("1"))
                {
                    qry = "select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,a.group_id,case when c.stud_id is null then 0 else 1 end isallowed,coalesce (c.allow_amt,'-')allow_amt,coalesce(c.remark,'') remark,"
                        + " coalesce(c.name,'-')  as empname,coalesce(c.empid,'-')  as empid ,coalesce(c.curr_dt,'') curr_dt from m_std_studentacademic_tbl a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from Part_Payment_Auth a inner join m_employee_personal b on a.empid=b.emp_id where a.del_flag=0 "
                        + " ) c on a.stud_id=c.stud_id   where a.stud_id='" + id + "' and a.ayid=(select MAX(ayid) from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";
                }
                else if (id.StartsWith("5") || id.StartsWith("6"))
                {
                    qry = "select '-' as Roll_no,Form_no+substring(b.group_id,4,6)stud_id, a.L_name+' '+a.F_name+' '+a.M_name [NAME],g.Group_title,a.group_id,case when c.stud_id is null then 0 else 1 end isallowed,"
   + "coalesce (c.allow_amt,'')allow_amt,coalesce(c.remark,'') remark, coalesce(c.name,'-')  as empname,coalesce(c.empid,'-')  as empid ,coalesce(c.curr_dt,'') curr_dt from d_adm_applicant  a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno"
   + " inner join m_crs_subjectgroup_tbl g on b.group_id=g.Group_id left join ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from Part_Payment_Auth a inner join m_employee_personal b on a.empid=b.emp_id where a.del_flag=0  ) "
   + "c on a.form_no+substring(b.group_id,4,3)=c.stud_id   where   a.form_no+substring(b.group_id,4,3)='" + id + "' and a.del_flag=b.del_flag and a.ACDID=(select MAX(ACDID) from d_adm_applicant where Form_no=substring('" + id + "',0,6)) and a.del_flag=0";
                }
                else
                {
                }


            }
            else if (fname != "" || lname != "" || mname != "")
            {
                qry = " WITH CTE AS(  select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,a.group_id,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce (c.allow_amt,'-')allow_amt,coalesce(c.remark,'') remark, "
                    + "   coalesce(c.name,'-')  as empname,coalesce(c.empid,'-')  as empid ,coalesce(c.curr_dt,'') curr_dt    , RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc)  from m_std_studentacademic_tbl a "
                    + "  inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from Part_Payment_Auth a inner join m_employee_personal b"
                    + "     on a.empid=b.emp_id where a.del_flag=0  ) c on a.stud_id=c.stud_id   where   a.del_flag=0   and ";
                if (fname != "" && fname != "undefined")
                {
                    qry += " b.stud_F_Name like '%" + fname + "%' and ";

                }
                if (mname != "" && mname != "undefined")
                {
                    qry += " b.stud_m_Name like '%" + mname + "%' and ";

                }
                if (lname != "" && lname != "undefined")
                {
                    qry += " b.stud_l_Name like '%" + lname + "%' and ";

                }

                int ind = qry.LastIndexOf("and");
                qry = qry.Substring(0, ind);


                qry += "and a.del_flag=0  ) SELECT Roll_no,stud_id, NAME,Group_title,group_id, isallowed,allow_amt,remark,empname,empid,curr_dt FROM CTE WHERE RN = 1 order by stud_id";
            }

            string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
            DataSet ds = new DataSet();
            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlCommand cmd = new SqlCommand(qry))
                {
                    List<ListItem> listData = new List<ListItem>();
                    cmd.CommandType = CommandType.Text;
                    cmd.Connection = con;
                    con.Open();
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(ds);
                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    studentDetailfee stud = new studentDetailfee();
                    //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                    //    details.Add(stud);
                    //}

                    foreach (DataRow dtrow in ds.Tables[0].Rows)
                    {
                        PartPaymentStudent stud = new PartPaymentStudent();
                        stud.Roll_no = dtrow["Roll_no"].ToString();
                        stud.stud_id = dtrow["stud_id"].ToString();
                        stud.NAME = dtrow["NAME"].ToString();

                        stud.group_id = dtrow["group_id"].ToString();
                        stud.Group_title = dtrow["Group_title"].ToString();

                        stud.empid = dtrow["empid"].ToString();
                        if (dtrow["isallowed"].ToString() == "0")
                        {
                            stud.isallowed = "Not Allowed";

                        }
                        else
                        {
                            stud.isallowed = "Allowed";
                        }

                        stud.allow_amt = dtrow["allow_amt"].ToString();
                        stud.remark = dtrow["remark"].ToString();
                        stud.empname = dtrow["empname"].ToString();


                        if (dtrow["curr_dt"].ToString() == "01/01/1900 12:00:00 AM")
                        {
                            stud.curr_dt = "-";

                        }
                        else
                        {
                            stud.curr_dt = dtrow["curr_dt"].ToString();
                        }





                        details.Add(stud);
                    }
                    con.Close();
                }
            }
        }
        else
        {
            if (form == "applicant")
            {
                if (id != "")
                {


                    //qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
                    //    + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no=substring(c.stud_id,0,6)  where a.Form_no=substring('" + id + "',0,6)  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1 and a.stud_id is nULL";

                    qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
                        + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id  where a.Form_no+substring(a.group_id,4,3)='" + id + "'  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1";  // and a.stud_id is nULl
                }
                else if (fname != "" || lname != "" || mname != "")
                {
                    qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
                        + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no=substring(c.stud_id,0,6)  where ";
                    if (fname != "" && fname != "undefined")
                    {
                        qry += " a.F_name like '%" + fname + "%' and ";

                    }
                    if (mname != "" && mname != "undefined")
                    {
                        qry += " a.M_name like '%" + mname + "%' and ";

                    }
                    if (lname != "" && lname != "undefined")
                    {
                        qry += " a.L_name like '%" + lname + "%' and ";

                    }

                    int ind = qry.LastIndexOf("and");
                    qry = qry.Substring(0, ind);

                    qry += " and a.ACDID=(select max(ayid) from m_academic) and a.del_flag=0  and a.step7_flag=1 and a.stud_id is nULL";
                }

            }
            else
            {
                if (id != "")
                {


                    //qry = " select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt"
                    //    +"    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                    //    +"     where a.del_flag=0  ) c on a.stud_id=c.stud_id   where a.stud_id='"+id+"' and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id='"+id+"') and a.del_flag=0";   


                    //qry = " select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt"
                    //    + "    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                    //    + "     where a.del_flag=0  ) c on a.stud_id=c.stud_id   where a.stud_id='" + id + "' and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";


                    qry = " select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt"
                        + "    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                        + "     where a.del_flag=0 and ayid='" + year + "' ) c on a.stud_id=c.stud_id   where (a.stud_id='" + id + "' or a.stud_id= (select formno+substring(group_id,4,6) from OLA_FY_adm_CourseSelection where stud_id='" + id + "')) and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";

                }
                else if (fname != "" || lname != "" || mname != "")
                {
                    //qry = " WITH CTE AS(  select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt, RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc) "
                    //    +"    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                    //    +"      where a.del_flag=0  ) c on a.stud_id=c.stud_id   where  a.del_flag=0  and  ";


                    qry = " WITH CTE AS(  select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt, RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc) "
                                           + "    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                                           + "      where a.del_flag=0 and ayid='" + year + "'  ) c on a.stud_id=c.stud_id   where  a.del_flag=0  and  ";


                    if (fname != "" && fname != "undefined")
                    {
                        qry += " b.stud_F_Name like '%" + fname + "%' and ";

                    }
                    if (mname != "" && mname != "undefined")
                    {
                        qry += " b.stud_m_Name like '%" + mname + "%' and ";

                    }
                    if (lname != "" && lname != "undefined")
                    {
                        qry += " b.stud_l_Name like '%" + lname + "%' and ";

                    }

                    int ind = qry.LastIndexOf("and");
                    qry = qry.Substring(0, ind);


                    //  qry += "   ) SELECT Roll_no,stud_id, NAME,Group_title,stud_Category, isallowed,curr_dt FROM CTE WHERE RN = 1 order by stud_id";
                    qry += "   ) SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste, isallowed,curr_dt FROM CTE WHERE RN = 1 order by stud_id";

                }

            }






            string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
            DataSet ds = new DataSet();
            // List<PartPaymentStudent> details = new List<PartPaymentStudent>();
            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlCommand cmd = new SqlCommand(qry))
                {
                    List<ListItem> listData = new List<ListItem>();
                    cmd.CommandType = CommandType.Text;
                    cmd.Connection = con;
                    con.Open();
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(ds);
                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    studentDetailfee stud = new studentDetailfee();
                    //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                    //    details.Add(stud);
                    //}

                    foreach (DataRow dtrow in ds.Tables[0].Rows)
                    {
                        PartPaymentStudent stud = new PartPaymentStudent();
                        stud.Roll_no = dtrow["Roll_no"].ToString();
                        stud.stud_id = dtrow["stud_id"].ToString();
                        stud.NAME = dtrow["NAME"].ToString();

                        stud.stud_Category = dtrow["stud_Category"].ToString();
                        stud.stud_Caste = dtrow["stud_Caste"].ToString();

                        stud.Group_title = dtrow["Group_title"].ToString();

                        //  stud.empid = dtrow["empid"].ToString();
                        if (dtrow["isallowed"].ToString() == "0")
                        {
                            stud.isallowed = "Not Allowed";

                        }
                        else
                        {
                            stud.isallowed = "Allowed";
                        }

                        //  stud.allow_amt = dtrow["allow_amt"].ToString();
                        // stud.remark = dtrow["remark"].ToString();
                        //  stud.empname = dtrow["empname"].ToString();


                        if (dtrow["curr_dt"].ToString() == "01/01/1900 12:00:00 AM")
                        {
                            stud.curr_dt = "-";

                        }
                        else
                        {
                            stud.curr_dt = dtrow["curr_dt"].ToString();
                        }





                        details.Add(stud);
                    }
                    con.Close();
                }
            }
        }
        return details.ToArray();

    }

    public PartPaymentStudent[] searchstudentnew(string id, string fname, string lname, string mname, string form, string dummy)
    {
        string qry = "";
        List<PartPaymentStudent> details = new List<PartPaymentStudent>();

        if (form == "partpayment")
        {
            if (id != "")
            {

                if (id.StartsWith("1"))
                {
                    qry = "select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,a.group_id,case when c.stud_id is null then 0 else 1 end isallowed,coalesce (c.allow_amt,'-')allow_amt,coalesce(c.remark,'') remark,"
                        + " coalesce(c.name,'-')  as empname,coalesce(c.empid,'-')  as empid ,coalesce(c.curr_dt,'') curr_dt from m_std_studentacademic_tbl a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from Part_Payment_Auth a inner join m_employee_personal b on a.empid=b.emp_id where a.del_flag=0 and a.ayid= (select MAX(ayid) from m_academic) "
                        + " ) c on a.stud_id=c.stud_id   where a.stud_id='" + id + "' and a.ayid=(select MAX(ayid) from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";
                }
                else if (id.StartsWith("A") || id.StartsWith("B"))
                {
                    qry = "select '-' as Roll_no,Form_no+substring(b.group_id,4,6)stud_id, a.L_name+' '+a.F_name+' '+a.M_name [NAME],g.Group_title,a.group_id,case when c.stud_id is null then 0 else 1 end isallowed,"
   + "coalesce (c.allow_amt,'')allow_amt,coalesce(c.remark,'') remark, coalesce(c.name,'-')  as empname,coalesce(c.empid,'-')  as empid ,coalesce(c.curr_dt,'') curr_dt from d_adm_applicant  a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno"
   + " inner join m_crs_subjectgroup_tbl g on b.group_id=g.Group_id left join ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from Part_Payment_Auth a inner join m_employee_personal b on a.empid=b.emp_id where a.del_flag=0  ) "
   + "c on a.form_no+substring(b.group_id,4,3)=c.stud_id   where   a.form_no+substring(b.group_id,4,3)='" + id + "' and a.del_flag=b.del_flag and a.ACDID=(select MAX(ACDID) from d_adm_applicant where Form_no=substring('" + id + "',0,6)) and a.del_flag=0";
                }
                else
                {
                }


            }
            else if (fname != "" || lname != "" || mname != "")
            {
                qry = " WITH CTE AS(  select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,a.group_id,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce (c.allow_amt,'-')allow_amt,coalesce(c.remark,'') remark, "
                    + "   coalesce(c.name,'-')  as empname,coalesce(c.empid,'-')  as empid ,coalesce(c.curr_dt,'') curr_dt    , RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc)  from m_std_studentacademic_tbl a "
                    + "  inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.*,b.emp_lname+' '+b.emp_fname+' '+b.emp_mname as 'Name' from Part_Payment_Auth a inner join m_employee_personal b"
                    + "     on a.empid=b.emp_id where a.del_flag=0  ) c on a.stud_id=c.stud_id   where   a.del_flag=0   and ";
                if (fname != "" && fname != "undefined")
                {
                    qry += " b.stud_F_Name like '%" + fname + "%' and ";

                }
                if (mname != "" && mname != "undefined")
                {
                    qry += " b.stud_m_Name like '%" + mname + "%' and ";

                }
                if (lname != "" && lname != "undefined")
                {
                    qry += " b.stud_l_Name like '%" + lname + "%' and ";

                }

                int ind = qry.LastIndexOf("and");
                qry = qry.Substring(0, ind);


                qry += "and a.del_flag=0  ) SELECT Roll_no,stud_id, NAME,Group_title,group_id, isallowed,allow_amt,remark,empname,empid,curr_dt FROM CTE WHERE RN = 1 order by stud_id";
            }

            string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
            DataSet ds = new DataSet();
            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlCommand cmd = new SqlCommand(qry))
                {
                    List<ListItem> listData = new List<ListItem>();
                    cmd.CommandType = CommandType.Text;
                    cmd.Connection = con;
                    con.Open();
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(ds);
                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    studentDetailfee stud = new studentDetailfee();
                    //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                    //    details.Add(stud);
                    //}

                    foreach (DataRow dtrow in ds.Tables[0].Rows)
                    {
                        PartPaymentStudent stud = new PartPaymentStudent();
                        stud.Roll_no = dtrow["Roll_no"].ToString();
                        stud.stud_id = dtrow["stud_id"].ToString();
                        stud.NAME = dtrow["NAME"].ToString();

                        stud.group_id = dtrow["group_id"].ToString();
                        stud.Group_title = dtrow["Group_title"].ToString();

                        stud.empid = dtrow["empid"].ToString();
                        if (dtrow["isallowed"].ToString() == "0")
                        {
                            stud.isallowed = "Not Allowed";

                        }
                        else
                        {
                            stud.isallowed = "Allowed";
                        }

                        stud.allow_amt = dtrow["allow_amt"].ToString();
                        stud.remark = dtrow["remark"].ToString();
                        stud.empname = dtrow["empname"].ToString();


                        if (dtrow["curr_dt"].ToString() == "01/01/1900 12:00:00 AM")
                        {
                            stud.curr_dt = "-";

                        }
                        else
                        {
                            stud.curr_dt = dtrow["curr_dt"].ToString();
                        }





                        details.Add(stud);
                    }
                    con.Close();
                }
            }
        }
        else
        {
            if (form == "applicant")
            {
                if (id != "")
                {


                    //qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
                    //    + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no=substring(c.stud_id,0,6)  where a.Form_no=substring('" + id + "',0,6)  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1 and a.stud_id is nULL";

                    qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
                        + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no+substring(a.group_id,4,3)=c.stud_id  where a.Form_no+substring(a.group_id,4,3)='" + id + "'  and a.ACDID=(select max(ayid) from m_academic)  and a.del_flag=0 and a.step7_flag=1";  // and a.stud_id is nULl
                }
                else if (fname != "" || lname != "" || mname != "")
                {
                    qry = "   select  ''Roll_no, a.Form_no+SUBSTRING(a.group_id,4,3) stud_id,L_name+' '+F_name+' '+M_name [NAME],g.Group_title,a.Category stud_Category,  case when  a.Caste='NULL' or a.Caste IS NULL then '-' else a.caste end stud_Caste, case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt   "
                        + "     from ( select a.ACDID,a.Form_no,b.group_id,a.F_name,a.L_name,a.M_name,a.Category,a.Caste,a.del_flag,step7_flag,a.stud_id    from d_adm_applicant a inner join OLA_FY_adm_CourseSelection b on a.Form_no=b.formno) a   inner join m_crs_subjectgroup_tbl g on g.Group_id=a.group_id     left join       ( select a.* from [grant_freeshipscholarship] a      where a.del_flag=0  ) c on a.Form_no=substring(c.stud_id,0,6)  where ";
                    if (fname != "" && fname != "undefined")
                    {
                        qry += " a.F_name like '%" + fname + "%' and ";

                    }
                    if (mname != "" && mname != "undefined")
                    {
                        qry += " a.M_name like '%" + mname + "%' and ";

                    }
                    if (lname != "" && lname != "undefined")
                    {
                        qry += " a.L_name like '%" + lname + "%' and ";

                    }

                    int ind = qry.LastIndexOf("and");
                    qry = qry.Substring(0, ind);

                    qry += " and a.ACDID=(select max(ayid) from m_academic) and a.del_flag=0  and a.step7_flag=1 and a.stud_id is nULL";
                }

            }
            else
            {
                if (id != "")
                {


                    //qry = " select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt"
                    //    +"    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                    //    +"     where a.del_flag=0  ) c on a.stud_id=c.stud_id   where a.stud_id='"+id+"' and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id='"+id+"') and a.del_flag=0";   


                    //qry = " select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt"
                    //    + "    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                    //    + "     where a.del_flag=0  ) c on a.stud_id=c.stud_id   where a.stud_id='" + id + "' and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";


                    qry = " select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt"
                        + "    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                        + "     where a.del_flag=0  ) c on a.stud_id=c.stud_id   where (a.stud_id='" + id + "' or a.stud_id= (select formno+substring(group_id,4,6) from OLA_FY_adm_CourseSelection where stud_id='" + id + "')) and a.ayid=(select MAX(ayid)    from m_std_studentacademic_tbl where stud_id='" + id + "') and a.del_flag=0";

                }
                else if (fname != "" || lname != "" || mname != "")
                {
                    //qry = " WITH CTE AS(  select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt, RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc) "
                    //    +"    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                    //    +"      where a.del_flag=0  ) c on a.stud_id=c.stud_id   where  a.del_flag=0  and  ";


                    qry = " WITH CTE AS(  select a.Roll_no,a.stud_id, b.stud_L_Name+' '+b.stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else b.stud_Caste end stud_Caste,  case when c.stud_id is null then 0 else 1 end isallowed,coalesce(c.curr_dt,'') curr_dt, RN = ROW_NUMBER()OVER(PARTITION BY a.stud_id ORDER BY a.ayid desc) "
                                           + "    from m_std_studentacademic_tbl a   inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl g on a.group_id=g.Group_id left join   ( select a.* from [grant_freeshipscholarship] a "
                                           + "      where a.del_flag=0  ) c on a.stud_id=c.stud_id   where  a.del_flag=0  and  ";


                    if (fname != "" && fname != "undefined")
                    {
                        qry += " b.stud_F_Name like '%" + fname + "%' and ";

                    }
                    if (mname != "" && mname != "undefined")
                    {
                        qry += " b.stud_m_Name like '%" + mname + "%' and ";

                    }
                    if (lname != "" && lname != "undefined")
                    {
                        qry += " b.stud_l_Name like '%" + lname + "%' and ";

                    }

                    int ind = qry.LastIndexOf("and");
                    qry = qry.Substring(0, ind);


                    //  qry += "   ) SELECT Roll_no,stud_id, NAME,Group_title,stud_Category, isallowed,curr_dt FROM CTE WHERE RN = 1 order by stud_id";
                    qry += "   ) SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste, isallowed,curr_dt FROM CTE WHERE RN = 1 order by stud_id";

                }

            }






            string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
            DataSet ds = new DataSet();
            // List<PartPaymentStudent> details = new List<PartPaymentStudent>();
            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlCommand cmd = new SqlCommand(qry))
                {
                    List<ListItem> listData = new List<ListItem>();
                    cmd.CommandType = CommandType.Text;
                    cmd.Connection = con;
                    con.Open();
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(ds);
                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    studentDetailfee stud = new studentDetailfee();
                    //    stud.rollno = ds.Tables[1].Rows[0][0].ToString();
                    //    details.Add(stud);
                    //}

                    foreach (DataRow dtrow in ds.Tables[0].Rows)
                    {
                        PartPaymentStudent stud = new PartPaymentStudent();
                        stud.Roll_no = dtrow["Roll_no"].ToString();
                        stud.stud_id = dtrow["stud_id"].ToString();
                        stud.NAME = dtrow["NAME"].ToString();

                        stud.stud_Category = dtrow["stud_Category"].ToString();
                        stud.stud_Caste = dtrow["stud_Caste"].ToString();

                        stud.Group_title = dtrow["Group_title"].ToString();

                        //  stud.empid = dtrow["empid"].ToString();
                        if (dtrow["isallowed"].ToString() == "0")
                        {
                            stud.isallowed = "Not Allowed";

                        }
                        else
                        {
                            stud.isallowed = "Allowed";
                        }

                        //  stud.allow_amt = dtrow["allow_amt"].ToString();
                        // stud.remark = dtrow["remark"].ToString();
                        //  stud.empname = dtrow["empname"].ToString();


                        if (dtrow["curr_dt"].ToString() == "01/01/1900 12:00:00 AM")
                        {
                            stud.curr_dt = "-";

                        }
                        else
                        {
                            stud.curr_dt = dtrow["curr_dt"].ToString();
                        }





                        details.Add(stud);
                    }
                    con.Close();

                }



            }
        }
        return details.ToArray();

    }
    //Freeship scholarship report karishma

    public PartPaymentStudent[] FreeshipReport(string date, string admission, string btn_value)
    {
        string qry = "";
        List<PartPaymentStudent> details = new List<PartPaymentStudent>();
        if (btn_value == "Freeship")
        {
            if (date != "")
            {
                if (admission == "all")
                {
                    //qry = "select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id"
                    //   + " inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and c.ayid=a.ayid inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 ";
                    //qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                    //    + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                    //    + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )SELECT Roll_no,stud_id, NAME,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1   order by stud_id; "
                    //    + " WITH CTE1 AS( select '-' Roll_no,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                    //    + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                    //    + "    inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                    //    + "  )  SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   order by stud_id ";

                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                       + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                       + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 ) "
                       + "  , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                       + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                       + "    inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                       + "  ) SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1 union    SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   order by stud_id ";

                }
                else
                {
                    //qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                    //      + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                    //      + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )SELECT Roll_no,stud_id, NAME,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1 and [Admission Status]='" + admission + "'  order by stud_id ;"
                    //       + " WITH CTE1 AS( select '-' Roll_no,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                    //    + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                    //    + "  inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic)  left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                    //    + "  )  SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1 where [Admission Status]='" + admission + "'  order by stud_id    ";

                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                         + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                         + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )"
                          + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                       + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                       + "  inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic)  left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                       + "  ) SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1 and [Admission Status]='" + admission + "'  union SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1 where [Admission Status]='" + admission + "'  order by stud_id    ";
                }
            }
            else
            {
                if (admission == "all")
                {
                    //qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                    //     + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                    //     + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )SELECT Roll_no,stud_id, NAME,Group_title, stud_Category,stud_Caste,[Admission Status],RN ,Freeship_date,admission_date FROM CTE  WHERE RN = 1  order by stud_id;"
                    //+ " WITH CTE1 AS( select '-' Roll_no,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                    //    + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                    //    + "     inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic)  left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 "
                    //    + "  )  SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   order by stud_id ";

                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                        + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                        + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )"
                   + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                       + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                       + "     inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic)  left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and b.acdid=d.ayid where a.del_flag=0 and b.del_flag=0 "
                       + "  )  SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN ,Freeship_date,admission_date FROM CTE  WHERE RN = 1  union SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1    ";
                }
                else
                {
                    //qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                    //        + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                    //        + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )SELECT Roll_no,stud_id, NAME,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1  and [Admission Status]='" + admission + "' order by stud_id;"
                    //        + " WITH CTE1 AS( select '-' Roll_no,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                    //    + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                    //    + "   inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 "
                    //    + "  )  SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   WHERE [Admission Status]='" + admission + "'  order by stud_id ";

                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                           + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                           + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )"
                           + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                       + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                       + "   inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 "
                       + "  ) SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1  and [Admission Status]='" + admission + "' union  SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   WHERE [Admission Status]='" + admission + "'  order by stud_id ";
                }
            }
        }
        else
        {
            if (date != "")
            {
                if (admission == "all")
                {
                    //qry = "select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id"
                    //   + " inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and c.ayid=a.ayid inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id where convert(varchar,a.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 ";
                    //qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                    //    + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                    //    + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )SELECT Roll_no,stud_id, NAME,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1   order by stud_id; "
                    //    + " WITH CTE1 AS( select '-' Roll_no,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                    //    + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                    //    + "     inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                    //    + "  )  SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   order by stud_id ";
                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                        + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                        + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 ) "
                        + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                        + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                        + "     inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                        + "  )  SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1   union SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   order by stud_id ";

                }
                else
                {
                    //qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                    //      + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                    //      + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )SELECT Roll_no,stud_id, NAME,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1 and [Admission Status]='" + admission + "'  order by stud_id ;"
                    //       + " WITH CTE1 AS( select '-' Roll_no,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                    //    + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                    //    + "    inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                    //    + "  )  SELECT Roll_no,stud_id, NAME,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1 where [Admission Status]='" + admission + "'  order by stud_id    ";


                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                         + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                         + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )"
                          + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                       + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                       + "    inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and a.ayid=d.ayid where convert(varchar,d.curr_dt,106)='" + date.Replace("-", " ") + "' and a.del_flag=0 and b.del_flag=0 "
                       + "  ) SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1 and [Admission Status]='" + admission + "'  order by stud_id  union SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1 where [Admission Status]='" + admission + "'  order by stud_id    ";
                }
            }
            else
            {
                if (admission == "all")
                {
                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                         + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                         + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )"
                    + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                        + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                        + "  inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 "
                        + "  )SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN ,Freeship_date,admission_date FROM CTE  WHERE RN = 1  order by stud_id union  SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   order by stud_id ";
                }
                else
                {
                    qry = " WITH CTE AS(select coalesce(c.Roll_no,'-') Roll_no,a.stud_id,b.stud_L_Name+' '+stud_F_Name+' '+b.stud_M_Name [NAME],case when stud_gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.stud_Category,case when  b.stud_Caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] , RN = ROW_NUMBER()OVER(PARTITION BY c.stud_id ORDER BY c.ayid desc),convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date"
                            + "  from grant_freeshipscholarship a inner join m_std_personaldetails_tbl b on a.stud_id=b.stud_id  inner join m_std_studentacademic_tbl c on a.stud_id=c.stud_id and a.ayid=(select MAX(ayid) from m_academic) inner join  m_crs_subjectgroup_tbl g on c.group_id=g.Group_id "
                            + "   left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on a.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 and c.del_flag=0 )"
                            + " , CTE1 AS( select '-' Roll_no,b.stud_id as id,a.stud_id,a.stud_id,b.L_name+' '+F_name+' '+b.M_name [NAME],case when gender=0 then 'F' else 'M' end as Gender,g.Group_title,b.Category as stud_Category,case when  b.caste='NULL' then '-' else '' end stud_Caste,case when d.stud_id is null then 'Admission Pending' else 'Admission Confirmed' end as [Admission Status] "
                        + "  ,convert(varchar(10), a.curr_dt, 110) as Freeship_date,convert(varchar(10), d.curr_dt, 110) as admission_date    from grant_freeshipscholarship a inner join  (select x.*,y.group_id  group_id1 from d_Adm_Applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno ) as b on a.stud_id =b.form_no+substring(b.group_id1,4,3) and a.ayid=(select MAX(ayid) from m_academic) "
                        + "     inner join  m_crs_subjectgroup_tbl g on b.group_id1=g.Group_id     and b.ACDID=(select max(ayid) from m_Academic) left join (select * from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic) and del_flag=0) d   on b.stud_id=d.stud_id and a.ayid=d.ayid where a.del_flag=0 and b.del_flag=0 "
                        + "  )SELECT Roll_no,'-' as Formno,stud_id, NAME,Gender,Group_title, stud_Category,stud_Caste,[Admission Status],RN,Freeship_date,admission_date  FROM CTE  WHERE RN = 1  and [Admission Status]='" + admission + "' order by stud_id union  SELECT Roll_no,stud_id as Formno, case when id is null then stud_id else id end as stud, NAME,Gender,Group_title,stud_Category,stud_Caste,[Admission Status],'1' as RN,Freeship_date,admission_date  FROM CTE1   WHERE [Admission Status]='" + admission + "'  order by stud_id ";
                }
            }
        }



        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        // List<PartPaymentStudent> details = new List<PartPaymentStudent>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);

                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    PartPaymentStudent stud = new PartPaymentStudent();
                    stud.Roll_no = dtrow["Roll_no"].ToString();
                    stud.stud_id = dtrow["stud_id"].ToString();
                    stud.NAME = dtrow["NAME"].ToString();
                    stud.gender = dtrow["Gender"].ToString();
                    stud.Formno = dtrow["Formno"].ToString();

                    stud.stud_Category = dtrow["stud_Category"].ToString();
                    stud.stud_Caste = dtrow["stud_Caste"].ToString();

                    stud.Group_title = dtrow["Group_title"].ToString();
                    stud.admissionstatus = dtrow["Admission Status"].ToString();
                    stud.freeship_Date = dtrow["Freeship_date"].ToString();
                    stud.admission_date = dtrow["admission_date"].ToString();
                    details.Add(stud);
                }
                if (ds.Tables.Count > 1)
                {

                    foreach (DataRow dtrow in ds.Tables[1].Rows)
                    {
                        PartPaymentStudent stud = new PartPaymentStudent();
                        stud.Roll_no = dtrow["Roll_no"].ToString();
                        stud.stud_id = dtrow["stud_id"].ToString();
                        stud.NAME = dtrow["NAME"].ToString();
                        stud.Formno = dtrow["Formno"].ToString();
                        stud.gender = dtrow["Gender"].ToString();
                        stud.stud_Category = dtrow["stud_Category"].ToString();
                        stud.stud_Caste = dtrow["stud_Caste"].ToString();

                        stud.Group_title = dtrow["Group_title"].ToString();
                        stud.admissionstatus = dtrow["Admission Status"].ToString();
                        stud.freeship_Date = dtrow["Freeship_date"].ToString();
                        stud.admission_date = dtrow["admission_date"].ToString();
                        details.Add(stud);
                    }
                }
                con.Close();
            }
        }
        return details.ToArray();
    }


    //ADD SHWETA FOR ADMISSION CONFIRM FORM===================================================================================================================


    public List<ListItem> getcourse(string fid)
    {
        string qry = "select Distinct Course_name,course_id from m_crs_course_tbl Where Del_Flag <>1 And Course_name <> '' And faculty_id='" + fid + "'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["course_id"].ToString(),
                                Text = sdr["Course_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> getfaculty()
    {
        string qry = " select faculty_name,faculty_Id from m_crs_faculty Where Del_Flag <>1 And faculty_name <> ''";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["faculty_Id"].ToString(),
                                Text = sdr["faculty_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }
    public List<ListItem> getsubcourse(string course)
    {
        string qry = " select Distinct subcourse_name,subcourse_id from m_crs_subcourse_tbl Where Del_Flag <>1 And subcourse_name <> '' And course_id='" + course + "'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["subcourse_id"].ToString(),
                                Text = sdr["subcourse_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }
    public List<ListItem> getgroup(string subcourse)
    {
        string qry = "select Group_title,Group_id from m_crs_subjectgroup_tbl where subcourse_id='" + subcourse + "'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Group_id"].ToString(),
                                Text = sdr["Group_title"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }


    public List<ListItem> getayidadm()
    {
        string qry = "select Duration , AYID from dbo.m_academic ORDER BY Duration DESC";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["AYID"].ToString(),
                                Text = sdr["Duration"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }


    public admission[] Admissionform(string formid, string year)
    {
        string query = "";
        string queryname = "";
        string queryddl = "";
        string groupid, groupids = "";
        int intake = 0, count = 0;
        string[] grpintake = new string[0];
        string qryintake = "";
        string qryintakeacd = "";
        string qrymerrit = "";

        admission adm = new admission();
        //DateTime dateLog = Convert.ToDateTime(date);
        string qry = "select * from  dbo.OLA_FY_adm_CourseSelection where formno = SUBSTRING ('" + formid + "',1,5) and group_id like 'GRP'+ SUBSTRING('" + formid + "',6,9) ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        DataSet dss = new DataSet();
        DataSet retrivename = new DataSet();
        DataSet retriveddl = new DataSet();
        DataSet dsintake = new DataSet();
        DataSet dsintakeacd = new DataSet();
        DataSet dsmeritdate = new DataSet();

        List<admission> details = new List<admission>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);


                if (ds.Tables[0].Rows.Count == 0)
                {
                    return details.ToArray();
                }
                else
                {
                    // dss = get_sub_grp_id(Trim(txtFormno.Text.Substring(0, 5)), ACDID)

                    query = "select Subcourse_id , GROUP_ID from  dbo.m_crs_subjectgroup_tbl where GROUP_ID LIKE 'GRP'+ SUBSTRING('" + formid + "',6,9)";

                    dss = cls1.fillDataset(query);
                    groupid = dss.Tables[0].Rows[0]["GROUP_ID"].ToString();
                    //  Session["groupid"] =
                    adm.formid = formid.Substring(0, 5);
                    queryname = "select F_name,M_name,L_Name,Gender,Category,Stud_Class,stud_id,CONVERT(varchar, dob,106) as dob from d_adm_applicant where Form_no='" + adm.formid + "' and  Del_Flag<>1 AND ACDID='" + year + "'";
                    retrivename = cls1.fillDataset(queryname);
                    if (retrivename.Tables[0].Rows.Count > 0)
                    {
                        adm.fname = retrivename.Tables[0].Rows[0]["F_name"].ToString();
                        adm.mname = retrivename.Tables[0].Rows[0]["M_name"].ToString();
                        adm.lname = retrivename.Tables[0].Rows[0]["L_Name"].ToString();

                        if (retrivename.Tables[0].Rows[0]["dob"].ToString() == "")
                        {
                            DateTime DATE = (DateTime.Today);
                            adm.dob = Convert.ToString(DATE);
                        }
                        else
                        {
                            adm.dob = retrivename.Tables[0].Rows[0]["dob"].ToString();
                        }


                    }
                    if (adm.formid.Length == 5)
                    {
                        queryddl = "select distinct ss.subcourse_name, g.Group_title,g.Group_id,ss.subcourse_id,ss.subcourse_name,c.course_id,f.faculty_id,c.course_name,f.faculty_name from d_adm_applicant app , dbo.m_crs_subjectgroup_tbl g , dbo.m_crs_subcourse_tbl ss ,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f where  ss.subcourse_id=g.Subcourse_id and  c.course_id=ss.course_id and f.faculty_id=c.faculty_id and app.ACDID='" + year + "'  and g.Group_id ='" + groupid + "' and app.form_no='" + adm.formid + "' and app.del_flag<>'1'";
                        retriveddl = cls1.fillDataset(queryddl);
                        adm.ddlfaculty = retriveddl.Tables[0].Rows[0]["faculty_id"].ToString();

                        adm.ddlcourse = retriveddl.Tables[0].Rows[0]["course_id"].ToString();
                        adm.ddlsubcourse = retriveddl.Tables[0].Rows[0]["subcourse_id"].ToString();
                        adm.ddlgroup = retriveddl.Tables[0].Rows[0]["Group_id"].ToString();


                        qryintake = "select intake,group_id from m_intake where ayid ='" + year + "' and group_id like '%" + groupid + "%'";
                        dsintake = cls1.fillDataset(qryintake);
                        if (dsintake.Tables[0].Rows.Count > 0)
                        {
                            intake = Convert.ToInt32(dsintake.Tables[0].Rows[0]["intake"].ToString());

                            grpintake = dsintake.Tables[0].Rows[0]["group_id"].ToString().Split(',');


                            groupids = "";
                            for (int i = 0; grpintake.Length > 0; i++)
                            {
                                if (i == grpintake.Length)
                                {
                                    break;
                                }

                                groupids = groupids + "'" + grpintake[i] + "',";
                            }

                            groupids = groupids.Remove(groupids.LastIndexOf(","));

                        }
                        if (groupids == "")
                        {
                            adm.intakemessege = " ";
                        }
                        else
                        {
                            qryintakeacd = "select count(*) from dbo.m_std_studentacademic_tbl where ayid ='" + year + "' and del_flag = 0 and group_id in (" + groupids + ")";
                            dsintakeacd = cls1.fillDataset(qryintakeacd);

                            if (dsintakeacd.Tables[0].Rows.Count > 0)
                            {
                                count = Convert.ToInt32(dsintakeacd.Tables[0].Rows[0][0].ToString());


                                if ((intake - count) <= 10)
                                {
                                    if (intake - count >= 0)
                                    {
                                        // "";

                                        adm.intakemessege = " No seats are available do you want to continue";
                                        // details.Add(adm);
                                    }
                                    else
                                    {
                                        adm.intakemessege = intake - count + "Seats remaining  out of" + intake;
                                    }


                                }
                                else
                                {
                                    adm.intakemessege = " ";
                                }
                            }

                        }
                        qrymerrit = " select distinct merit_dt  from OLA_FY_adm_CourseSelection where merit_dt is not null order by merit_dt asc";

                        qrymerrit = qrymerrit + " Select  merit_dt from OLA_FY_adm_CourseSelection where group_id='" + groupid + "' and Formno='" + adm.formid + "' ";
                        dsmeritdate = cls1.fillDataset(qrymerrit);
                        if (dsmeritdate.Tables[0].Rows.Count > 0)
                        {
                            if (dsmeritdate.Tables[1].Rows.Count > 0)
                            {

                                if ((dsmeritdate.Tables[1].Rows[0]["merit_dt"].ToString()) != "")
                                {

                                    for (int ii = 0; dsmeritdate.Tables[0].Rows.Count > 0; ii++)
                                    {
                                        if (ii > dsmeritdate.Tables[0].Rows.Count - 1)
                                        {
                                            break;
                                        }
                                        if (Convert.ToDateTime(dsmeritdate.Tables[1].Rows[0]["merit_dt"].ToString()) == Convert.ToDateTime(dsmeritdate.Tables[0].Rows[ii]["merit_dt"].ToString()))
                                        {

                                            if (ii + 1 != dsmeritdate.Tables[0].Rows.Count)
                                            {
                                                adm.chkMeritListDate = "Form had come in the " + ii + 1 + "  Merit List on  " + Convert.ToDateTime(dsmeritdate.Tables[0].Rows[ii]["merit_dt"].ToString());

                                                // chkMeritListDate.Text = ii + 1 & " Merit List on " & Convert.ToDateTime(dsmeritdate.Tables(0).Rows(ii).Item("merit_dt").ToString)
                                                // MsgBox("Form had come in the " & ii + 1 & " merit list on " & Convert.ToDateTime(dsmeritdate.Tables(0).Rows(ii).Item("merit_dt").ToString))
                                            }
                                            else
                                            {
                                                adm.chkMeritListDate = "Last Merit List on " + Convert.ToDateTime(dsmeritdate.Tables[0].Rows[ii]["merit_dt"].ToString());
                                                //chkMeritListDate.Text = "Last Merit List on " & Convert.ToDateTime(dsmeritdate.Tables(0).Rows(ii).Item("merit_dt").ToString)
                                            }

                                        }

                                    }
                                }
                                else
                                {
                                    adm.chkMeritListDate = " ";
                                }
                            }
                        }
                        else
                        {
                            adm.chkMeritListDate = " ";
                        }

                        //if (adm.lname.Contains("'"))
                        //{
                        //    adm.lname = adm.lname.Replace("'", "''");
                        //    qryadm = " select isnull(F_Name,'') as stud_F_Name ,isnull(M_Name,'')as stud_M_Name,isnull(L_Name,'') as stud_L_Name ,Gender,DOB,stud_id ";
                        //    qryadm = qryadm + " from dbo.d_adm_applicant where F_Name='" + adm.fname + "' and M_Name='" + adm.mname + "' and L_Name='" + adm.lname + "' and DOB='" + adm.dob + "' and ACDID='" + year + "' and stud_id is not null and del_flag <>1";

                        //}
                        //else
                        //{
                        //    qryadm = " select isnull(F_Name,'') as stud_F_Name ,isnull(M_Name,'')as stud_M_Name,isnull(L_Name,'') as stud_L_Name ,Gender,DOB,stud_id ";
                        //    qryadm = qryadm + " from dbo.d_adm_applicant where F_Name='" + adm.fname + "' and M_Name='" + adm.mname + "' and L_Name='" + adm.lname + "' and DOB='" + adm.dob + "' and ACDID='" + year + "' and stud_id is not null and del_flag <>1";
                        //}
                        //dsadm = cls1.fillDataset(qryadm);
                        //if (dsadm.Tables[0].Rows.Count > 0)
                        //{
                        //    adm.oldstud_id = dsadm.Tables[0].Rows[0]["stud_id"].ToString();

                        //   string  strquery = "Select isnull(per.stud_F_name,'')  +'  '+ isnull(per.stud_M_name,'') +'  '+ isnull(per.stud_L_name,'') as  stud_name, aca.group_id,class.subcourse_name, course.Course_id, course.course_name, per.Del_Flag, fac.faculty_name, grp.group_title ,sum(fee_mas.Amount) as course_tot_fees,(select sum(amount) from m_feeentry as entry where entry.stud_id = aca.stud_id and entry.del_flag = 0 and ENTRY.TYPE='Fee' and entry.Chq_status = 'Clear' and entry.ayid = fee_mas.ayid ) as course_fee_paid from 	m_std_studentacademic_tbl as aca		inner join 	m_std_personaldetails_tbl as per on per.stud_id = aca.stud_id 		inner join  	m_crs_subcourse_tbl as class on class.subcourse_id = aca.subcourse_id 		inner join 	m_crs_course_tbl as course on course.course_id = class.course_id 		inner join 	m_crs_faculty  as fac on fac.faculty_id = course.faculty_id 		inner join  	m_crs_subjectgroup_tbl as grp on grp.Group_id = aca.group_id 		left outer join  	m_feemaster as fee_mas on fee_mas.group_id = grp.group_id and fee_mas.ayid = aca.AYID  where  	aca.stud_id = '"+adm.oldstud_id+"' and aca.AYID = '"+year+"'   group by aca.course_tot_fees, aca.course_fee_paid,   aca.group_id, class.subcourse_name,  course.Course_id,   course.course_name, per.Del_Flag,  fac.faculty_name, grp.group_title , per.stud_F_name, per.stud_M_name, per.stud_L_name, aca.stud_id , fee_mas.ayid ";
                        //   DataSet dsadmold = cls1.fillDataset(strquery);

                        //   adm.name = dsadmold.Tables[0].Rows[0]["stud_name"].ToString();
                        //   adm.ddlcoursename = dsadmold.Tables[0].Rows[0]["course_name"].ToString();
                        //   adm.ddlsubcoursename = dsadmold.Tables[0].Rows[0]["subcourse_name"].ToString();
                        //   adm.ddlfacultyname = dsadmold.Tables[0].Rows[0]["faculty_name"].ToString();
                        //   adm.ddlgroupname = dsadmold.Tables[0].Rows[0]["group_title"].ToString();

                        //   if (dsadmold.Tables[0].Rows[0]["course_fee_paid"].ToString()== "")
                        //   {
                        //       adm.course_fee_paid = 0;

                        //   }
                        //   else
                        //   {
                        //       adm.course_fee_paid = Convert.ToInt32(dsadmold.Tables[0].Rows[0]["course_fee_paid"].ToString());
                        //   }

                        //   adm.Course_tot_fees =Convert.ToInt32( dsadmold.Tables[0].Rows[0]["course_tot_fees"].ToString());

                        //    adm.messege = "Already an taken. Do you want to cancel it and transfer this one ??";
                        //    details.Add(adm);
                        //    return details.ToArray();

                        //}
                    }

                }

                details.Add(adm);
                return details.ToArray();
            }
        }
    }

    public admission[] Admissiongrid(string formid, string year, string fname, string mname, string lname, string dob)
    {
        string qryadm = "";
        DataSet dsadm = new DataSet();
        admission adm = new admission();
        List<admission> details = new List<admission>();
        if (lname.Contains("'"))
        {
            lname = lname.Replace("'", "''");
            qryadm = " select isnull(F_Name,'') as stud_F_Name ,isnull(M_Name,'')as stud_M_Name,isnull(L_Name,'') as stud_L_Name ,Gender,DOB,stud_id ";
            qryadm = qryadm + " from dbo.d_adm_applicant where F_Name='" + fname + "' and M_Name='" + mname + "' and L_Name='" + lname + "' and DOB='" + dob + "' and ACDID='" + year + "' and stud_id is not null and del_flag <>1";
        }
        else
        {
            qryadm = " select isnull(F_Name,'') as stud_F_Name ,isnull(M_Name,'')as stud_M_Name,isnull(L_Name,'') as stud_L_Name ,Gender,DOB,stud_id ";
            qryadm = qryadm + " from dbo.d_adm_applicant where F_Name='" + fname + "' and M_Name='" + mname + "' and L_Name='" + lname + "' and DOB='" + dob + "' and ACDID='" + year + "' and stud_id is not null and del_flag <>1";
        }
        dsadm = cls1.fillDataset(qryadm);
        if (dsadm.Tables[0].Rows.Count > 0)
        {
            adm.oldstud_id = dsadm.Tables[0].Rows[0]["stud_id"].ToString();

            string strquery = "Select isnull(per.stud_F_name,'')  +'  '+ isnull(per.stud_M_name,'') +'  '+ isnull(per.stud_L_name,'') as  stud_name, aca.group_id,class.subcourse_name, course.Course_id, course.course_name, per.Del_Flag, fac.faculty_name, grp.group_title ,sum(fee_mas.Amount) as course_tot_fees,(select sum(amount) from m_feeentry as entry where entry.stud_id = aca.stud_id and entry.del_flag = 0 and ENTRY.TYPE='Fee' and entry.Chq_status = 'Clear' and entry.ayid = fee_mas.ayid ) as course_fee_paid from 	m_std_studentacademic_tbl as aca		inner join 	m_std_personaldetails_tbl as per on per.stud_id = aca.stud_id 		inner join  	m_crs_subcourse_tbl as class on class.subcourse_id = aca.subcourse_id 		inner join 	m_crs_course_tbl as course on course.course_id = class.course_id 		inner join 	m_crs_faculty  as fac on fac.faculty_id = course.faculty_id 		inner join  	m_crs_subjectgroup_tbl as grp on grp.Group_id = aca.group_id 		left outer join  	m_feemaster as fee_mas on fee_mas.group_id = grp.group_id and fee_mas.ayid = aca.AYID  where  	aca.stud_id = '" + adm.oldstud_id + "' and aca.AYID = '" + year + "'   group by aca.course_tot_fees, aca.course_fee_paid,   aca.group_id, class.subcourse_name,  course.Course_id,   course.course_name, per.Del_Flag,  fac.faculty_name, grp.group_title , per.stud_F_name, per.stud_M_name, per.stud_L_name, aca.stud_id , fee_mas.ayid ";
            DataSet dsadmold = cls1.fillDataset(strquery);

            adm.name = dsadmold.Tables[0].Rows[0]["stud_name"].ToString();
            adm.ddlcoursename = dsadmold.Tables[0].Rows[0]["course_name"].ToString();
            adm.ddlsubcoursename = dsadmold.Tables[0].Rows[0]["subcourse_name"].ToString();
            adm.ddlfacultyname = dsadmold.Tables[0].Rows[0]["faculty_name"].ToString();
            adm.ddlgroupname = dsadmold.Tables[0].Rows[0]["group_title"].ToString();

            if (dsadmold.Tables[0].Rows[0]["course_fee_paid"].ToString() == "")
            {
                adm.course_fee_paid = 0;
            }
            else
            {
                adm.course_fee_paid = Convert.ToInt32(dsadmold.Tables[0].Rows[0]["course_fee_paid"].ToString());
            }

            adm.Course_tot_fees = Convert.ToInt32(dsadmold.Tables[0].Rows[0]["course_tot_fees"].ToString());

            adm.messege = "Already an taken. Do you want to cancel it and transfer this one ??";

            //Admission Already taken in ().. Do you want to cancel it and transfer this student to () ??  
            details.Add(adm);
            return details.ToArray();

        }
        details.Add(adm);
        return details.ToArray();

    }



    public admission[] Confirm(string formid, string year, string ddlfaculty, string ddlgroup, string ddlsubcourse, string ddlgroupname, string ddlsubcoursename)
    {
        admission adm = new admission();
        List<admission> confirm = new List<admission>();

        DataSet dsconfirm = new DataSet();
        DataSet dsretrive = new DataSet();
        DataSet dsretrivefees = new DataSet();
        DataSet dsretrivefees1 = new DataSet();
        DataSet dsfyid = new DataSet();
        //  txtFormno.Text = Trim(txtFormno.Text.Substring(0, 5));
        //formid
        //   if()
        // {

        string qryconfirm = "";
        string fyid = "";
        string studid = "";

        string id = formid.Substring(0, 5);

        //string qry = "select FYID from m_crs_faculty where faculty_id='" + ddlfaculty + "' ";
        //dsfyid = cls1.fillDataset(qry);
        //fyid = dsfyid.Tables[0].Rows[0]["FYID"].ToString();
        //adm.fyid = fyid;

        string qry = "select MAX(FYID)as FYID from m_financial ";
        dsfyid = cls1.fillDataset(qry);
        fyid = dsfyid.Tables[0].Rows[0]["FYID"].ToString();
        adm.fyid = fyid;

        qryconfirm = "Exec proc_autoid_LMS_FY '" + id + "','" + fyid + "','" + year + "','" + ddlgroup.Trim() + "'";  //SUBSTRING('" + formid + "',6,8)
        // studid = cls1.DMLqueriesstud_id(qryconfirm);
        // studid = cls1.RetriveQuery(qryconfirm);
        resultset = cls1.RetriveQuery(qryconfirm);
        if (resultset.HasRows == true)
        {
            while (resultset.Read())
            {
                studid = (resultset[0].ToString());
            }
        }

        string retrievequery = "select * from d_adm_applicant where  form_no=SUBSTRING('" + formid + "',0,6) and Del_Flag<>1 and acdid='" + year + "'";
        dsretrive = cls1.fillDataset(retrievequery);
        adm.stud_id = studid;
        //dsretrive.Tables[0].Rows[0]["stud_id"].ToString();
        string strqueryfees = "select struct_name,amount from dbo.m_FeeMaster where  group_id= '" + ddlgroup + "' and ayid = '" + year + "'";
        strqueryfees = strqueryfees + " select COUNT(stud_id) as feescount from m_FeeEntry where stud_id='" + studid + "' and del_flag=0";
        dsretrivefees = cls1.fillDataset(strqueryfees);

        string strqueryfees1 = "select Category from d_adm_applicant where form_no =SUBSTRING('" + formid + "',0,6)  and Acdid ='" + year + "'";
        dsretrivefees1 = cls1.fillDataset(strqueryfees1);


        adm.ddlfaculty = ddlfaculty;
        adm.ddlgroupname = ddlgroupname;
        adm.fname = dsretrive.Tables[0].Rows[0]["F_name"].ToString();
        adm.name = dsretrive.Tables[0].Rows[0]["F_name"].ToString() + ' ' + dsretrive.Tables[0].Rows[0]["M_name"].ToString() + ' ' + dsretrive.Tables[0].Rows[0]["L_name"].ToString();
        adm.mname = dsretrive.Tables[0].Rows[0]["M_name"].ToString();
        adm.lname = dsretrive.Tables[0].Rows[0]["L_Name"].ToString();
        adm.ddlsubcoursename = ddlsubcoursename;

        //rohit comment
        adm.category = dsretrivefees1.Tables[0].Rows[0]["Category"].ToString();

        //  adm.category = dsretrive.Tables[0].Rows[0]["Category"].ToString();
        adm.amount = Convert.ToInt32(dsretrivefees.Tables[0].Rows[0]["amount"].ToString());
        if (dsretrivefees.Tables[1].Rows.Count > 0)
        {
            adm.feecount = Convert.ToInt32(dsretrivefees.Tables[1].Rows[0]["feescount"].ToString()) + 1;


        }
        else
        {
            adm.feecount = 1;
        }
        // adm. = Convert.ToInt32(dsretrivefees.Tables[0].Rows[0]["amount"].ToString());
        adm.Course_tot_fees = Convert.ToInt32(dsretrivefees.Tables[0].Rows[0]["amount"].ToString());
        confirm.Add(adm);
        return confirm.ToArray();

    }

    //FEESENTRY fy
    //public bool savefees(string stud_id, string ddlsubcourse, string ddlgroup, int amount, int Course_tot_fees, int Course_fee_Bal, string Pay_date, string reciptmode, int reciptno, string Recpt_Chq_dt, string Recpt_Chq_No, string Recpt_Bnk_Name, string Recpt_Bnk_Branch, string Chq_status, string type, string Remark, string Authorized_By, string Ayid, string user_id)   //(logClass logclass)
    public bool savefees(admission admission)   //(logClass logclass)   admission
    {
        bool stateNotes = false;
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand("insert_fy_admission_fees", con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Stud_id", admission.stud_id);
                cmd.Parameters.AddWithValue("@subcourse_Id", admission.ddlsubcourse);
                cmd.Parameters.AddWithValue("@group_id", admission.ddlgroup);
                cmd.Parameters.AddWithValue("@Course_tot_fees", admission.amount);
                cmd.Parameters.AddWithValue("@Course_Fee_Paid", admission.Course_tot_fees);

                int i;

                i = admission.amount - admission.Course_tot_fees;

                cmd.Parameters.AddWithValue("@Course_fee_Bal", i);
                cmd.Parameters.AddWithValue("@Pay_date", admission.Pay_date);
                cmd.Parameters.AddWithValue("@Struct_name", "Fees");
                cmd.Parameters.AddWithValue("@Recpt_mode", admission.reciptmode1);
                cmd.Parameters.AddWithValue("@Recpt_no", admission.receiptno);
                if (admission.Chq_status1 == "Cheque" || admission.Chq_status1 == "NEFT")
                {
                    cmd.Parameters.AddWithValue("@Recpt_Chq_dt", Convert.ToDateTime(admission.Recpt_Chq_dt1));
                }
                else
                {
                    cmd.Parameters.AddWithValue("@Recpt_Chq_dt", DBNull.Value);
                }

                //if (admission.Chq_status1 == "Card Payment")
                //{
                //    cmd.Parameters.AddWithValue("@Recpt_Chq_No", admission.card_no);
                //}
                //else
                //{
                if (admission.Recpt_Bnk_Name1 == "")
                {
                    cmd.Parameters.AddWithValue("@Recpt_Bnk_Name", DBNull.Value);

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Recpt_Bnk_Name", admission.Recpt_Bnk_Name1);
                }
                // }
                if (admission.Chq_status1 == "Card Payment")
                {
                    cmd.Parameters.AddWithValue("@Recpt_Chq_No", admission.card_no);
                }
                else
                {
                    if (admission.Recpt_Chq_No1 == "")
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Chq_No", DBNull.Value);

                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Chq_No", admission.Recpt_Chq_No1);
                    }
                }
                if (admission.Recpt_Bnk_Branch1 == "")
                {
                    cmd.Parameters.AddWithValue("@Recpt_Bnk_Branch", DBNull.Value);

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Recpt_Bnk_Branch", admission.Recpt_Bnk_Branch1);
                }



                if (admission.Chq_status1 == "Cheque")
                {
                    cmd.Parameters.AddWithValue("@Chq_status", "Pending");

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Chq_status", "Clear");
                }

                cmd.Parameters.AddWithValue("@Type", admission.type1);

                if (admission.Remark1 == string.Empty)
                {
                    cmd.Parameters.AddWithValue("@Remark", DBNull.Value);
                }
                else
                {
                    if (admission.Remark1 == "--Select--")
                    {
                        cmd.Parameters.AddWithValue("@Remark", DBNull.Value);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Remark", admission.Remark1);
                    }
                }
                if (admission.Authorized_By1 == string.Empty)
                {
                    cmd.Parameters.AddWithValue("@Authorized_By", DBNull.Value);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@Authorized_By", admission.Authorized_By1);
                }
                cmd.Parameters.AddWithValue("@Ayid", admission.AYID1);
                cmd.Parameters.AddWithValue("@user_id", admission.user_id1);


                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    stateNotes = true;
                }
                //  cmd.Parameters.AddWithValue("@Stud_id", stud_id);
                // cmd.Parameters.AddWithValue("@subcourse_Id", ddlsubcourse);
                // cmd.Parameters.AddWithValue("@group_id", ddlgroup);
                // cmd.Parameters.AddWithValue("@Course_tot_fees", amount);
                // cmd.Parameters.AddWithValue("@Course_Fee_Paid", Course_tot_fees);

                //int i;

                //i = amount - Course_tot_fees;

                //cmd.Parameters.AddWithValue("@Course_fee_Bal",i);
                //cmd.Parameters.AddWithValue("@Pay_date", Pay_date);
                //cmd.Parameters.AddWithValue("@Struct_name", "Fees");
                //cmd.Parameters.AddWithValue("@Recpt_mode", reciptmode);
                //cmd.Parameters.AddWithValue("@Recpt_no", 1);
                //if (Chq_status == "Cheque")
                //{
                //    cmd.Parameters.AddWithValue("@Recpt_Chq_dt", Convert.ToDateTime(Recpt_Chq_dt));
                //}
                //else
                //{
                //    cmd.Parameters.AddWithValue("@Recpt_Chq_dt", DBNull.Value);
                //}


                //cmd.Parameters.AddWithValue("@Recpt_Chq_No", Recpt_Chq_No);
                //cmd.Parameters.AddWithValue("@Recpt_Bnk_Name", Recpt_Bnk_Name);
                //cmd.Parameters.AddWithValue("@Recpt_Bnk_Branch", Recpt_Bnk_Branch);
                //if (Chq_status == "Cheque")
                //{
                //     cmd.Parameters.AddWithValue("@Chq_status", "Pending");

                //}
                //else
                //{
                //    cmd.Parameters.AddWithValue("@Chq_status", "Clear");
                //}

                //cmd.Parameters.AddWithValue("@Type", type);

                //if (Remark == string.Empty || Remark == "")
                //{
                //    cmd.Parameters.AddWithValue("@Remark", DBNull.Value);
                //}
                //else
                //{
                //    cmd.Parameters.AddWithValue("@Remark", Remark);
                //}
                //if (Authorized_By == string.Empty || Authorized_By == "")
                //{
                //    cmd.Parameters.AddWithValue("@Authorized_By", DBNull.Value);
                //}
                //else
                //{
                //    cmd.Parameters.AddWithValue("@Authorized_By", Authorized_By);
                //}
                //cmd.Parameters.AddWithValue("@Ayid", Ayid);
                //cmd.Parameters.AddWithValue("@user_id", user_id);


                //string message = Convert.ToString(cmd.ExecuteScalar());

            }
        }
        return stateNotes;

    }


    //FEESENTRY sy/ty
    public bool savefeesoutsider(admission admission)   //(logClass logclass)
    {
        bool stateNotes = false;
        bool bolval = false;
        DataTable dt = new DataTable();
        string stud_id = admission.stud_id;
        string year = admission.AYID1;
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        string strqry = "select * from m_std_studentacademic_tbl where stud_id='" + admission.stud_id + "' and group_id='" + admission.ddlgroup + "' and ayid='" + admission.AYID1 + "' and del_flag=0";//to avoid duplicate entry
        DataTable dtchk = cls1.fillDataTable(strqry);
        string str = "update  www_m_std_personaldetails_tbl set flag=1 where  stud_id='" + stud_id + "' and ayid='" + year + "'";
        // bool bolval 
        bolval = cls1.DMLqueries(str);
        if (dtchk.Rows.Count > 0)
        {
            stateNotes = true;
        }
        else
        {
            using (SqlConnection con = new SqlConnection(cs))
            {
                using (SqlCommand cmd = new SqlCommand("insert_update_admission_fees", con))
                {
                    con.Open();
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Stud_id", admission.stud_id);
                    cmd.Parameters.AddWithValue("@subcourse_Id", admission.ddlsubcourse);
                    cmd.Parameters.AddWithValue("@group_id", admission.ddlgroup);
                    cmd.Parameters.AddWithValue("@Course_tot_fees", admission.amount);
                    cmd.Parameters.AddWithValue("@Course_Fee_Paid", admission.Course_tot_fees);

                    int i;

                    i = admission.amount - admission.Course_tot_fees;

                    cmd.Parameters.AddWithValue("@Course_fee_Bal", i);
                    cmd.Parameters.AddWithValue("@Pay_date", admission.Pay_date);
                    cmd.Parameters.AddWithValue("@Struct_name", "Fees");
                    cmd.Parameters.AddWithValue("@Recpt_mode", admission.reciptmode1);
                    cmd.Parameters.AddWithValue("@Recpt_no", admission.receiptno);
                    if (admission.Chq_status1 == "Cheque" || admission.Chq_status1 == "NEFT")
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Chq_dt", Convert.ToDateTime(admission.Recpt_Chq_dt1));
                    }
                    else if (admission.Chq_status1 == "DD")
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Chq_dt", Convert.ToDateTime(admission.Recpt_Chq_dt1));
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Chq_dt", DBNull.Value);
                    }

                    //if (admission.Chq_status1 == "Card Payment")
                    //{
                    //    cmd.Parameters.AddWithValue("@Recpt_Bnk_Name", admission.card_no);
                    //}
                    //else
                    //{
                    if (admission.Recpt_Bnk_Name1 == "")
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Bnk_Name", DBNull.Value);

                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Bnk_Name", admission.Recpt_Bnk_Name1);
                    }
                    // }
                    if (admission.Chq_status1 == "Card Payment")
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Chq_No", admission.card_no);
                    }
                    else
                    {
                        if (admission.Recpt_Chq_No1 == "")
                        {
                            cmd.Parameters.AddWithValue("@Recpt_Chq_No", DBNull.Value);

                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@Recpt_Chq_No", admission.Recpt_Chq_No1);
                        }
                    }
                    if (admission.Recpt_Bnk_Branch1 == "")
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Bnk_Branch", DBNull.Value);

                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Recpt_Bnk_Branch", admission.Recpt_Bnk_Branch1);
                    }

                    if (admission.Chq_status1 == "Cheque")
                    {
                        cmd.Parameters.AddWithValue("@Chq_status", "Pending");

                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Chq_status", "Clear");
                    }

                    cmd.Parameters.AddWithValue("@Type", admission.type1);

                    if (admission.Remark1 == string.Empty)
                    {
                        cmd.Parameters.AddWithValue("@Remark", DBNull.Value);
                    }
                    else
                    {
                        if (admission.Remark1 == "--Select--")
                        {
                            cmd.Parameters.AddWithValue("@Remark", DBNull.Value);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@Remark", admission.Remark1);
                        }
                    }
                    if (admission.Authorized_By1 == string.Empty)
                    {
                        cmd.Parameters.AddWithValue("@Authorized_By", DBNull.Value);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Authorized_By", admission.Authorized_By1);
                    }
                    cmd.Parameters.AddWithValue("@Ayid", admission.AYID1);
                    cmd.Parameters.AddWithValue("@user_id", admission.user_id1);

                    stateNotes = true;
                    string message = Convert.ToString(cmd.ExecuteScalar());

                }
            }
        }
        return stateNotes;


    }




    public admission[] transferfees(string oldstud_id, string formid, string stud_id, string Ayid, string fyid, string userid)   //(logClass logclass)
    {
        admission adm = new admission();
        List<admission> transeferconfirm = new List<admission>();
        bool stateNotes = false;
        DataSet dstransfer = new DataSet();

        string query = " select fe.*,group_title  from dbo.m_FeeEntry fe inner join dbo.m_std_studentacademic_tbl sa on sa.stud_id=fe.stud_id and fe.ayid=sa.ayid ";
        query = query + " inner join dbo.m_crs_subjectgroup_tbl sg on sg.group_id=sa.group_id  where fe.ayid='" + Ayid + "' and fe.stud_id='" + oldstud_id + "'";
        query = query + " select sa.*,group_title  from m_std_studentacademic_tbl sa inner join m_crs_subjectgroup_tbl sg on sa.group_id=sg.group_id ";
        query = query + " where sa.stud_id='" + stud_id + "' and sa.ayid='" + Ayid + "' ";
        dstransfer = cls1.fillDataset(query);

        DataTable dtInsert = new DataTable();
        dtInsert = dstransfer.Tables[0].Clone();


        dtInsert = dstransfer.Tables[0].Copy();
        dtInsert.Columns.Remove("group_title");

        foreach (DataRow R in dtInsert.Rows)
        {
            R["curr_dt"] = System.DateTime.Today;
            if (!string.IsNullOrEmpty(R["Remark"].ToString()))
            {
                R["remark"] = R["remark"].ToString() + " and Transfer from " + dstransfer.Tables[0].Rows[0]["group_title"].ToString() + " to " + dstransfer.Tables[1].Rows[0]["group_title"].ToString();
            }
            else
            {
                R["remark"] = "Transfer from " + dstransfer.Tables[0].Rows[0]["group_title"].ToString() + " to " + dstransfer.Tables[1].Rows[0]["group_title"].ToString();
            }
            R["stud_id"] = dstransfer.Tables[1].Rows[0]["stud_id"].ToString();

            R["del_flag"] = 0;
            R["user_id"] = userid;  //change

        }

        query = " insert into m_feeentry select '";

        if (dtInsert.Rows.Count == 1)
        {
            for (int i1 = 0; i1 <= dtInsert.Columns.Count - 1; i1++)
            {
                query = query + dtInsert.Rows[0][i1].ToString().Trim() + "','";
            }

            query = query.Replace("'NULL'", "NULL");
            query = query.Replace("''", "NULL");
            query = query.Remove(query.Length - 2);

        }
        else if (dtInsert.Rows.Count > 1)
        {
            for (int j = 0; j <= dtInsert.Rows.Count - 1; j++)
            {
                for (int i2 = 0; i2 <= dtInsert.Columns.Count - 1; i2++)
                {
                    query = query + dtInsert.Rows[j][i2].ToString().Trim() + "','";
                }
                query = query.Replace("'NULL'", "NULL");
                query = query.Replace("''", "NULL");

                query = query.Remove(query.Length - 2);

                query = query + " union all select '";
            }
            query = query.Remove(query.LastIndexOf("union"));
        }
        query = query.Replace(oldstud_id, stud_id);

        cls1.DMLqueries3(query);

        string qrycancel = "Exec m_cancel_admission '" + oldstud_id + "','" + Ayid + "','" + fyid + "','change to other group' ";  //SUBSTRING('" + formid + "',6,8)
        cls1.DMLqueries3(qrycancel);
        adm.ddlgroupname = dstransfer.Tables[0].Rows[0]["group_title"].ToString();
        adm.ddloldgroupname = dstransfer.Tables[1].Rows[0]["group_title"].ToString();


        transeferconfirm.Add(adm);

        return transeferconfirm.ToArray();

    }




    public List<ListItem> LoadOnlyParent(string parentid)
    {
        DataSet dss = new DataSet();
        string strQuery = "SELECT DD.DD_NAME as DDName,DD.DD_NO FROM description_details DD,description_master DM  WHERE DD.DM_NO = DM.DM_NO AND DM.DM_NO='" + parentid + "' AND DD.DEL_FLAG<>1";
        // dss = cls1.fillDataset(strQuery);
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(strQuery))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["DD_NO"].ToString(),
                            Text = sdr["DDName"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }
    }



    public bool InsertOnlyParent(int dmno, string ddname)
    {
        try
        {

            string selectquery = "select max(cast(dd_no as numeric(18,0))) as Total_DDNO from description_details";
            resultset = cls1.RetriveQuery(selectquery);
            if (resultset.HasRows == true)
            {
                while (resultset.Read())
                {
                    intddno = Convert.ToInt32(resultset["Total_DDNO"].ToString());
                }
            }
            string str = "insert into description_details (dm_no,dd_no,dd_name) values(" + dmno + "," + intddno + 1 + ",'" + ddname + "')  ";
            bolinsert = cls1.DMLqueries(str);

        }
        catch (Exception ex)
        {
        }
        return bolinsert;
    }


    public List<ListItem> loadToclass(string from_Subcourse_id)
    {
        DataSet dss = new DataSet();
        studentmodify stm = new studentmodify();
        stm.from_Subcourse_id = from_Subcourse_id;
        // string strQuery = "SELECT DD.DD_NAME as DDName,DD.DD_NO FROM description_details DD,description_master DM  WHERE DD.DM_NO = DM.DM_NO AND DM.DM_NO='" + parentid + "' AND DD.DEL_FLAG<>1";

        string strquery = "select subcourse_name,subcourse_id " + " from ( select a.subcourse_id,a.subcourse_name,Rank() " + " Over (order By r.Rank) as Rank  from m_crs_subcourse_tbl as a,Course_Rank as r " + " where a.course_id = (select course_id from m_crs_subcourse_tbl where subcourse_id ='" + stm.from_Subcourse_id + "') " + " and a.subcourse_id = r.Subcourse_ID and r.Rank >= (select rank from Course_Rank where Subcourse_ID = '" + stm.from_Subcourse_id + "') )" + " as rr where Rank <=((select rank from Course_Rank where subcourse_id='" + stm.from_Subcourse_id + "')+1)";
        // dss = cls1.fillDataset(strQuery);
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(strquery))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString(),
                            Text = sdr["subcourse_name"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }
    }

    //public string studentwww(string stud_id)
    //{
    //    string student = null;
    //    string qryretrive = " Select * from dbo.www_m_std_personaldetails_tbl where stud_id='" + stud_id + "' and flag = 0 order by mod_dt";
    //    DataSet dsretrive = cls1.fillDataset(qryretrive);
    //    DataTable dt = new DataTable();
    //    if (dsretrive.Tables[0].Rows.Count > 0)
    //    {

    //        SqlCommand cmd = new SqlCommand();
    //        int i = 0;

    //        dt.Columns.Add("Group_id", typeof(string));
    //        dt.Columns.Add("stud_id", typeof(string));
    //        dt.Columns.Add("stud_Grno", typeof(string));
    //        dt.Columns.Add("stud_F_Name", typeof(string));
    //        dt.Columns.Add("stud_M_Name", typeof(string));
    //        dt.Columns.Add("stud_L_Name", typeof(string));
    //        dt.Columns.Add("stud_Gender", typeof(string));
    //        dt.Columns.Add("stud_BloodGroup", typeof(string));
    //        dt.Columns.Add("stud_DOB", typeof(string));
    //        dt.Columns.Add("stud_Nationality", typeof(string));
    //        dt.Columns.Add("stud_Religion", typeof(string));
    //        dt.Columns.Add("stud_BirthPlace", typeof(string));
    //        dt.Columns.Add("stud_Taluka", typeof(string));
    //        dt.Columns.Add("stud_District", typeof(string));
    //        dt.Columns.Add("stud_State", typeof(string));
    //        dt.Columns.Add("stud_DomiciledIn", typeof(string));
    //        dt.Columns.Add("stud_PermanentAdd", typeof(string));
    //        dt.Columns.Add("stud_PermanentState", typeof(string));
    //        dt.Columns.Add("stud_PermanentCity", typeof(string));
    //        dt.Columns.Add("stud_PermanentPincode", typeof(string));
    //        dt.Columns.Add("stud_PermanentPhone", typeof(string));
    //        dt.Columns.Add("stud_NativeAdd", typeof(string));
    //        dt.Columns.Add("stud_NativeState", typeof(string));
    //        dt.Columns.Add("stud_NativeCity", typeof(string));
    //        dt.Columns.Add("stud_NativePincode", typeof(string));
    //        dt.Columns.Add("stud_NativePhone", typeof(string));
    //        dt.Columns.Add("stud_Category", typeof(string));
    //        dt.Columns.Add("stud_Caste", typeof(string));
    //        dt.Columns.Add("stud_MotherTounge", typeof(string));
    //        dt.Columns.Add("stud_MartialStatus", typeof(string));
    //        dt.Columns.Add("stud_Email", typeof(string));
    //        dt.Columns.Add("stud_Father_FName", typeof(string));
    //        dt.Columns.Add("stud_Father_MName", typeof(string));
    //        dt.Columns.Add("stud_Father_LName", typeof(string));
    //        dt.Columns.Add("stud_Father_ResidentAdd", typeof(string));
    //        dt.Columns.Add("stud_Father_Occupation", typeof(string));
    //        dt.Columns.Add("stud_Father_BusinessServiceAdd", typeof(string));
    //        dt.Columns.Add("stud_Father_TelNo", typeof(string));
    //        dt.Columns.Add("stud_Mother_FName", typeof(string));
    //        dt.Columns.Add("stud_Mother_MName", typeof(string));
    //        dt.Columns.Add("stud_Mother_LName", typeof(string));
    //        dt.Columns.Add("stud_Mother_ResidentAdd", typeof(string));
    //        dt.Columns.Add("stud_Mother_Occupation", typeof(string));
    //        dt.Columns.Add("stud_Mother_BusinessServiceAdd", typeof(string));
    //        dt.Columns.Add("stud_Mother_TelNo", typeof(string));
    //        dt.Columns.Add("stud_Gaurd_FName", typeof(string));
    //        dt.Columns.Add("stud_Gaurd_MName", typeof(string));
    //        dt.Columns.Add("stud_Gaurd_LName", typeof(string));
    //        dt.Columns.Add("stud_Gaurd_Add", typeof(string));
    //        dt.Columns.Add("stud_Gaurd_TelNo", typeof(string));
    //        dt.Columns.Add("stud_NoOfFamilyMembers", typeof(string));
    //        dt.Columns.Add("stud_Earning", typeof(string));
    //        dt.Columns.Add("stud_NonEarning", typeof(string));
    //        dt.Columns.Add("stud_YearlyIncome", typeof(string));
    //        dt.Columns.Add("stud_Photo_Path", typeof(string));
    //        dt.Columns.Add("user_id", typeof(string));
    //        dt.Columns.Add("curr_dt", typeof(string));
    //        dt.Columns.Add("mod_dt", typeof(string));
    //        dt.Columns.Add("del_flag", typeof(string));
    //        dt.Columns.Add("del_dt", typeof(string));
    //        dt.Columns.Add("i_value", typeof(byte[]));
    //        dt.Columns.Add("scholarship_name", typeof(string));
    //        dt.Columns.Add("propose_scholarship", typeof(string));
    //        dt.Columns.Add("member_of_ncc", typeof(string));
    //        dt.Columns.Add("extra_activity", typeof(string));
    //        dt.Columns.Add("physically_handicap", typeof(string));

    //        byte[] old_img = null;


    //        dt.Rows.Add("", "", "", "", "", "", "", "", "", "",
    //        "", "", "", "", "", "", "", "", "", "",
    //        "", "", "", "", "", "", "", "", "", "",
    //        "", "", "", "", "", "", "", "", "", "",
    //        "", "", "", "", "", "", "", "", "", "",
    //        "", "", "", "", "", "", "", "", "", "",
    //        old_img, "", "", "", "", "");


    //        if (dsretrive.Tables[0].Rows.Count != 0)
    //        {
    //            foreach (DataColumn dc in dt.Columns)
    //            {
    //                for (int k = 0; k <= dt.Rows.Count - 1; k++)
    //                {
    //                    for (int j = 0; j <= dsretrive.Tables[0].Rows.Count - 1; j++)
    //                    {
    //                        if (dsretrive.Tables[0].Rows[j]["field_type"].ToString() == dc.ColumnName)
    //                        {

    //                            if (dc.ColumnName == "i_value")
    //                            {

    //                                dt.Rows[0][dc] = (byte[])dsretrive.Tables[0].Rows[j]["i_value"];

    //                            }
    //                            else
    //                            {
    //                                dt.Rows[0][dc] = dsretrive.Tables[0].Rows[j]["value"].ToString();

    //                            }
    //                        }
    //                    }

    //                }
    //            }
    //        }

    //    }
    //    DataSet ds = new DataSet();
    //    ds.Tables.Add(dt);

    //   student = DataSetToJSON(ds);
    //    return student;

    //    //return JsonConvert.SerializeObject(dt);

    //  //  return JsonConvert.SerializeObject(dt);
    //}

    //public void retrieve_image()
    //{
    //    if (Session["PHOTO"].ToString() != "")
    //    {
    //        Byte[] img = (Byte[])Session["PHOTO"];
    //        s_img = Convert.ToBase64String(img);
    //        Session["image"] = s_img;
    //        Image1.ImageUrl = "data:image/png;base64," + s_img;
    //        Image2.ImageUrl = "data:image/png;base64," + s_img;
    //    }
    //}

    public dynamicShowPanel[] studentwww(string stud_id, string ayid)
    {
        List<dynamicShowPanel> stddetails = new List<dynamicShowPanel>();

        string qryretrive = " Select * from dbo.www_m_std_personaldetails_tbl where stud_id='" + stud_id.Trim() + "' and ayid='" + ayid + "' and flag = 0 order by mod_dt";
        DataSet dsretrive = cls1.fillDataset(qryretrive);
        DataTable dt = new DataTable();
        if (dsretrive.Tables[0].Rows.Count > 0)
        {

            for (int i = 0; i <= dsretrive.Tables[0].Rows.Count - 1; i++)
            {
                dynamicShowPanel d = new dynamicShowPanel();
                d.field_type = dsretrive.Tables[0].Rows[i]["field_type"].ToString();
                d.field_display = dsretrive.Tables[0].Rows[i]["field_display"].ToString();
                d.value = dsretrive.Tables[0].Rows[i]["value"].ToString();

                stddetails.Add(d);

            }



        }
        return stddetails.ToArray();


    }


    //public dynamicShowPanel[] studentwww(string stud_id)
    //{
    //    List<dynamicShowPanel> stddetails = new List<dynamicShowPanel>();

    //    string qryretrive = " Select * from dbo.www_m_std_personaldetails_tbl where stud_id='" + stud_id + "' and flag = 0 order by mod_dt";
    //    DataSet dsretrive = cls1.fillDataset(qryretrive);
    //    DataTable dt = new DataTable();
    //    if (dsretrive.Tables[0].Rows.Count > 0)
    //    {

    //        for (int i = 0; i <= dsretrive.Tables[0].Rows.Count - 1; i++)
    //        {
    //            dynamicShowPanel d = new dynamicShowPanel();
    //            d.field_type = dsretrive.Tables[0].Rows[i]["field_type"].ToString();
    //            d.field_display = dsretrive.Tables[0].Rows[i]["field_display"].ToString();
    //            d.value = dsretrive.Tables[0].Rows[i]["value"].ToString();

    //            stddetails.Add(d);

    //        }



    //    }
    //    return stddetails.ToArray();


    //}
    public studentmodify[] Studentmodify(string stud_id)
    {
        string query = "";
        stud_id = stud_id.Trim();
        string qryretrive = "";
        studentmodify stm = new studentmodify();
        //DateTime dateLog = Convert.ToDateTime(date);              
        DataSet dss1 = new DataSet();
        DataSet dsstransfer = new DataSet();
        DataSet dsretrive = new DataSet();
        DateTime dob;
        string s_img;
        //  if ()
        //{
        //}
        string query1 = "";
        // For Student Personal Record
        query1 = "select *,CONVERT(varchar, stud_DOB,106) as stud_DOB1 from m_std_personaldetails_tbl where Stud_id='" + stud_id.Trim() + "'";
        query1 = query1 + "select * from studentImage where stud_id='" + stud_id.Trim() + "'";

        DataSet dsss = cls1.fillDataset(query1);

        if (dsss.Tables[1].Rows.Count > 0)
        {

            stm.img = dsss.Tables[1].Rows[0]["STUD_PHOTO"].ToString();
            Byte[] img = (Byte[])dsss.Tables[1].Rows[0]["STUD_PHOTO"];
            s_img = Convert.ToBase64String(img);
            stm.img = s_img;
        }
        else
        {
            stm.img = null;
        }

        //   Image1.ImageUrl = "data:image/png;base64," + s_img;




        string qry1 = "select Ayid,Duration from dbo.m_academic where Ayid = (select max(Ayid) from m_academic)";
        dss1 = cls1.fillDataset(qry1);

        stm.Max_ACDID = dss1.Tables[0].Rows[0]["Ayid"].ToString();
        if (dsss.Tables[0].Rows.Count > 0)
        {

            if (Convert.ToBoolean(dsss.Tables[0].Rows[0]["del_flag"].ToString()) == true)
            {
                stm.messege = "Student admission is cancelled.Do you want to continue?";
            }
            // string strqury = "select * from Temp_Student_data where stud_id='" + stud_id + "'  and mod_flag = 1 AND ayid = '" + stm.Max_ACDID + "'";  //replace
            string strqury = "select * from m_std_studentacademic_tbl where stud_id='" + stud_id + "'  AND ayid = '" + stm.Max_ACDID + "' and del_flag=0";
            dsstransfer = cls1.fillDataset(strqury);
            if (dsstransfer.Tables[0].Rows.Count > 0)
            {
                stm.transfermessege = "Student is already transfered";
            }

        }

        // query = "select From_year from dbo.www_Eligibility where Stud_id='" + stud_id + "' and "; 
        query = "select www.From_year,acd.Duration from dbo.www_Eligibility  as www ,m_academic as acd where acd.AYID=www.From_year and Stud_id='" + stud_id + "' and  to_year= '" + stm.Max_ACDID + "' ";
        DataSet dsyeardisplay = cls1.fillDataset(query);
        if (dsyeardisplay.Tables[0].Rows.Count > 0)
        {
            stm.year = dsyeardisplay.Tables[0].Rows[0]["From_year"].ToString();
            stm.year1 = dsyeardisplay.Tables[0].Rows[0]["Duration"].ToString();
        }

        if ((stud_id != null))
        {
            stm.stud_id = stud_id;

            if (dsss.Tables[0].Rows.Count > 0)
            {
                string bki = "select * from stud_acc_details where stud_id='" + stud_id + "'";
                DataSet dsbki = cls1.fill_dataset(bki);
                if (dsbki.Tables[0].Rows.Count > 0)
                {
                    stm.bank_Acc = dsbki.Tables[0].Rows[0]["bank_acc_no"].ToString();
                    stm.ifsc_no = dsbki.Tables[0].Rows[0]["IFSC_no"].ToString();
                }
                // Setting Textfields
                stm.stud_Grno = dsss.Tables[0].Rows[0]["stud_Grno"].ToString().Trim();
                //  stm.stud_Grno = dsss.Tables[0].Rows[0]["stud_Grno"].ToString().Trim();
                stm.stud_F_name = dsss.Tables[0].Rows[0]["stud_F_name"].ToString().Trim();
                stm.stud_M_name = dsss.Tables[0].Rows[0]["stud_M_name"].ToString().Trim();
                stm.stud_L_name = dsss.Tables[0].Rows[0]["stud_L_name"].ToString().Trim();


                stm.name = dsss.Tables[0].Rows[0]["stud_F_name"].ToString() + ' ' + dsss.Tables[0].Rows[0]["stud_M_name"].ToString() + ' ' + dsss.Tables[0].Rows[0]["stud_L_name"].ToString();

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Birthplace"].ToString())))
                {
                    stm.stud_Birthplace = dsss.Tables[0].Rows[0]["stud_Birthplace"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_DomiciledIn"].ToString())))
                {
                    stm.stud_DomiciledIn = dsss.Tables[0].Rows[0]["stud_DomiciledIn"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Email"].ToString().ToString())))
                {
                    stm.stud_Email = dsss.Tables[0].Rows[0]["stud_Email"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_PermanentAdd"].ToString())))
                {
                    stm.stud_PermanentAdd = dsss.Tables[0].Rows[0]["stud_PermanentAdd"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_PermanentPhone"].ToString())))
                {
                    stm.stud_PermanentPhone = dsss.Tables[0].Rows[0]["stud_PermanentPhone"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_PermanentPincode"].ToString())))
                {
                    stm.stud_PermanentPincode = dsss.Tables[0].Rows[0]["stud_PermanentPincode"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_NativeAdd"].ToString())))
                {
                    stm.stud_NativeAdd = dsss.Tables[0].Rows[0]["stud_NativeAdd"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_NativePhone"].ToString())))
                {
                    stm.stud_NativePhone = dsss.Tables[0].Rows[0]["stud_NativePhone"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_NativePincode"].ToString())))
                {
                    stm.stud_NativePincode = dsss.Tables[0].Rows[0]["stud_NativePincode"].ToString().Trim();
                }


                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_State"].ToString())))
                {
                    stm.stud_State = dsss.Tables[0].Rows[0]["stud_State"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_District"].ToString())))
                {

                    stm.stud_District = dsss.Tables[0].Rows[0]["stud_District"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Taluka"].ToString())))
                {
                    stm.stud_Taluka = dsss.Tables[0].Rows[0]["stud_Taluka"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Gender"].ToString())))
                {
                    stm.stud_Gender = dsss.Tables[0].Rows[0]["stud_Gender"].ToString().Trim();
                    if ((stm.stud_Gender.Trim() == "0"))
                    {
                        stm.stud_Gender = "Female";
                    }
                    else
                    {
                        stm.stud_Gender = "Male";
                    }

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_BloodGroup"].ToString())))
                {
                    // cbostdblood.SelectedIndex = resultset("stud_BloodGroup").Trim();
                    stm.stud_BloodGroup = dsss.Tables[0].Rows[0]["stud_BloodGroup"].ToString().Trim();
                }
                else
                {
                    // cbostdblood.SelectedIndex = -1;
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_MotherTounge"].ToString())))
                {
                    stm.stud_MotherTounge = dsss.Tables[0].Rows[0]["stud_MotherTounge"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Nationality"].ToString())))
                {
                    stm.stud_Nationality = dsss.Tables[0].Rows[0]["stud_Nationality"].ToString().ToUpper().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_NativeState"].ToString())))
                {
                    stm.stud_NativeState = dsss.Tables[0].Rows[0]["stud_NativeState"].ToString().Trim();
                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_NativeCity"].ToString())))
                {
                    stm.stud_NativeCity = dsss.Tables[0].Rows[0]["stud_NativeCity"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_PermanentState"].ToString())))
                {
                    stm.stud_PermanentState = dsss.Tables[0].Rows[0]["stud_PermanentState"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_PermanentCity"].ToString())))
                {
                    stm.stud_PermanentCity = dsss.Tables[0].Rows[0]["stud_PermanentCity"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Category"].ToString())))
                {
                    stm.stud_Category = dsss.Tables[0].Rows[0]["stud_Category"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Caste"].ToString())))
                {
                    stm.stud_Caste = dsss.Tables[0].Rows[0]["stud_Caste"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_SubCaste"].ToString())))
                {
                    stm.stud_Caste = dsss.Tables[0].Rows[0]["stud_SubCaste"].ToString().Trim();

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_MartialStatus"].ToString())))
                {
                    if ((Convert.ToBoolean(dsss.Tables[0].Rows[0]["stud_MartialStatus"].ToString()) == false))
                    {
                        // cbostdmaritalstatus.SelectedItem = "Married";
                        stm.stud_MartialStatus = "Married";  //0 
                    }
                    else
                    {
                        stm.stud_MartialStatus = "Unmarried";  //1
                    }

                }

                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Religion"].ToString())))
                {
                    stm.stud_Religion = dsss.Tables[0].Rows[0]["stud_Religion"].ToString().Trim();

                }

                // set Date time picker(DOB)
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_DOB1"].ToString())))
                {
                    stm.stud_DOB = dsss.Tables[0].Rows[0]["stud_DOB1"].ToString().Trim();
                    //  dtpdob.Value = dob.ToShortDateString;
                }

                // }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_aadhar"].ToString())))
                {
                    stm.stud_aadhar = dsss.Tables[0].Rows[0]["stud_aadhar"].ToString().Trim();

                }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_voterid"].ToString())))
                {
                    stm.stud_voterid = dsss.Tables[0].Rows[0]["stud_voterid"].ToString().Trim();

                }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Father_aadhar"].ToString())))
                {
                    stm.stud_Father_aadhar = dsss.Tables[0].Rows[0]["stud_Father_aadhar"].ToString().Trim();

                }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Father_voterid"].ToString())))
                {
                    stm.stud_Father_voterid = dsss.Tables[0].Rows[0]["stud_Father_voterid"].ToString().Trim();

                }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Mother_aadhar"].ToString())))
                {
                    stm.stud_Mother_aadhar = dsss.Tables[0].Rows[0]["stud_Mother_aadhar"].ToString().Trim();

                }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Mother_voterid"].ToString())))
                {
                    stm.stud_Mother_voterid = dsss.Tables[0].Rows[0]["stud_Mother_voterid"].ToString().Trim();

                }
                if ((!string.IsNullOrEmpty(dsss.Tables[0].Rows[0]["stud_Guard_voterid"].ToString())))
                {
                    stm.stud_Guard_voterid = dsss.Tables[0].Rows[0]["stud_Guard_voterid"].ToString().Trim();

                }


                //comment for remove Temp_Student_data table
                // if (Check_Stud_Academic(stm.stud_id, stm.Max_ACDID) == "True")
                // {
                //     resultset = cls1.RetriveQuery("select * ,(select group_title from dbo.m_crs_subjectgroup_tbl as b where b.group_id = a.Group_id) as Group_Name from (select from_Subcourse_id,Group_Id,Ayid,To_Subcourse_id,Div,Roll_no,Marks_Obtained,Out_Of_Mks,Remark from Temp_Student_data where stud_id = '" + stm.stud_id + "' And AYID = '" + stm.Max_ACDID + "') as a");

                // }
                // else
                // {
                //select subcourse_id as from_Subcourse_id,Null as Group_id,Division  as Div, Roll_no ,null as Marks_Obtained,null as Out_Of_Mks,null as Remark,Null as To_Subcourse_id from m_std_studentacademic_tbl where stud_id = 'STU01253' and Ayid = 'AYD0003'
                resultset = cls1.RetriveQuery("select *,(select group_title from dbo.m_crs_subjectgroup_tbl as b where b.group_id = a.Group_id) as Group_Name from  (select subcourse_id as from_Subcourse_id, Group_id,Division  as Div, Roll_no ,null as Marks_Obtained,null as Out_Of_Mks,null as Remark,Null as To_Subcourse_id from m_std_studentacademic_tbl where stud_id = '" + stud_id + "' and Ayid = '" + stm.year + "') as a");
                //This Ayid is Current one

                //    }

                if (resultset.HasRows)
                {
                    resultset.Read();

                    //   lbl_Group_Name.Text = resultset("Group_Name");

                    if ((!string.IsNullOrEmpty(resultset["from_Subcourse_id"].ToString())))
                    {
                        // cboclass_name.SelectedValue = resultset("from_Subcourse_id");
                        stm.from_Subcourse_id = resultset["from_Subcourse_id"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["Group_Name"].ToString()))
                    {
                        stm.Group_Name = resultset["Group_Name"].ToString();
                        stm.Group_Id = resultset["Group_id"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["Div"].ToString()))
                    {
                        stm.Div = resultset["Div"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["Roll_no"].ToString()))
                    {
                        stm.Roll_no = resultset["Roll_no"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["Marks_Obtained"].ToString()))
                    {
                        stm.Marks_Obtained = resultset["Marks_Obtained"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["Out_Of_Mks"].ToString()))
                    {
                        stm.Out_Of_Mks = resultset["Out_Of_Mks"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["Remark"].ToString()))
                    {
                        stm.Remark = resultset["Remark"].ToString();
                    }

                    if (!string.IsNullOrEmpty(resultset["To_Subcourse_id"].ToString()))
                    {
                        stm.To_Subcourse_id = resultset["To_Subcourse_id"].ToString();
                        // stm.To_Subcourse_name = resultset["Group_Name"].ToString();
                        //    //cbo_to_class.SelectedValue = resultset("To_Subcourse_id")
                    }
                }
                else
                {
                }


            }


        }


        //   }
        stm.castmessege = "Caste certificate submitted ";
        List<studentmodify> stddetails = new List<studentmodify>();

        stddetails.Add(stm);
        return stddetails.ToArray();


    }

    public string Check_Stud_Academic(string stud_id, string maxacdid)
    {
        //it checks whether entry is present in temp table 
        try
        {
            resultset = cls1.RetriveQuery("if Exists(Select * from Temp_Student_data where stud_id = '" + stud_id + "' and Ayid ='" + maxacdid + "')select 'True' else select 'False'");
            if (resultset.HasRows)
            {
                resultset.Read();
                return resultset[0].ToString();
            }
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return "";
    }






    //public bool InsertStudPersonalDt(studentmodify studentmodify)
    //{
    //    bool bolval;
    //    // studentmodify studentmodify =new studentmodify();
    //    string str = "update  www_m_std_personaldetails_tbl set flag=1 where  stud_id='" + studentmodify.stud_id + "' and ayid='" + studentmodify.year + "'";
    //    // bool bolval 
    //    bolval = cls1.DMLqueries(str);
    //    string query = studentmodify.updateqry;
    //    bolval = cls1.DMLqueries(query);

    //    return bolval;

    //}

    public bool InsertStudPersonalDt(string stud_id, string year, string updateqry)
    {
        bool bolval;
        // studentmodify studentmodify =new studentmodify();
        string str = "update  www_m_std_personaldetails_tbl set flag=0 where  stud_id='" + stud_id.Trim() + "' and ayid='" + year + "'";//flag change from 1 to 0 due to data not showing on show button
        // bool bolval 
        bolval = cls1.DMLqueries(str);
        string query = updateqry;
        bolval = cls1.DMLqueries(query);

        return bolval;

    }


    public bool castflag(studentmodify studentmodify)   //(logClass logclass)
    {
        bool stateNotes = false;
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand("ins_casre_cert", con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@student_id", studentmodify.stud_id);
                cmd.Parameters.AddWithValue("@ayid", studentmodify.year);
                cmd.Parameters.AddWithValue("@flag", studentmodify.castflag);

                string message = Convert.ToString(cmd.ExecuteScalar());


                string str = "update  www_m_std_personaldetails_tbl set flag=1 where  stud_id='" + studentmodify.stud_id + "' and ayid='" + studentmodify.year + "'";
                bool bolval = cls1.DMLqueries(str);


            }
        }
        return stateNotes;

    }


    public bool transfernew(string oldstud_id, string formid, string stud_id, string Ayid, string fyid)
    {
        admission adm = new admission();
        List<admission> transeferconfirm = new List<admission>();
        bool stateNotes = false;
        DataSet dstransfer = new DataSet();

        string qrycancel = "Exec m_cancel_admission '" + oldstud_id + "','" + Ayid + "','" + fyid + "','change to other group' ";  //SUBSTRING('" + formid + "',6,8)
        cls1.DMLqueries3(qrycancel);

        transeferconfirm.Add(adm);

        return stateNotes;

    }

    //public studentmodify[] studentfeesload(studentmodify studentmodify)
    //{
    //    string query = "";

    //    string qryretrive = "";
    //    DataSet dsfees = new DataSet();
    //    //   dsfees.Tables[0].Clear();
    //    // dsfees.Tables[1].Clear();
    //    // dsfees.Tables[2].Clear();
    //    studentmodify stm = new studentmodify();

    //    List<studentmodify> stdfeedetails = new List<studentmodify>();

    //    query = "select amount from dbo.m_FeeMaster where  group_id= '" + studentmodify.Group_Id + "' and ayid = '" + studentmodify.year + "' and struct_name = 'Fees'";
    //    query = query + "select b.subcourse_name,b.Subcourse_id from m_crs_subjectgroup_tbl as a, m_crs_subcourse_tbl as b where a.Subcourse_id=b.Subcourse_id and  Group_id='" + studentmodify.Group_Id + "'";
    //    query = query + "select COUNT(stud_id) as feecount from m_FeeEntry where stud_id='" + studentmodify.stud_id + "' and ayid = '" + studentmodify.year + "' and del_flag=0";
    //    dsfees = cls1.fillDataset(query);
    //    if (dsfees.Tables[0].Rows.Count > 0)
    //    {
    //        stm.amount = Convert.ToInt32(dsfees.Tables[0].Rows[0]["amount"].ToString());
    //        stm.Course_tot_fees = Convert.ToInt32(dsfees.Tables[0].Rows[0]["amount"].ToString());

    //    }
    //    else
    //    {
    //        stm.messege = "No fees structure defined";
    //    }
    //    if (dsfees.Tables[2].Rows.Count > 0)
    //    {
    //        stm.feecount = Convert.ToInt32(dsfees.Tables[2].Rows[0]["feecount"].ToString()) + 1;
    //    }
    //    else {
    //        stm.feecount = Convert.ToInt32(1);


    //    }

    //    stm.Group_Name = dsfees.Tables[1].Rows[0]["subcourse_name"].ToString();
    //    stm.To_Subcourse_id = dsfees.Tables[1].Rows[0]["Subcourse_id"].ToString();



    //    stdfeedetails.Add(stm);
    //    return stdfeedetails.ToArray();
    //}
    public studentmodify[] studentfeesload(string stud_id, string year, string Group_id)
    {
        string query = "";

        string qryretrive = "";
        DataSet dsfees = new DataSet();
        //   dsfees.Tables[0].Clear();
        // dsfees.Tables[1].Clear();
        // dsfees.Tables[2].Clear();
        studentmodify stm = new studentmodify();

        List<studentmodify> stdfeedetails = new List<studentmodify>();

        query = "select amount from dbo.m_FeeMaster where  group_id= '" + Group_id + "' and ayid = '" + year + "' and struct_name = 'Fees'";
        query = query + "select b.subcourse_name,b.Subcourse_id,a.Group_title,b.course_id  from m_crs_subjectgroup_tbl as a, m_crs_subcourse_tbl as b where a.Subcourse_id=b.Subcourse_id and  Group_id='" + Group_id + "'";
        query = query + "select COUNT(stud_id) as feecount from m_FeeEntry where stud_id='" + stud_id.Trim() + "' and ayid = '" + year + "' and del_flag=0";
        dsfees = cls1.fillDataset(query);
        if (dsfees.Tables[0].Rows.Count > 0)
        {
            stm.amount = Convert.ToInt32(dsfees.Tables[0].Rows[0]["amount"].ToString());
            stm.Course_tot_fees = Convert.ToInt32(dsfees.Tables[0].Rows[0]["amount"].ToString());

        }
        else
        {
            stm.messege = "No fees structure defined";
        }
        if (dsfees.Tables[2].Rows.Count > 0)
        {
            stm.feecount = Convert.ToInt32(dsfees.Tables[2].Rows[0]["feecount"].ToString()) + 1;
        }
        else
        {
            stm.feecount = 1;
        }
        stm.Group_Name = dsfees.Tables[1].Rows[0]["group_title"].ToString();//subcourse_name changed to group_title
        stm.To_Subcourse_id = dsfees.Tables[1].Rows[0]["Subcourse_id"].ToString();

        stm.Group_title = dsfees.Tables[1].Rows[0]["Group_title"].ToString();
        stm.Course = dsfees.Tables[1].Rows[0]["course_id"].ToString();
        stdfeedetails.Add(stm);
        return stdfeedetails.ToArray();
    }

    public studentmodify[] parpayment(string stud_id, string ayid)
    {
        studentmodify stm = new studentmodify();
        List<studentmodify> stdallow_amt = new List<studentmodify>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dspartpayment = new DataSet();
            string query = "select * from Part_Payment_Auth where stud_id='" + stud_id.Trim() + "' and del_flag=0 ";
            query = query + "select * from grant_freeshipscholarship where stud_id='" + stud_id.Trim() + "' and ayid='" + ayid + "' and del_flag=0 ";
            query = query + "select Group_title from m_crs_subjectgroup_tbl where group_id=(select value from www_m_std_personaldetails_tbl where stud_id='" + stud_id.Trim() + "' and field_type='group_id' and ayid='" + ayid + "')";
            query = query + "select fees from Freeship_Scholarship_fees as a,m_std_personaldetails_tbl as b ,m_std_studentacademic_tbl as c where b.stud_id = c.stud_id and a.ayid = c.ayid and a.category = b.stud_Category and a.ext3=c.group_id and sub_course in (select course_type from m_crs_subjectgroup_tbl where group_id = c.group_id) and a.del_flag = c.del_flag and a.del_flag = 0 and a.ayid = '" + ayid + "' and b.stud_id = '" + stud_id.Trim() + "'";
            dspartpayment = cls1.fillDataset(query);
            if (dspartpayment.Tables[0].Rows.Count > 0)
            {

                //if (dspartpayment.Tables[0].Rows[0]["allow_amt"].ToString())
                //{
                //}


                // stm.allow_amt1 = dspartpayment.Tables[0].Rows[0]["allow_amt"].ToString();
                stm.allow_amt = Convert.ToInt32(dspartpayment.Tables[0].Rows[0]["allow_amt"].ToString());

            }
            else
            {
                stm.allow_amt1 = "0";
                //  stm.allow_amt = 0;
            }
            if (dspartpayment.Tables[1].Rows.Count > 0)
            {
                stm.allow_freeship = true;
                if (dspartpayment.Tables[2].Rows.Count > 0)
                {
                    stm.nextgroup = dspartpayment.Tables[2].Rows[0]["Group_title"].ToString();
                }
                if (dspartpayment.Tables[3].Rows.Count > 0)
                {
                    stm.allow_amt = Convert.ToInt32(dspartpayment.Tables[3].Rows[0]["fees"].ToString());
                }

            }
            else
            {
                stm.allow_freeship = false;
            }
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }

        stdallow_amt.Add(stm);

        return stdallow_amt.ToArray();
    }


    //public string original(string columnname,string stud_id)
    //{

    //    String daresult = null;
    //    DataSet ds = new DataSet();
    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    string qry = "";
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //            using (SqlCommand cmd = new SqlCommand(qry))
    //            {
    //                qry = "select '" + columnname + "' from  m_std_personaldetails_tbl where stud_id='" + stud_id + "'";
    //                ds = cls1.fill_dataset(qry);
    //                List<String> listData = new List<String>();
    //                if (ds.Tables[0].Rows[0]["'" + columnname + "'"].ToString() != "" || ds.Tables[0].Rows[0]["'" + columnname + "'"].ToString() != null)
    //                {
    //                    daresult = ds.Tables[0].Rows[0]["'" + columnname + "'"].ToString();
    //                    listData.Add(daresult);

    //                }
    //                else
    //                {
    //                    daresult = "";
    //                    listData.Add(daresult);
    //                }
    //                return daresult;
    //            }
    //    }



    //}



    //feeEntry modify



    //       select (select Group_title from dbo.m_crs_subjectgroup_tbl where   Group_id = acd.group_id) as [Group], per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_m_name,'') +' '+isnull(per.stud_f_name,'') as name ,(select course_name from dbo.m_crs_course_tbl  where course_id = (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id)) as course ,(select subcourse_name from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) as Class, acd.ayid from m_std_personaldetails_tbl as per inner join  m_std_studentacademic_tbl as acd on acd.stud_id=per.stud_id  where  per.del_flag=0  and acd.del_flag = 0 and per.stud_id='15080101'  


    public studentmodify[] searchstudent(string stud_id)
    {

        List<studentmodify> std_fees = new List<studentmodify>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dst_fees_details = new DataSet();
            string query = " select (select Group_title from dbo.m_crs_subjectgroup_tbl where   Group_id = acd.group_id) as [Group], per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_m_name,'') +' '+isnull(per.stud_f_name,'') as name ,(select course_name from dbo.m_crs_course_tbl  where course_id = (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id)) as Course ,(select subcourse_name from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) as Class, acd.ayid from m_std_personaldetails_tbl as per inner join  m_std_studentacademic_tbl as acd on acd.stud_id=per.stud_id  where  per.del_flag=0  and acd.del_flag = 0 and per.stud_id='" + stud_id + "' ";


            dst_fees_details = cls1.fillDataset(query);

            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {
                    studentmodify stm = new studentmodify();
                    stm.Group_Name = dst_fees_details.Tables[0].Rows[i]["Group"].ToString();
                    //  stm.Group_Id = dst_fees_details.Tables[0].Rows[i]["Group"].ToString();
                    stm.stud_id = dst_fees_details.Tables[0].Rows[i]["stud_id"].ToString();
                    stm.name = dst_fees_details.Tables[0].Rows[i]["name"].ToString();
                    stm.Course = dst_fees_details.Tables[0].Rows[i]["Course"].ToString();
                    stm.Class = dst_fees_details.Tables[0].Rows[i]["Class"].ToString();
                    stm.year = dst_fees_details.Tables[0].Rows[i]["ayid"].ToString();

                    std_fees.Add(stm);
                }
            }



            // }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }

    //for billing

    //public List<ListItem> fillgroup2(string branch, string semid, string year)
    //{
    //    string acdyear = "";
    //    string subjGrp_id = "";
    //    System.Data.DataTable dtSubCrs = new System.Data.DataTable();
    //    string qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 and subcourse_name not like '%TY% ";
    //    dtSubCrs = cls1.fillDataTable(qrySubCrs);

    //    for (int i = 0; i < dtSubCrs.Rows.Count; i++)
    //    {
    //        if (dtSubCrs.Rows[i]["subcourse_name"].ToString().Contains(acdyear))
    //        {
    //            subjGrp_id = dtSubCrs.Rows[i]["subcourse_id"].ToString();
    //            break;
    //        }
    //    }

    //    string qry = "";
    //    qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 ) and del_flag=0 and Group_title not like '%2015%' and Group_title not like '%2016%' ";

    //   // qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 ) and del_flag=0 and Group_title not like '%2015%' and Group_title not like '%2016%' and Group_title not like '%T.Y%' and Group_title not like '%TY%'";


    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        using (SqlCommand cmd = new SqlCommand(qry))
    //        {
    //            List<ListItem> course = new List<ListItem>();
    //            cmd.CommandType = CommandType.Text;
    //            cmd.Connection = con;
    //            con.Open();
    //            using (SqlDataReader sdr = cmd.ExecuteReader())
    //            {
    //                while (sdr.Read())
    //                {
    //                    course.Add(new ListItem
    //                    {
    //                        Value = sdr["Group_id"].ToString(),
    //                        Text = sdr["Group_title"].ToString()
    //                    });
    //                }
    //            }
    //            con.Close();
    //            return course;
    //        }
    //    }





    //}

    public List<ListItem> fillgroup2(string branch, string semid, string year)
    {
        string acdyear = "", qry_chkbranch = "", qrySubCrs = "", qry = "";
        string subjGrp_id = "";
        System.Data.DataTable dtSubCrs = new System.Data.DataTable();
        qry_chkbranch = "select course_id from m_crs_course_tbl where faculty_id in('FAC00004') and course_id='" + branch + "'";
        DataTable dt = cls.fillDataTable(qry_chkbranch);
        if (dt.Rows.Count > 0)
        {
            qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "'";

            qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "'"
   + "  and del_flag=0 ) and del_flag=0 ";
        }
        else if (semid == "Sem-5" || semid == "Sem-6")
        {
            qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 and subcourse_name  like '%TY%'";

            qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "'"
   + " and subcourse_name  like '%TY%'  and del_flag=0 ) and del_flag=0 ";
        }
        else
        {
            qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and semester like '%" + semid + "%' and del_flag=0 and subcourse_name not like '%TY%'";

            qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "'"
   + " and semester like '%" + semid + "%' and subcourse_name not like '%TY%'  and del_flag=0 ) and del_flag=0 ";
        }
        dtSubCrs = cls1.fillDataTable(qrySubCrs);
        for (int i = 0; i < dtSubCrs.Rows.Count; i++)
        {
            if (dtSubCrs.Rows[i]["subcourse_name"].ToString().Contains(acdyear))
            {
                subjGrp_id = dtSubCrs.Rows[i]["subcourse_id"].ToString();
                break;
            }
        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }
    public List<ListItem> fillgroup2_old(string branch, string semid, string year)
    {
        string acdyear = "";
        string subjGrp_id = "";
        System.Data.DataTable dtSubCrs = new System.Data.DataTable();
        //string qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 and subcourse_name not like '%TY%'";
        string qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and semester like '%" + semid + "%' and del_flag=0 and subcourse_name not like '%TY%'";
        dtSubCrs = cls1.fillDataTable(qrySubCrs);

        for (int i = 0; i < dtSubCrs.Rows.Count; i++)
        {
            if (dtSubCrs.Rows[i]["subcourse_name"].ToString().Contains(acdyear))
            {
                subjGrp_id = dtSubCrs.Rows[i]["subcourse_id"].ToString();
                break;
            }
        }

        string qry = "";
        //qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 ) and del_flag=0 and Group_title not like '%2015%' and Group_title not like '%2016%' and Group_title not like '%T.Y%' and Group_title not like '%TY%'";


        //with out  old syllabus
        //qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "'"
        //+" and semester like '%" + semid + "%' and subcourse_name not like '%TY%'  and del_flag=0 ) and del_flag=0 and Group_title not like '%2015%' and Group_title not like '%2016%' and Group_title not"
        //    +" like '%2018%' and Group_title not like '%OLD%' and Group_title not like '%T.Y%' and Group_title not like '%TY%'";

        //with  old syllabus
        qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "'"
      + " and semester like '%" + semid + "%' and subcourse_name not like '%TY%'  and del_flag=0 ) and del_flag=0 ";




        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }





    }
    public bool checkData(string qry)
    {
        DataTable dt = cls1.fillDataTable(qry);
        if (dt.Rows.Count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //public Modal_class[] getbillno()
    //{
    //    string str = "select distinct case when cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) is null then 1 else cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) end as billno from  emp_billing_details";

    //    DataTable dtcls = cls1.fillDataTable(str);
    //    List<Modal_class> details = new List<Modal_class>();
    //    if (dtcls.Rows.Count > 0)
    //    {
    //        Modal_class mcls = new Modal_class();
    //        mcls.billno = dtcls.Rows[0]["billno"].ToString();
    //        details.Add(mcls);
    //    }
    //    return details.ToArray();
    //}

    //public Modal_class[] getrates(string ayid)
    //{
    //    string str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "'";

    //    DataTable dtcls = cls1.fillDataTable(str);
    //    List<Modal_class> details = new List<Modal_class>();

    //    string chef = "", jun = "", sen = "", paper = "", ass = "", mod = "", inter = "", prac = "", oth = "";

    //    if (dtcls.Rows.Count > 0)
    //    {
    //        Modal_class mcls = new Modal_class();
    //        for (int i = 0; i < dtcls.Rows.Count; i++)
    //        {
    //            if (dtcls.Rows[i]["status"].ToString() == "chief_con")
    //            {
    //                chef = chef + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString() == "sen_sup")
    //            {
    //                sen = sen + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString() == "jun_sup")
    //            {
    //                jun = jun + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString() == "paper_set")
    //            {
    //                paper = paper + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString().Contains("asses"))
    //            {
    //                ass = ass + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString().Contains("moder"))
    //            {
    //                mod = mod + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString() == "inter")
    //            {
    //                inter = inter + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //            else if (dtcls.Rows[i]["status"].ToString() == "practs")
    //            {
    //                prac = prac + dtcls.Rows[i]["Rate"].ToString() + ",";
    //            }
    //        }

    //        mcls.chief = chef.TrimEnd(',');
    //        mcls.sen = sen.TrimEnd(',');
    //        mcls.jun = jun.TrimEnd(',');
    //        mcls.papese = paper.TrimEnd(',');
    //        mcls.assis = ass.TrimEnd(',');
    //        mcls.mode = mod.TrimEnd(',');
    //        mcls.inter = inter.TrimEnd(',');
    //        mcls.prac = prac.TrimEnd(',');

    //        details.Add(mcls);
    //    }
    //    return details.ToArray();
    //}

    public List<ListItem> fillaccno()
    {
        String qry = "select distinct bank_acc_no from emp_billing_details_2020_online where emp_id='" + HttpContext.Current.Session["emp_id"] + "'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["bank_acc_no"].ToString(),
                            Text = sdr["bank_acc_no"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }

    }

    public List<ListItem> fillaccno_old()
    {
        String qry = "select distinct bank_acc_no from emp_billing_details_2020 where emp_id='" + HttpContext.Current.Session["emp_id"] + "'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["bank_acc_no"].ToString(),
                            Text = sdr["bank_acc_no"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }

    }

    public Modal_class[] getbillno_new(string branch, string seme, string exam, string group)
    {
        string str = "select distinct case when cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) is null then 1 else cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) end as billno from  emp_billing_details_2020_online";

        DataTable dtcls = cls1.fillDataTable(str);
        str = "";
        str = "select count(stud_id) from ( select distinct stud_id from cre_marks_tbl where exam_code = '" + exam + "' and sem_id = '" + seme + "' and del_flag = 0 and stud_id in "
                + " (select stud_id from m_std_studentacademic_tbl where del_flag = 0 and group_id = '" + group + "'))a";
        DataTable dtcount = cls1.fillDataTable(str);
        dtcls.Columns.Add("Count");
        dtcls.Rows[0]["Count"] = dtcount.Rows[0][0].ToString();
        List<Modal_class> details = new List<Modal_class>();
        if (dtcls.Rows.Count > 0)
        {
            Modal_class mcls = new Modal_class();
            mcls.billno = dtcls.Rows[0]["billno"].ToString();
            mcls.count = dtcls.Rows[0]["Count"].ToString();
            details.Add(mcls);
        }
        return details.ToArray();
    }

    public Modal_class[] getbillno_old(string branch, string seme, string exam, string group)
    {
        string str = "select distinct case when cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) is null then 1 else cast((max(cast(SUBSTRING(bill_no, CHARINDEX('/', bill_no) + 1,LEN(bill_no) - CHARINDEX('/', bill_no)) as int))+1) as varchar ) end as billno from  emp_billing_details_2020";

        DataTable dtcls = cls1.fillDataTable(str);
        str = "";
        str = "select count(stud_id) from ( select distinct stud_id from cre_marks_tbl where exam_code = '" + exam + "' and sem_id = '" + seme + "' and del_flag = 0 and stud_id in "
                + " (select stud_id from m_std_studentacademic_tbl where del_flag = 0 and group_id = '" + group + "'))a";
        DataTable dtcount = cls1.fillDataTable(str);
        dtcls.Columns.Add("Count");
        dtcls.Rows[0]["Count"] = dtcount.Rows[0][0].ToString();
        List<Modal_class> details = new List<Modal_class>();
        if (dtcls.Rows.Count > 0)
        {
            Modal_class mcls = new Modal_class();
            mcls.billno = dtcls.Rows[0]["billno"].ToString();
            mcls.count = dtcls.Rows[0]["Count"].ToString();
            details.Add(mcls);
        }
        return details.ToArray();
    }

    public Modal_class[] chk_paper(string branch, string seme, string exam, string group, string type, string subject)
    {
        string str = "";
        str = "select distinct sum(cast(tot_stud as int)) cnt from emp_billing_details_2020_online where Exam='" + exam + "' and Course='" + branch + "' and Group_id='" + group + "' and sem='" + seme + "' and status='" + type + "' and subject='" + subject + "'";
        DataTable dtcount = cls1.fillDataTable(str);
        List<Modal_class> details = new List<Modal_class>();
        if (dtcount.Rows.Count > 0 && dtcount.Rows[0]["cnt"].ToString() != null && dtcount.Rows[0]["cnt"].ToString() != "")
        {
            Modal_class mcls = new Modal_class();
            mcls.count = dtcount.Rows[0]["cnt"].ToString();
            details.Add(mcls);
        }
        return details.ToArray();
    }

    public Modal_class[] getrates(string ayid, string branch, string seme, string exam, string group)
    {
        string str = "", qry_chkbranch = "";
        if (branch == "CRS004")
        {
            str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id "
+ " union all select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 and subject_name not like '%practical%'"
+ " union all select distinct stuff((select '+' + u.subject_code from cre_subject u where u.subject_id = subject_id and subject_name like '%Practical%' and branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0"
+ " order by u.subject_code for xml path('')),1,1,'') as subject_name, stuff((select '+' + u.subject_id from cre_subject u where u.subject_id = subject_id and subject_name like '%Practical%' and branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 order by u.subject_id"
+ " for xml path('')),1,1,'') as subject_id from cre_subject where subject_name not like '%Practical%' and branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0"
+ " group by subject_name,subject_id";
        }
        else
        {
            qry_chkbranch = "select course_id from m_crs_course_tbl where faculty_id in('FAC00004') and course_id='" + branch + "'";
            DataTable dt = cls.fillDataTable(qry_chkbranch);
            if (seme == "Sem-5" || seme == "Sem-6")
            {
                if (dt.Rows.Count > 0)
                {
                    str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and del_flag=0 and subject_name not like 'prac%'";
                }
                else
                {
                    str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "'  and sem_id='" + seme + "'  and group_id like '%" + group + "%' and del_flag=0 and subject_name not like 'prac%'";
                }
            }
            else
            {
                if (dt.Rows.Count > 0)
                {
                    str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and del_flag=0 and subject_name not like '%practical%'";
                }
                else
                {
                    str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "'  and group_id like '%" + group + "%' and del_flag=0 ";
                }
            }


        }

        //qry without it filteration
        //string str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 ";

        //    select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='"+seme+"' and group_id='"+group+"'";

        DataSet dtcls = cls1.fillDataset(str);
        List<Modal_class> details = new List<Modal_class>();

        string chef = "", chef_join = "", jun = "", sen = "", paper = "", ass = "", mod = "", inter = "", prac = "", reval = "", proof = "", oth = "", trans = "", subject = "", subjectcode = "", ans = "", mcq_que = "", upload_quest = "";

        if (dtcls.Tables[0].Rows.Count > 0)
        {
            Modal_class mcls = new Modal_class();
            for (int i = 0; i < dtcls.Tables[0].Rows.Count; i++)
            {
                if (dtcls.Tables[0].Rows[i]["status"].ToString() == "chief_con")
                {
                    chef = chef + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "chief_join_con")
                {
                    chef_join = chef_join + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "sen_sup")
                {
                    sen = sen + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "jun_sup")
                {
                    jun = jun + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "paper_set")
                {
                    paper = paper + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("asses"))
                {
                    ass = ass + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("moder"))
                {
                    mod = mod + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "inter")
                {
                    inter = inter + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "practs" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs1" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs2" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs3" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs4")
                {
                    prac = prac + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "reval")
                {
                    reval = reval + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "proof")
                {
                    proof = proof + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "trans" || dtcls.Tables[0].Rows[i]["status"].ToString() == "trans2")
                {
                    trans = trans + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "ans" || dtcls.Tables[0].Rows[i]["status"].ToString() == "ans2")
                {
                    ans = ans + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "mcq_que")
                {
                    mcq_que = mcq_que + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "upload_que")
                {
                    upload_quest = upload_quest + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
            }
            if (dtcls.Tables[1].Rows.Count > 0)
            {
                for (int j = 0; j < dtcls.Tables[1].Rows.Count; j++)
                {
                    subject = subject + dtcls.Tables[1].Rows[j]["subject_name"].ToString() + ",";
                    subjectcode = subjectcode + dtcls.Tables[1].Rows[j]["subject_id"].ToString() + ",";
                }
            }
            mcls.subjectid = subjectcode.TrimEnd(',');
            mcls.subjectname = subject.TrimEnd(',');
            mcls.chief = chef.TrimEnd(',');
            mcls.cheif_jn = chef_join.TrimEnd(',');
            mcls.sen = sen.TrimEnd(',');
            mcls.jun = jun.TrimEnd(',');
            mcls.papese = paper.TrimEnd(',');
            mcls.assis = ass.TrimEnd(',');
            mcls.mode = mod.TrimEnd(',');
            mcls.inter = inter.TrimEnd(',');
            mcls.prac = prac.TrimEnd(',');
            mcls.rev = reval.TrimEnd(',');
            mcls.prof = proof.TrimEnd(',');
            mcls.answer = ans.TrimEnd(',');
            mcls.trans = trans.TrimEnd(',');
            mcls.mcq_qu = mcq_que.TrimEnd(',');
            mcls.upload_qu = upload_quest.TrimEnd(',');
            details.Add(mcls);
        }
        return details.ToArray();
    }

    public Modal_class[] getrates_old(string ayid, string branch, string seme, string exam, string group)
    {

        string str = "";
        if (branch == "CRS004")
        {
            str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id "
+ " union all select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 and subject_name not like '%practical%'"
+ " union all select distinct stuff((select '+' + u.subject_code from cre_subject u where u.subject_id = subject_id and subject_name like '%Practical%' and branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0"
+ " order by u.subject_code for xml path('')),1,1,'') as subject_name, stuff((select '+' + u.subject_id from cre_subject u where u.subject_id = subject_id and subject_name like '%Practical%' and branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 order by u.subject_id"
+ " for xml path('')),1,1,'') as subject_id from cre_subject where subject_name not like '%Practical%' and branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0"
+ " group by subject_name,subject_id";
        }
        else
        {
            str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 ";
        }

        DataSet dtcls = cls1.fillDataset(str);
        List<Modal_class> details = new List<Modal_class>();

        string chef = "", chef_join = "", jun = "", sen = "", paper = "", ass = "", mod = "", inter = "", prac = "", reval = "", proof = "", oth = "", trans = "", subject = "", subjectcode = "", ans = "", mcq_que = "", upload_quest = "";

        if (dtcls.Tables[0].Rows.Count > 0)
        {
            Modal_class mcls = new Modal_class();
            for (int i = 0; i < dtcls.Tables[0].Rows.Count; i++)
            {
                if (dtcls.Tables[0].Rows[i]["status"].ToString() == "chief_con")
                {
                    chef = chef + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                //else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "chief_join_con")
                //{
                //    chef_join = chef_join + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                //}
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "sen_sup")
                {
                    sen = sen + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "jun_sup")
                {
                    jun = jun + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "paper_set")
                {
                    paper = paper + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("asses"))
                {
                    ass = ass + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString().Contains("moder"))
                {
                    mod = mod + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "inter")
                {
                    inter = inter + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "practs" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs1" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs2" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs3" || dtcls.Tables[0].Rows[i]["status"].ToString() == "practs4")
                {
                    prac = prac + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "reval")
                {
                    reval = reval + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "proof")
                {
                    proof = proof + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "trans" || dtcls.Tables[0].Rows[i]["status"].ToString() == "trans2")
                {
                    trans = trans + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
                else if (dtcls.Tables[0].Rows[i]["status"].ToString() == "ans" || dtcls.Tables[0].Rows[i]["status"].ToString() == "ans2")
                {
                    ans = ans + dtcls.Tables[0].Rows[i]["Rate"].ToString() + ",";
                }
            }
            if (dtcls.Tables[1].Rows.Count > 0)
            {
                for (int j = 0; j < dtcls.Tables[1].Rows.Count; j++)
                {
                    subject = subject + dtcls.Tables[1].Rows[j]["subject_name"].ToString() + ",";
                    subjectcode = subjectcode + dtcls.Tables[1].Rows[j]["subject_id"].ToString() + ",";
                }
            }
            mcls.subjectid = subjectcode.TrimEnd(',');
            mcls.subjectname = subject.TrimEnd(',');
            mcls.chief = chef.TrimEnd(',');
            //  mcls.cheif_jn = chef_join.TrimEnd(',');
            mcls.sen = sen.TrimEnd(',');
            mcls.jun = jun.TrimEnd(',');
            mcls.papese = paper.TrimEnd(',');
            mcls.assis = ass.TrimEnd(',');
            mcls.mode = mod.TrimEnd(',');
            mcls.inter = inter.TrimEnd(',');
            mcls.prac = prac.TrimEnd(',');
            mcls.rev = reval.TrimEnd(',');
            mcls.prof = proof.TrimEnd(',');
            mcls.answer = ans.TrimEnd(',');
            mcls.trans = trans.TrimEnd(',');
            //  mcls.mcq_qu = mcq_que.TrimEnd(',');
            //  mcls.upload_qu = upload_quest.TrimEnd(',');
            details.Add(mcls);
        }
        return details.ToArray();
    }
    public AssessmentBilling[] getBilling_Data(string emp_id, string billno)
    {
        string str = " select Emp_Id,Exam,Course,b.Group_id,Group_title,sem,bank_acc_no,convert(varchar(10),sjDate,103) sjdates,sjdays,subject,sem,tot_stud,rate,net_tot,status,bill_no"
  + " from emp_billing_details_2020_online b,m_crs_subjectgroup_tbl a where bill_no='" + billno + "' and a.Group_id=b.Group_id";

        DataTable dtcls = cls1.fillDataTable(str);
        List<AssessmentBilling> details = new List<AssessmentBilling>();
        if (dtcls.Rows.Count > 0)
        {
            foreach (DataRow drrow in dtcls.Rows)
            {
                AssessmentBilling mcls = new AssessmentBilling();
                mcls.bnk_acc = drrow["bank_acc_no"].ToString();
                mcls.exam = drrow["Exam"].ToString();
                mcls.course = drrow["Course"].ToString();
                mcls.group_id = drrow["Group_id"].ToString();
                mcls.group = drrow["Group_title"].ToString();
                mcls.emp_id = drrow["Emp_Id"].ToString();
                mcls.sjdates = drrow["sjdates"].ToString();
                mcls.sjdays = drrow["sjdays"].ToString();

                mcls.subjectid = drrow["subject"].ToString();
                mcls.subject = drrow["subject"].ToString();
                mcls.sem = drrow["sem"].ToString();
                mcls.tot_stud = drrow["tot_stud"].ToString();
                mcls.rate = drrow["rate"].ToString();
                mcls.net_tot = drrow["net_tot"].ToString();
                mcls.status = drrow["status"].ToString();
                mcls.bill_no = drrow["bill_no"].ToString();

                mcls.msg = "";
                details.Add(mcls);
            }
        }
        else
        {
            AssessmentBilling mcls = new AssessmentBilling();
            mcls.msg = "No Data Found";
            details.Add(mcls);
        }
        return details.ToArray();
    }

    public AssessmentBilling[] getBilling_Data_old(string emp_id, string billno)
    {
        string str = " select Emp_Id,Exam,Course,b.Group_id,Group_title,sem,bank_acc_no,convert(varchar(10),sjDate,103) sjdates,sjdays,subject,sem,tot_stud,rate,net_tot,status,bill_no"
  + " from emp_billing_details_2020 b,m_crs_subjectgroup_tbl a where bill_no='" + billno + "' and a.Group_id=b.Group_id";

        DataTable dtcls = cls1.fillDataTable(str);
        List<AssessmentBilling> details = new List<AssessmentBilling>();
        if (dtcls.Rows.Count > 0)
        {
            foreach (DataRow drrow in dtcls.Rows)
            {
                AssessmentBilling mcls = new AssessmentBilling();
                mcls.bnk_acc = drrow["bank_acc_no"].ToString();
                mcls.exam = drrow["Exam"].ToString();
                mcls.course = drrow["Course"].ToString();
                mcls.group_id = drrow["Group_id"].ToString();
                mcls.group = drrow["Group_title"].ToString();
                mcls.emp_id = drrow["Emp_Id"].ToString();
                mcls.sjdates = drrow["sjdates"].ToString();
                mcls.sjdays = drrow["sjdays"].ToString();

                mcls.subjectid = drrow["subject"].ToString();
                mcls.subject = drrow["subject"].ToString();
                mcls.sem = drrow["sem"].ToString();
                mcls.tot_stud = drrow["tot_stud"].ToString();
                mcls.rate = drrow["rate"].ToString();
                mcls.net_tot = drrow["net_tot"].ToString();
                mcls.status = drrow["status"].ToString();
                mcls.bill_no = drrow["bill_no"].ToString();

                mcls.msg = "";
                details.Add(mcls);
            }
        }
        else
        {
            AssessmentBilling mcls = new AssessmentBilling();
            mcls.msg = "No Data Found";
            details.Add(mcls);
        }
        return details.ToArray();
    }
    public List<ListItem> fillbillexam(string branch, string sem, string year)
    {
        string qry = "", qry_chkbranch = "";
        qry_chkbranch = "select course_id from m_crs_course_tbl where faculty_id in('FAC00004') and course_id='" + branch + "'";
        DataTable dt = cls.fillDataTable(qry_chkbranch);
        if (dt.Rows.Count > 0)
        {
            qry = "select distinct '' as exam_code,exam_date+case when exam_code like 'R%' then' Reval' else '' END+ case when atkt_exam='1' then' (ATKT)' else ' (REGULAR)' END as a1 from cre_exam where ayid='" + year + "' and del_flag=0";
        }
        else if (sem == "Sem-5" || sem == "Sem-6")
        {
            qry = " SELECT exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end else "
+ " case atkt_exam when 2 then case when exam_code like 'E%' then '(Additional)'  else '(Reval Additional)' end else case  when exam_code "
+ " like 'E%' then '(Regular)' else '(Reval Regular)' end end end as a1,exam_code FROM cre_exam WHERE ayid='" + year + "' and branch_id='" + branch + "'  and     "
+ " del_flag= 0  and exam_date not like '%2018%' ";
            //+ "  and exam_code in (select distinct exam_code from cre_marks_tbl where del_flag=0 and ayid='" + year + "'  ) ";
        }
        else
        {
            qry = " SELECT exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end else "
 + " case atkt_exam when 2 then case when exam_code like 'E%' then '(Additional)'  else '(Reval Additional)' end else case  when exam_code "
 + " like 'E%' then '(Regular)' else '(Reval Regular)' end end end as a1,exam_code FROM cre_exam WHERE ayid='" + year + "' and branch_id='" + branch + "'  and     "
 + " del_flag= 0  and exam_date not like '%2018%' "
 + "  and exam_code in (select distinct exam_code from cre_marks_tbl where del_flag=0 and ayid='" + year + "' and sem_id='" + sem + "' ) ";
        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public string JsonConvert { get; set; }

    public fee_report_gen[] subgrpchange(string ayid, string course, string sub_crs, string sub_grp_id)
    {
        // string query="";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataTable dt = new DataTable();
        SqlDataAdapter da;
        //SqlCommand cmd = new SqlCommand();
        //SqlParameter param ;

        List<fee_report_gen> details = new List<fee_report_gen>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("sp_feereport", con))
            {
                // List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@groupid", sub_grp_id);
                cmd.Parameters.AddWithValue("@ayid", ayid);
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

            }
        }
        int col = 0;
        if (dt.Rows.Count > 0)
        {
            col = dt.Columns.Count;
            int rowcnt = 0;
            // int sumtotalpay, sumcoursefees,sumbal,sumrefund= 0;
            int colind1 = 17;
            int[] arr = new int[col - 17];
            int arrindx = 0;
            for (int y = 17; y < dt.Columns.Count; y++)
            {
                if (colind1 < col)
                {

                    arr[arrindx] = dt.AsEnumerable().Sum(r => r.Field<int>(colind1));
                    colind1++;
                    arrindx++;
                }
            }
            int sumtot = Convert.ToInt32(dt.Compute("SUM(amountpaid)", string.Empty));
            int sumcrsfee = Convert.ToInt32(dt.Compute("SUM(TOTAL_COURSE_FEES)", string.Empty));
            int sumbala = Convert.ToInt32(dt.Compute("SUM(BALANCE)", string.Empty));
            int sumrefu = Convert.ToInt32(dt.Compute("SUM([Refundable Amount])", string.Empty));



            foreach (DataRow dtrow in dt.Rows)
            {
                fee_report_gen fee = new fee_report_gen();
                fee.id = dtrow["ID"].ToString();
                fee.Name = dtrow["Student Name"].ToString();
                fee.roll_no = dtrow["Roll_No"].ToString();
                fee.category = dtrow["category"].ToString();
                fee.part_pay = dtrow["Part Payment Amount"].ToString();
                fee.amnt_paid = dtrow["amountpaid"].ToString();
                fee.balance = dtrow["BALANCE"].ToString();
                fee.crs_fee = dtrow["TOTAL_COURSE_FEES"].ToString();
                fee.gender = dtrow["Gender"].ToString();
                fee.refund_amt = dtrow["Refundable Amount"].ToString();
                fee.installment = dtrow["No. of Installments"].ToString();
                fee.remark = dtrow["Remark"].ToString();
                fee.status = dtrow["Status"].ToString();
                fee.paydate = dtrow["Pay date"].ToString();
                fee.group_title = dtrow["group_title"].ToString();
                int colind = 17;
                int k = 0;

                for (int y = 17; y < dt.Columns.Count; y++)
                {
                    if (colind < col)
                    {
                        fee.colname += dt.Columns[colind].ColumnName.ToString() + ",";
                        fee.colvalue += dt.Rows[rowcnt][colind].ToString() + ",";
                        fee.totalparticulars += arr[k].ToString() + ",";
                        k++;
                        colind++;
                    }
                }
                fee.totalfeespay = sumtot.ToString();
                fee.totalcoursefees = sumcrsfee.ToString();
                fee.totalbal = sumbala.ToString();
                fee.totalrefund = sumrefu.ToString();


                fee.colvalue = fee.colvalue.Substring(0, fee.colvalue.LastIndexOf(","));
                fee.colname = fee.colname.Substring(0, fee.colname.LastIndexOf(","));
                fee.totalparticulars = fee.totalparticulars.Substring(0, fee.totalparticulars.LastIndexOf(","));


                details.Add(fee);
                rowcnt++;
            }
        }
        return details.ToArray();
    }

    public fee_report_gen[] modal_data(string stud_id, string year)
    {
        DataTable dt_mod = new DataTable();
        dt_mod = cls1.fillDataTable("select  Stud_id, Recpt_mode,Amount,Chq_status,coalesce (Recpt_Chq_No,'NA') Recpt_Chq_No,coalesce(Recpt_Bnk_Name,'NA') Recpt_Bnk_Name,coalesce(Recpt_Bnk_Branch,'NA') Recpt_Bnk_Branch from m_FeeEntry where Ayid='" + year + "'");

        DataView dv = dt_mod.DefaultView;
        string[] id = stud_id.Split('<');
        List<fee_report_gen> details = new List<fee_report_gen>();
        dv.RowFilter = "Stud_id='" + id[0] + "'";
        DataTable dt = dv.ToTable();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                fee_report_gen fee = new fee_report_gen();
                fee.stud_id = dtrow["Stud_id"].ToString();
                fee.Recpt_mode = dtrow["Recpt_mode"].ToString();

                fee.Amount = dtrow["Amount"].ToString();

                fee.Chq_status = dtrow["Chq_status"].ToString();
                fee.Recpt_Chq_No = dtrow["Recpt_Chq_No"].ToString();
                fee.Recpt_Bnk_Name = dtrow["Recpt_Bnk_Name"].ToString();
                fee.Recpt_Bnk_Branch = dtrow["Recpt_Bnk_Branch"].ToString();

                details.Add(fee);
            }
        }
        return details.ToArray();
    }



    //feeEntry modify

    //old changes
    //public studentmodify[] searchstudentfee(string stud_id, string empid)
    //{

    //    List<studentmodify> std_fees = new List<studentmodify>();
    //    //it checks whether entry is present in temp table 
    //    try
    //    {
    //        stud_id = stud_id.Trim();
    //        DataSet dst_fees_details = new DataSet();
    //        string query = "declare @group_id varchar(50); set @group_id=(select Group_id from m_std_studentacademic_tbl e where e.ayid in(select MAX(ayid)from dbo.m_std_studentacademic_tbl WHERE Stud_id='" + stud_id + "' and del_flag=0) and e.Stud_id='" + stud_id + "' and e.del_flag=0) ";
    //        query = query + " select acd.group_id as Group_Id, (select Group_title from dbo.m_crs_subjectgroup_tbl where   Group_id = acd.group_id) as [Group], per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_f_name,'') +' '+isnull(per.stud_m_name,'') as name ,(select course_name from dbo.m_crs_course_tbl  where course_id = (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id)) as Course, (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) courseid,(select subcourse_name from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) as Class, acd.ayid,(select Duration from m_academic where ayid=acd.ayid ) as Duration from m_std_personaldetails_tbl as per inner join  m_std_studentacademic_tbl as acd on acd.stud_id=per.stud_id  ,(select group_ids  from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',',@group_id ,'contains')and emp_id='" + empid + "') emp where   per.del_flag=0  and acd.del_flag = 0 and per.stud_id='" + stud_id + "' order by acd.group_id";
    //        // query = query + "select stud_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode,Struct_name,Amount,convert(varchar(10),Pay_date,103) as Pay_date,convert(varchar(23),Curr_dt,121) as Curr_dt,Recpt_no,convert(varchar(10),Recpt_Chq_dt,103) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,Remark,Authorized_By from m_feeentry  as e where del_flag = 0 and  Chq_status = 'Clear'  and stud_id='"++"' and Ayid='"++"' order by stud_id,Ayid,Type,Recpt_mode";
    //        //query = query +  " select * from m_FeeEntry where  Stud_id='"+ stud_id +"'";
    //        dst_fees_details = cls1.fillDataset(query);
    //        //  studentmodify stm = new studentmodify();
    //        // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
    //        if (dst_fees_details.Tables[0].Rows.Count > 0)
    //        {
    //            for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
    //            {
    //                studentmodify stm = new studentmodify();
    //                stm.Courseid = dst_fees_details.Tables[0].Rows[i]["courseid"].ToString().ToUpper();
    //                stm.Group_Name = dst_fees_details.Tables[0].Rows[i]["Group"].ToString().ToUpper();
    //                stm.Group_Id = dst_fees_details.Tables[0].Rows[i]["Group_Id"].ToString().ToUpper();
    //                stm.stud_id = dst_fees_details.Tables[0].Rows[i]["stud_id"].ToString().ToUpper();
    //                stm.name = dst_fees_details.Tables[0].Rows[i]["name"].ToString().ToUpper();
    //                stm.Course = dst_fees_details.Tables[0].Rows[i]["Course"].ToString().ToUpper();
    //                stm.Class = dst_fees_details.Tables[0].Rows[i]["Class"].ToString().ToUpper();
    //                stm.year = dst_fees_details.Tables[0].Rows[i]["ayid"].ToString().ToUpper();
    //                stm.Duration = dst_fees_details.Tables[0].Rows[i]["Duration"].ToString().ToUpper();
    //                std_fees.Add(stm);
    //            }
    //        }



    //        // }

    //    }
    //    catch (Exception ex)
    //    {
    //        // Interaction.MsgBox(ex.Message);
    //    }
    //    return std_fees.ToArray();

    //}

    //new sukant changes
    public studentmodify[] searchstudentfee(string stud_id, string empid, string group_id)
    {

        List<studentmodify> std_fees = new List<studentmodify>();
        //it checks whether entry is present in temp table 
        try
        {
            stud_id = stud_id.Trim();
            DataSet dst_fees_details = new DataSet();
            string query = "declare @group_id varchar(50); set @group_id=(select Group_id from m_std_studentacademic_tbl e where e.ayid in(select MAX(ayid)from dbo.m_std_studentacademic_tbl WHERE Stud_id='" + stud_id + "' and del_flag=0) and e.Stud_id='" + stud_id + "' and e.del_flag=0) ";
            query = query + " select acd.group_id as Group_Id, (select Group_title from dbo.m_crs_subjectgroup_tbl where   Group_id = acd.group_id) as [Group], per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_f_name,'') +' '+isnull(per.stud_m_name,'') as name ,(select course_name from dbo.m_crs_course_tbl  where course_id = (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id)) as Course, (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) courseid,(select subcourse_name from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) as Class, acd.ayid,(select Duration from m_academic where ayid=acd.ayid ) as Duration from m_std_personaldetails_tbl as per inner join  m_std_studentacademic_tbl as acd on acd.stud_id=per.stud_id  ,(select '" + group_id + "' as roup_ids  from web_tp_login where '1' =  dbo.fun_QueryCSVColumn ('" + group_id + "',',',@group_id ,'contains')and emp_id='" + empid + "') emp where   per.del_flag=0  and acd.del_flag = 0 and per.stud_id='" + stud_id + "' order by acd.group_id";
            // query = query + "select stud_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode,Struct_name,Amount,convert(varchar(10),Pay_date,103) as Pay_date,convert(varchar(23),Curr_dt,121) as Curr_dt,Recpt_no,convert(varchar(10),Recpt_Chq_dt,103) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,Remark,Authorized_By from m_feeentry  as e where del_flag = 0 and  Chq_status = 'Clear'  and stud_id='"++"' and Ayid='"++"' order by stud_id,Ayid,Type,Recpt_mode";
            //query = query +  " select * from m_FeeEntry where  Stud_id='"+ stud_id +"'";
            dst_fees_details = cls1.fillDataset(query);
            //  studentmodify stm = new studentmodify();
            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {
                    studentmodify stm = new studentmodify();
                    stm.Courseid = dst_fees_details.Tables[0].Rows[i]["courseid"].ToString().ToUpper();
                    stm.Group_Name = dst_fees_details.Tables[0].Rows[i]["Group"].ToString().ToUpper();
                    stm.Group_Id = dst_fees_details.Tables[0].Rows[i]["Group_Id"].ToString().ToUpper();
                    stm.stud_id = dst_fees_details.Tables[0].Rows[i]["stud_id"].ToString().ToUpper();
                    stm.name = dst_fees_details.Tables[0].Rows[i]["name"].ToString().ToUpper();
                    stm.Course = dst_fees_details.Tables[0].Rows[i]["Course"].ToString().ToUpper();
                    stm.Class = dst_fees_details.Tables[0].Rows[i]["Class"].ToString().ToUpper();
                    stm.year = dst_fees_details.Tables[0].Rows[i]["ayid"].ToString().ToUpper();
                    stm.Duration = dst_fees_details.Tables[0].Rows[i]["Duration"].ToString().ToUpper();
                    std_fees.Add(stm);
                }
            }



            // }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }


    


    public STUDENTFEES[] StrudentFeepreDetails(string stud_id, string year, string group_id)
    {

        List<STUDENTFEES> std_fees = new List<STUDENTFEES>();
        //it checks whether entry is present in temp table 
        try
        {

            DataSet dst_fees_details = new DataSet();
            string addyear = "";
            //  query = query + "select stud_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode,Struct_name,Amount,convert(varchar(10),Pay_date,103) as Pay_date,convert(varchar(23),Curr_dt,121) as Curr_dt,Recpt_no,convert(varchar(10),Recpt_Chq_dt,103) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,Remark,Authorized_By from m_feeentry  as e where del_flag = 0 and  Chq_status = 'Clear'  and stud_id='"++"' and Ayid='"++"' order by stud_id,Ayid,Type,Recpt_mode";
            // string query = " select stud_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode,Struct_name,Amount,(select amount from m_feemaster  where  Ayid='" + year + "'  and group_id='" + group_id + "') as coursefees,convert(varchar(10),Pay_date,103) as Pay_date,Recpt_no,convert(varchar(10),Recpt_Chq_dt,103) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,Remark,Authorized_By from m_feeentry  as e where del_flag = 0  and stud_id='" + stud_id + "' order by stud_id,Ayid,Type,Recpt_mode ";
            string query = "select e.stud_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode,e.Struct_name,e.Amount,mst.amount as coursefees ,convert(varchar(10),Pay_date,103) as Pay_date,Recpt_no,convert(varchar(10),Recpt_Chq_dt,103)as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,Remark,Authorized_By,convert(varchar(30),e.curr_dt,121) as curr_dt from m_feeentry as e inner join m_std_studentacademic_tbl as acd on acd.stud_id=e.Stud_id and acd.ayid=e.ayid inner join m_FeeMaster as mst on mst.Ayid=e.Ayid  and acd.group_id=mst.Group_id where e.del_flag = 0  and e.stud_id='" + stud_id + "' and e.Ayid='" + year + "'   order by e.stud_id,Ayid,Type,Recpt_mode,curr_dt ";
            dst_fees_details = cls1.fillDataset(query);


            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {
                    STUDENTFEES stm = new STUDENTFEES();

                    stm.ayid = dst_fees_details.Tables[0].Rows[i]["Chk_Ayid"].ToString();
                    stm.STUDENTID = dst_fees_details.Tables[0].Rows[i]["stud_id"].ToString();
                    stm.YEAR = (dst_fees_details.Tables[0].Rows[i]["Ayid"].ToString());
                    //  stm.structtype = dst_fees_details.Tables[0].Rows[i]["Type"].ToString();
                    stm.RECIPTMODE = dst_fees_details.Tables[0].Rows[i]["Recpt_mode"].ToString();
                    stm.STRUCTURE = dst_fees_details.Tables[0].Rows[i]["Struct_name"].ToString();

                    // stm.PAID =dst_fees_details.Tables[0].Rows[i]["Amount"].ToString();
                    //stm.PAID = Convert.ToInt32(dst_fees_details.Tables[0].Rows[i]["Amount"].ToString());

                    stm.PAYDATE = (dst_fees_details.Tables[0].Rows[i]["Pay_date"].ToString());
                    stm.RECIPTNO = (dst_fees_details.Tables[0].Rows[i]["Recpt_no"].ToString());
                    stm.curr_dt = (dst_fees_details.Tables[0].Rows[i]["curr_dt"].ToString());


                    stm.Recpt_Chq_dt = (dst_fees_details.Tables[0].Rows[i]["Recpt_Chq_dt"].ToString());
                    stm.Recpt_Chq_No = (dst_fees_details.Tables[0].Rows[i]["Recpt_Chq_No"].ToString());
                    stm.Recpt_Bnk_Name = (dst_fees_details.Tables[0].Rows[i]["Recpt_Bnk_Name"].ToString());
                    stm.Recpt_Bnk_Branch = (dst_fees_details.Tables[0].Rows[i]["Recpt_Bnk_Branch"].ToString());
                    stm.STATUS = (dst_fees_details.Tables[0].Rows[i]["Chq_status"].ToString());
                    stm.PAID = dst_fees_details.Tables[0].Rows[i]["Amount"].ToString();

                    if (stm.STATUS == "Clear")
                    {
                        stm.STATUS12 = 1;
                        // stm.PAID = dst_fees_details.Tables[0].Rows[i]["Amount"].ToString();
                    }
                    else if (stm.STATUS == "Bounce")
                    {
                        stm.STATUS12 = 3;
                        // stm.PAID = dst_fees_details.Tables[0].Rows[i]["Amount"].ToString();
                    }
                    else if (stm.STATUS == "Pending")
                    {
                        stm.STATUS12 = 2;
                        // stm.PAID = "0";
                    }
                    else if (stm.STATUS == "Refund")
                    {
                        stm.STATUS12 = 4;
                        // stm.PAID = "0";
                    }
                    else
                    {
                        stm.STATUS12 = 0;
                        // stm.PAID = "0";
                    }

                    //  stm.Remark1 = (dst_fees_details.Tables[0].Rows[i]["Remark"].ToString());
                    stm.AUTHORIZEDBY = (dst_fees_details.Tables[0].Rows[i]["Authorized_By"].ToString());
                    // stm.AMOUNT = Convert.ToInt32(dst_fees_details.Tables[0].Rows[i]["coursefees"].ToString());
                    stm.AMOUNT = dst_fees_details.Tables[0].Rows[i]["coursefees"].ToString();

                    if (dst_fees_details.Tables[0].Rows[i]["Remark"].ToString() != null)
                    {
                        stm.REMARK = (dst_fees_details.Tables[0].Rows[i]["Remark"].ToString());

                        if (stm.REMARK == "Management Quotta")
                        {
                            stm.REMARK12 = 1;
                        }
                        else if (stm.REMARK == "Management Discount")
                        {
                            stm.REMARK12 = 2;
                        }
                        else if (stm.REMARK == "Sports")
                        {
                            stm.REMARK12 = 3;
                        }
                        else if (stm.REMARK == "Freeship / Scholarship")
                        {
                            stm.REMARK12 = 4;
                        }
                        else if (stm.REMARK == "Admission Permission")
                        {
                            stm.REMARK12 = 5;
                        }
                        else if (stm.REMARK == "Refund")
                        {
                            stm.REMARK12 = 6;
                        }
                        else if (stm.REMARK == "Management Quotta and Freeship / Scholarship")
                        {
                            stm.REMARK12 = 7;
                        }
                        else if (stm.REMARK == "Fine")
                        {
                            stm.REMARK12 = 8;
                        }
                        else if (stm.REMARK == "Scholarship Send")
                        {
                            stm.REMARK12 = 9;
                        }
                        //extra 5
                        else if (stm.REMARK == "Freeship Send")
                        {
                            stm.REMARK12 = 10;
                        }
                        else if (stm.REMARK == "Rajeshri Shahu Maharaj Scholarship Send")
                        {
                            stm.REMARK12 = 11;
                        }
                        else if (stm.REMARK == "Minority Send")
                        {
                            stm.REMARK12 = 12;
                        }
                        else if (stm.REMARK == "Open Merit List Send")
                        {
                            stm.REMARK12 = 13;
                        }
                        else if (stm.REMARK == "Full Fees Paid")
                        {
                            stm.REMARK12 = 14;
                        }
                        else
                        {
                            stm.REMARK12 = 0;
                        }

                    }



                    std_fees.Add(stm);

                }
            }
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }
    public bool InsertFeeEntry(string insert_query)
    {
        bool bolval;
        string query = insert_query;
        bolval = cls1.DMLqueries(query);
        return bolval;

    }

    public bool DeleteFeesEntry(STUDENTFEES STUDENTFEES)
    {
        bool stateNotes = false;
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand("Proc_Fee_Entry_Delete", con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@stud_id  ", STUDENTFEES.STUDENTID);
                cmd.Parameters.AddWithValue("@Ayid", STUDENTFEES.ayid);
                cmd.Parameters.AddWithValue("@Amount", STUDENTFEES.PAID);
                cmd.Parameters.AddWithValue("@Struct_name", STUDENTFEES.STRUCTURE);
                cmd.Parameters.AddWithValue("@Recpt_mode", STUDENTFEES.RECIPTMODE);
                cmd.Parameters.AddWithValue("@Type", STUDENTFEES.type);
                cmd.Parameters.AddWithValue("@curr_dt", (STUDENTFEES.curr_dt));
                cmd.Parameters.AddWithValue("@task", STUDENTFEES.task);
                cmd.Parameters.AddWithValue("@receipt_no", STUDENTFEES.RECIPTNO);

                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    stateNotes = true;
                }
            }
        }
        return stateNotes;

    }

    public studcountbank[] Studentcount(string empid)
    {

        List<studcountbank> std_count = new List<studcountbank>();
        //it checks whether entry is present in temp table 
        try
        {

            DataSet dscount = new DataSet();
            string query = "SELECT COUNT (stud_id) as StudentCount FROM bank_fee_confirm where bankuser_id='" + empid + "'  and convert(varchar, curr_dt, 110) like '%'+ convert(varchar, GETDATE(), 110)+'%' ";
            query = query + "SELECT top 5(amount) FROM bank_fee_confirm where bankuser_id='" + empid + "' and convert(varchar, curr_dt, 110) like '%'+ convert(varchar, GETDATE(), 110)+'%' group by amount ,curr_dt order by curr_dt desc";
            dscount = cls1.fillDataset(query);


            if (dscount.Tables[1].Rows.Count > 0)
            {



                for (int i = 0; i <= dscount.Tables[1].Rows.Count - 1; i++)
                {
                    studcountbank stm = new studcountbank();

                    if (dscount.Tables[0].Rows.Count > 0)
                    {
                        stm.StudentCount = dscount.Tables[0].Rows[0]["StudentCount"].ToString();
                    }
                    else
                    {
                        stm.StudentCount = "0";
                    }

                    stm.amount = dscount.Tables[1].Rows[i]["amount"].ToString();

                    std_count.Add(stm);
                }
            }
            else
            {
                studcountbank stm = new studcountbank();

                stm.StudentCount = "0";
                stm.amount = "0";
                std_count.Add(stm);
            }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_count.ToArray();

    }




    public studentmodify[] searchstudentbank(string stud_id, string empid)
    {

        List<studentmodify> std_fees = new List<studentmodify>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dst_fees_details = new DataSet();
            string group_id = "";
            //string query = "select sub.Group_id,per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_f_name,'') +' '+isnull(per.stud_m_name,'') as name ,per.stud_Category, c.Amount ,sub.Group_title,(select max(ayid)from  dbo.m_academic)as ayid from m_std_personaldetails_tbl per inner join ( select value,stud_id ,ayid from www_m_std_personaldetails_tbl  where stud_id='" + stud_id + "' and field_type='Group_id' and ayid in(select max(ayid)from  dbo.m_academic )) b on per.stud_id=b.stud_id inner join m_FeeMaster as c on b.value=c.Group_id and b.ayid=c.Ayid inner join  m_crs_subjectgroup_tbl as sub on sub.Group_id=b.value";
            //query = query + "  select * from bank_fee_confirm where stud_id='" + stud_id + "'";
            string query = "";
            string formno = "";
            formno = stud_id;
            if (stud_id.StartsWith("1") && stud_id.StartsWith("17") != true)
            {
                query = "select sub.Group_id,per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_f_name,'') +' '+isnull(per.stud_m_name,'') as name ,per.stud_Category, c.Amount ,sub.Group_title,(select max(ayid)from  dbo.m_academic)as ayid from m_std_personaldetails_tbl per inner join ( select value,stud_id ,ayid from www_m_std_personaldetails_tbl  where stud_id='" + stud_id + "' and field_type='Group_id' and ayid in(select max(ayid)from  dbo.m_academic )) b on per.stud_id=b.stud_id inner join m_FeeMaster as c on b.value=c.Group_id and b.ayid=c.Ayid inner join  m_crs_subjectgroup_tbl as sub on sub.Group_id=b.value";
                query = query + "  select * from bank_fee_confirm where stud_id='" + stud_id + "' ";

            }
            else if (stud_id.StartsWith("5") || stud_id.StartsWith("17"))
            {


                group_id = stud_id.Substring(5);

                group_id = "GRP" + group_id;
                stud_id = stud_id.Substring(0, 5);

                if (stud_id.StartsWith("17"))
                {
                    query = "select sub.Group_id,per.form_no as stud_id, isnull(per.l_name,'')  +' '+ isnull(per.m_name,'') +' '+isnull(per.f_name,'') as name ,per.Category as stud_Category, c.Amount ,sub.Group_title,(select max(ayid)from  dbo.m_academic)as ayid from d_adm_applicant per inner join ( select group_id,formno  from  dbo.OLA_FY_adm_CourseSelection where stud_id='" + formno + "' ) b on per.form_no=b.formno inner join m_FeeMaster as c on b.group_id=c.Group_id and c.Ayid=(select max(ayid)from  dbo.m_academic) inner join  m_crs_subjectgroup_tbl as sub on sub.Group_id=b.group_id ";
                }
                else
                {
                    query = "select sub.Group_id,per.form_no as stud_id, isnull(per.l_name,'')  +' '+ isnull(per.m_name,'') +' '+isnull(per.f_name,'') as name ,per.Category as stud_Category, c.Amount ,sub.Group_title,(select max(ayid)from  dbo.m_academic)as ayid from d_adm_applicant per inner join ( select group_id,formno  from  dbo.OLA_FY_adm_CourseSelection where formno='" + stud_id + "'  and formno like '3%' and group_id='" + group_id + "') b on per.form_no=b.formno inner join m_FeeMaster as c on b.group_id=c.Group_id and c.Ayid=(select max(ayid)from  dbo.m_academic) inner join  m_crs_subjectgroup_tbl as sub on sub.Group_id=b.group_id ";
                }

                query = query + "  select * from bank_fee_confirm where stud_id='" + formno + "'";
            }
            else
            {
                group_id = stud_id.Substring(5);

                group_id = "GRP" + group_id;
                stud_id = stud_id.Substring(0, 5);
                query = "select sub.Group_id,per.form_no as stud_id, isnull(per.l_name,'')  +' '+ isnull(per.m_name,'') +' '+isnull(per.f_name,'') as name ,per.Category as stud_Category, c.Amount ,sub.Group_title,(select max(ayid)from  dbo.m_academic)as ayid from d_adm_applicant per inner join ( select group_id,formno  from  dbo.OLA_FY_adm_CourseSelection where formno='" + stud_id + "'  and formno like '4%' and group_id='" + group_id + "') b on per.form_no=b.formno inner join m_FeeMaster as c on b.group_id=c.Group_id and c.Ayid=(select max(ayid)from  dbo.m_academic) inner join  m_crs_subjectgroup_tbl as sub on sub.Group_id=b.group_id ";
                query = query + "  select * from bank_fee_confirm where stud_id='" + formno + "'";
            }
            dst_fees_details = cls1.fillDataset(query);

            if (dst_fees_details.Tables[1].Rows.Count > 0) // && dst_fees_details.Tables[0].Rows[0]["Amount"].ToString() == dst_fees_details.Tables[1].Rows[0]["amount"].ToString()
            {

                studentmodify stm = new studentmodify();
                stm.messege = "Student Already exist";
                std_fees.Add(stm);
            }
            else
            {
                if (dst_fees_details.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                    {
                        studentmodify stm = new studentmodify();
                        //stm.Courseid = dst_fees_details.Tables[0].Rows[i]["courseid"].ToString();
                        stm.Group_Name = dst_fees_details.Tables[0].Rows[i]["Group_Title"].ToString();
                        stm.Group_Id = dst_fees_details.Tables[0].Rows[i]["Group_ID"].ToString();
                        stm.stud_id = dst_fees_details.Tables[0].Rows[i]["stud_id"].ToString();
                        stm.name = dst_fees_details.Tables[0].Rows[i]["name"].ToString();

                        stm.year = dst_fees_details.Tables[0].Rows[i]["ayid"].ToString();
                        stm.stud_Category = dst_fees_details.Tables[0].Rows[i]["stud_Category"].ToString();
                        stm.Course_tot_fees = Convert.ToInt32(dst_fees_details.Tables[0].Rows[i]["Amount"].ToString());

                        std_fees.Add(stm);
                    }
                }



            }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }
    public bool Insertbankfeeconfirm(string insert)
    {
        bool bolval;


        string query = insert;
        bolval = cls1.DMLqueries(query);

        return bolval;

    }

    public bank_details[] fill_grid(string date, string userid)
    {
        string query = "";
        if (userid == "0")
        {
            userid = "";
        }
        else
        { }

        if (userid == "" && date != "")
        {
            query = "SELECT STUD_ID AS stud_id, CASE WHEN STUD_ID LIKE '1%' THEN (SELECT isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'')FROM m_std_personaldetails_tbl AS P WHERE STUD_ID=B.STUD_ID)  ELSE ( SELECT isnull(p.L_Name,'')+' ' +isnull(p.F_Name,'')+' '+isnull(p.M_Name,'') FROM d_adm_applicant AS P WHERE FORM_NO= Substring( B.STUD_ID,0,6)) END  Student_Name ,s.Group_title,b.amount,b.DD_Date,b.confirmflag,b.DD_No,b.Bnk_Name,b.Bnk_Branch,b.bankuser_id FROM bank_fee_confirm AS B,m_crs_subjectgroup_tbl s where  b.group_id=s.Group_id and cast(b.curr_dt as date)  like convert(date,'" + date + "',103)";
        }
        else if (userid != "")
        {
            query = "SELECT STUD_ID AS stud_id, CASE WHEN STUD_ID LIKE '1%' THEN (SELECT isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'')FROM m_std_personaldetails_tbl AS P WHERE STUD_ID=B.STUD_ID)  ELSE ( SELECT isnull(p.L_Name,'')+' ' +isnull(p.F_Name,'')+' '+isnull(p.M_Name,'') FROM d_adm_applicant AS P WHERE FORM_NO= Substring( B.STUD_ID,0,6)) END  Student_Name ,s.Group_title,b.amount,b.DD_Date,b.confirmflag,b.DD_No,b.Bnk_Name,b.Bnk_Branch,b.bankuser_id FROM bank_fee_confirm AS B,m_crs_subjectgroup_tbl s where  b.group_id=s.Group_id and cast(b.curr_dt as date) like convert(date,'" + date + "',103) and b.bankuser_id='" + userid + "'";
        }
        else
        {
            query = "SELECT STUD_ID AS stud_id, CASE WHEN STUD_ID LIKE '1%' THEN (SELECT isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'')FROM m_std_personaldetails_tbl AS P WHERE STUD_ID=B.STUD_ID)  ELSE ( SELECT isnull(p.L_Name,'')+' ' +isnull(p.F_Name,'')+' '+isnull(p.M_Name,'') FROM d_adm_applicant AS P WHERE FORM_NO= Substring( B.STUD_ID,0,6)) END  Student_Name ,s.Group_title,b.amount,b.DD_Date,b.confirmflag,b.DD_No,b.Bnk_Name,b.Bnk_Branch,b.bankuser_id FROM bank_fee_confirm AS B,m_crs_subjectgroup_tbl s where  b.group_id=s.Group_id ";
        }
        //if (userid == "" && date != "")
        //{
        //    query = "select b.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,s.Group_title,b.amount,b.DD_Date,b.confirmflag,b.DD_No,b.Bnk_Name,b.Bnk_Branch,b.bankuser_id from bank_fee_confirm b,m_crs_subjectgroup_tbl s,m_std_personaldetails_tbl p where  b.stud_id=p.stud_id and b.group_id=s.Group_id and cast(b.curr_dt as date) like convert(date,'" + date + "',103)";
        //}
        //else if (userid != "")
        //{
        //    query = "select b.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,s.Group_title,b.amount,b.DD_Date,b.confirmflag,b.DD_No,b.Bnk_Name,b.Bnk_Branch,b.bankuser_id from bank_fee_confirm b,m_crs_subjectgroup_tbl s,m_std_personaldetails_tbl p where  b.stud_id=p.stud_id and b.group_id=s.Group_id and cast(b.curr_dt as date) like convert(date,'" + date + "',103) and b.bankuser_id='" + userid + "'";
        //}
        //else
        //{
        //    query = "select b.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,s.Group_title,b.amount,b.DD_Date,b.confirmflag,b.DD_No,b.Bnk_Name,b.Bnk_Branch,b.bankuser_id from bank_fee_confirm b,m_crs_subjectgroup_tbl s,m_std_personaldetails_tbl p where  b.stud_id=p.stud_id and b.group_id=s.Group_id";
        //}
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        List<bank_details> details = new List<bank_details>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                bank_details regi = new bank_details();
                regi.id = dtrow["stud_id"].ToString();
                regi.Name = dtrow["Student_Name"].ToString();
                regi.grp_title = dtrow["Group_title"].ToString();
                regi.amnt = dtrow["amount"].ToString();
                regi.dd_dt = dtrow["DD_Date"].ToString();
                regi.type = dtrow["confirmflag"].ToString();
                regi.dd_no = dtrow["DD_No"].ToString();
                regi.bnk_name = dtrow["Bnk_Name"].ToString();
                regi.bnk_branch = dtrow["Bnk_Branch"].ToString();
                regi.bnk_user_id = dtrow["bankuser_id"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public List<ListItem> fill_bankuser()
    {
        String qry = "select distinct bankuser_id from bank_fee_confirm";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["bankuser_id"].ToString(),
                            Text = sdr["bankuser_id"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }


    //admissionfeereport


    public admissionfeereport[] GetAdmissionFeeReport(string date)
    {



        //string qry = "select  distinct a.stud_id,stud_L_Name+' '+stud_F_Name+' '+stud_M_Name 'Name',c.Group_title,"
        //        + "coalesce((select amount from m_Feeentry where stud_id=b.stud_id and b.ayid=ayid and convert(date,Pay_date,103)='" + date + "' and chq_status='Clear' and del_flag=0 ),0) amount,STUFF((SELECT ', ' + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = b.Stud_id and Ayid=(select max(ayid) from m_Academic) and chq_status='Clear' and del_flag=0 FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark, "
        //        + " coalesce((select Authorized_By from m_Feeentry where stud_id=b.stud_id and b.ayid=ayid  and chq_status='Clear' and del_flag=0 and convert(date,Pay_date,103)='" + date + "' ),'-') Authorized_By,'" + date + "' as 'AdmissionDate' from m_std_personaldetails_tbl a inner join m_std_studentacademic_tbl b"
        //    + " on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl c on c.Group_id=b.Group_id and b.ayid=(select max(ayid) from m_Academic) and convert(date,b.curr_dt,103)='" + date + "'";
        string qry = "select  distinct a.stud_id,stud_L_Name+' '+stud_F_Name+' '+stud_M_Name 'Name',c.Group_title,"
              + " STUFF((SELECT ', ' + CAST(amount AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = b.Stud_id and Ayid=(select max(ayid) from m_Academic) and chq_status='Clear' and convert(date,Pay_date,103)='" + date + "' and del_flag=0 FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') amount,"
              + " STUFF((SELECT ', ' + CAST(remark AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = b.Stud_id and Ayid=(select max(ayid) from m_Academic) and chq_status='Clear' and del_flag=0 FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Remark, "
              + " STUFF((SELECT ', ' + CAST(Authorized_By AS VARCHAR(max)) FROM m_FeeEntry WHERE stud_id = b.Stud_id and Ayid=(select max(ayid) from m_Academic) and chq_status='Clear' and del_flag=0 FOR XML PATH(''), TYPE) .value('.', 'varchar(max)'), 1, 1, '') Authorized_By,'" + date + "' as 'AdmissionDate' from m_std_personaldetails_tbl a inner join m_std_studentacademic_tbl b"

          + " on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl c on c.Group_id=b.Group_id and b.ayid=(select max(ayid) from m_Academic) and convert(date,b.curr_dt,103)='" + date + "' and b.del_flag=0 ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<admissionfeereport> details = new List<admissionfeereport>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                cmd.CommandTimeout = 100;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);


                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    admissionfeereport stud = new admissionfeereport();
                    stud.stud_id = dtrow["stud_id"].ToString();
                    stud.Name = dtrow["NAME"].ToString();
                    stud.Group_title = dtrow["Group_title"].ToString();
                    stud.amount = dtrow["amount"].ToString();
                    stud.remark = dtrow["remark"].ToString();
                    stud.Authorized_By = dtrow["Authorized_By"].ToString();
                    stud.Admission_Date = dtrow["AdmissionDate"].ToString();





                    details.Add(stud);
                }
                con.Close();

                return details.ToArray();

            }
        }

    }



    public freeshipReport[] fill_grid()
    {
        //string query = "select distinct p.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_M_name,'')+' '+isnull(p.stud_l_name,'') as Student_Name,s.group_title as Class,p.stud_category as Category,"
        //                    + " (select sum(amount) as Amount from m_feeentry where a.stud_id=stud_id and a.del_flag=del_flag and a.ayid=ayid) as Amount_Paid,g.curr_dt as Freeship_Date ,o.submit_dt as Admission_date from "
        //                    + " m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a,m_crs_subjectgroup_tbl as s,OLA_FY_adm_CourseSelection as o ,grant_freeshipscholarship as g "
        //                    + " where p.stud_id=a.stud_id and a.ayid='AYD0017' and a.group_id=s.group_id and a.del_flag=p.del_flag and a.del_flag=0 and o.stud_id=a.stud_id "
        //                    + " and o.del_flag=a.del_flag and g.ayid=a.ayid and g.del_flag=a.del_flag and o.group_id=a.group_id "
        //                    + "  and o.formno like '3%' and g.stud_id=o.formno+substring(o.group_id,4,5) and o.submit_dt is not null";

        string query = "select distinct stud_id,Student_Name,Class,Category,Amount_Paid,Freeship_Date,Admission_date,case when Amount_Paid =400 then 'Equal To 400' when Amount_Paid >400 then 'Greater Than 400' else 'Less Than 400' end as status from"
                            + " (select distinct p.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_M_name,'')+' '+isnull(p.stud_l_name,'') as Student_Name,s.group_title as Class,p.stud_category as Category, "
                            + " (select sum(amount) as Amount from m_feeentry where a.stud_id=stud_id and a.del_flag=del_flag and a.ayid=ayid) as Amount_Paid,g.curr_dt as Freeship_Date ,A.CURR_DT as Admission_date from "
                            + " m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a,m_crs_subjectgroup_tbl as s,OLA_FY_adm_CourseSelection as o ,grant_freeshipscholarship as g "
                            + " where p.stud_id=a.stud_id and a.ayid='AYD0017' and a.group_id=s.group_id and a.del_flag=p.del_flag and a.del_flag=0 and o.stud_id=a.stud_id "
                            + " and o.del_flag=a.del_flag and g.ayid=a.ayid and g.del_flag=a.del_flag and o.group_id=a.group_id "
                             + " and (o.formno like '3%' or o.formno like '4%') and g.stud_id=o.formno+substring(o.group_id,4,5) "
                             + " union "
                             + " select distinct p.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_M_name,'')+' '+isnull(p.stud_l_name,'') as Student_Name,s.group_title as Class,p.stud_category as Category, "
                            + " (select sum(amount) as Amount from m_feeentry where a.stud_id=stud_id and a.del_flag=del_flag and a.ayid=ayid) as Amount_Paid,g.curr_dt as Freeship_Date ,a.curr_dt as Admission_date from  "
                            + " m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a,m_crs_subjectgroup_tbl as s,grant_freeshipscholarship as g "
                            + " where p.stud_id=a.stud_id and a.ayid='AYD0017' and a.ayid=g.ayid and g.stud_id=a.stud_id  and a.group_id=s.group_id "
                            + " and a.del_flag=0  and p.del_flag=a.del_flag and g.del_flag=a.del_flag ) a order by stud_id";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        List<freeshipReport> details = new List<freeshipReport>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                freeshipReport regi = new freeshipReport();
                regi.id = dtrow["stud_id"].ToString();
                regi.Name = dtrow["Student_Name"].ToString();
                regi.grp_title = dtrow["Class"].ToString();
                regi.category = dtrow["Category"].ToString();
                regi.amnt = dtrow["Amount_Paid"].ToString();
                regi.adm_dt = dtrow["Admission_date"].ToString();
                regi.free_dt = dtrow["Freeship_Date"].ToString();
                regi.status = dtrow["status"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }
    //ReportLog by Zarb
    public ClsReport[] Getlog(string ToDate, string FromDate, string GroupId, string EmpId)
    {
        //    String qry = " select Distinct(CONVERT(CHAR(10),tplog.start_time,120)) as Date ,CONVERT(CHAR(10),tplog.start_time,108) +' -  '+ CONVERT(CHAR(10),tplog.end_time,108) AS Time,  tplog.log_type,tplog.Remark"

        //+ "  from dbo.web_tp_log as tplog  where   tplog.emp_id='" + EmpId + "' and  tplog.del_flag=0  and    cast(tplog.start_time as date)  between cast('" + ToDate + "'as date) and cast('" + FromDate + "'as DATE) order by Date desc,Time asc ";

        //  string qry = "select a.*,b.cnt from (select (CONVERT(CHAR(10),tplog.start_time,120)) as Date ,CONVERT(CHAR(10),tplog.start_time,108) +' -  '+ CONVERT(CHAR(10),tplog.end_time,108) AS Time,  tplog.log_type,tplog.Remark from dbo.web_tp_log as tplog  where   tplog.emp_id='" + EmpId + "' and  tplog.del_flag=0  and    cast(tplog.start_time as date)   between cast ('" + ToDate + "' as date) and cast('" + FromDate + "' as DATE)) a left join (select CONVERT(CHAR(10),start_time,120)Date,count(log_id) cnt from web_tp_log where emp_id='" + EmpId + "' and del_flag=0  group by CONVERT(CHAR(10),start_time,120)) b on a.Date=b.Date order by Date desc,Time asc ";
        string qry = "select distinct a.*,b.cnt from (select (CONVERT(CHAR(10),tplog.start_time,120)) as Date ,case when tplog.group_id=''  then '' else a.group_title+'-'+tplog.div_batch_id end  as Branch,(select subject_name from CRE_SUBJECT as c where c.subject_id=tplog.sub_id) as subject,CONVERT(CHAR(10),tplog.start_time,108) +' -  '+ CONVERT(CHAR(10),tplog.end_time,108) AS Time,tplog.log_type,tplog.Remark from dbo.web_tp_log as tplog left join m_crs_subjectgroup_tbl as a  on  tplog.group_id=a.group_id where tplog.emp_id='" + EmpId + "' and  tplog.del_flag=0  and    cast(tplog.start_time as date)   between cast ('" + ToDate + "' as date) and cast('" + FromDate + "' as DATE) group by Remark,log_type,tplog.sub_id,CONVERT(CHAR(10),tplog.start_time,108),CONVERT(CHAR(10),tplog.end_time,108), CONVERT(CHAR(10),start_time,120),group_title,div_batch_id,tplog.group_id) a left join (select CONVERT(CHAR(10),start_time,120)Date,count(log_id) cnt from web_tp_log where emp_id='" + EmpId + "' and del_flag=0  group by CONVERT(CHAR(10),start_time,120)) b on a.Date=b.Date order by Date desc,Time asc ";
        DataTable dt = cls1.fillDataTable(qry);
        List<ClsReport> details = new List<ClsReport>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                ClsReport regi = new ClsReport();
                regi.Date = dtrow["Date"].ToString();
                regi.branch = dtrow["Branch"].ToString();
                regi.Time = dtrow["Time"].ToString();
                regi.LogType = dtrow["Log_Type"].ToString();
                regi.Remark = dtrow["Remark"].ToString();
                regi.Count = dtrow["cnt"].ToString();
                regi.subject_name = dtrow["subject"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }

    }

    public course_name[] courseName()
    {

        // string qry = "select course_name from m_crs_course_tbl where course_id in(select course_id from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where group_id in (select group_id from m_std_studentacademic_tbl where ayid=(select max(ayid) from m_academic))))";
        //string qry = "select distinct ID ,stat=STUFF((Select ','+adm from (select id,subcourse_id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end + cast(sum([No. of Admissions] ) as varchar(max)) as adm"
        //    + " from(select d.course_name id ,c.subcourse_name,m.subcourse_id,m.group_title, m.group_id as Class , count(*)  as [No. of Admissions] from m_std_studentacademic_tbl as s join dbo.m_crs_subjectgroup_tbl as m on m.Group_id = s.Group_id join m_crs_subcourse_tbl c on s.Subcourse_id=c.subcourse_id join m_crs_course_tbl d on c.course_id=d.course_id"
        //    + "  where s.ayid = (select TOP 1 AYID from dbo.m_academic ORDER BY AYID DESC) and s.del_flag=0 group by s.ayid,m.group_id,m.group_title, m.subcourse_id,d.course_name,c.subcourse_name ) a group by subcourse_id,id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end  ) T1"
        //    + " where T1.ID=T2.ID FOR XML PATH('')),1,1,'') from (select id,subcourse_id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end + cast(sum([No. of Admissions] ) as varchar(max)) as adm from(select d.course_name id ,c.subcourse_name,m.subcourse_id,m.group_title, m.group_id as Class , count(*)  as [No. of Admissions] "
        //    + " from m_std_studentacademic_tbl as s join dbo.m_crs_subjectgroup_tbl as m on m.Group_id = s.Group_id join m_crs_subcourse_tbl c on s.Subcourse_id=c.subcourse_id join m_crs_course_tbl d on c.course_id=d.course_id where s.ayid = (select TOP 1 AYID from dbo.m_academic ORDER BY AYID DESC) and s.del_flag=0 group by s.ayid,m.group_id,m.group_title, m.subcourse_id,d.course_name,c.subcourse_name ) a"
        //    + "  group by subcourse_id,id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end  ) T2   order by 1,2";

        string qry = "select * from (select distinct ID,cast(substring(adm,4,len(adm)-1)as int) adm,ROW_NUMBER() over(partition by ID order by ID) as userrow  ,stat=STUFF(("
            + "Select ','+adm from (select id,subcourse_id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end + cast(sum([No. of Admissions] ) as varchar(max)) as adm from(select d.course_name id ,c.subcourse_name,m.subcourse_id,m.group_title, m.group_id as Class , count(*)  as [No. of Admissions] from m_std_studentacademic_tbl as s join dbo.m_crs_subjectgroup_tbl as m on m.Group_id = s.Group_id join m_crs_subcourse_tbl c on s.Subcourse_id=c.subcourse_id join m_crs_course_tbl d on c.course_id=d.course_id  where s.ayid = (select TOP 1 AYID from dbo.m_academic ORDER BY AYID DESC) and s.del_flag=0 group by s.ayid,m.group_id,m.group_title, m.subcourse_id,d.course_name,c.subcourse_name ) a group by subcourse_id,id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end "
            + " ) T1 where T1.ID=T2.ID FOR XML PATH('')),1,1,'') from (select id,subcourse_id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end + cast(sum([No. of Admissions] ) as varchar(max)) as adm from(select d.course_name id ,c.subcourse_name,m.subcourse_id,m.group_title, m.group_id as Class , count(*)  as [No. of Admissions]  from m_std_studentacademic_tbl as s join dbo.m_crs_subjectgroup_tbl as m on m.Group_id = s.Group_id join m_crs_subcourse_tbl c on s.Subcourse_id=c.subcourse_id join m_crs_course_tbl d on c.course_id=d.course_id where s.ayid = (select TOP 1 AYID from dbo.m_academic ORDER BY AYID DESC) and s.del_flag=0 group by s.ayid,m.group_id,m.group_title, m.subcourse_id,d.course_name,c.subcourse_name ) a  group by subcourse_id,id,case when subcourse_name like 'T%' then 'TY-' else case when subcourse_name like 'S%' then 'SY-' else  case when subcourse_name like 'F%' then 'FY-' else 'M-' end end end  ) T2   "
            + ") a where userrow=1 order by ID";
        //adm asc";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        List<course_name> details = new List<course_name>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                cmd.CommandTimeout = 100;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);


                foreach (DataRow dtrow in ds.Tables[0].Rows)
                {
                    course_name stud = new course_name();
                    stud.coursename = dtrow["ID"].ToString();
                    stud.stats = dtrow["stat"].ToString();
                    details.Add(stud);
                }
                con.Close();

                return details.ToArray();

            }
        }

    }
    //library issue return

    public studentDetailbook[] studentbook(string stud_id, string type, string ayid, string connect, string acc_id)
    {
        SqlCommand cmd = new SqlCommand();
        SqlConnection con = new SqlConnection();
        SqlConnection con1 = new SqlConnection();
        string qry = "";


        List<studentDetailbook> confirm = new List<studentDetailbook>();

        string str = "select stud_id,Duration,group_title,a.ayid from m_std_studentacademic_tbl as a,m_academic as b,m_crs_subjectgroup_tbl as c where stud_id = '" + stud_id + "'  and a.ayid=b.ayid and a.group_id=c.group_id  order by duration desc";
        DataTable dt = cls1.fillDataTable(str);

        //if (ayid != "")
        //{
        //    if (connect.StartsWith("b") || connect.StartsWith("mca") || connect.StartsWith("PHA") || connect.StartsWith("IMR") || connect.StartsWith("IMS") || connect.StartsWith("B") || connect.StartsWith("MCA") || connect.StartsWith("pha") || connect.StartsWith("imr") || connect.StartsWith("ims"))
        //    {
        //        if (connect.StartsWith("b") || connect.StartsWith("B"))
        //        {
        //            con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
        //        }
        //        else if (connect.StartsWith("mca") || connect.StartsWith("MCA")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
        //        else if (connect.StartsWith("PHA") || connect.StartsWith("pha")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString); }
        //        else if (connect.StartsWith("IMR") || connect.StartsWith("imr")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString); }
        //        else if (connect.StartsWith("IMS") || connect.StartsWith("ims")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

        //    }
        //    else
        //    {
        //        if (connect == "Viva Engg")
        //        {
        //            con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
        //        }
        //        else if (connect == "MCA") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
        //        else if (connect == "pharmacy") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString); }
        //        else if (connect == "Viva IMR") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString); }
        //        else if (connect == "Viva IMS") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }
        //    }

        //    qry = "Exec pro_ll_search_for_issue '" + stud_id + "','" + type + "','" + ayid + "','" + acc_id + "'";
        //}
        //else
        //{
        //    if (stud_id.StartsWith("b") || stud_id.StartsWith("B"))
        //    {
        //        con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
        //    }
        //    else if (stud_id.StartsWith("mca") || stud_id.StartsWith("MCA")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
        //    else if (stud_id.StartsWith("PHA") || stud_id.StartsWith("pha")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString); }
        //    else if (stud_id.StartsWith("IMR") || stud_id.StartsWith("imr")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString); }
        //    else if (stud_id.StartsWith("IMS") || stud_id.StartsWith("ims")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

        //    qry = "Exec pro_ll_search_for_issue '" + stud_id + "','" + type + "','" + ayid + "','" + acc_id + "'";

        //}

        con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString);

        if (type == "student")
        {
            qry = "Exec pro_ll_search_for_issue '" + stud_id + "','" + type + "','" + dt.Rows[0]["ayid"].ToString() + "','" + acc_id + "'";
        }
        else
        {
            qry = "Exec pro_ll_search_for_issue '" + stud_id + "','" + type + "','" + ayid + "','" + acc_id + "'";
        }



        DataSet dsretrive = new DataSet();
        string s_img;
        string s_sign;
        string imgg = "Assets/img/user.png";
        int counter = 0;

        con.Open();
        cmd.Connection = con;
        cmd.CommandText = qry;
        cmd.CommandType = CommandType.Text;
        con.Close();

        con.Open();
        SqlDataReader resultset;
        resultset = cmd.ExecuteReader();

        //  resultset = cls1.RetriveQuery(qry);
        if (resultset.HasRows == true)
        {


            while (resultset.Read())
            {
                studentDetailbook sdb = new studentDetailbook();

                if (type == "student")
                {
                    sdb.student_name = (resultset[1].ToString());
                    sdb.Roll_no = (resultset[2].ToString());
                    sdb.Division = (resultset[3].ToString());
                    sdb.subcourse_id = (resultset[4].ToString());
                    sdb.subcourse_name = (resultset[5].ToString());
                    sdb.member_type = "S";

                    if (resultset[6].ToString() != null && resultset[6].ToString() != "null" && resultset[6].ToString() != "")
                    {
                        sdb.stud_img = resultset[6].ToString();
                        Byte[] img = (Byte[])resultset[6];
                        s_img = Convert.ToBase64String(img);
                        sdb.stud_img = s_img;

                    }
                    else
                    {
                        sdb.stud_img = imgg;
                    }



                    //sdb.stud_img = resultset[6].ToString();
                    //Byte[] img = (Byte[])resultset[6];
                    //s_img = Convert.ToBase64String(img);
                    //sdb.stud_img = s_img;


                    //    sdb.stud_img = (resultset[6].ToString());
                    sdb.stud_sign = (resultset[7].ToString());
                    sdb.stud_PermanantAdd = (resultset[8].ToString());
                    sdb.stud_PermanantPhone = (resultset[9].ToString());
                    sdb.stud_NativePhone = (resultset[10].ToString());
                    confirm.Add(sdb);

                }
                if (type == "employee")
                {
                    sdb.emp_name = (resultset[1].ToString());
                    sdb.Department_name = (resultset[2].ToString());
                    sdb.Designation_Title = (resultset[3].ToString());
                    sdb.emp_sign = (resultset[4].ToString());
                    sdb.emp_photo = (resultset[5].ToString());

                    //sdb.stud_img = resultset[6].ToString();
                    //Byte[] img = (Byte[])resultset[5];
                    //s_img = Convert.ToBase64String(img);
                    //sdb.emp_photo = s_img;
                    s_img = "~/Staff/Staff_Photo/" + stud_id + ".jpg";
                    sdb.emp_photo = s_img;
                    sdb.member_type = "E";

                    //    sdb.stud_img = (resultset[6].ToString());
                    //sdb.stud_sign = (resultset[4].ToString());
                    //Byte[] img1 = (Byte[])resultset[4];
                    //s_sign = Convert.ToBase64String(img1);
                    //sdb.emp_sign = s_sign;

                    sdb.emp_mobile1 = (resultset[6].ToString());
                    sdb.emp_mobile2 = (resultset[7].ToString());
                    sdb.emp_address_curr = (resultset[8].ToString());
                    confirm.Add(sdb);

                }


                else if (type == "BOOK")
                {
                    sdb.accession_no = (resultset[0].ToString());
                    sdb.book_title = (resultset[1].ToString());
                    sdb.book_type = (resultset[2].ToString());
                    sdb.Author = (resultset[3].ToString());
                    sdb.Publisher = (resultset[4].ToString());
                    sdb.price_of_book = (resultset[5].ToString());
                    confirm.Add(sdb);
                }
                else if (type == "payments")
                {

                    if (Convert.ToInt32(resultset["total_fine"].ToString()) == (Convert.ToInt32(resultset["fine_taken"].ToString()) + Convert.ToInt32(resultset["fine_discount"].ToString())))
                    {
                    }
                    else
                    {
                        if (Convert.ToInt32(resultset["total_fine"].ToString()) == 0)
                        {
                        }
                        else
                        {
                            counter++;

                            sdb.SrNo = Convert.ToString(counter);
                            sdb.accession_no = (resultset[3].ToString());
                            // sdb.accession_name = (resultset[15].ToString());

                            sdb.accession_type = (resultset[4].ToString());

                            sdb.return_date = (resultset[5].ToString());
                            sdb.total_fine = (resultset[6].ToString());
                            sdb.fine_taken = (resultset[7].ToString());
                            sdb.fine_discount = (resultset[8].ToString());
                            confirm.Add(sdb);
                        }

                    }


                }
                else if (type == "issue")
                {
                    if (resultset[7].ToString().ToUpper() == "FALSE")
                    {


                        con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString);
                        //if (resultset[3].ToString().StartsWith("b") || resultset[3].ToString().StartsWith("B"))
                        //{
                        //    con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
                        //}
                        //else if (resultset[3].ToString().StartsWith("mca") || resultset[3].ToString().StartsWith("MCA")) { con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
                        //else if (resultset[3].ToString().StartsWith("PHA") || resultset[3].ToString().StartsWith("pha")) { con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
                        //else if (resultset[3].ToString().StartsWith("IMR") || resultset[3].ToString().StartsWith("imr")) { con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
                        //else if (resultset[3].ToString().StartsWith("IMS") || resultset[3].ToString().StartsWith("ims")) { con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

                        //string str = "select ayid from m_academic where Duration='" + ayid + "'";
                        //DataTable dt = new DataTable();

                        //con1.Open();


                        //cmd.Connection = con1;
                        //cmd.CommandText = str;
                        //cmd.CommandType = CommandType.Text;
                        //SqlDataAdapter da = new SqlDataAdapter(cmd);
                        //da.Fill(dt);
                        //con1.Close();
                        qry = "Exec pro_ll_search_for_issue '" + stud_id + "','" + type + "','" + ayid + "','" + acc_id + "'";
                        con1.Open();
                        cmd.Connection = con1;
                        cmd.CommandText = qry;
                        cmd.CommandType = CommandType.Text;
                        SqlDataAdapter da1 = new SqlDataAdapter(cmd);
                        DataTable dt_new = new DataTable();
                        da1.Fill(dt_new);
                        con1.Close();
                        //con.Close();
                        confirm = new List<studentDetailbook>();
                        //con.Open();
                        //SqlDataReader resultset1;
                        //resultset1 = cmd.ExecuteReader();


                        //counter++;
                        //sdb.SrNo = Convert.ToString(counter);
                        //sdb.accession_no = (resultset1[3].ToString());
                        //sdb.accession_name = (resultset1[15].ToString());

                        //sdb.accession_type = (resultset1[5].ToString());
                        //sdb.issue_date = (resultset1[6].ToString());
                        //sdb.return_date_given = (resultset1[7].ToString());
                        //sdb.issue_return = (resultset1[8].ToString());
                        for (int i = 0; i < dt_new.Rows.Count; i++)
                        {
                            counter++;
                            sdb = new studentDetailbook();
                            sdb.SrNo = Convert.ToString(i + 1);
                            sdb.accession_no = dt_new.Rows[i]["accession_id"].ToString();
                            sdb.accession_name = dt_new.Rows[i]["accession_name"].ToString();
                            sdb.accession_type = dt_new.Rows[i]["accession_type"].ToString();
                            sdb.issue_date = Convert.ToDateTime(dt_new.Rows[i]["issue_date"].ToString()).ToString("dd/MMM/yyyy HH:mm:ss");
                            sdb.return_date_given = Convert.ToDateTime(dt_new.Rows[i]["return_date_given"].ToString()).ToString("dd/MMM/yyyy HH:mm:ss");
                            sdb.issue_return = dt_new.Rows[i]["issue_return"].ToString();
                            if (resultset[12].ToString() == "H")
                            {
                                sdb.H_R = "Home Card";
                            }
                            else
                            {
                                sdb.H_R = "Reader Card";
                            }
                            confirm.Add(sdb);
                        }
                    }


                }

                //if (resultset[7].ToString().ToUpper() == "FALSE")
                //{
                //    confirm.Add(sdb);
                //}
                // return confirm.ToArray();
            }
            return confirm.ToArray();

        }
        else
        {
            return confirm.ToArray();
        }


    }

    // for past Books issue of members --(vaidehi -24-04-2024)
    public studentDetailbook[] getpastissue_rpt(string stud_id)
    {
        List<studentDetailbook> confirm = new List<studentDetailbook>();
        string str = "select a.accession_id, b.TITLE,a.accession_type ,CONVERT(varchar,a.issue_date,105) as issue_date ,CONVERT(varchar,a.return_date,105) as return_date,(case when a.H_R='H' then 'Home Card' when a.H_R='R' then 'Reader Card' else'' end) H_R from ll_issue_return as a , lib_book_master as b where issue_return = '1' and member_id = '" + stud_id + "' and a.accession_id = b.ACCESSION_NO order by curr_dt desc";

        DataTable dt = cls.fillDataTable(str);
        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                studentDetailbook pastissue = new studentDetailbook();
                pastissue.accession_id_trans = dt.Rows[i]["accession_id"].ToString();
                pastissue.TITLE_trans = dt.Rows[i]["TITLE"].ToString();
                pastissue.accession_type_trans = dt.Rows[i]["accession_type"].ToString();
                pastissue.issue_date_trans = dt.Rows[i]["issue_date"].ToString();
                pastissue.return_date_trans = dt.Rows[i]["return_date"].ToString();
                pastissue.H_R_trans = dt.Rows[i]["H_R"].ToString();
                confirm.Add(pastissue);
            }
            return confirm.ToArray();
        }
        else
        {
            return confirm.ToArray();
        }
    }


    //guest 

    public ClsGuest[] guest_retrieve(string search_string, string connect)
    {

        List<ClsGuest> confirm = new List<ClsGuest>();

        DataTable dsretrive = new DataTable();
        string qry = "";
        string s_img;
        string s_sign;
        int counter = 0;
        SqlCommand cmd = new SqlCommand();
        SqlConnection con = new SqlConnection();
        if (search_string.StartsWith("b") || search_string.StartsWith("mca") || search_string.StartsWith("PHA") || search_string.StartsWith("IMR") || search_string.StartsWith("IMS") || search_string.StartsWith("B") || search_string.StartsWith("MCA") || search_string.StartsWith("pha") || search_string.StartsWith("imr") || search_string.StartsWith("ims"))
        {
            if (search_string.StartsWith("b") || search_string.StartsWith("B"))
            {
                con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
            }
            else if (search_string.StartsWith("mca") || search_string.StartsWith("MCA")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
            else if (search_string.StartsWith("PHA") || search_string.StartsWith("pha")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
            else if (search_string.StartsWith("IMR") || search_string.StartsWith("imr")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
            else if (search_string.StartsWith("IMS") || search_string.StartsWith("ims")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

            qry = "select b.*,CASE  ISNUMERIC(SUBSTRING(REMARK,0,9)) WHEN 1 THEN SUBSTRING(REMARK,0,9) ELSE '' END AS  STUD_ID,CASE  ISNUMERIC(SUBSTRING(REMARK,0,9)) WHEN 1 THEN 'J' ELSE '' END AS TYPE from ll_issue_return as a,ll_guest as b where accession_id='" + search_string + "' and a.member_id=b.id and issue_return=0";

        }
        else
        {
            if (connect.StartsWith("Viva Engg"))
            {
                con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
            }
            else if (connect.StartsWith("MCA")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
            else if (connect.StartsWith("pharmacy")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
            else if (connect.StartsWith("Viva IMR")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
            else if (connect.StartsWith("Viva IMS")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

            qry = "select b.*,CASE  ISNUMERIC(SUBSTRING(REMARK,0,9)) WHEN 1 THEN SUBSTRING(REMARK,0,9) ELSE '' END AS  STUD_ID,CASE  ISNUMERIC(SUBSTRING(REMARK,0,9)) WHEN 1 THEN 'J' ELSE '' END AS TYPE from ll_issue_return as a,ll_guest as b where guest_name like '%" + search_string + "%' and a.member_id=b.id and issue_return=0";
        }
        con.Open();
        cmd.Connection = con;
        cmd.CommandText = qry;
        cmd.CommandType = CommandType.Text;
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        da.Fill(dsretrive);
        con.Close();
        // resultset = cls1.RetriveQuery(qry);
        //if (resultset.HasRows == true)
        //{
        //    while (resultset.Read())
        //    {
        if (dsretrive.Rows.Count > 0)
        {
            ClsGuest sdb = new ClsGuest();
            sdb.id = dsretrive.Rows[0]["id"].ToString();
            sdb.guest_name = dsretrive.Rows[0]["guest_name"].ToString();
            sdb.guest_add = dsretrive.Rows[0]["guest_add"].ToString();
            sdb.guest_pn_no = dsretrive.Rows[0]["guest_pn_no"].ToString();
            sdb.remark = dsretrive.Rows[0]["remark"].ToString();


            //sdb.id = (resultset[0].ToString());
            //sdb.guest_name = (resultset[1].ToString());
            //sdb.guest_add = (resultset[2].ToString());
            //sdb.guest_pn_no = (resultset[3].ToString());
            //sdb.remark = (resultset[4].ToString());

            confirm.Add(sdb);
            return confirm.ToArray();
        }


        else
        {
            return confirm.ToArray();
        }
    }
    //Inset update book 
    public bool bookinsert(string stud_id, string member_type, string accession_no, string accession_type, string issue_date, string return_date_given, string return_date, string user_id, string H_R, string lab, string insert_or_update, string renew, string is_lost, string fne_applicable, string fin_val)
    {

        bool stateNotes = false;
        string str = "";
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        if (insert_or_update == "Insert")
        {
            str = "pro_ll_insert_issue_return";

        }
        else if (insert_or_update == "Update")
        {
            str = "pro_ll_update_issue_return";
        }

        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@member_id", stud_id.Trim());
                cmd.Parameters.AddWithValue("@member_type", member_type);
                cmd.Parameters.AddWithValue("@accession_id", accession_no);
                cmd.Parameters.AddWithValue("@accession_type", accession_type.ToLower());
                cmd.Parameters.AddWithValue("@issue_date", Convert.ToDateTime(issue_date));
                // cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date));
                if (insert_or_update == "Insert")
                {
                    cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date));
                    cmd.Parameters.AddWithValue("@issue_return", 0);
                }
                else if (insert_or_update == "Update")
                {
                    cmd.Parameters.AddWithValue("@return_date", Convert.ToDateTime(return_date));
                    cmd.Parameters.AddWithValue("@issue_return", 1);
                    if (renew != "")
                    {
                        cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date));
                        cmd.Parameters.AddWithValue("@return_date_given_renew", Convert.ToDateTime(return_date));
                        cmd.Parameters.AddWithValue("@if_renew", "Yes");
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@return_date_given_renew", Convert.ToDateTime(return_date));
                        cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date));
                        cmd.Parameters.AddWithValue("@if_renew", "No");
                    }

                    if (fne_applicable != "")
                    {
                        cmd.Parameters.AddWithValue("@if_fine_applicable", "Yes");
                        cmd.Parameters.AddWithValue("@total_fine", fin_val);

                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@if_fine_applicable", "No");

                        cmd.Parameters.AddWithValue("@total_fine", fne_applicable);
                    }
                    if (is_lost != "")
                    {
                        cmd.Parameters.AddWithValue("@if_lost", "Yes");

                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@if_lost", "No");

                    }

                }




                //cmd.Parameters.AddWithValue("@return_date", Convert.ToDateTime(return_date));
                //  cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date));


                cmd.Parameters.AddWithValue("@user_id", user_id);
                cmd.Parameters.AddWithValue("@mod_dt", DBNull.Value);
                cmd.Parameters.AddWithValue("@H_R", H_R);
                //cmd.Parameters.AddWithValue("@lab", 0);
                cmd.Parameters.AddWithValue("@student_of", "VIVA IMR");


                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    stateNotes = true;
                }
            }

        }
        return stateNotes;
    }


    //guest_insert
    public bool guest_insert(string guest_name, string guest_add, string guest_pn_no, string remark, string member_type, string accession_no, string accession_type, string issue_date, string return_date_given, string return_date, string user_id, string H_R, string lab)
    {

        bool stateNotes = false;
        string str = "";
        DataTable dt = new DataTable();
        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        str = "pro_ll_guest_issue";

        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                //cmd.Parameters.AddWithValue("@member_id", stud_id);

                cmd.Parameters.AddWithValue("@guest_name", guest_name);
                cmd.Parameters.AddWithValue("@guest_add", guest_add);
                cmd.Parameters.AddWithValue("@guest_pn_no", guest_pn_no);
                cmd.Parameters.AddWithValue("@remark", remark);
                cmd.Parameters.AddWithValue("@member_type", member_type);
                cmd.Parameters.AddWithValue("@accession_id", accession_no);
                cmd.Parameters.AddWithValue("@accession_type", accession_type.ToLower());
                cmd.Parameters.AddWithValue("@issue_date", Convert.ToDateTime(issue_date));
                cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date));
                cmd.Parameters.AddWithValue("@return_date", Convert.ToDateTime(return_date));
                cmd.Parameters.AddWithValue("@issue_return", 0);
                cmd.Parameters.AddWithValue("@user_id", user_id);
                cmd.Parameters.AddWithValue("@mod_dt", DBNull.Value);
                cmd.Parameters.AddWithValue("@H_R", H_R);
                cmd.Parameters.AddWithValue("@lab", 0);


                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    stateNotes = true;
                }
            }

        }
        return stateNotes;
    }

    // update_return_date_given
    public bool update_return_date_given(string stud_id, string accession_no, string accession_type, string return_date_given, string connect)
    {

        bool stateNotes = false;
        string str = "";
        DataTable dt = new DataTable();
        string cs = ""; string cs1 = "";
        if (connect == "Viva Engg")
        {
            cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        }
        else if (connect == "MCA") { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        else if (connect == "pharmacy") { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        else if (connect == "Viva IMR") { cs = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
        else if (connect == "Viva IMS") { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        if (accession_no.StartsWith("b") || accession_no.StartsWith("B"))
        {
            cs1 = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        }
        else if (accession_no.StartsWith("mca") || accession_no.StartsWith("MCA")) { cs1 = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        else if (accession_no.StartsWith("PHA") || accession_no.StartsWith("pha")) { cs1 = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        else if (accession_no.StartsWith("IMR") || accession_no.StartsWith("imr")) { cs1 = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
        else if (accession_no.StartsWith("IMS") || accession_no.StartsWith("ims")) { cs1 = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        str = "pro_ll_update_return_date_given";

        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@member_id", stud_id);
                cmd.Parameters.AddWithValue("@accession_id", accession_no);
                cmd.Parameters.AddWithValue("@accession_type", accession_type.ToLower());
                cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date_given));

                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    stateNotes = true;
                }


            }


        }

        using (SqlConnection con = new SqlConnection(cs1))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@member_id", stud_id);
                cmd.Parameters.AddWithValue("@accession_id", accession_no);
                cmd.Parameters.AddWithValue("@accession_type", accession_type.ToLower());
                cmd.Parameters.AddWithValue("@return_date_given", Convert.ToDateTime(return_date_given));

                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    stateNotes = true;
                }


            }


        }
        return stateNotes;



    }
    //update payment


    public bool update_payments(string stud_id, string accession_no, string accession_type, string return_date, string fine_paid, string fine_discount, string remark, string user_id, string connect)
    {



        bool stateNotes = false;
        string str = "";
        DataTable dt = new DataTable();
        string cs = ""; string cs1 = "";

        if (connect == "Viva Engg")
        {
            cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        }
        else if (connect == "MCA") { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        else if (connect == "pharmacy") { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        else if (connect == "Viva IMR") { cs = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
        else if (connect == "Viva IMS") { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        if (accession_no.StartsWith("b") || accession_no.StartsWith("B"))
        {
            cs1 = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        }
        else if (accession_no.StartsWith("mca") || accession_no.StartsWith("MCA")) { cs1 = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        else if (accession_no.StartsWith("PHA") || accession_no.StartsWith("pha")) { cs1 = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        else if (accession_no.StartsWith("IMR") || accession_no.StartsWith("imr")) { cs1 = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
        else if (accession_no.StartsWith("IMS") || accession_no.StartsWith("ims")) { cs1 = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }
        str = "pro_ll_update_fine_payments";

        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@member_id", stud_id.Trim());
                cmd.Parameters.AddWithValue("@accession_id", accession_no);
                cmd.Parameters.AddWithValue("@accession_type", accession_type.ToLower());
                cmd.Parameters.AddWithValue("@return_date", Convert.ToDateTime(return_date));
                cmd.Parameters.AddWithValue("@fine_taken", fine_paid);
                cmd.Parameters.AddWithValue("@fine_discount", fine_discount);
                cmd.Parameters.AddWithValue("@remark", remark);
                cmd.Parameters.AddWithValue("@user_id", user_id);


                string message = Convert.ToString(cmd.ExecuteScalar());

                stateNotes = true;



            }


        }
        return stateNotes;



    }
    //Check accession


    public string chk_if_acc_in_Book_CD_Serial(string accession_id)
    {
        string type = "";
        string qry = "select * from lib_book_master where accession_no  = '" + accession_id + " ' and del_flag='0' ;"
       + "; select * from lib_cd_master where accession_no = '" + accession_id + "' and del_flag='0' "
         + "select * from ll_serial_details where accession_no  = '" + accession_id + "' ";


        // DataTable dt = cls1.fillDataTable(qry);
        DataSet chkds = cls1.fillDataset(qry);
        if (chkds.Tables[0].Rows.Count > 0)
        {
            type = "BOOK";
        }
        else if (chkds.Tables[1].Rows.Count > 0)
        {
            type = "CD";

        }
        else if (chkds.Tables[2].Rows.Count > 0)
        {

            type = "SERIAL";
        }
        else
        {
            type = "";
        }

        return type;


    }
    //search_if_issued

    public studentDetailbook[] search_if_issued(string accession_id, string accession_type)
    {
        List<studentDetailbook> confirm = new List<studentDetailbook>();

        string qry = " select * from ll_issue_return where accession_type = '" + accession_type + "' and accession_id = '" + accession_id + "' and issue_return = '0'";
        DataSet chkissueds = cls1.fillDataset(qry);
        studentDetailbook sdb = new studentDetailbook();
        if (chkissueds.Tables[0].Rows.Count > 0)
        {
            sdb.member_id = chkissueds.Tables[0].Rows[0]["member_id"].ToString();
            sdb.H_R = chkissueds.Tables[0].Rows[0]["H_R"].ToString();
            confirm.Add(sdb);
        }
        else
        {
            sdb.member_id = "";
        }

        return confirm.ToArray();


    }
    //

    public int get_renew_details(string stud_id, string accession_id, string date, string connect)
    {
        int count = 0;
        SqlCommand cmd = new SqlCommand();
        SqlConnection con = new SqlConnection();
        if (connect.StartsWith("Viva Engg"))
        {
            con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
        }
        else if (connect.StartsWith("MCA")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
        else if (connect.StartsWith("pharmacy")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
        else if (connect.StartsWith("Viva IMR")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString); }
        else if (connect.StartsWith("Viva IMS")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

        string qry = "select count(s.return_date)+1 from dbo.ll_issue_return s , ll_issue_return d where s.issue_date=d.return_date and datepart(day,s.return_date)='" + Convert.ToDateTime(date).Day + "' and  datepart(month,s.return_date)='" + Convert.ToDateTime(date).Month + "' and  datepart(year,s.return_date)='" + Convert.ToDateTime(date).Year + "' and s.accession_id ='" + accession_id + "'  and s.h_r ='H' and s.member_id = '" + stud_id + "'";

        // DataTable dt = cls1.fillDataTable(qry);
        //  DataSet chkds = cls1.fillDataset(qry);
        DataSet chkds = new DataSet();
        con.Open();
        cmd.Connection = con;
        cmd.CommandText = qry;
        cmd.CommandType = CommandType.Text;
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        da.Fill(chkds);
        con.Close();
        if (chkds.Tables[0].Rows.Count > 0)
        {
            count = chkds.Tables[0].Rows.Count;
        }

        else
        {
            count = 0;
        }

        return count;


    }




    public caste_details[] fill_excelgrid(string ayid)
    {
        string query = "";

        query = "select c.group_title,a.stud_Category,case when a.stud_gender=0 then 'Female' else 'Male' end gender,count(b.stud_id) as count from m_std_personaldetails_tbl a inner join m_std_studentacademic_tbl b on a.stud_id=b.stud_id inner join m_crs_subjectgroup_tbl c on c.group_id=b.group_id where b.ayid='" + ayid + "' and b.del_flag=0 group by   c.group_title,a.stud_Category,case when a.stud_gender=0 then 'Female' else 'Male' end";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        List<caste_details> details = new List<caste_details>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                caste_details regi = new caste_details();
                regi.group = dtrow["group_title"].ToString();
                regi.category = dtrow["stud_Category"].ToString();
                regi.gender = dtrow["gender"].ToString();
                regi.count = dtrow["count"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public part_pay_details[] fill_excelgrid_part(string year)
    {
        string query = "";
        if (year == "")
        {
            query = "select a.stud_id,l_name+' '+F_name+' '+m_name 'Name',a.allow_amt 'Allowed Amount',a.remark 'Remark',a.curr_dt 'Allow date' from dbo.Part_Payment_Auth a inner join (select x.form_no,y.group_id,y.formno+substring(y.group_id,4,3) form,F_name,M_name,L_name from dbo.d_adm_applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno where x.acdid=(select max(ayid) from m_academic where IsCurrent=1) ) b on a.stud_id=b.form union all select a.stud_id,stud_l_name+' '+stud_F_name+' '+stud_m_name 'Name',a.allow_amt 'Allowed Amount',a.remark 'Remark',a.curr_dt 'Allow date' from dbo.Part_Payment_Auth a inner join (select x.* from dbo.m_std_personaldetails_tbl x inner join dbo.m_std_studentacademic_tbl y on x.stud_id=y.stud_id and y.ayid=(select max(ayid) from m_academic)) b on a.stud_id=b.stud_id and a.ayid=(select max(ayid) from m_academic)";
        }
        else
        {
            query = "select a.stud_id,l_name+' '+F_name+' '+m_name 'Name',a.allow_amt 'Allowed Amount',a.remark 'Remark',a.curr_dt 'Allow date' from dbo.Part_Payment_Auth a inner join (select x.form_no,y.group_id,y.formno+substring(y.group_id,4,3) form,F_name,M_name,L_name from dbo.d_adm_applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno where x.acdid='" + year + "' ) b on a.stud_id=b.form union all select a.stud_id,stud_l_name+' '+stud_F_name+' '+stud_m_name 'Name',a.allow_amt 'Allowed Amount',a.remark 'Remark',a.curr_dt 'Allow date' from dbo.Part_Payment_Auth a inner join (select x.* from dbo.m_std_personaldetails_tbl x inner join dbo.m_std_studentacademic_tbl y on x.stud_id=y.stud_id and y.ayid='" + year + "') b on a.stud_id=b.stud_id and a.ayid='" + year + "'";
        }

        //----old query.........
        // query = "select a.stud_id,l_name+' '+F_name+' '+m_name 'Name',a.allow_amt 'Allowed Amount',a.remark 'Remark',a.curr_dt 'Allow date' from dbo.Part_Payment_Auth a inner join (select x.form_no,y.group_id,y.formno+substring(y.group_id,4,3) form,F_name,M_name,L_name from dbo.d_adm_applicant x inner join OLA_FY_adm_CourseSelection y on x.form_no=y.formno where x.form_no like '3%' ) b on a.stud_id=b.form union all select a.stud_id,stud_l_name+' '+stud_F_name+' '+stud_m_name 'Name',a.allow_amt 'Allowed Amount',a.remark 'Remark',a.curr_dt 'Allow date' from dbo.Part_Payment_Auth a inner join (select x.* from dbo.m_std_personaldetails_tbl x inner join dbo.m_std_studentacademic_tbl y on x.stud_id=y.stud_id and y.ayid=(select max(ayid) from m_academic)) b on a.stud_id=b.stud_id";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        List<part_pay_details> details_part = new List<part_pay_details>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                part_pay_details regi = new part_pay_details();
                regi.stud_id = dtrow["stud_id"].ToString();
                regi.name = dtrow["Name"].ToString();
                regi.allow_amt = dtrow["Allowed Amount"].ToString();
                regi.remark = dtrow["Remark"].ToString();
                regi.allow_dt = dtrow["Allow date"].ToString();
                details_part.Add(regi);
            }
            return details_part.ToArray();
        }
        else
        {
            return details_part.ToArray();
        }
    }

    public part_pay_details[] fill_excelgrid_block(string type)
    {
        string query = "";

        query = "select a.stud_id,(stud_f_name+' '+stud_M_name+' '+stud_l_name) as Name,(select sum(amount) from m_feeentry where stud_id=a.stud_id and ayid=(select ayid from m_academic where iscurrent='1')) as fees_paid,stud_Category as caste,reason from block_Admission as a inner join m_std_personaldetails_tbl as b on a.stud_id=b.stud_id  where ayid=(select ayid from m_academic where iscurrent='1') AND department='" + type + "'";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        List<part_pay_details> details_part = new List<part_pay_details>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                part_pay_details regi = new part_pay_details();
                regi.stud_id = dtrow["stud_id"].ToString();
                regi.name = dtrow["Name"].ToString();
                regi.fees_paid = dtrow["fees_paid"].ToString();
                regi.caste = dtrow["caste"].ToString();
                regi.reason = dtrow["reason"].ToString();
                details_part.Add(regi);
            }
            return details_part.ToArray();
        }
        else
        {
            return details_part.ToArray();
        }
    }
    //---------------------------------Student form
    public bool chkdelflag(string stud_id)
    {
        DataSet ds1 = cls1.fill_dataset("select del_flag from m_std_personaldetails_tbl where stud_id='" + stud_id + "'");
        if (ds1.Tables[0].Rows.Count > 0)
        {
            if (ds1.Tables[0].Rows[0]["del_flag"].ToString() == "True")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

    public StudPhoto[] getStudPhoto(string stud_id)
    {
        List<StudPhoto> details = new List<StudPhoto>();
        StudPhoto modal = new StudPhoto();
        if (stud_id != "")
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Extension");
            dt.Rows.Add(".jpg");
            dt.Rows.Add(".jpeg");
            dt.Rows.Add(".png");
            dt.Rows.Add(".gif");
            dt.Rows.Add(".bmp");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                System.IO.DirectoryInfo dirInfo = new System.IO.DirectoryInfo(System.Web.HttpContext.Current.Server.MapPath("~/StudentPhoto/photo/" + stud_id + dt.Rows[i]["Extension"].ToString()));
                System.IO.DirectoryInfo dirsign = new System.IO.DirectoryInfo(System.Web.HttpContext.Current.Server.MapPath("~/StudentPhoto/sign/" + stud_id + dt.Rows[i]["Extension"].ToString()));

                string picpath = dirInfo.FullName;
                picpath = picpath.Replace("\\", "\\\\");

                string signpath = dirsign.FullName;
                signpath = signpath.Replace("\\", "\\\\");
                //FileInfo[] listfiles = dirInfo.GetFiles();

                if (File.Exists(picpath) || File.Exists(signpath))
                {
                    if (File.Exists(picpath))
                    {
                        modal.photo = "StudentPhoto/photo/" + stud_id + dt.Rows[i]["Extension"].ToString();
                    }

                    if (File.Exists(signpath))
                    {
                        modal.sign = "StudentPhoto/sign/" + stud_id + dt.Rows[i]["Extension"].ToString();
                    }
                    modal.msg = "Uploaded";
                    details.Add(modal);
                }
                else
                {
                }
            }
            return details.ToArray();
        }
        else
        {
            modal.msg = "Give Stud_id";
            details.Add(modal);
            return details.ToArray();
        }

    }



    public List<ListItem> getSem(string stud_id)
    {
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select distinct sem_id,case when sem_id='Sem-1' then 'Semester-I' when sem_id='Sem-2' then 'Semester-II' when sem_id='Sem-3' then 'Semester-III' when sem_id='Sem-4' then 'Semester-IV' when sem_id='Sem-5' then 'Semester-V'  when sem_id='Sem-6' then 'Semester-VI'  end as Semester_name from cre_webresult where stud_id = '" + stud_id + "' and col1<>'' and convert(date,col1,105)<=GETDATE() and declare_flag = 1";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["sem_id"].ToString(),
                            Text = sdr["Semester_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> getExamData(string stud_id, string sem_id)
    {
        String qry = "SELECT distinct exam_date+' '+ case atkt_exam when 1 then case when e.exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end when 2 then case when e.exam_code like 'E%' then '(Additional)' else '(Reval Additional)' end  else  case  when e.exam_code like 'E%' then '(Regular)' else '(Reval Regular)' end  end as a1,e.exam_code,e.curr_date FROM cre_exam e left join dbo.cre_marks_tbl m on e.exam_code=m.exam_code LEFT JOIN cre_webresult a on m.exam_code = a.exam_code and a.stud_id=m.stud_id where m.stud_id='" + stud_id + "' and a.declare_flag = 1 and a.col1<>'' and m.sem_id='" + sem_id + "' and a.sem_id='" + sem_id + "'  order by e.curr_date";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public attendanceDT[] getStudentAtt(string stud_id)
    {
        string qry = "";
        qry = "select a.log_id,a.emp_id,a.stud_id,a.is_present,w.sub_id,s.subject_name,convert(varchar(10),w.start_time,103) as date,cast(w.start_time as time(0)) start_time,cast(w.end_time as time(0)) end_time,w.sem_id,year(w.start_time) as year,month(w.start_time) as month,day(w.start_time) as day from web_tp_stud_attendence a,web_tp_log w,cre_subject s "
            + " where a.emp_id=w.emp_id and a.log_id=w.log_id and w.ayid=a.ayid and w.sub_id=s.subject_id and w.del_flag=0 and a.stud_id='" + stud_id + "' order by date";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        List<attendanceDT> details = new List<attendanceDT>();


        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                attendanceDT regi = new attendanceDT();
                regi.subject = dtrow["subject_name"].ToString();
                regi.date = dtrow["date"].ToString();
                regi.strTime = dtrow["start_time"].ToString();
                regi.endTime = dtrow["end_time"].ToString();
                regi.isPresent = dtrow["is_present"].ToString();
                regi.day = dtrow["day"].ToString();
                regi.month = dtrow["month"].ToString();
                regi.year = dtrow["year"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }
    public ClsBankreport[] GetBankdata(string date)
    {
        string qry = "";
        if (date != "")
        {
            qry = "  exec sp_Bank_Data '" + date + "'";
        }
        else
        {
            qry = "  exec sp_Bank_Data ''";
        }
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        List<ClsBankreport> details = new List<ClsBankreport>();


        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                ClsBankreport regi = new ClsBankreport();
                regi.data = dtrow["data"].ToString();

                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public string[] fillAuthBy()
    {



        // Create list
        List<string> myList = new List<string>();


        string qry = "";
        qry = "select distinct Authorized_By from m_feeentry";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                // Add items to the list
                myList.Add(dtrow[0].ToString());

                // Convert to array
            }
        }

        return myList.ToArray();

    }

    public string[] fillbanknane()
    {



        // Create list
        List<string> myList = new List<string>();


        string qry = "";
        qry = "select distinct Recpt_Bnk_Name from m_feeentry";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                // Add items to the list
                myList.Add(dtrow[0].ToString());

                // Convert to array
            }
        }

        return myList.ToArray();

    }

    //======================gr_report
    public List<ListItem> getcourse_report()
    {
        string qry = "select Distinct Course_name,course_id from m_crs_course_tbl Where Del_Flag <>1 And Course_name <> ''";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["course_id"].ToString(),
                                Text = sdr["Course_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public exec_dataset[] exec_ds(string query)
    {
        DataTable dss = cls1.fillDataTable(query);

        List<exec_dataset> details = new List<exec_dataset>();
        if (dss.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dss.Rows)
            {
                exec_dataset regi = new exec_dataset();
                regi.roll_stud = dtrow["Roll_no"].ToString() + ' ' + dtrow["stud_id"].ToString();
                regi.det_stud = dtrow["Student_Name"].ToString();
                regi.gender = dtrow["Gender"].ToString();
                regi.caste_sub = dtrow["stud_Category"].ToString();
                regi.place_birth = dtrow["stud_BirthPlace"].ToString();
                regi.dob = dtrow["DOB"].ToString();
                regi.marr_un = dtrow["stud_MartialStatus"].ToString();
                regi.per_add = dtrow["stud_PermanentAdd"].ToString();
                regi.gurd_det = dtrow["Guardian's_Name"].ToString();
                regi.school_clg = dtrow["Institute_name"].ToString();
                regi.doa = dtrow["Admission_Date"].ToString();
                regi.fee_paid = dtrow["Tot_fees_paid"].ToString();
                regi.result = dtrow["Exam"].ToString();
                regi.board_name = dtrow["Board_University"].ToString();
                regi.sub_crs = dtrow["Group_title"].ToString();



                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }


    }

    //=====================bonafide
    public bonafide[] count_issue(string stud_id, string max)
    {
        string str = "";
        if (stud_id != "")
        {
            str = "select * from bonafide_certificate where stud_id='" + stud_id + "'";
        }
        else { str = "select max(srno) as srno from bonafide_certificate where ayid in (select ayid from m_academic where IsCurrent=1) and stud_id='" + stud_id + "'"; }
        DataTable dss = cls1.fillDataTable(str);

        List<bonafide> details = new List<bonafide>();
        if (dss.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dss.Rows)
            {
                bonafide regi = new bonafide();
                if (stud_id != "")
                {
                    regi.count_issued = dtrow.Table.Rows.Count.ToString();
                }
                else { regi.count_issued = dtrow["srno"].ToString(); }
                string str1 = "select max(srno) as srno from bonafide_certificate where ayid in (select ayid from m_academic where IsCurrent=1)";
                DataTable dt1 = cls1.fillDataTable(str1);
                if (dt1.Rows.Count > 0 && dt1.Rows[0][0].ToString() != "")
                {
                    // regi.sr_no = "0";
                    regi.sr_no = dt1.Rows[0][0].ToString();
                }
                else
                {
                    regi.sr_no = "0";
                }
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            bonafide regi = new bonafide();
            regi.count_issued = "0";
            string str1 = "select max(srno) as srno from bonafide_certificate where ayid in (select ayid from m_academic where IsCurrent=1)";
            DataTable dt1 = cls1.fillDataTable(str1);
            if (dt1.Rows.Count > 0 && dt1.Rows[0][0].ToString() != "")
            {
                // regi.sr_no ="0";
                regi.sr_no = dt1.Rows[0][0].ToString();

            }
            else
            {
                regi.sr_no = "0";
            }
            details.Add(regi);
            return details.ToArray();
        }
    }
    public bonafide[] get_stud_data(string stud_id, string ayid)
    {
        string str = "";
        if (ayid == "")
        {
            str = "select *,dbo.DOBTOWORDS(dob_wrds) as dob_wd,substring(Duration,9,4)+'-'+substring(Duration,21,4) AS Duration,(select substring(Duration,9,4)+'-'+substring(Duration,21,4) from m_academic where IsCurrent=1)  AS curr_dur  from bonafide_degree as a inner join m_academic as b on  a.ayid=b.ayid  where stud_id='" + stud_id + "' and a.ayid=(select max(ayid) from bonafide_degree where stud_id='" + stud_id + "') order by a.ayid desc";//
        }
        else
        {
            str = "select *,dbo.DOBTOWORDS(dob_wrds) as dob_wd,substring(Duration,9,4)+'-'+substring(Duration,21,4) AS Duration,(select substring(Duration,9,4)+'-'+substring(Duration,21,4) from m_academic where IsCurrent=1)  AS curr_dur from bonafide_degree as a inner join m_academic as b on  a.ayid=b.ayid where stud_id='" + stud_id + "' order by a.ayid desc  ";//and a.ayid='" + ayid + "' order by a.ayid desc 
        }
        DataTable dss = cls1.fillDataTable(str);

        List<bonafide> details = new List<bonafide>();
        if (dss.Rows.Count > 0)
        {

            foreach (DataRow dtrow in dss.Rows)
            {
                bonafide regi = new bonafide();
                regi.name = dtrow["stud_name"].ToString();
                regi.gender = dtrow["gender"].ToString();
                regi.name = dtrow["stud_name"].ToString();
                regi.dob_wrds = dtrow["stud_dob"].ToString();
                regi.stud_dob = dtrow["stud_dob"].ToString();
                regi.ayid = dtrow["Duration1"].ToString();
                regi.subcourse_Id = dtrow["subcourse_Id"].ToString();
                regi.subcourse_name = dtrow["subcourse_name"].ToString();
                regi.curr_dur = dtrow["curr_dur"].ToString();
                regi.dob_wd = dtrow["dob_wd"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public bonafide[] chk_sr_no(string sr_no, string stud_id)
    {

        string str = "";
        if (stud_id == "")
        {
            str = "select * from bonafide_certificate where srno='" + sr_no + "'  ";
        }
        else { str = "select * from bonafide_certificate where srno='" + sr_no + "' and stud_id='" + stud_id + "'"; }
        DataTable dss = cls1.fillDataTable(str);

        List<bonafide> details = new List<bonafide>();
        if (dss.Rows.Count > 0)
        {

            foreach (DataRow dtrow in dss.Rows)
            {
                bonafide regi = new bonafide();
                regi.stud_id = dtrow["stud_id"].ToString();
                regi.ayid = dtrow["ayid"].ToString();
                details.Add(regi);
            }

            //return details.ToArray();
        }

        return details.ToArray();

    }
    public bonafide[] btn_rep_ok(string from_dt, string to_dt)
    {
        string str = "select bc.srno,bc.stud_id,isnull(stud_L_Name,' ')+' '+isnull(stud_F_Name,' ')+' '+isnull(stud_M_Name,' ') as stud_name, bd.subcourse_name as subcourse_name,convert(date,issue_date,105) as issue_date,remark from dbo.bonafide_certificate bc left join dbo.m_std_personaldetails_tbl pd on bc.stud_id=pd.stud_id join bonafide_degree bd on bc.ayid=bd.ayid and bc.stud_id =bd.stud_id join m_crs_subcourse_tbl b on bd.subcourse_id=b.subcourse_id where convert(date,bc.issue_date,103) between convert(date,'" + from_dt + "',103) and convert(date,'" + to_dt + "',103) ORDER BY srno,issue_date ";
        string str1 = "select srno,'' as stud_id,isnull(L_name,' ')+' '+isnull(f_name,' ')+' '+isnull(M_name,' ') as stud_name,b.subcourse_name,convert(date,issue_dt,105) as issue_date, '' as remark from dbo.bonafide_certificate_ofold_stud a join m_crs_subcourse_tbl b on a.subcourse_id=b.subcourse_id where convert(date,issue_dt,103) between convert(date,'" + from_dt + "',103) and convert(date,'" + to_dt + "',103) ORDER BY srno,issue_dt";
        DataTable dss = cls1.fillDataTable(str);
        DataTable dss1 = cls1.fillDataTable(str1);
        List<bonafide> details = new List<bonafide>();
        if (dss.Rows.Count > 0)
        {

            foreach (DataRow dtrow in dss.Rows)
            {
                bonafide regi = new bonafide();
                regi.sr_no = dtrow["srno"].ToString();
                regi.stud_id = dtrow["stud_id"].ToString();
                regi.name = dtrow["stud_name"].ToString();
                regi.subcourse_name = dtrow["subcourse_name"].ToString();
                regi.issue_dt = dtrow["issue_date"].ToString();
                regi.remark = dtrow["remark"].ToString();
                details.Add(regi);
            }
            if (dss1.Rows.Count > 0)
            {

                foreach (DataRow dtrow in dss1.Rows)
                {
                    bonafide regi = new bonafide();
                    regi.sr_no = dtrow["srno"].ToString();
                    regi.stud_id = dtrow["stud_id"].ToString();
                    regi.name = dtrow["stud_name"].ToString();
                    regi.subcourse_name = dtrow["subcourse_name"].ToString();
                    regi.issue_dt = dtrow["issue_date"].ToString();
                    regi.remark = dtrow["remark"].ToString();
                    details.Add(regi);
                }
            }

            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    //============================student cancel and transfer


    public studentcancellation[] searchCancelstudent(string stud_id)
    {

        List<studentcancellation> std_fees = new List<studentcancellation>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dst_fees_details = new DataSet();
            string query = "  Select isnull(per.stud_F_name,'')  +'  '+ isnull(per.stud_M_name,'') +'  '+ isnull(per.stud_L_name,'') as  stud_name, aca.group_id,class.subcourse_name,class.subcourse_id, course.Course_id, course.course_name, per.Del_Flag, fac.faculty_name, grp.group_title,grp.Descritption, (select MAX(fyid)fyid  from m_std_pervrecord_tbl where Stud_id='" + stud_id + "') fyid ,aca.ayid ,sum(fee_mas.Amount) as course_tot_fees,(select sum(amount) from m_feeentry as entry where entry.stud_id = aca.stud_id and entry.del_flag = 0 and ENTRY.TYPE='Fee' and entry.Chq_status = 'Clear' and entry.ayid = fee_mas.ayid ) as course_fee_paid,            (select top 1 convert(varchar,Curr_dt ,106 )  from m_std_studentacademic_tbl where Stud_id='" + stud_id + "' order by curr_dt desc) admission_date,case when "
                + "            (select sum(amount) from m_feeentry as entry where entry.stud_id = aca.stud_id and entry.del_flag = 0 and ENTRY.TYPE='Fee' and entry.Chq_status = 'Clear' and entry.ayid = fee_mas.ayid )< sum(fee_mas.Amount)             then 'BALANCE'              else case when (select sum(amount) from m_feeentry as entry where entry.stud_id = aca.stud_id and entry.del_flag = 0 and ENTRY.TYPE='Fee' and entry.Chq_status = 'Clear' and entry.ayid = fee_mas.ayid )= sum(fee_mas.Amount)  then 'PAID' else 'PAID MORE' end end 'FEES STATUS'"
            + " from 	m_std_studentacademic_tbl as aca		inner join 	m_std_personaldetails_tbl as per on per.stud_id = aca.stud_id 		inner join  	m_crs_subcourse_tbl as class on class.subcourse_id = aca.subcourse_id 		inner join 	m_crs_course_tbl as course on course.course_id = class.course_id 		inner join 	m_crs_faculty  as fac on fac.faculty_id = course.faculty_id 		inner join  	m_crs_subjectgroup_tbl as grp on grp.Group_id = aca.group_id 		left outer join  	m_feemaster as fee_mas on fee_mas.group_id = grp.group_id and fee_mas.ayid = aca.AYID  where "
                + " aca.stud_id = '" + stud_id + "' and  	aca.AYID = (select max(ayid) from m_std_studentacademic_tbl where stud_id='" + stud_id + "') and aca.del_flag=0 group by aca.course_tot_fees, aca.course_fee_paid,   aca.group_id, class.subcourse_name,  course.Course_id,   course.course_name, per.Del_Flag,  fac.faculty_name, grp.group_title ,aca.ayid, per.stud_F_name, per.stud_M_name, per.stud_L_name, aca.stud_id , fee_mas.ayid ,class.subcourse_id,grp.Descritption";



            dst_fees_details = cls1.fillDataset(query);

            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {
                    studentcancellation stm = new studentcancellation();
                    stm.stud_name = dst_fees_details.Tables[0].Rows[i]["stud_name"].ToString();
                    stm.Descritption = dst_fees_details.Tables[0].Rows[i]["Descritption"].ToString();
                    //  stm.Group_Id = dst_fees_details.Tables[0].Rows[i]["Group"].ToString();
                    stm.group_id = dst_fees_details.Tables[0].Rows[i]["group_id"].ToString();
                    stm.subcourse_id = dst_fees_details.Tables[0].Rows[i]["subcourse_id"].ToString();
                    stm.subcourse_name = dst_fees_details.Tables[0].Rows[i]["subcourse_name"].ToString();
                    stm.Course_id = dst_fees_details.Tables[0].Rows[i]["Course_id"].ToString();
                    stm.course_name = dst_fees_details.Tables[0].Rows[i]["course_name"].ToString();
                    stm.fyid = dst_fees_details.Tables[0].Rows[i]["fyid"].ToString();
                    stm.faculty_name = dst_fees_details.Tables[0].Rows[i]["faculty_name"].ToString();
                    stm.group_title = dst_fees_details.Tables[0].Rows[i]["group_title"].ToString();
                    stm.ayid = dst_fees_details.Tables[0].Rows[i]["ayid"].ToString();
                    stm.course_tot_fees = dst_fees_details.Tables[0].Rows[i]["course_tot_fees"].ToString();
                    stm.course_fee_paid = dst_fees_details.Tables[0].Rows[i]["course_fee_paid"].ToString();
                    stm.admission_date = dst_fees_details.Tables[0].Rows[i]["admission_date"].ToString();
                    stm.feesstatus = dst_fees_details.Tables[0].Rows[i]["FEES STATUS"].ToString();

                    std_fees.Add(stm);
                }
            }



            // }    

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }

    public studentcancellation[] calcDeduction(string crsid, string totfees, string dayspast)
    {

        List<studentcancellation> std_fees = new List<studentcancellation>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dst_fees_details = new DataSet();
            string query = "  select Deduction_percentage,cast(round((24425-((24425*Deduction_percentage)/100)),2) as numeric(36,2)) refund_fees  from m_adm_cancellation_criteria where Course_id='" + crsid + "' and ACDID=(select max(ayid) from m_Academic where ISCurrent='1') and cast('" + dayspast + "' as int) between Day_From  and Day_To";


            dst_fees_details = cls1.fillDataset(query);
            studentcancellation stm = new studentcancellation();

            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {

                    //stm.Deduction_percentage = dst_fees_details.Tables[0].Rows[i]["Deduction_percentage"].ToString();
                    //stm.refund_fees = dst_fees_details.Tables[0].Rows[i]["refund_fees"].ToString();

                    //std_fees.Add(stm);
                }
            }

            stm.Deduction_percentage = "0";
            stm.refund_fees = "0";

            std_fees.Add(stm);

            // }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }

    public bool cancelAdmission(string id, string ayid, string fyid, string remark)
    {

        bool retVal = false;
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("m_cancel_admission", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@student_id", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@ayid", SqlDbType.VarChar).Value = ayid;
                cmd.Parameters.Add("@fyid", SqlDbType.VarChar).Value = fyid;
                cmd.Parameters.Add("@remark", SqlDbType.VarChar).Value = remark;

                cmd.Connection = con;
                con.Open();
                string message = Convert.ToString(cmd.ExecuteScalar());
                con.Close();

                if (message == "True")
                {
                    retVal = true;
                }
                else //error
                {
                    retVal = false;
                }
            }
        }
        return retVal;
    }


    public string TransferGroupDetails(string groupid, string ayid)
    {

        //it checks whether entry is present in temp table 
        try
        {
            DataSet dst_fees_details = new DataSet();
            string query = "select Amount from m_FeeMaster where Group_id='" + groupid + "' and Ayid='" + ayid + "'";


            dst_fees_details = cls1.fillDataset(query);

            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {

                return dst_fees_details.Tables[0].Rows[0]["Amount"].ToString();


            }
            else
            {
                return "Fees Not Defined";
            }


            // }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return "Fees Not Defined";

    }

    public List<ListItem> TransferGroups(string groupid, string subcourseid, string description)
    {
        DataSet dss = new DataSet();
        // string strQuery = "select * from m_crs_subjectgroup_tbl where Subcourse_id='" + subcourseid + "' and Group_id<>'" + groupid + "' and Descritption='10'";
        string strQuery = "select * from m_crs_subjectgroup_tbl where Subcourse_id='" + subcourseid + "' and Group_id<>'" + groupid + "' and (select substring(Group_title,0,CHARINDEX('2',Group_title)) from m_crs_subjectgroup_tbl where Group_id='" + groupid + "') not like Group_title and coalesce(Descritption,'')='" + description + "'";
        // dss = cls1.fillDataset(strQuery);
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(strQuery))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }
    }

    public studentDetailbook[] search_accession(string accession_id, string connect)
    {

        SqlConnection con = new SqlConnection();

        if (connect.StartsWith("b") || connect.StartsWith("mca") || connect.StartsWith("PHA") || connect.StartsWith("IMR") || connect.StartsWith("IMS") || connect.StartsWith("B") || connect.StartsWith("MCA") || connect.StartsWith("pha") || connect.StartsWith("imr") || connect.StartsWith("ims"))
        {
            if (connect.StartsWith("b") || connect.StartsWith("B"))
            {
                con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
            }
            else if (connect.StartsWith("mca") || connect.StartsWith("MCA")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
            else if (connect.StartsWith("PHA") || connect.StartsWith("pha")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
            else if (connect.StartsWith("IMR") || connect.StartsWith("imr")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString); }
            else if (connect.StartsWith("IMS") || connect.StartsWith("ims")) { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }

        }
        else
        {
            if (connect == "Viva Engg")
            {
                con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString);
            }
            else if (connect == "MCA") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString); }
            else if (connect == "pharmacy") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString); }
            else if (connect == "Viva IMR") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString); }
            else if (connect == "Viva IMS") { con = new SqlConnection(ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString); }
        }


        List<studentDetailbook> confirm = new List<studentDetailbook>();
        string str = "select * from ll_issue_return where accession_id='" + accession_id + "' and issue_return='0'";
        DataTable dt = cls1.fillDataTable(str);
        if (dt.Rows.Count > 0)
        {

            studentDetailbook sdb = new studentDetailbook();
            sdb.stud_id = dt.Rows[0]["member_id"].ToString();
            confirm.Add(sdb);
        }

        return confirm.ToArray();

    }


    //claculate fine

    public int calculate_fine(string subcourse_id, int day_diff, string connect)
    {
        try
        {
            string strquery = "";
            //SqlDataReader rstt = default(SqlDataReader);
            if (subcourse_id != "")
            {
                strquery = "select * from dbo.ll_D_Circulation where subcourse_id = '" + subcourse_id + "' and Day < " + day_diff + " order by Day";
            }
            else
            {
                strquery = "select * from dbo.ll_D_Circulation where  Day < " + day_diff + " order by Day";
            }
            string constr = "";
            if (connect == "Viva Engg")
            {
                constr = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
            }
            else if (connect == "MCA") { constr = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
            else if (connect == "pharmacy") { constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
            else if (connect == "Viva IMR") { constr = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
            else if (connect == "Viva IMS") { constr = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }
            if (connect.StartsWith("b") || connect.StartsWith("B"))
            {
                constr = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
            }
            else if (connect.StartsWith("mca") || connect.StartsWith("MCA")) { constr = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
            else if (connect.StartsWith("PHA") || connect.StartsWith("pha")) { constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
            else if (connect.StartsWith("IMR") || connect.StartsWith("imr")) { constr = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
            else if (connect.StartsWith("IMS") || connect.StartsWith("ims")) { constr = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }


            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlCommand cmd = new SqlCommand(strquery))
                {
                    List<ListItem> subCrs = new List<ListItem>();
                    cmd.CommandType = CommandType.Text;
                    cmd.Connection = con;
                    con.Open();
                    using (SqlDataReader sdr = cmd.ExecuteReader())
                    {

                        if (sdr.HasRows)
                        {
                            DataTable dt = new DataTable();
                            dt.Load(sdr);
                            dt.Columns.Add("counted_days", Type.GetType("System.Int64"));
                            dt.Columns.Add("total", Type.GetType("System.Int64"));
                            int total_fine = 0;

                            for (int i = 0; i <= dt.Rows.Count - 1; i++)
                            {
                                if (dt.Rows.Count == i + 1)
                                {
                                    dt.Rows[i]["counted_days"] = (day_diff - int.Parse(dt.Rows[i]["Day"].ToString())) * double.Parse(dt.Rows[i]["Fine"].ToString());
                                }
                                else
                                {
                                    dt.Rows[i]["counted_days"] = (day_diff - int.Parse(dt.Rows[i]["Day"].ToString())) * double.Parse(dt.Rows[i]["Fine"].ToString());
                                    //  dt.Rows[i].Item("counted_days") = (dt.Rows(i + 1).Item("Day").ToString() - dt.Rows[].Item("Day").ToString()) * Conversion.Val(dt.Rows[i].Item("Fine").ToString);
                                }
                            }
                            dt.Columns["total"].Expression = "Sum(counted_days)";
                            return int.Parse(dt.Rows[0]["total"].ToString());
                        }
                        else
                        {
                            return 0;
                        }
                    }
                }
            }


        }
        catch (Exception ex)
        {
            return 0;
            //MessageBox.Show(ex.ToString);
        }

    }

    public studentDetailbook[] checkacdemic(string studid, string ayid, string type)
    {
        List<studentDetailbook> confirm = new List<studentDetailbook>();

        try
        {

            //SqlDataReader rstt = default(SqlDataReader);
            if (type == "student")
            {
                string strquery = "select * from m_std_studentacademic_tbl where stud_id = '" + studid + "' and ayid='" + ayid + "'";

                string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
                using (SqlConnection con = new SqlConnection(constr))
                {
                    using (SqlCommand cmd = new SqlCommand(strquery))
                    {
                        List<ListItem> subCrs = new List<ListItem>();
                        cmd.CommandType = CommandType.Text;
                        cmd.Connection = con;
                        con.Open();
                        using (SqlDataReader sdr = cmd.ExecuteReader())
                        {

                            if (sdr.HasRows)
                            {
                                //DataTable dt = new DataTable();
                                //dt.Load(sdr);

                                //for (int i = 0; i <= dt.Rows.Count - 1; i++)
                                //{
                                //    if (dt.Rows.Count == i + 1)
                                //    {

                                //    }
                                //    else
                                //    {
                                //        //dt.Rows[i]["counted_days"] = (day_diff - int.Parse(dt.Rows[i]["Day"].ToString())) * double.Parse(dt.Rows[i]["Fine"].ToString());
                                //        //  dt.Rows[i].Item("counted_days") = (dt.Rows(i + 1).Item("Day").ToString() - dt.Rows[].Item("Day").ToString()) * Conversion.Val(dt.Rows[i].Item("Fine").ToString);
                                //    }
                                //}
                                //dt.Columns["total"].Expression = "Sum(counted_days)";
                                //return int.Parse(dt.Rows[0]["total"].ToString());
                            }
                            else
                            {
                                string str = "select stud_id,Duration,group_title from m_std_studentacademic_tbl as a,m_academic as b,m_crs_subjectgroup_tbl as c where stud_id = '" + studid + "'  and a.ayid=b.ayid and a.group_id=c.group_id order by duration desc";
                                DataTable dt = new DataTable();
                                dt = cls1.fillDataTable(str);

                                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                                {
                                    studentDetailbook sdb = new studentDetailbook();
                                    sdb.subcourse_name = dt.Rows[0]["group_title"].ToString();
                                    sdb.AYID = dt.Rows[0]["Duration"].ToString();
                                    confirm.Add(sdb);
                                }
                            }
                        }
                    }
                }

            }


        }
        catch (Exception ex)
        {
            //   return confirm.ToArray();
            //MessageBox.Show(ex.ToString);
        }
        return confirm.ToArray();
    }

    public studentDetailbook[] chk_issue(string studid, string type)
    {
        List<studentDetailbook> confirm = new List<studentDetailbook>();

        try
        {
            studentDetailbook sdb = new studentDetailbook();

            //SqlDataReader rstt = default(SqlDataReader);
            if (type == "student")
            {
                string strquery = "select count(issue_return) ,Total_Issue as cnt from ll_issue_return as a,m_std_studentacademic_tbl as b,ll_M_Circulation as c where stud_id='" + studid + "' and a.member_id=b.stud_id and b.subcourse_Id=c.Subcourse_id and issue_return='0' and ayid=(select max(ayid) from m_std_studentacademic_tbl)   group by issue_return,Total_Issue having count(issue_return)=Total_Issue";
                DataTable dt = new DataTable();
                dt = cls1.fillDataTable(strquery);
                if (dt.Rows.Count > 0)
                {

                    sdb.subcourse_name = "1";

                }
                else
                {
                    sdb.subcourse_name = "0";
                }
            }
            else
            {
                string strquery = "select count(issue_return) ,Total_Issue as cnt from ll_issue_return as a,ll_M_Circulation as c where member_id='" + studid + "'  and issue_return='0' and c.Circulation_For='employee' group by issue_return,Total_Issue having count(issue_return)=Total_Issue";
                DataTable dt = new DataTable();
                dt = cls1.fillDataTable(strquery);
                if (dt.Rows.Count > 0)
                {

                    sdb.subcourse_name = "1";

                }
                else
                {
                    sdb.subcourse_name = "0";
                }
            }
            confirm.Add(sdb);

        }
        catch (Exception ex)
        {
            //   return confirm.ToArray();
            //MessageBox.Show(ex.ToString);
        }
        return confirm.ToArray();
    }
    //catch (Exception ex)
    //{
    //    return   sdr;
    //}


    public studentDetailbook[] grid_data_issue(string ayid, string date_ret)
    {
        List<studentDetailbook> details = new List<studentDetailbook>();
        if (date_ret != "")
        {
            string qry = ""; int k = 0;
            string[] main_dt = date_ret.Split(' ');
            if (ayid != "" && ayid != "undefined" && ayid != "null")
            {
                qry = "select * from holiday_master where ayid='" + ayid + "' and del_flag=0";
            }
            else
            {
                qry = "select * from holiday_master where ayid=(select ayid from m_academic where IsCurrent=1) and del_flag=0";
            }

            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);

            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string str = dt.Rows[i]["holiday_date"].ToString();
                    string[] str1 = str.Split('|');
                    if (str1.Length > 1)
                    {
                        string[] d1 = str1[0].Split(' ');
                        string[] d2 = str1[1].Split(' ');
                        if ((Convert.ToDateTime(main_dt[0]) >= Convert.ToDateTime(d1)) && (Convert.ToDateTime(main_dt[0]) >= Convert.ToDateTime(d2)))
                        {
                            string str3 = "select DATEDIFF ( d, '" + main_dt[0] + "' , '" + str[1] + "' )";
                            DataTable dt1 = new DataTable();
                            dt1 = cls1.fillDataTable(str3);
                            k = k + Convert.ToInt32(dt1.Rows[0][0].ToString());
                        }
                    }
                    else
                    {
                        string[] d1 = str1[0].Split(' ');
                        if (d1[0] == main_dt[0])
                        {
                            k++;
                        }
                    }

                }
                if (k == 0)
                {
                    DateTime dt12 = Convert.ToDateTime(date_ret);//....
                    DayOfWeek dow = dt12.DayOfWeek; //enum
                    string str = dow.ToString(); //string
                    if (str.ToString().Contains("Sunday"))
                    {
                        k++;
                    }
                }
                studentDetailbook modal = new studentDetailbook();
                modal.count = Convert.ToString(k);
                details.Add(modal);
                return details.ToArray();
            }
            else
            {

                return details.ToArray();
            }
        }
        else
        {

            return details.ToArray();
        }
    }


    public int calculate_fine(int subcourse_id, int day_diff)
    {
        throw new NotImplementedException();
    }


    //------------------------------------transfer_certificate---------------------------------

    public trans_cert[] get_val_trans(string stud_id)
    {
        List<trans_cert> details = new List<trans_cert>();
        string str = "select * from trans_certificate where stud_id ='" + stud_id + "' and del_flag=0";
        DataSet ds1 = cls1.fillDataset(str);
        string str1 = "select stud_id,ayid,SUBSTRING(ID_No,0,17) as ID_No from m_std_studentacademic_tbl  where stud_id='" + stud_id + "'";
        DataSet ds2 = cls1.fillDataset(str1);
        trans_cert tc = new trans_cert();
        tc.prn_no = ds2.Tables[0].Rows[0]["ID_No"].ToString();

        if (ds1.Tables[0].Rows.Count >= 0)
        {
            string str2 = "select stud_id from m_std_personaldetails_tbl where stud_id='" + stud_id + "'";
            DataSet ds3 = cls1.fillDataset(str2);
            if (ds3.Tables[0].Rows.Count <= 0)
            { tc.fname = ""; tc.mname = ""; tc.lname = ""; }
            else
            {
                string str4 = "select stud_F_Name,stud_M_Name,stud_L_Name from m_std_personaldetails_tbl where stud_id='" + stud_id + "'";
                DataSet ds4 = cls1.fillDataset(str4);
                tc.fname = ds4.Tables[0].Rows[0]["stud_F_name"].ToString();
                tc.mname = ds4.Tables[0].Rows[0]["stud_M_name"].ToString();
                tc.lname = ds4.Tables[0].Rows[0]["stud_L_name"].ToString();

                string str5 = "select b.group_id,d.group_title from m_std_studentacademic_tbl as b,m_crs_subjectgroup_tbl as d where stud_id='" + stud_id + "' and b.group_id=d.group_id  and b.ayid in (select MAX(ayid) from m_std_studentacademic_tbl as a where a.stud_id ='" + stud_id + "')";
                DataSet ds5 = cls1.fillDataset(str5);
                tc.grp_id = ds5.Tables[0].Rows[0]["group_id"].ToString();

                string str6 = "select distinct b.faculty_name from dbo.m_crs_course_tbl a join dbo.m_crs_faculty b on a.faculty_id=b.faculty_id join m_crs_subcourse_tbl c on a.course_id=c.course_id join m_crs_subjectgroup_tbl d on c.subcourse_id=d.Subcourse_id  where d.group_id='" + tc.grp_id + "'";
                DataSet ds6 = cls1.fillDataset(str6);
                string fac = ds6.Tables[0].Rows[0]["faculty_name"].ToString();

                string str7 = "select case b.course_id when 'CRS001' then subcourse_name when 'CRS003' then subcourse_name when 'CRS007' then subcourse_name else Group_title end as 'Course' from m_crs_subjectgroup_tbl a join m_crs_subcourse_tbl b on a.Subcourse_id=b.subcourse_id join m_crs_course_tbl c on b.course_id=c.course_id where Group_id ='" + tc.grp_id + "'";
                DataSet ds7 = cls1.fillDataset(str7);
                string fac_data = ds7.Tables[0].Rows[0][0].ToString();
                tc.fac_data = fac_data;

                if (fac.ToString() == "PG")
                {
                    if (fac_data.ToString().Contains("M.Com")) { tc.faculty = "Commerce"; }
                    else if (fac_data.ToString().Contains("M.Sc")) { tc.faculty = "Science"; }
                    else if (fac_data.ToString().Contains("MA")) { tc.faculty = "Arts"; }
                    else if (fac_data.ToString().Contains("M.A")) { tc.faculty = "Arts"; }
                }
                string str8 = "select stud_F_Name,stud_M_Name,stud_L_Name,from_acc_year,acc_year,acc_x_month,acc_x_year,pass_f,head,address1,address2,address3,remark,prnno from trans_certificate a join m_std_personaldetails_tbl b on a.Stud_id=b.stud_id where a.stud_id ='" + stud_id + "'";
                DataSet ds8 = cls1.fillDataset(str8);
                if (ds8.Tables[0].Rows.Count > 0)
                {
                    tc.fname = ds8.Tables[0].Rows[0]["stud_F_name"].ToString();
                    tc.mname = ds8.Tables[0].Rows[0]["stud_M_name"].ToString();
                    tc.lname = ds8.Tables[0].Rows[0]["stud_L_name"].ToString();
                    tc.frm_acc = ds8.Tables[0].Rows[0]["from_acc_year"].ToString();
                    tc.month = ds8.Tables[0].Rows[0]["acc_x_month"].ToString();
                    tc.acc_year = ds8.Tables[0].Rows[0]["acc_year"].ToString();
                    tc.year = ds8.Tables[0].Rows[0]["acc_x_year"].ToString();
                    tc.pass = ds8.Tables[0].Rows[0]["pass_f"].ToString();
                    tc.head = ds8.Tables[0].Rows[0]["head"].ToString();
                    tc.add1 = ds8.Tables[0].Rows[0]["address1"].ToString();
                    tc.add2 = ds8.Tables[0].Rows[0]["address2"].ToString();
                    tc.add3 = ds8.Tables[0].Rows[0]["address3"].ToString();
                    tc.remark = ds8.Tables[0].Rows[0]["remark"].ToString();
                    tc.prn_no = ds8.Tables[0].Rows[0]["prnno"].ToString();
                }
                else
                {
                    tc.frm_acc = ds7.Tables[0].Rows[0]["Course"].ToString();
                }
            }
        }
        details.Add(tc);
        return details.ToArray();
    }
    public trans_cert[] ins_qry(string stud_id, string acc_year, string month, string year, string head, string add1, string add2, string add3, string pass, string frm_acc, string remark, string prn_no)
    {
        List<trans_cert> details = new List<trans_cert>();
        trans_cert tc = new trans_cert();
        string flag = "";
        string str = "select * from trans_certificate where stud_id ='" + stud_id + "'";
        DataSet ds = cls1.fillDataset(str);

        string str1 = "select * From m_academic where IsCurrent = 1";
        DataSet ds1 = cls1.fillDataset(str1);

        string ac = ds1.Tables[0].Rows[0][1].ToString();
        string sp1 = ac.Substring(10, 2);
        string sp2 = ac.Substring(22, 2);
        string p1 = "", p2 = "", p3 = "", p4 = "";
        p1 = "VC/"; p2 = "TC/"; p3 = "/"; p4 = "-";
        string tc1 = sp1 + p4 + sp2;
        string str2 = "";
        if (tc1 == "19-20")
        {
            //string str2 = "select MAX(tc_no) as tc from trans_certificate where ayid=(select ayid from m_academic where Iscurrent=1)";
            str2 = "select case when  MAX(tc_no) is null then '0' else max(tc_no) end  as tc from trans_certificate where tc_no like '%" + tc1 + "%' and convert(date,curr_dt,105) > convert(date,'25-07-2019',105)  ";
        }
        else
        {
            str2 = "select case when  MAX(tc_no) is null then '0' else max(tc_no) end  as tc from trans_certificate where tc_no like '%" + tc1 + "%' ";

        }
        DataSet ds2 = cls1.fillDataset(str2);

        string a = ds2.Tables[0].Rows[0][0].ToString();
        string cal = "";
        if (a == "" || a == "0") { cal = "0001"; }
        else
        {
            string sep = a.Substring(12, 4);
            string i = Convert.ToString(Convert.ToInt32(sep) + 1);
            if (i.Length.ToString() == "1") { cal = "000" + i; }
            else if (i.Length.ToString() == "2") { cal = "00" + i; }
            else if (i.Length.ToString() == "3") { cal = "0" + i; }
            else if (i.Length.ToString() == "4") { cal = i; }
        }
        string all = p1 + p2 + sp1 + p4 + sp2 + p3 + cal;

        if (ds.Tables[0].Rows.Count < 1)
        {
            string ins_q = "INSERT INTO trans_certificate(Stud_id, acc_year, acc_x_month, acc_x_year, head, address1, address2, address3, pass_f, tc_no,curr_dt, from_acc_year, mod_dt, remark, del_flag, prnno) VALUES('" + stud_id + "','" + acc_year + "','" + month + "','" + year + "','" + head + "','" + add1 + "','" + add2 + "','" + add3 + "','" + pass + "','" + all + "',getdate(),'" + frm_acc + "',Null,'" + remark + "',0,'" + prn_no + "')";
            if (cls1.DMLqueries(ins_q) == true)
            {
                flag = "true";
            }
            else { flag = ""; }
        }
        else
        {

            flag = "false";
        }
        tc.flag = flag;


        details.Add(tc);
        return details.ToArray();
    }

    public trans_cert[] ins_qry_new(string fname, string mname, string lname, string dob, string gender, string caste, string nationality, string acc_year, string month, string year, string head, string add1, string add2, string add3, string pass, string frm_acc, string remark, string prn_no)
    {
        List<trans_cert> details = new List<trans_cert>();
        trans_cert tc = new trans_cert();
        string flag = "";
        string str = "select * from transcertificate_forOld where stud_F_Name ='" + fname + "'";
        DataSet ds = cls1.fillDataset(str);

        string str1 = "select * From m_academic where IsCurrent = 1";
        DataSet ds1 = cls1.fillDataset(str1);

        string ac = ds1.Tables[0].Rows[0][1].ToString();
        string sp1 = ac.Substring(10, 2);
        string sp2 = ac.Substring(22, 2);
        string p1 = "", p2 = "", p3 = "", p4 = "";
        p1 = "VC/"; p2 = "TC/"; p3 = "/"; p4 = "-";
        string tc1 = sp1 + p4 + sp2;

        string str2 = "select MAX(tc_no) as tc from transcertificate_forOld";
        DataSet ds2 = cls1.fillDataset(str2);

        string a = ds2.Tables[0].Rows[0][0].ToString();
        string cal = "";
        if (a == "" || a == "0") { cal = "0001"; }
        else
        {
            string sep = a.Substring(12, 4);
            string i = Convert.ToString(Convert.ToInt32(sep) + 1);
            if (i.Length.ToString() == "1") { cal = "000" + i; }
            else if (i.Length.ToString() == "2") { cal = "00" + i; }
            else if (i.Length.ToString() == "3") { cal = "0" + i; }
            else if (i.Length.ToString() == "4") { cal = i; }
            string all = p1 + p2 + sp1 + p4 + sp2 + p3 + cal;

            if (ds.Tables[0].Rows.Count < 1)
            {
                string ins_q = "INSERT INTO transcertificate_forOld(stud_F_Name,stud_M_Name,stud_L_Name,dob,stud_gender,stud_caste,stud_Nationality, acc_year, acc_x_month, acc_x_year, head, address1, address2, address3, pass_f, tc_no,curr_dt, from_acc_year, mod_dt, remark, del_flag, prnno) VALUES('" + fname + "','" + mname + "','" + lname + "',convert(date,'" + dob + "',105),'" + gender + "','" + caste + "','" + nationality + "','" + acc_year + "','" + month + "','" + year + "','" + head + "','" + add1 + "','" + add2 + "','" + add3 + "','" + pass + "','" + all + "',getdate(),'" + frm_acc + "',Null,'" + remark + "',0,'" + prn_no + "')";
                if (cls1.DMLqueries(ins_q) == true)
                {
                    flag = "true";
                }
                else { flag = ""; }
            }
            else
            {

                flag = "false";
            }
            tc.flag = flag;

        }
        details.Add(tc);
        return details.ToArray();
    }
    public trans_cert[] tc_report(string fromdt, string todt)
    {
        List<trans_cert> details = new List<trans_cert>();
        try
        {
            DataSet dss1 = new DataSet();

            string str = "select distinct(tc_no) as Tc_no,b.Stud_id,isnull(stud_L_Name,' ')+' '+isnull(stud_F_Name,' ')+' '+isnull(stud_M_Name,' ') as Stud_name,from_acc_year as From_Acc_year,Acc_year as To_Acc_year,head as Head,e.curr_dt as Date,e.remark from dbo.m_std_personaldetails_tbl as a ,dbo.m_std_studentacademic_tbl as b , m_crs_subjectgroup_tbl as c ,m_aca as d ,trans_certificate as e where a.stud_id = b.stud_id and b.group_id = c.Group_id and b.ayid = d.ayid and b.stud_id = e.stud_id and convert(date,e.curr_dt,105) between convert(date,'" + fromdt + "',105) and convert(date,'" + todt + "',105) order by tc_no";
            dss1 = cls1.fillDataset(str);
            for (int i = 0; i <= dss1.Tables[0].Rows.Count - 1; i++)
            {
                trans_cert tc = new trans_cert();
                tc.tc_no = dss1.Tables[0].Rows[i]["tc_no"].ToString();
                tc.stud_id = dss1.Tables[0].Rows[i]["Stud_id"].ToString();
                tc.full_name = dss1.Tables[0].Rows[i]["Stud_name"].ToString();
                tc.frm_acc = dss1.Tables[0].Rows[i]["From_Acc_year"].ToString();
                tc.acc_year = dss1.Tables[0].Rows[i]["To_Acc_year"].ToString();
                tc.head = dss1.Tables[0].Rows[i]["Head"].ToString();
                tc.date = dss1.Tables[0].Rows[i]["Date"].ToString();
                tc.remark = dss1.Tables[0].Rows[i]["remark"].ToString();
                details.Add(tc);
            }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return details.ToArray();
    }

    public trans_cert[] cancel_tc(string stud_id, string update_qry)
    {
        List<trans_cert> details = new List<trans_cert>();
        //it checks whether entry is present in temp table 
        try
        {
            string str = "select * from trans_certificate where stud_id ='" + stud_id + "' and del_flag=0";
            DataSet ds = cls1.fillDataset(str);
            trans_cert tc = new trans_cert();
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (cls1.DMLqueries(update_qry) == true)
                {
                    tc.flag = "true";
                }
                else
                {
                    tc.flag = "false";
                }
            }
            else
            {
                tc.flag = "already";
            }
            details.Add(tc);
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }

        return details.ToArray();
    }
    public trans_cert[] tc_search(string name, string tc_no)
    {
        List<trans_cert> details = new List<trans_cert>();
        string str = ""; string str1 = ""; DataSet dss = new DataSet();
        if (name.ToString() != "")
        {
            str = "select stud_F_Name,stud_M_Name,stud_L_Name,tc_no from transcertificate_forOld where (stud_F_Name+stud_M_Name+stud_L_Name) like '%" + name + "%'";
        }
        else if (tc_no.ToString() != "") { str = "select stud_F_Name,stud_M_Name,stud_L_Name,tc_no from transcertificate_forOld where tc_no like '" + tc_no + "%' "; }
        DataSet ds = cls1.fillDataset(str);
        if (ds.Tables[0].Rows.Count > 0)
        {
            str1 = "select stud_L_Name, stud_F_Name, stud_M_Name,stud_Gender,dob,stud_Caste,stud_Nationality,from_acc_year,prnno,acc_year,acc_x_month,acc_x_year,pass_f,head,address1,address2,address3,remark from transcertificate_forOld where stud_F_Name like '" + ds.Tables[0].Rows[0]["stud_F_Name"].ToString() + "%' and stud_M_Name like '" + ds.Tables[0].Rows[0]["stud_M_Name"].ToString() + "%' and stud_L_Name like '" + ds.Tables[0].Rows[0]["stud_L_Name"].ToString() + "%'";
            dss = cls1.fillDataset(str1);


            trans_cert tc = new trans_cert();

            tc.fname = dss.Tables[0].Rows[0]["stud_F_Name"].ToString();
            tc.mname = dss.Tables[0].Rows[0]["stud_M_Name"].ToString();
            tc.lname = dss.Tables[0].Rows[0]["stud_L_Name"].ToString();
            tc.tc_no = ds.Tables[0].Rows[0]["tc_no"].ToString();
            tc.gender = dss.Tables[0].Rows[0]["stud_Gender"].ToString();
            tc.dob = dss.Tables[0].Rows[0]["dob"].ToString();
            tc.caste = dss.Tables[0].Rows[0]["stud_Caste"].ToString();
            tc.nationality = dss.Tables[0].Rows[0]["stud_Nationality"].ToString();
            tc.frm_acc = dss.Tables[0].Rows[0]["from_acc_year"].ToString();
            tc.prn_no = dss.Tables[0].Rows[0]["prnno"].ToString();
            tc.acc_year = dss.Tables[0].Rows[0]["acc_year"].ToString();
            tc.month = dss.Tables[0].Rows[0]["acc_x_month"].ToString();
            tc.year = dss.Tables[0].Rows[0]["acc_x_year"].ToString();
            tc.pass = dss.Tables[0].Rows[0]["pass_f"].ToString();
            tc.head = dss.Tables[0].Rows[0]["head"].ToString();
            tc.add1 = dss.Tables[0].Rows[0]["address1"].ToString();
            tc.add2 = dss.Tables[0].Rows[0]["address2"].ToString();
            tc.add3 = dss.Tables[0].Rows[0]["address3"].ToString();
            tc.remark = dss.Tables[0].Rows[0]["remark"].ToString();
            details.Add(tc);
        }

        return details.ToArray();
    }
    public trans_cert[] add_search(string str)
    {
        DataSet ds = cls1.fillDataset(str);
        List<trans_cert> details = new List<trans_cert>();

        foreach (DataRow dtrow in ds.Tables[0].Rows)
        {
            trans_cert stud = new trans_cert();
            stud.add1 = dtrow["address1"].ToString();
            stud.add2 = dtrow["address2"].ToString();
            stud.add3 = dtrow["address3"].ToString();
            details.Add(stud);
        }

        return details.ToArray();
    }

    //IssuereturnReport
    public Issuereturnreport[] GetIssuereturnReport(string datetimepicker1, string datetimepicker2, string memberType, string isssueReturn, string connect)
    {
        string qry = "";

        if (isssueReturn == "0")
        {
            if (memberType.ToString() == "S")
            {
                qry = " select * from (select a.stud_id,stud_F_Name +' '+stud_m_name+ ' '+stud_l_name as Student_Name,b.accession_id,d.TITLE,'Book' as Type from m_std_personaldetails_tbl as a left join ll_issue_return  as b on a.stud_id=b.member_id left join lib_book_master as d on d.ACCESSION_NO=b.accession_id where d.del_flag=0 and b.issue_return=0 and convert(date,b.issue_date,105) between convert(date,'" + datetimepicker1 + "',105) and convert(date,'" + datetimepicker2 + "',105) and b.member_type='" + memberType + "' )a";
            }
            else
            {
                qry = "select * from (select a.emp_id,NAME +' '+FATHER+ ' '+SURNAME as employee_Name,b.accession_id,d.TITLE,'Book' as Type from EmployeePersonal as a left join ll_issue_return  as b on a.emp_id=b.member_id left join lib_book_master as d on d.ACCESSION_NO=b.accession_id where d.del_flag=0 and b.issue_return=0 and convert(date,b.issue_date,105) between convert(date,'" + datetimepicker1 + "',105) and convert(date,'" + datetimepicker2 + "',105) and b.member_type='" + memberType + "'  )a";
            }

        }
        else if (isssueReturn == "1")
        {

            if (memberType.ToString() == "S")
            {
                qry = " select * from (select a.stud_id,stud_F_Name +' '+stud_m_name+ ' '+stud_l_name as Student_Name,b.accession_id,d.TITLE,'Book' as Type from m_std_personaldetails_tbl as a left join ll_issue_return  as b on a.stud_id=b.member_id left join lib_book_master as d on d.ACCESSION_NO=b.accession_id where d.del_flag=0 and b.issue_return=1 and convert(date,b.issue_date,105) between convert(date,'" + datetimepicker1 + "',105) and convert(date,'" + datetimepicker2 + "',105) and b.member_type='" + memberType + "' )a";
            }
            else
            {
                qry = "select * from (select a.emp_id,NAME +' '+FATHER+ ' '+SURNAME as employee_Name,b.accession_id,d.TITLE,'Book' as Type from EmployeePersonal as a left join ll_issue_return  as b on a.emp_id=b.member_id left join lib_book_master as d on d.ACCESSION_NO=b.accession_id where d.del_flag=0 and b.issue_return=1 and convert(date,b.issue_date,105)  between convert(date,'" + datetimepicker1 + "',105) and convert(date,'" + datetimepicker2 + "',105) and b.member_type='" + memberType + "'  )a";
            }

        }
        else
        {
            if (memberType.ToString() == "S")
            {
                qry = " select * from (select a.stud_id,stud_F_Name +' '+stud_m_name+ ' '+stud_l_name as Student_Name,b.accession_id,d.TITLE,'Book' as Type from m_std_personaldetails_tbl as a left join ll_issue_return  as b on a.stud_id=b.member_id left join lib_book_master as d on d.ACCESSION_NO=b.accession_id where d.del_flag=0 and convert(date,b.issue_date,105) between convert(date,'" + datetimepicker1 + "',105) and convert(date,'" + datetimepicker2 + "',105) and b.member_type='" + memberType + "')a";
            }
            else
            {
                qry = "select * from (select a.emp_id,NAME +' '+FATHER+ ' '+SURNAME as employee_Name,b.accession_id,d.TITLE,'Book' as Type from EmployeePersonal as a left join ll_issue_return  as b on a.emp_id=b.member_id left join lib_book_master as d on d.ACCESSION_NO=b.accession_id where d.del_flag=0 and convert(date,b.issue_date,105) between convert(date,'" + datetimepicker1 + "',105) and convert(date,'" + datetimepicker2 + "',105) and b.member_type='" + memberType + "')a";
            }

        }

        string constr = "";
        if (connect == "Viva Engg")
        {
            constr = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        }
        else if (connect == "MCA") { constr = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        else if (connect == "pharmacy") { constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        else if (connect == "Viva IMR") { constr = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }
        else if (connect == "Viva IMS") { constr = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        DataSet ds = new DataSet();
        List<Issuereturnreport> details = new List<Issuereturnreport>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                cmd.CommandTimeout = 100;
                con.Open();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);

                if (memberType.ToString() == "S")
                {
                    foreach (DataRow dtrow in ds.Tables[0].Rows)
                    {
                        Issuereturnreport log = new Issuereturnreport();
                        log.SrNo = "";
                        log.StudentId = dtrow["stud_id"].ToString();
                        log.StudentName = dtrow["Student_Name"].ToString();
                        log.Accssionno = dtrow["accession_id"].ToString();
                        log.Booktitle = dtrow["TITLE"].ToString();
                        details.Add(log);
                    }
                }
                else
                {
                    foreach (DataRow dtrow in ds.Tables[0].Rows)
                    {
                        Issuereturnreport log = new Issuereturnreport();
                        log.SrNo = "";
                        log.empId = dtrow["emp_id"].ToString().ToUpper();
                        log.empName = dtrow["employee_Name"].ToString().ToUpper();
                        log.empAccessionno = dtrow["accession_id"].ToString().ToUpper();
                        log.empBooktitle = dtrow["TITLE"].ToString().ToUpper();
                        log.empType = dtrow["TYPE"].ToString().ToUpper();
                        details.Add(log);
                    }
                }
                con.Close();

                return details.ToArray();

            }
        }

    }



    //BookMasterNew
    //New
    public string[] LoadPublisher(string type)
    {

        string strquery = "select distinct general_name from dbo.ll_general_master where general_type='" + type + "' and not_in_use=0 order by general_name desc";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            List<string> confirm = new List<string>();
            DataTable dt = cls1.fillDataTable(strquery);
            if (dt.Rows.Count > 0)
            {

                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    confirm.Add(dt.Rows[i]["general_name"].ToString());

                }


            }
            return confirm.ToArray();

        }
    }


    //---thesis------------
    public string Thesis_check(string acc_no)
    {
        string qry = "";
        SqlCommand cmd = new SqlCommand();
        qry = qry + "select * from lib_thesis_master where ACCESSION_NO='" + acc_no + "' and DEL_FLAG=0";
        DataSet ds = cls1.fillDataset(qry);
        if (ds.Tables[0].Rows.Count > 0)
        {
            return "true";
        }
        else
        {
            return "false";
        }

    }

    public thesis[] get_thesis_data(string acc_no)
    {
        List<thesis> confirm = new List<thesis>();

        string strquery = "";

        strquery = "select * from lib_thesis_master where  ACCESSION_NO='" + acc_no + "'";


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        using (SqlConnection con = new SqlConnection(constr))
        {

            DataTable dt = cls1.fillDataTable(strquery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    thesis th = new thesis();

                    // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                    th.th_title = dt.Rows[i]["TITLE"].ToString();
                    th.th_researcher = dt.Rows[i]["RESEARCHER"].ToString();

                    th.th_guide = dt.Rows[i]["GUIDE"].ToString();
                    th.th_lang = dt.Rows[i]["LANG"].ToString();
                    th.th_keyword = dt.Rows[i]["KEYWORDS"].ToString();
                    th.th_year = dt.Rows[i]["YEAR"].ToString();
                    th.th_nopage = dt.Rows[i]["NOOFPAGES"].ToString();
                    // th.CALLNO = dt.Rows[i]["CALLNO"].ToString();

                    th.th_callno = dt.Rows[i]["CALLNO"].ToString();
                    th.th_subject = dt.Rows[i]["SUBJ"].ToString();

                    th.th_remark = dt.Rows[i]["REMARK"].ToString();
                    th.th_acc_material = dt.Rows[i]["ACC_MATERIALS"].ToString();
                    th.th_category = dt.Rows[i]["CATOGARY"].ToString();
                    th.th_issue_type = dt.Rows[i]["ISSUE_TYPE"].ToString();
                    th.th_donor = dt.Rows[i]["DONOR_ID"].ToString();

                    th.th_accno = dt.Rows[i]["ACCESSION_NO"].ToString();
                    if (dt.Rows[i]["REG_DT"].ToString() == "")
                    {
                        th.th_regdt = "";
                    }
                    else
                    {
                        th.th_regdt = Convert.ToString(Convert.ToDateTime(dt.Rows[i]["REG_DT"].ToString()).ToString("dd/MM/yyyy"));
                    }
                    th.th_clgname = dt.Rows[i]["CLG_NAME"].ToString();
                    confirm.Add(th);

                }
            }
        }
        return confirm.ToArray();
    }

    //-----------------

    public book_master[] Get_book_Title(string type)
    {
        string strquery = "";
        if (type == "book")
        {
            strquery = "select distinct rtrim(ltrim(TITLE))book_title from lib_book_master where del_flag=0";
        }
        else
        {
            strquery = "select distinct rtrim(ltrim(TITLE))book_title from lib_MAP_MASTER where del_flag=0";

        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        List<book_master> confirm = new List<book_master>();
        using (SqlConnection con = new SqlConnection(constr))
        {

            DataTable dt = cls1.fillDataTable(strquery);




            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    book_master sdb = new book_master();

                    // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                    sdb.id = dt.Rows[i]["book_title"].ToString().Replace("''", "'");
                    sdb.title = dt.Rows[i]["book_title"].ToString().Replace("''", "'");
                    confirm.Add(sdb);

                }




            }
        }
        return confirm.ToArray();
    }



    //bookloadretrive

    //public booksearch[] loadbookdata(string bookid, string bookaccessionno)
    //{

    //    string strquery = "select * from lib_book_master where bookaccessionno='" + bookaccessionno + "'";
    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        List<booksearch> confirm = new List<booksearch>();
    //        DataTable dt = cls1.fillDataTable(strquery);
    //        if (dt.Rows.Count > 0)
    //        {
    //            booksearch sdb = new booksearch();
    //            for (int i = 0; i < dt.Rows.Count; i++)
    //            {

    //                // sdb.book_id = dt.Rows[i]["book_id"].ToString();    
    //                sdb.booktitle = dt.Rows[i]["booktitle"].ToString();
    //                sdb.bookauthor = dt.Rows[i]["bookauthor"].ToString();
    //                sdb.bookedition = dt.Rows[i]["bookedition"].ToString();
    //                sdb.authors = dt.Rows[i]["bookauthor"].ToString();
    //                sdb.bookpublisher = dt.Rows[i]["bookpublisher"].ToString();
    //                sdb.bookcallno = dt.Rows[i]["bookcallno"].ToString();
    //                sdb.bookisbn = dt.Rows[i]["bookisbn"].ToString();
    //                sdb.booklanguage = dt.Rows[i]["booklanguage"].ToString();
    //                sdb.bookkeywords = dt.Rows[i]["bookkeywords"].ToString();
    //                sdb.bookyear = dt.Rows[i]["bookyear"].ToString();
    //                sdb.booknoofpages = dt.Rows[i]["booknoofpages"].ToString();
    //                sdb.booksubject = dt.Rows[i]["booksubject"].ToString();
    //                sdb.bookremark = dt.Rows[i]["bookremark"].ToString();
    //                sdb.bookaccompaning = dt.Rows[i]["bookaccompaning"].ToString();
    //                sdb.bookcatogary = dt.Rows[i]["bookcatogary"].ToString();
    //                sdb.booktype = dt.Rows[i]["booktype"].ToString();
    //                sdb.bookbound = dt.Rows[i]["bookbound"].ToString();
    //                sdb.bookdonor = dt.Rows[i]["bookdonor"].ToString();


    //                sdb.bookaccessionno = dt.Rows[i]["bookaccessionno"].ToString();
    //                sdb.bookbillno = dt.Rows[i]["bookbillno"].ToString();
    //                sdb.bookbilldate = dt.Rows[i]["bookbilldate"].ToString();
    //                sdb.bookmrp = dt.Rows[i]["bookmrp"].ToString();
    //                sdb.bookdiscount = dt.Rows[i]["bookdiscount"].ToString();
    //                sdb.bookprice = dt.Rows[i]["bookprice"].ToString();
    //                sdb.bookvendor = dt.Rows[i]["bookvendor"].ToString();
    //                sdb.bookregdate = dt.Rows[i]["bookregdate"].ToString();

    //                //sdb.bookaccessionno = dt.Rows[i]["bookaccessionno"].ToString();

    //            }

    //            confirm.Add(sdb);
    //        }
    //        return confirm.ToArray();

    //    }
    //}


    public bookmasternew[] get_cd_data(string cd, string cd_name, string type)
    {
        List<bookmasternew> confirm = new List<bookmasternew>();
        if (cd != "")
        {
            string str = "";
            string id = "";
            id = cd.Replace(",", "','");
            if (cd.Contains(","))
            {
                if (type == "cd")
                {
                    str = "select distinct TITLE,author from lib_CD_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                }
                else if (type == "book")
                {

                    str = "select distinct TITLE,author from lib_book_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                }
                else
                {
                    str = "select distinct TITLE,author from lib_MAP_MASTER where ACCESSION_NO in ('" + id + "') and del_flag=0";

                }
            }
            else
            {
                if (type == "cd")
                {
                    str = "select distinct TITLE,author from lib_CD_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                }
                else if (type == "book")
                {

                    str = "select distinct TITLE,author from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                }
                else
                {
                    str = "select distinct TITLE,author from lib_MAP_MASTER where ACCESSION_NO='" + cd + "' and del_flag=0";

                }
            }
            DataTable dt_tit = new DataTable();
            dt_tit = cls1.fillDataTable(str);
            if (dt_tit.Rows.Count == 1)
            {
                string strquery = "";
                if (type == "cd")
                {
                    if (id.Contains(","))
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + new_id + "') and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            //    if (cd.Contains(","))
                            //    {
                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1 ,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                            //}
                            //else
                            //{
                            //    strquery = "select * ,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";
                            //}
                        }

                    }
                    else
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + new_id + "') and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                        }
                    }

                }
                else if (type == "book")
                {
                    if (id.Contains(","))
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_book_master where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_book_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                        }


                    }
                    else
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_book_master where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0 ";
                        }
                        //  strquery = "select * from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                    }
                    // strquery = "select * from lib_book_master where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";
                }
                else
                {
                    if (cd != "" && cd_name != "")
                    {
                        string new_id = "";
                        new_id = cd_name.Replace(",", "','");

                        strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_MAP_MASTER where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                    }
                    else
                    {
                        strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_MAP_MASTER where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";

                    }


                }
                string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

                using (SqlConnection con = new SqlConnection(constr))
                {

                    DataTable dt = cls1.fillDataTable(strquery);
                    if (dt.Rows.Count > 0)
                    {

                        for (int i = 0; i <= dt.Rows.Count - 1; i++)
                        {

                            bookmasternew sdb = new bookmasternew();

                            // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                            sdb.cd_id = dt.Rows[0]["ID"].ToString();
                            sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString().Replace("''", "'");
                            //string auth_id = "'" + dt.Rows[i]["AUTHOR"].ToString().Replace(",", "','") + "'";
                            //string auth_name = "";

                            //string aut_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + auth_id + ")) T1 FOR XML PATH('')),1,1,'') ";
                            DataTable auth_dt = new DataTable();
                            //if (auth_dt.Rows.Count > 0)
                            //{
                            //    auth_name = auth_dt.Rows[0][0].ToString();
                            //}

                            sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                            sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                            sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                            sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                            sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();

                            //string pub_id = "'" + dt.Rows[i]["PUBLISHER"].ToString().Replace(",", "','") + "'";
                            //string pub_name = "";

                            //string pub_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + pub_id + ")) T1 FOR XML PATH('')),1,1,'') ";
                            //DataTable pub_dt = cls1.fillDataTable(aut_str);
                            //if (pub_dt.Rows.Count > 0)
                            //{
                            //    pub_name = pub_dt.Rows[0][0].ToString();
                            //}
                            sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                            sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                            if (type == "book")
                            {
                                sdb.bookedition = dt.Rows[0]["EDITION"].ToString();
                                sdb.bookcallno = dt.Rows[0]["CALLNO"].ToString();
                                sdb.booknoofpages = dt.Rows[0]["NOOFPAGES"].ToString();
                                sdb.bookcatogary = dt.Rows[0]["CATOGARY"].ToString();
                                sdb.bookbound = dt.Rows[0]["BOUND"].ToString();
                            }
                            if (type == "cd")
                            {
                                sdb.cd_DURATION = dt.Rows[0]["DURATION"].ToString();
                            }
                            else
                            {
                                sdb.cd_DURATION = "";
                                sdb.CALLNO = dt.Rows[0]["CALLNO"].ToString();
                            }
                            if (type != "book")
                            {
                                sdb.cd_DEPARTMENT = dt.Rows[0]["DEPARTMENT"].ToString();
                            }
                            sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                            sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                            sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                            sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                            sdb.prefix = dt.Rows[i]["prefix"].ToString();

                            sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                            if (dt.Rows[i]["billdt1"].ToString() != "" && dt.Rows[i]["billdt1"].ToString() != null)
                            {
                                sdb.cd_BILL_DT = Convert.ToString(Convert.ToDateTime(dt.Rows[i]["billdt1"].ToString()).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                sdb.cd_BILL_DT = Convert.ToString(Convert.ToDateTime(DateTime.Now).ToString("dd/MM/yyyy"));
                            }
                            sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                            sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                            sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                            sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                            //string ven_id = "'" + dt.Rows[i]["VENDOR"].ToString().Replace(",", "','") + "'";
                            //string ven_name = "";

                            //string ven_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + ven_id + ")) T1 FOR XML PATH('')),1,1,'') ";
                            //DataTable ven_dt = cls1.fillDataTable(ven_str);
                            //if (ven_dt.Rows.Count > 0)
                            //{
                            //    ven_name = ven_dt.Rows[0][0].ToString();
                            //}
                            sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                            if (dt.Rows[i]["Regdt1"].ToString() != "" && dt.Rows[i]["Regdt1"].ToString() != null)
                            {
                                sdb.cd_REG_DT = Convert.ToString(Convert.ToDateTime(dt.Rows[i]["Regdt1"]).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                sdb.cd_REG_DT = Convert.ToString(Convert.ToDateTime(DateTime.Now).ToString("dd/MM/yyyy"));
                            }
                            //string don_id = "'" + dt.Rows[i]["DONOR_ID"].ToString().Replace(",", "','") + "'";
                            //string don_name = "";

                            //string don_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + don_id + ")) T1 FOR XML PATH('')),1,1,'') ";
                            //DataTable don_dt = cls1.fillDataTable(aut_str);
                            //if (don_dt.Rows.Count > 0)
                            //{
                            //    don_name = don_dt.Rows[0][0].ToString();
                            //}
                            sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();
                            sdb.cd_msg = "get";
                            confirm.Add(sdb);

                        }



                    }

                }
            }
            else if (dt_tit.Rows.Count > 1)
            {
                bookmasternew sdb = new bookmasternew();
                sdb.cd_msg = "multiple";
                string tit = ""; string mis_id = ""; string first_auth = ""; string auth_mis_id = "";
                string[] cd_arr = cd.Split(',');
                for (int j = 0; j < cd_arr.Length; j++)
                {
                    string cd_chk_str = "";
                    if (type == "cd")
                    {
                        cd_chk_str = "select distinct TITLE,author from lib_CD_master where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";
                    }
                    else if (type == "book")
                    {

                        cd_chk_str = "select distinct TITLE,author from lib_book_master where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";
                    }
                    else
                    {
                        cd_chk_str = "select distinct TITLE,author from lib_MAP_MASTER where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";

                    }
                    DataTable dt_cd_arr = new DataTable();
                    dt_cd_arr = cls1.fillDataTable(cd_chk_str);
                    if (j == 0)
                    {
                        tit = dt_cd_arr.Rows[0][0].ToString();
                        first_auth = dt_cd_arr.Rows[0][1].ToString();

                    }

                    if (dt_cd_arr.Rows[0][0].ToString() != tit)
                    {
                        if (mis_id == "")
                        {
                            mis_id = Convert.ToString(cd_arr[j]);
                        }
                        else
                        {
                            mis_id = mis_id + "," + Convert.ToString(cd_arr[j]);
                        }

                    }
                    if (dt_cd_arr.Rows[0][1].ToString() != first_auth)
                    {
                        if (auth_mis_id == "")
                        {
                            auth_mis_id = Convert.ToString(cd_arr[j]);
                        }
                        else
                        {
                            auth_mis_id = auth_mis_id + "," + Convert.ToString(cd_arr[j]);
                        }
                    }
                }
                sdb.cd_id = mis_id;
                sdb.Auth_cd_id = auth_mis_id;
                confirm.Add(sdb);


            }
            else
            {
                bookmasternew sdb = new bookmasternew();
                sdb.cd_msg = "";
                confirm.Add(sdb);
            }
        }
        else
        {
            string strquery = "";
            if (type == "cd")
            {
                strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1 ,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where TITLE=N'" + cd_name + "' and del_flag=0";
            }
            else if (type == "book")
            {
                strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_book_master where TITLE=N'" + cd_name + "' and del_flag=0";

            }
            else
            {
                strquery = "select *,convert(date,BILL_DT,105) as billdt1,convert(date,REG_DT,105) as Regdt1,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_MAP_MASTER where TITLE=N'" + cd_name + "' and del_flag=0";

            }
            string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

            using (SqlConnection con = new SqlConnection(constr))
            {

                DataTable dt = cls1.fillDataTable(strquery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i <= dt.Rows.Count - 1; i++)
                    {

                        bookmasternew sdb = new bookmasternew();

                        // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                        sdb.cd_id = dt.Rows[i]["ID"].ToString();
                        sdb.cd_TITLE = dt.Rows[i]["TITLE"].ToString();
                        DataTable auth_dt = new DataTable();

                        sdb.cd_AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                        sdb.cd_ISBN = dt.Rows[i]["ISBN"].ToString();
                        sdb.cd_LANG = dt.Rows[i]["LANG"].ToString();
                        sdb.cd_ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                        sdb.cd_KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                        // sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();

                        sdb.cd_PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                        sdb.cd_YEAR = dt.Rows[i]["YEAR"].ToString();
                        if (type == "book")
                        {
                            sdb.bookedition = dt.Rows[i]["EDITION"].ToString();
                            sdb.bookcallno = dt.Rows[i]["CALLNO"].ToString();
                            sdb.booknoofpages = dt.Rows[i]["NOOFPAGES"].ToString();
                            sdb.bookcatogary = dt.Rows[i]["CATOGARY"].ToString();
                            sdb.bookbound = dt.Rows[i]["BOUND"].ToString();
                        }
                        if (type == "cd")
                        {
                            sdb.cd_DURATION = dt.Rows[i]["DURATION"].ToString();
                        }
                        else
                        {
                            sdb.cd_DURATION = "";
                            sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                        }
                        if (type != "book")
                        {
                            sdb.cd_DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                        }

                        //sdb.cd_DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                        sdb.cd_ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                        sdb.cd_SUBJ = dt.Rows[i]["SUBJ"].ToString();
                        sdb.cd_REMARK = dt.Rows[i]["REMARK"].ToString();
                        sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                        sdb.prefix = dt.Rows[i]["prefix"].ToString();

                        sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                        sdb.cd_BILL_DT = Convert.ToString(Convert.ToDateTime(dt.Rows[i]["billdt1"].ToString()).ToString("dd/MM/yyyy"));
                        sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                        sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                        sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                        sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                        //string ven_id = "'" + dt.Rows[i]["VENDOR"].ToString().Replace(",", "','") + "'";
                        //string ven_name = "";

                        //string ven_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + ven_id + ")) T1 FOR XML PATH('')),1,1,'') ";
                        //DataTable ven_dt = cls1.fillDataTable(ven_str);
                        //if (ven_dt.Rows.Count > 0)
                        //{
                        //    ven_name = ven_dt.Rows[0][0].ToString();
                        //}
                        sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                        sdb.cd_REG_DT = Convert.ToString(Convert.ToDateTime(dt.Rows[i]["Regdt1"]).ToString("dd/MM/yyyy"));
                        sdb.cd_DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString();
                        sdb.cd_msg = "get";
                        confirm.Add(sdb);

                    }



                }

            }
        }

        return confirm.ToArray();
    }


    public bookmasternew[] Get_cd_Title()
    {

        string strquery = "select distinct TITLE from lib_cd_master";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        List<bookmasternew> confirm = new List<bookmasternew>();
        using (SqlConnection con = new SqlConnection(constr))
        {

            DataTable dt = cls1.fillDataTable(strquery);




            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    bookmasternew sdb = new bookmasternew();

                    // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                    // sdb.cd_id = dt.Rows[i]["cd_id"].ToString();
                    sdb.cd_name = dt.Rows[i]["TITLE"].ToString();
                    confirm.Add(sdb);

                }




            }
        }
        return confirm.ToArray();
    }
    public List<ListItem> cd_dept()
    {
        string qry = "select * from m_crs_course_tbl where del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["course_id"].ToString(),
                                Text = sdr["course_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public MAP[] LoadMap(string accession)
    {
        string strquerycd = "select a.*,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_MAP_MASTER a where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        //string strquerycd = "select a.* from lib_MAP_MASTER a where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            List<MAP> confirm = new List<MAP>();
            DataTable dt = cls1.fillDataTable(strquerycd);
            string auth_name = "";
            string pub_name = "";
            string don_name = "";

            //if (dt.Rows.Count > 0)
            //{
            //    string auth_id = "'" + dt.Rows[0]["AUTHOR"].ToString().Replace(",", "','") + "'";
            //    string aut_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + auth_id + ") and general_type='A') T1 FOR XML PATH('')),1,1,'') ";
            //    DataTable auth_dt = cls1.fillDataTable(aut_str);
            //    if (auth_dt.Rows.Count > 0)
            //    {
            //        auth_name = auth_dt.Rows[0][0].ToString();
            //    }


            //    ///pub///
            //    ///
            //    string pub_id = "'" + dt.Rows[0]["PUBLISHER"].ToString().Replace(",", "','") + "'";

            //    string pub_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + pub_id + ") and general_type='p') T1 FOR XML PATH('')),1,1,'') ";
            //    DataTable pub_dt = cls1.fillDataTable(pub_str);

            //    if (pub_dt.Rows.Count > 0)
            //    {
            //        pub_name = pub_dt.Rows[0][0].ToString();
            //    }

            //    //donor

            //    string don_id = "'" + dt.Rows[0]["DONOR_ID"].ToString().Replace(",", "','") + "'";

            //    string don_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + don_id + ") and general_type='D') T1 FOR XML PATH('')),1,1,'') ";
            //    DataTable don_dt = cls1.fillDataTable(don_str);
            //    if (don_dt.Rows.Count > 0)
            //    {
            //        don_name = don_dt.Rows[0][0].ToString();
            //    }
            //}
            if (dt.Rows.Count > 0)
            {
                MAP sdb = new MAP();
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    sdb.ID = dt.Rows[i]["ID"].ToString();
                    sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                    sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                    sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                    sdb.LANG = dt.Rows[i]["LANG"].ToString();
                    sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                    sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                    sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                    sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                    sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                    sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                    sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                    sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                    sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                    sdb.ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                    sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                    sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                    sdb.MRP = dt.Rows[i]["MRP"].ToString();
                    sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                    sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                    sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                    sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                    sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                    sdb.prefix = dt.Rows[i]["prefix"].ToString();

                }
                confirm.Add(sdb);
            }
            return confirm.ToArray();

        }
    }
    public MAP[] load_cd_book(string accession, string type)
    {
        string strquerycd = "";
        if (type == "cd")
        {
            strquerycd = "select *,case when bill_dt like '%1900%' then getdate() else bill_dt end bill_dt1 from lib_cd_master where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        }
        else if (type == "book")
        {
            strquerycd = "select *,case when bill_dt like '%1900%' then getdate() else bill_dt end bill_dt1 from lib_book_master where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            List<MAP> confirm = new List<MAP>();
            DataTable dt = cls1.fillDataTable(strquerycd);
            if (dt.Rows.Count > 0)
            {
                MAP sdb = new MAP();
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    sdb.ID = dt.Rows[i]["ID"].ToString();


                }
                confirm.Add(sdb);
            }
            return confirm.ToArray();

        }
    }

    //for language

    public bool AddLanguage(string qry)
    {
        return cls1.DMLqueries(qry);
    }

    public List<ListItem> fillDropdown()
    {
        string qry = "select * from ll_language_master order by Language asc ";
        //var txtaddlanguage = "";

        //string qry = "if not exists (select * from ll_language_master where language='" + txtaddlanguage + "')begin insert into ll_language_master values('" + txtaddlanguage + "')end";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        listData.Add(new ListItem
                        {
                            Value = sdr["id"].ToString(),
                            Text = sdr["language"].ToString()
                        });
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> LoadPrefix(string type)
    {
        String qry = "";
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        if (type == "map")
        {
            qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix  from lib_MAP_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) <>''  order by 1";
        }
        else if (type == "cd")
        {
            qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix  from lib_CD_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) <>''  order by 1";
        }
        else
        {
            qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix  from lib_book_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) <>''  order by 1";

        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["prefix"].ToString(),
                            Text = sdr["prefix"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public string getMaxAccession(string accession, string type)
    {
        String qry = "";
        if (type == "map")
        {
            qry = "select  top 1  ACCESSION_NO,SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as acc from lib_map_MASTER where substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1))='" + accession + "' group by ACCESSION_NO order by SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) desc";

        }
        else if (type == "cd")
        {
            qry = "select  top 1  ACCESSION_NO,SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as acc from lib_CD_MASTER where substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1))='" + accession + "' group by ACCESSION_NO order by SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) desc";

        }
        else
        {
            qry = "select  top 1  ACCESSION_NO,SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as acc from lib_book_MASTER where substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1))='" + accession + "' group by ACCESSION_NO order by SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) desc";


        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                string acc = "";
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        acc = sdr["acc"].ToString() + '|' + sdr["ACCESSION_NO"].ToString();
                    }
                }
                con.Close();
                return acc;
            }
        }
    }

    public book_master[] CheckAlready(string booktitle, string edition, string author, string publisher, string accession)
    {
        string strquery = "";

        //strquery = "select * from lib_book_master where TITLE='" + booktitle + "' and EDITION='" + edition + "' and AUTHOR='" + author + "' and PUBLISHER='"+publisher+"' and accession_no in ('"+accession+"')  ";
        strquery = "select * from lib_book_master where  accession_no in ('" + accession + "')  ";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        List<book_master> confirm = new List<book_master>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            book_master sdb = new book_master();

            DataTable dt = cls1.fillDataTable(strquery);
            if (dt.Rows.Count > 0)
            {


                // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                sdb.id = "1";
            }
            else
            {

                sdb.id = "0";



            }
            confirm.Add(sdb);
        }
        return confirm.ToArray();
    }



    //Author ID Insert


    //Insert 

    public bool AuthorInsert(string generalid, string generaltype, string generalname, string contact1, string contact2, string email, string location, string address, string not_in_use, string userid)
    {
        bool Author = false;
        string str = "";
        string str1 = "select  [dbo].[getIdOf]('ll_general_master')";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str1);
        string str2 = "";
        if (dt.Rows.Count > 0)
        {
            str2 = "update Master_System_T set runningvalue = runningvalue + 1 where tablename='ll_general_master'";
        }

        string cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        str = "pro_ll_general_insert";
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@type", "insert");
                cmd.Parameters.AddWithValue("@general_id", dt.Rows[0][0].ToString());
                cmd.Parameters.AddWithValue("@general_type", generaltype);
                cmd.Parameters.AddWithValue("@general_name", generalname);
                cmd.Parameters.AddWithValue("@contact_1", contact1);
                cmd.Parameters.AddWithValue("@contact_2", contact2);
                cmd.Parameters.AddWithValue("@email", email);
                cmd.Parameters.AddWithValue("@location", location);
                cmd.Parameters.AddWithValue("@address ", address);
                cmd.Parameters.AddWithValue("@not_in_use", not_in_use);
                cmd.Parameters.AddWithValue("@user_id", userid);
                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    Author = true;
                    if (message == "TRANSACTION SUCCESSFULL")
                    {
                        cls1.DMLqueries(str2);
                    }
                }

                return Author;

            }
        }
    }

    public overallbill_nontech[] get_overall_nonteach()
    {
        string qry = "";
        //    qry = "select x.emp_id,Employee_Name,isnull([Under Study],'0') as under,isnull([Lab Assistant],'0') as lab_as,isnull([Lab Attendent],'0') as lab_at , "
        //+ " isnull([Dispatch Clerk],'0') as dis_cl, isnull([Water Men],'0') water_m,isnull([Bell Men],'0') as bell_m,isnull([Preparation],'0') as prep,"
        //+ " sum(cast(isnull([Under Study],0)as int)+cast(isnull([Lab Assistant],0) as int)+cast(isnull([Lab Attendent],0) as int)+cast(isnull([Dispatch Clerk],0) as int)+cast(isnull([Water Men],0) as int)+ "
        //+ " cast(isnull([Bell Men],0)  as int)+cast(isnull([Preparation],0) as int)) as Total_Bill, convert(varchar(11) ,getdate(),100) as datee,Account_No ,Bill_No  from (select emp_id,Employee_Name,[Under Study],"
        //+ " [Lab Assistant],[Lab Attendent],[Dispatch Clerk],[Water Men],[Bell Men],[Preparation],bank_acc_no as Account_No, bill_no as Bill_No from"
        //+ " (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='under_st' then 'Under Study' when status='lab_asst' "
        //+ " then 'Lab Assistant' when status='lab_att' then 'Lab Attendent'  when status='dispatch' then 'Dispatch Clerk' when status='water' then 'Water Men' when status='bell' then 'Bell Men' when status='prepare' "
        //+ " then 'Preparation'  end as status_final,bank_acc_no,bill_no from emp_billing_details_non_mar2020 b,EmployeePersonal p  where b.Emp_Id=p.emp_id and status not like  '%other%' and bill_no "
        //+ " not in (select billno from bill_lock_nonteach where islock=1)  group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no,bill_no) as t pivot (max(amount) for status_final in ([Under Study],[Lab Assistant],"
        //+ " [Lab Attendent],[Dispatch Clerk],[Water Men],[Bell Men],[Preparation])) pvt) x  group by x.emp_id,employee_name, [Under Study],"
        //+ " [Lab Assistant],[Lab Attendent],[Dispatch Clerk],[Water Men],[Bell Men],[Preparation],Account_No,Bill_No order by  emp_id,Employee_Name";

        qry = "select x.emp_id,upper(Employee_Name) as Employee_Name,isnull([Under Study],'0') as under,isnull([Lab Assistant],'0') as lab_as,isnull([Lab Attendent],'0') as lab_at , "
  + " isnull([Dispatch Clerk],'0') as dis_cl, isnull([Water Men],'0') water_m,isnull([Bell Men],'0') as bell_m,isnull([Preparation],'0') as prep,"
  + " sum(cast(isnull([Under Study],0)as int)+cast(isnull([Lab Assistant],0) as int)+cast(isnull([Lab Attendent],0) as int)+cast(isnull([Dispatch Clerk],0) as int)+cast(isnull([Water Men],0) as int)+ "
  + " cast(isnull([Bell Men],0)  as int)+cast(isnull([Preparation],0) as int)) as Total_Bill, convert(varchar(11) ,getdate(),100) as datee,Account_No   from (select emp_id,Employee_Name,[Under Study],"
  + " [Lab Assistant],[Lab Attendent],[Dispatch Clerk],[Water Men],[Bell Men],[Preparation],bank_acc_no as Account_No from"
  + " (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='under_st' then 'Under Study' when status='lab_asst' "
  + " then 'Lab Assistant' when status='lab_att' then 'Lab Attendent'  when status='dispatch' then 'Dispatch Clerk' when status='water' then 'Water Men' when status='bell' then 'Bell Men' when status='prepare' "
  + " then 'Preparation'  end as status_final,bank_acc_no from emp_billing_details_non_mar2020 b,EmployeePersonal p  where b.Emp_Id=p.emp_id and status not like  '%other%'   group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no) as t pivot (max(amount) for status_final in ([Under Study],[Lab Assistant],"
  + " [Lab Attendent],[Dispatch Clerk],[Water Men],[Bell Men],[Preparation])) pvt) x  group by x.emp_id,employee_name, [Under Study],"
  + " [Lab Assistant],[Lab Attendent],[Dispatch Clerk],[Water Men],[Bell Men],[Preparation],Account_No order by  emp_id,Employee_Name";
        DataSet ds = cls.fillDataset(qry);
        List<overallbill_nontech> details = new List<overallbill_nontech>();
        if (ds.Tables[0].Rows.Count > 0)
        {
            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                overallbill_nontech ove = new overallbill_nontech();
                ove.staff_id = drrow["emp_id"].ToString();
                ove.emp_name = drrow["Employee_Name"].ToString();
                ove.emp_acc = drrow["Account_No"].ToString();

                ove.under_std = drrow["under"].ToString();
                ove.lab_as = drrow["lab_as"].ToString();
                ove.lab_at = drrow["lab_at"].ToString();
                ove.dis_cl = drrow["dis_cl"].ToString();
                ove.water_m = drrow["water_m"].ToString();
                ove.bell_m = drrow["bell_m"].ToString();
                ove.prep = drrow["prep"].ToString();



                ove.Total_Bill = drrow["Total_Bill"].ToString();


                ove.msg = "";
                details.Add(ove);
            }

        }
        return details.ToArray();


    }

    //End

    //GetBookID
    public string Get_ID(string table_name)
    {
        string bookid = "";
        string qry = "select  [dbo].[getIdOf]('" + table_name + "') as ID";

        DataSet dsid = cls1.fillDataset(qry);
        if (dsid.Tables[0].Rows.Count > 0)
        {
            bookid = dsid.Tables[0].Rows[0]["ID"].ToString();
        }

        else
        {
            bookid = "";
        }

        return bookid;

    }

    //search_image
    public string search_image(string bookid)
    {
        string cover_image;
        string qry = "select cover_image from ll_book_master where book_id='" + bookid + "'";

        DataSet dsid = cls1.fillDataset(qry);
        if (dsid.Tables[0].Rows.Count > 0)
        {

            cover_image = dsid.Tables[0].Rows[0]["cover_image"].ToString();
            Byte[] img = (Byte[])dsid.Tables[0].Rows[0]["cover_image"];
            cover_image = Convert.ToBase64String(img);

        }
        else
        {
            cover_image = null;
        }
        return cover_image;

    }


    //GetAuthor
    public List<ListItem> GetAuthors()
    {
        DataSet dss = new DataSet();
        // string strQuery = "SELECT DD.DD_NAME as DDName,DD.DD_NO FROM description_details DD,description_master DM  WHERE DD.DM_NO = DM.DM_NO AND DM.DM_NO='" + parentid + "' AND DD.DEL_FLAG<>1";

        string strquery = "select  top 100 general_id,general_name ,not_in_use from ll_general_master where general_type='a' and not_in_use=0 and general_name not like'%UNKNOWN%' order by curr_date desc";
        // dss = cls1.fillDataset(strQuery);
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(strquery))
            {
                List<ListItem> subCrs = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subCrs.Add(new ListItem
                        {
                            Value = sdr["general_id"].ToString(),
                            Text = sdr["general_name"].ToString()
                        });
                    }
                }
                con.Close();
                return subCrs;
            }
        }

    }
    // public lib_report[] report(string val)
    //{
    //    List<lib_report> confirm = new List<lib_report>();
    //    if (val == "p")
    //    {
    //        string qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix  from lib_book_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) <>''  order by 1";

    //        DataTable dt = cls1.fillDataTable(qry);
    //        if (dt.Rows.Count > 0)
    //        {

    //            for (int i = 0; i <= dt.Rows.Count - 1; i++)
    //            {
    //                lib_report sdb = new lib_report();
    //               // string str = "select count(accession_no) as cnt from lib_book_master where accession_no like '%" + dt.Rows[i][0].ToString() + "%'";
    //                string str = "select  count(accession_no) as cnt from lib_book_master where accession_no like '%" + dt.Rows[i][0].ToString() + "%' and Left(accession_no,patindex('%[0-9]%',accession_no)-1)='" + dt.Rows[i][0].ToString() + "'";
    //                DataTable dt1 = cls1.fillDataTable(str);
    //                sdb.prefix = dt.Rows[i]["prefix"].ToString();
    //                sdb.count = dt1.Rows[0]["cnt"].ToString();
    //                confirm.Add(sdb);

    //            }

    //            string str2 = "select count(accession_no) from lib_book_master";
    //            lib_report sdb1 = new lib_report();
    //            DataTable dt2 = cls1.fillDataTable(str2);
    //            sdb1.prefix = "Total No. Of Books";
    //            sdb1.count = dt2.Rows[0][0].ToString();
    //            confirm.Add(sdb1);
    //        }
    //    }
    //    else if (val == "B")
    //    {
    //        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";
    //        string strquerycd = "select top(10)* from lib_book_master";
    //        DataTable dt = cls1.fillDataTable(strquerycd);

    //        if (dt.Rows.Count > 0)
    //        {

    //            for (int i = 0; i <= dt.Rows.Count - 1; i++)
    //            {
    //                lib_report sdb = new lib_report();
    //                //  sdb.ID = dt.Rows[i]["ID"].ToString();
    //                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
    //                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
    //                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
    //                sdb.LANG = dt.Rows[i]["LANG"].ToString();
    //                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
    //                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
    //                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
    //                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
    //                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
    //                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
    //                sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
    //                sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
    //                sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
    //                sdb.ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
    //                sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
    //                sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
    //                sdb.MRP = dt.Rows[i]["MRP"].ToString();
    //                sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
    //                sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
    //                sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
    //                sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
    //                sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
    //                confirm.Add(sdb);
    //            }

    //        }
    //    }
    //    return confirm.ToArray();


    //}

    //public lib_report[] search(string book_name,string author,string publisher,string keyword,string isbn)
    //{
    //    List<lib_report> confirm = new List<lib_report>();

    //    string whr = "";
    //        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";
    //    string strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from lib_book_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";
    //    if(book_name !=""){
    //    whr="title like N'" + book_name + "%'";
    //    }
    //    if (author != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "author like N'" + author + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and author like N'" + author + "%'";
    //        }
    //    }
    //    if (publisher != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "publisher like N'" + publisher + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and publisher like N'" + publisher + "%'";
    //        }
    //    }
    //    if (keyword != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "keyword like N'" + keyword + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and keyword like N'" + keyword + "%'";
    //        }
    //    }
    //    if (isbn != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "isbn like N'" + isbn + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and isbn like N'" + isbn + "%'";
    //        }
    //    }
    //    strquerycd = strquerycd + whr;
    //        DataTable dt = cls1.fillDataTable(strquerycd);

    //        if (dt.Rows.Count > 0)
    //        {

    //            for (int i = 0; i <= dt.Rows.Count - 1; i++)
    //            {
    //                lib_report sdb = new lib_report();
    //                //  sdb.ID = dt.Rows[i]["ID"].ToString();
    //                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
    //                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
    //                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
    //                sdb.LANG = dt.Rows[i]["LANG"].ToString();
    //                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
    //                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
    //                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
    //                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
    //                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
    //                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
    //                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
    //                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
    //                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
    //                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'","''") + "'";
    //                DataTable dt1 = cls1.fillDataTable(str);
    //                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",","','").Replace(" ","") + "') and issue_return='0'";
    //                DataTable dt11=cls1.fillDataTable(str1);
    //                string[] tot_iss=dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
    //                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
    //                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
    //                sdb.issued = Convert.ToString(dt11.Rows.Count);
    //                sdb.available = Convert.ToString(ava);
    //                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
    //                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
    //                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
    //                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
    //                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
    //                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
    //                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
    //                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
    //                confirm.Add(sdb);
    //            }

    //        }
    //    return confirm.ToArray();


    //}

    public lib_report[] report(string val, string prefix_val)
    {
        List<lib_report> confirm = new List<lib_report>();
        if (val == "p")
        {
            string qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix  from lib_book_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) <>''  order by 1";

            DataTable dt = cls1.fillDataTable(qry);
            if (dt.Rows.Count > 0)
            {

                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    lib_report sdb = new lib_report();
                    // string str = "select count(accession_no) as cnt from lib_book_master where accession_no like '%" + dt.Rows[i][0].ToString() + "%'";
                    // string str = "select  count(accession_no) as cnt from lib_book_master where accession_no like '%" + dt.Rows[i][0].ToString() + "%' and Left(accession_no,patindex('%[0-9]%',accession_no)-1)='" + dt.Rows[i][0].ToString() + "'";// order by cast (replace(accession_no,'"+prefix_val.Trim()+"','') as int)";
                    string str = "select distinct cast(replace(ACCESSION_NO,'" + dt.Rows[i][0].ToString().Trim() + "','') as int) from lib_book_master where accession_no like '" + dt.Rows[i][0].ToString().Trim() + "%' and Left(accession_no,patindex('%[0-9]%',accession_no)-1)='" + dt.Rows[i][0].ToString().Trim() + "' group by ACCESSION_NO order by  cast(replace(ACCESSION_NO,'" + dt.Rows[i][0].ToString().Trim() + "','') as int)";
                    DataTable dt1 = cls1.fillDataTable(str);
                    sdb.prefix = dt.Rows[i]["prefix"].ToString();
                    // sdb.count = dt1.Rows[0]["cnt"].ToString();
                    sdb.count = Convert.ToString(dt1.Rows.Count);
                    confirm.Add(sdb);

                }

                string str2 = "select count(accession_no) from lib_book_master";
                lib_report sdb1 = new lib_report();
                DataTable dt2 = cls1.fillDataTable(str2);
                sdb1.prefix = "Total No. Of Books";
                sdb1.count = dt2.Rows[0][0].ToString();
                confirm.Add(sdb1);
            }
        }
        else if (val == "B")
        {
            //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

            string strquerycd = "select  * from lib_book_master where accession_no like '%" + prefix_val.Trim() + "%' and Left(accession_no,patindex('%[0-9]%',accession_no)-1)='" + prefix_val.Trim() + "' order by cast (replace(accession_no,'" + prefix_val.Trim() + "','') as int)";
            DataTable dt = cls1.fillDataTable(strquerycd);

            if (dt.Rows.Count > 0)
            {

                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    lib_report sdb = new lib_report();
                    //  sdb.ID = dt.Rows[i]["ID"].ToString();
                    sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                    sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                    sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                    sdb.LANG = dt.Rows[i]["LANG"].ToString();
                    // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                    sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                    sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                    sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                    sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                    //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                    sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                    sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                    sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                    sdb.ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                    sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                    sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                    sdb.MRP = dt.Rows[i]["MRP"].ToString();
                    sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                    sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                    sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                    sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                    sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                    confirm.Add(sdb);
                }

            }
        }
        else if (val == "category")
        {
            //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

            string strquerycd = "select * from lib_book_master where CATOGARY='" + prefix_val + "' and del_flag='0'";
            DataTable dt = cls1.fillDataTable(strquerycd);

            if (dt.Rows.Count > 0)
            {

                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    lib_report sdb = new lib_report();
                    //  sdb.ID = dt.Rows[i]["ID"].ToString();
                    sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                    sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                    sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                    sdb.LANG = dt.Rows[i]["LANG"].ToString();
                    // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                    sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                    sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                    sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                    sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                    //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                    sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                    sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                    sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                    sdb.ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                    sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                    sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                    sdb.MRP = dt.Rows[i]["MRP"].ToString();
                    sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                    sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                    sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                    sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                    sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                    confirm.Add(sdb);
                }

            }
        }
        return confirm.ToArray();


    }


    //=============================noc
    public Noc[] noc_report(string fromdt, string todt)
    {
        List<Noc> details = new List<Noc>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dss1 = new DataSet();
            string str = "select distinct a.Stud_id,n.srno,isnull(stud_L_Name,' ')+' '+isnull(stud_F_Name,' ')+' '+isnull(stud_M_Name,' ') as Stud_name,c.Group_title,issue_date,con_noc,prn_no,letter_no,case_no from noc as n left join m_std_studentacademic_tbl as a on n.Stud_id=a.stud_id and a.ayid=n.ayid left join m_std_personaldetails_tbl b on a.stud_id=b.stud_id left join m_crs_subjectgroup_tbl c on a.group_id = c.Group_id left join NOC_Details d on a.stud_id=d.stud_id and n.srno=d.srno where convert(date,issue_date ,105) between  convert(date,'" + fromdt + "' ,105) and  convert(date,'" + todt + "' ,105) order by n.srno";

            dss1 = cls1.fillDataset(str);

            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dss1.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dss1.Tables[0].Rows.Count - 1; i++)
                {
                    Noc nc = new Noc();

                    nc.stud_id = dss1.Tables[0].Rows[i]["Stud_id"].ToString();
                    nc.sr_no = dss1.Tables[0].Rows[i]["srno"].ToString();
                    nc.name = dss1.Tables[0].Rows[i]["Stud_name"].ToString();
                    nc.grp_title = dss1.Tables[0].Rows[i]["Group_title"].ToString();
                    nc.iss_dt = dss1.Tables[0].Rows[i]["issue_date"].ToString();
                    nc.con_noc = dss1.Tables[0].Rows[i]["con_noc"].ToString();
                    nc.prn_no = dss1.Tables[0].Rows[i]["prn_no"].ToString();
                    nc.letter_no = dss1.Tables[0].Rows[i]["letter_no"].ToString();
                    nc.case_no = dss1.Tables[0].Rows[i]["case_no"].ToString();

                    details.Add(nc);
                }
            }
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return details.ToArray();
    }
    public Noc[] get_val(string stud_id)
    {
        List<Noc> details = new List<Noc>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dss1 = new DataSet();
            DataSet dss2 = new DataSet(); DataSet dss3 = new DataSet();
            string str = "select stud_id from m_std_personaldetails_tbl where stud_id='" + stud_id + "';select SUBSTRING(ID_No, 0, CHARINDEX('|', ID_No)) AS prn_no from m_std_studentacademic_tbl where stud_id='" + stud_id + "'";
            dss1 = cls1.fillDataset(str);
            if (dss1.Tables[0].Rows.Count > 0)
            {
                string str2 = "select stud_id from NOC where stud_id='" + stud_id + "' ";
                dss2 = cls1.fillDataset(str2);
                // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
                if (dss2.Tables[0].Rows.Count > 0)
                {
                    string str3 = "select ayid,issue_date,con_noc,prn_no,letter_no,letter_date,case_no,case_date from NOC as a where stud_id='" + stud_id + "'";
                    dss3 = cls1.fillDataset(str3);
                    for (int i = 0; i <= dss3.Tables[0].Rows.Count - 1; i++)
                    {
                        Noc nc = new Noc();

                        nc.letter_dt = dss3.Tables[0].Rows[i]["letter_date"].ToString();
                        nc.case_dt = dss3.Tables[0].Rows[i]["case_date"].ToString();
                        nc.ayid = dss3.Tables[0].Rows[i]["ayid"].ToString();
                        nc.iss_dt = dss3.Tables[0].Rows[i]["issue_date"].ToString();
                        nc.con_noc = dss3.Tables[0].Rows[i]["con_noc"].ToString();
                        nc.prn_no = dss3.Tables[0].Rows[i]["prn_no"].ToString();
                        nc.letter_no = dss3.Tables[0].Rows[i]["letter_no"].ToString();
                        nc.case_no = dss3.Tables[0].Rows[i]["case_no"].ToString();
                        details.Add(nc);
                    }
                }
                else
                {
                    Noc nc = new Noc();
                    nc.ayid = "";
                    nc.prn_no = dss1.Tables[1].Rows[0]["prn_no"].ToString();
                    details.Add(nc);
                }
            }
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return details.ToArray();
    }

    public Noc[] check(string stud_id, string year, string sel_iss_dt)
    {
        List<Noc> details = new List<Noc>();
        //it checks whether entry is present in temp table 
        try
        {
            DateTime d1 = Convert.ToDateTime(DateTime.Today);
            DateTime d2 = Convert.ToDateTime(sel_iss_dt);
            string str = "select  * from NOC where stud_id='" + stud_id + "' and ayid='" + year + "'";
            DataSet ds = cls1.fillDataset(str);
            Noc nc = new Noc();
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 1)
                {

                    string i = Convert.ToString((d2 - d1).TotalDays);
                    nc.i = i;
                }
                nc.i = "";
            }
        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return details.ToArray();
    }
    public Noc[] more(string stud_id, string year, string sr, string emp_id, string value)
    {
        List<Noc> details = new List<Noc>();
        string str = ""; string str1 = ""; bool val = false;
        if (value == "false")
        {
            str = "select n.stud_id,n.srno,n.issue_date,n.issue_count,n.exam_result,n.exam_heldin,n.con_noc,n.letter_no,convert(varchar(10),n.letter_date,105),n.case_no,n.case_date,n.ayid,stud_name,cast([roll no] as varchar(50)) as roll,case b.course_id when 'CRS001' then class when 'CRS003' then class when 'CRS007' then class else Group_title end as 'class',gender,(select MAX(reissue_printdate) from NOC_Details where stud_id='" + stud_id + "') as [Curr_dt] from noc n inner join prijesh_DataView_I_Card a on  a.stud_id=n.stud_id and a.ayid=n.ayid join m_crs_subcourse_tbl b on a.Subcourse_id=b.subcourse_id join m_crs_course_tbl c on b.course_id=c.course_id where n.stud_id='" + stud_id + "' and n.ayid='" + year + "'";
        }
        else { str = "select n.stud_id,n.srno,n.issue_date,n.issue_count,n.exam_result,n.exam_heldin,n.con_noc,n.letter_no,convert(varchar(10),n.letter_date,105),n.case_no,n.case_date,n.ayid,stud_name,cast([roll no] as varchar(50)) as roll,case b.course_id when 'CRS001' then class when 'CRS003' then class when 'CRS007' then class else Group_title end as 'class',gender,(select MAX(reissue_printdate) from NOC_Details where stud_id='" + stud_id + "') as [Curr_dt] from noc n inner join prijesh_DataView_I_Card a on  a.stud_id=n.stud_id and a.ayid=n.ayid join m_crs_subcourse_tbl b on a.Subcourse_id=b.subcourse_id join m_crs_course_tbl c on b.course_id=c.course_id where n.stud_id='" + stud_id + "' and n.ayid='" + year + "' and n.srno='" + sr + "'"; }
        DataSet ds1 = cls1.fillDataset(str);
        if (ds1.Tables[0].Rows.Count > 0)
        {
            str1 = "update  noc set issue_count = issue_count + 1 where stud_id='" + stud_id + "' and ayid='" + year + "';insert into noc_details values ('" + stud_id + "',getdate(),'" + sr + "','" + emp_id + " ')";
            if (cls1.DMLqueries(str1) == true)
            {
                string upt = " update m_std_personaldetails_tbl set Del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' ; update m_std_studentacademic_tbl set Del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' and AYID='" + year + "'; update m_FeeEntry set del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' and AYID='" + year + "' ; update m_std_feedetails_tbl set Del_flag = 1 where Stud_id='" + stud_id + "' and AYID='" + year + "' ; update m_std_pervrecord_tbl set Del_flag = 1 where Stud_id='" + stud_id + "' and AYID='" + year + "' ;  update d_adm_applicant set Del_flag = 1 where Stud_id='" + stud_id + "' and AcdID='" + year + "'; insert into cancel_remark (stud_id,Remark) values ('" + stud_id + "','Noc Token')  ";
                cls1.DMLqueries(upt);
                Noc nc = new Noc();
                for (int i = 0; i <= ds1.Tables[0].Rows.Count - 1; i++)
                {
                    nc.letter_dt = ds1.Tables[0].Rows[i]["letter_date"].ToString();
                    nc.case_dt = ds1.Tables[0].Rows[i]["case_date"].ToString();
                    nc.ayid = ds1.Tables[0].Rows[i]["ayid"].ToString();
                    nc.iss_dt = ds1.Tables[0].Rows[i]["issue_date"].ToString();
                    nc.con_noc = ds1.Tables[0].Rows[i]["con_noc"].ToString();
                    nc.prn_no = ds1.Tables[0].Rows[i]["prn_no"].ToString();
                    nc.letter_no = ds1.Tables[0].Rows[i]["letter_no"].ToString();
                    nc.case_no = ds1.Tables[0].Rows[i]["case_no"].ToString();
                    details.Add(nc);
                }

            }
        }
        return details.ToArray();
    }

    public Noc[] ins_new_sr(string str, string stud_id, string year, string sel_iss_dt)
    {
        List<Noc> details = new List<Noc>();
        string letter_no = "", letter_dt = "", case_no = "", case_dt = "", prn_no = "", issue_count = "";
        DataSet ds = cls1.fillDataset(str);
        if (ds.Tables[0].Rows[0]["con_no"].ToString() == "Not Confirmed")
        {
            letter_no = ""; letter_dt = "1/1/1111"; case_no = ""; case_dt = "1/1/1111";
        }
        else
        {
            letter_no = ds.Tables[0].Rows[0]["letter_no"].ToString();
            if (ds.Tables[0].Rows[0]["letter_date"].ToString() == "" || ds.Tables[0].Rows[0]["letter_date"].ToString() == "--")
            {
                letter_dt = "1/1/1111";
            }
            else { letter_dt = ds.Tables[0].Rows[0]["letter_date"].ToString(); }
            case_no = ds.Tables[0].Rows[0]["case_no"].ToString();
            if (ds.Tables[0].Rows[0]["case_date"].ToString() == "" || ds.Tables[0].Rows[0]["case_date"].ToString() == "--")
            {
                case_dt = "1/1/1111";
            }
            else { case_dt = ds.Tables[0].Rows[0]["case_date"].ToString(); }
            prn_no = ds.Tables[0].Rows[0]["prn_no"].ToString();


        }
        issue_count = "1";
        string query = "";
        if (ds.Tables[0].Rows[0]["con_no"].ToString() == "Not Confirmed")
        {
            query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no) values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_no"].ToString() + "',null,null,null,null,'" + year + "'," + issue_count + ",null) ;insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
            goto query;
        }
        else
        {
            if ((letter_no.ToString() != "" || letter_no.ToString() != "--") && (case_no != "" || case_no != "--"))
            {
                query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no) values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_noc"].ToString() + "','" + letter_no + "','" + letter_dt + "','" + case_no + "','" + case_dt + "','" + year + "'," + issue_count + ",null) ;insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
                goto query;
            }
            if ((letter_no.ToString() == "" || letter_no.ToString() == "--") && (case_no == "" || case_no == "--"))
            {
                if (letter_dt.ToString() == "1/1/1111" && case_dt.ToString() == "1/1/1111")
                {
                    query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no) values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_noc"].ToString() + "',null,null,null,null,'" + year + "'," + issue_count + ",null)  ;insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
                    goto query;
                }
                else
                {
                    if (letter_dt.ToString() == "1/1/1111" && case_dt.ToString() != "1/1/1111")
                    {
                        query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no) values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_noc"].ToString() + "','" + letter_no + "',null,'" + case_no + "','" + case_dt + "','" + year + "'," + issue_count + ",null)   ;insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
                        goto query;
                    }
                    else if (letter_dt.ToString() != "1/1/1111" && case_dt.ToString() == "1/1/1111")
                    {
                        query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no) values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_noc"].ToString() + "','" + letter_no + "','" + letter_dt + "','" + case_no + "',null,'" + year + "'," + issue_count + ",null)  ;insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
                        goto query;
                    }
                }
            }
            else
            {
                if ((letter_no.ToString() == "" || letter_no.ToString() == "--") && (case_no != "" || case_no != "--"))
                {
                    query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no) values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_noc"].ToString() + "',null,null,'" + case_no + "','" + case_dt + "','" + year + "'," + issue_count + ",null)  ;insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
                    goto query;
                }
                else if ((letter_no.ToString() != "" || letter_no.ToString() != "--") && (case_no == "" || case_no == "--"))
                {
                    query = " insert into Noc(stud_id ,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no)  values ('" + stud_id + "','" + sel_iss_dt + "','0','" + ds.Tables[0].Rows[0]["exam_heldin"].ToString() + "','" + ds.Tables[0].Rows[0]["con_noc"].ToString() + "','" + letter_no + "','" + letter_dt + "',null,null,'" + year + "'," + issue_count + ",null);insert into dbo.NOC_Details(stud_id,reissue_printdate,srno) values ('" + stud_id + "',getdate(),(select max(srno) from Noc ))";
                    goto query;
                }
            }
        }
    query:
        if (cls1.DMLqueries(query) == true)
        {
            string upt = " update m_std_personaldetails_tbl set Del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' ; update m_std_studentacademic_tbl set Del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' and AYID='" + year + "'; update m_FeeEntry set del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' and AYID='" + year + "' ; update m_std_feedetails_tbl set Del_flag = 1 where Stud_id='" + stud_id + "' and AYID='" + year + "' ; update m_std_pervrecord_tbl set Del_flag = 1 where Stud_id='" + stud_id + "' and AYID='" + year + "'   update d_adm_applicant set Del_flag = 1 where Stud_id='" + stud_id + "' and AcdID='" + year + "'; insert into cancel_remark (stud_id,Remark) values ('" + stud_id + "','Noc Token')  ";
            cls1.DMLqueries(upt);
            string max_sr = "select max(srno) as srno from Noc";
            DataSet ds_sr = cls1.fillDataset(max_sr);
            Noc nc = new Noc();
            nc.result = ds.Tables[0].Rows[0]["result"].ToString();
            nc.exm_dt = ds.Tables[0].Rows[0]["exam_heldin"].ToString();
            if (ds.Tables[0].Rows[0]["gender"].ToString() == "F")
            {
                nc.gender = "Her";
            }
            else { nc.gender = "His"; }
            nc.con_noc = ds.Tables[0].Rows[0]["con_noc"].ToString();
            //  nc.iss_dt = ds.Tables[0].Rows[0]["con_noc"].ToString();
            if (ds.Tables[0].Rows[0]["letter_no"].ToString() == "")
            {
                nc.letter_no = "--";
            }
            else { nc.letter_no = ds.Tables[0].Rows[0]["letter_no"].ToString(); }
            if (ds.Tables[0].Rows[0]["case_no"].ToString() == "")
            {
                nc.case_no = "--";
            }
            else { nc.letter_dt = ds.Tables[0].Rows[0]["case_no"].ToString(); }
            if (ds.Tables[0].Rows[0]["prn_no"].ToString() == "")
            {
                nc.prn_no = "--";
            }
            else { nc.letter_dt = ds.Tables[0].Rows[0]["prn_no"].ToString(); }
            nc.sr_no = "C-" + ds_sr.Tables[0].Rows[0]["srno"].ToString();
            details.Add(nc);

        }
        return details.ToArray();
    }

    public Noc[] old_stu(string srno, string name, string userid, string mothername, string fname, string mname, string lname, string grp, string roll, string year, string iss_dt, string enroll, string prnno, string uni, string caseno, string date, string gender, string chk_dt, string group_id)
    {
        string letter_no = "", letter_dt = "", case_no = "", case_dt = "", prn_no = "", issue_count = "";
        List<Noc> details = new List<Noc>();
        Noc nc = new Noc();
        if (srno != "")
        {
            string str = "select srno,class,fname,mname,lname,moname,gender,convert(varchar(10),issue_date,105) as issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,issue_count,class_name,ltrim(rtrim(coalesce(lname,'')+' '+fname+' '+coalesce(mname,'')+' '+coalesce(moname,''))) as stud_name,cast(roll as varchar(5)) as roll from dbo.Noc_for_OldStudents where srno='" + srno + "' ";

            DataSet ds = cls1.fillDataset(str);

            DateTime d1 = Convert.ToDateTime(DateTime.Today);
            DateTime d2 = Convert.ToDateTime(ds.Tables[0].Rows[0]["issue_date"].ToString());
            ////Dim diff1 As  = DateDiff(DateInterval.Day, dtt1, dtt2)
            ////        If diff1 > 365 Then
            string diff1 = Convert.ToString((d2 - d1).TotalDays);
            if (Convert.ToInt32(diff1) > 365)
            {
            }
            if (ds.Tables[0].Rows[0]["con_noc"].ToString() == "Confirmed")
            {
                if (ds.Tables[0].Rows[0]["case_date"].ToString() == "")
                {
                    nc.case_dt = "1/1/1111";
                }
                else { nc.case_dt = ds.Tables[0].Rows[0]["case_date"].ToString(); }

                if (ds.Tables[0].Rows[0]["letter_date"].ToString() == "")
                {
                    nc.letter_dt = "1/1/1111";
                }
                else { nc.letter_dt = ds.Tables[0].Rows[0]["letter_date"].ToString(); }
            }
            else
            {
                nc.letter_dt = "1/1/1111";
                nc.case_dt = "1/1/1111";
            }
            nc.iss_dt = ds.Tables[0].Rows[0]["issue_date"].ToString();
            if (ds.Tables[0].Rows[0]["ID_No"].ToString() == "")
            {
                nc.prn_no = "--";
            }
            else { nc.prn_no = ds.Tables[0].Rows[0]["ID_No"].ToString(); }
            if (ds.Tables[0].Rows[0]["letter_date"].ToString() == "")
            {
                nc.letter_dt = "--";
            }
            else { nc.letter_dt = ds.Tables[0].Rows[0]["letter_date"].ToString(); }
            if (ds.Tables[0].Rows[0]["letter_no"].ToString() == "")
            {
                nc.letter_no = "--";
            }
            else { nc.letter_no = ds.Tables[0].Rows[0]["letter_no"].ToString(); }
            if (ds.Tables[0].Rows[0]["case_no"].ToString() == "")
            {
                nc.case_no = "--";
            }
            else { nc.case_no = ds.Tables[0].Rows[0]["case_no"].ToString(); }
            nc.enrol = ds.Tables[0].Rows[0]["con_noc"].ToString();
            nc.name = ds.Tables[0].Rows[0]["stud_name"].ToString();
            nc.sr_no = ds.Tables[0].Rows[0]["srno"].ToString();
            nc.roll_no = ds.Tables[0].Rows[0]["roll_no"].ToString();
            nc.group = ds.Tables[0].Rows[0]["class"].ToString();
            nc.gender = ds.Tables[0].Rows[0]["gender"].ToString();
            string upd = "update dbo.Noc_for_OldStudents set  issue_count = issue_count + 1 where srno='" + srno + "'; insert into dbo.NOC_for_OldStudents_Details values ('" + srno + "',getdate(),'" + userid + "'";
            if (cls1.DMLqueries(upd) == true)
            {
                details.Add(nc);
            }
        }
        else if (fname != "")
        {
            if (gender == "F")
            { nc.gender = "Ms"; nc.gender1 = "Her"; }
            else { nc.gender = "Shri"; nc.gender1 = "His"; }
            string str2 = "select * From m_academic where IsCurrent = 1";
            DataSet dss1 = cls1.fillDataset(str2);
            string ayd = "", sp1 = "", sp2 = "", temp_ayid = "", ac = "";
            ayd = dss1.Tables[0].Rows[0]["AYID"].ToString();
            ac = dss1.Tables[0].Rows[0][1].ToString();
            sp1 = ac.Substring(10, 2);
            sp2 = ac.Substring(22, 2);
            temp_ayid = sp1 + "-" + sp2;
            string str3 = "select max(srno) as sr from Noc_for_OldStudents where srno like '%'+(select substring(Duration,11,2)+'-'+substring(duration,23,2) from m_academic where iscurrent=1)+'%'";
            DataSet dss = cls1.fillDataset(str3);
            string a = dss.Tables[0].Rows[0]["sr"].ToString();
            string cal = "";
            if (a == "" || a == "0") { cal = "0001"; }
            else
            {
                string sep = a.Substring(13, 4);
                string i = Convert.ToString(Convert.ToInt32(sep.ToString()) + 1);
                if (i.Length.ToString() == "1") { cal = "000" + i; }
                else if (i.Length.ToString() == "2") { cal = "00" + i; }
                else if (i.Length.ToString() == "3") { cal = "0" + i; }
                else if (i.Length.ToString() == "4") { cal = i; }

            }

            string p1 = "", p2 = "", p3 = "", p4 = "";
            p1 = "VC/"; p2 = "NOC/"; p3 = "/"; p4 = "-";
            //  string tc1 = sp1 + p4 + sp2;
            string all = p1 + p2 + sp1 + p4 + sp2 + p3 + cal;
            string prn_no1 = "";
            string query = "";
            if (enroll.ToString() == "Confirmed")
            {
                prn_no1 = prn_no;
                if (chk_dt.ToString() == "true")
                {
                    query = "insert into dbo.Noc_for_OldStudents (srno,fname,mname,lname ,Moname,class,roll,gender,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,issue_count,prn_no,user_id,class_name)  values('" + all + "','" + fname + "','" + mname + "','" + lname + "','" + mothername + "','" + grp + "','" + roll + "','" + gender + "','" + iss_dt + "','0','--','" + enroll + "','" + letter_no + "',getdate(),'" + case_no + "',null,1,'" + prnno + "','" + userid + "','" + group_id + "')";
                }
                else
                {
                    query = "insert into dbo.Noc_for_OldStudents (srno,fname,mname,lname ,Moname,class,roll,gender,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,issue_count,prn_no,user_id,class_name)  values('" + all + "','" + fname + "','" + mname + "','" + lname + "','" + mothername + "','" + grp + "','" + roll + "','" + gender + "','" + iss_dt + "','0','--','" + enroll + "','" + letter_no + "',getdate(),'" + case_no + "',null,1,'" + prnno + "','" + userid + "','" + group_id + "')";
                }
            }
            else
            {
                query = "insert into dbo.Noc_for_OldStudents (srno,fname,mname,lname ,Moname,class,roll,gender,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,issue_count,prn_no,user_id,class_name)  values('" + all + "','" + fname + "','" + mname + "','" + lname + "','" + mothername + "','" + grp + "','" + roll + "','" + gender + "','" + iss_dt + "','0','--','" + enroll + "',null,null,null,null,1,null,'" + userid + "','" + group_id + "')";

            } if (prn_no == "")
            {
                prn_no1 = "--";
            }
            else { prn_no1 = prn_no; }
            if (cls1.DMLqueries(query) == true)
            {
                string st_noc = "select srno,class,gender,convert(varchar(10),issue_date,105) as issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,issue_count,class_name,ltrim(rtrim(coalesce(lname,'')+' '+fname+' '+coalesce(mname,'')+' '+coalesce(moname,''))) as stud_name,cast(roll as varchar(5)) as roll  from dbo.Noc_for_OldStudents where srno=(select max(srno) from dbo.Noc_for_OldStudents) ";
                DataSet ds_noc = cls1.fillDataset(st_noc);
                if (ds_noc.Tables[0].Rows.Count > 0)
                {

                    if (ds_noc.Tables[0].Rows[0]["con_noc"].ToString() == "Confirmed")
                    {
                        if (ds_noc.Tables[0].Rows[0]["case_date"].ToString() == "")
                        {
                            nc.case_dt = "1/1/1111";
                        }
                        else { nc.case_dt = ds_noc.Tables[0].Rows[0]["case_date"].ToString(); }

                        if (ds_noc.Tables[0].Rows[0]["letter_date"].ToString() == "")
                        {
                            nc.letter_dt = "1/1/1111";
                        }
                        else { nc.letter_dt = ds_noc.Tables[0].Rows[0]["letter_date"].ToString(); }
                    }
                    else
                    {
                        nc.letter_dt = "1/1/1111";
                        nc.case_dt = "1/1/1111";
                    }
                    nc.iss_dt = ds_noc.Tables[0].Rows[0]["issue_date"].ToString();
                    nc.prn_no = prn_no;
                    if (ds_noc.Tables[0].Rows[0]["letter_date"].ToString() == "")
                    {
                        nc.letter_dt = "--";
                    }
                    else { nc.letter_dt = ds_noc.Tables[0].Rows[0]["letter_date"].ToString(); }
                    if (ds_noc.Tables[0].Rows[0]["letter_no"].ToString() == "")
                    {
                        nc.letter_no = "--";
                    }
                    else { nc.letter_no = ds_noc.Tables[0].Rows[0]["letter_no"].ToString(); }
                    if (ds_noc.Tables[0].Rows[0]["case_no"].ToString() == "")
                    {
                        nc.case_no = "--";
                    }
                    else { nc.case_no = ds_noc.Tables[0].Rows[0]["case_no"].ToString(); }
                    nc.enrol = enroll;
                    nc.name = ds_noc.Tables[0].Rows[0]["stud_name"].ToString();
                    nc.sr_no = ds_noc.Tables[0].Rows[0]["srno"].ToString();
                    nc.roll_no = ds_noc.Tables[0].Rows[0]["roll"].ToString();
                    nc.group = ds_noc.Tables[0].Rows[0]["class"].ToString();
                    nc.gender = ds_noc.Tables[0].Rows[0]["gender"].ToString();
                }
            }
        }
        details.Add(nc);


        return details.ToArray();
    }

    public Noc[] oth_noc(string stud_id, string year, string sel_iss_dt, string enroll, string letter_no, string case_no, string case_dt, string chk_dt, string user_id)
    {
        List<Noc> details = new List<Noc>();
        Noc nc = new Noc();
        string str = "select  l.stud_id,[roll no],case b.course_id when 'CRS001' then class when 'CRS003' then class when 'CRS007' then class else Group_title end as 'class',stud_name,gender from prijesh_DataView_I_Card l join m_crs_subcourse_tbl b on l.Subcourse_id=b.subcourse_id join m_crs_course_tbl c on b.course_id=c.course_id where l.stud_id='" + stud_id + "' and l.ayid='" + year + "'";
        DataSet ds = cls1.fillDataset(str);

        string str1 = "select stud_id,ayid,SUBSTRING(ID_No,0,17) as ID_No,SUBSTRING(ID_No,0,17) as prn_no,roll_no from m_std_studentacademic_tbl  where stud_id='" + stud_id + "' and ayid='" + year + "'";
        DataSet dsID = cls1.fillDataset(str1);
        if (ds.Tables[0].Rows.Count > 0)
        {
            if (ds.Tables[0].Rows[0]["gender"].ToString() == "F")
            { nc.gender = "Ms"; nc.gender1 = "Her"; }
            else { nc.gender = "Shri"; nc.gender1 = "His"; }
            string str2 = "select * From m_academic where IsCurrent = 1";
            DataSet dss1 = cls1.fillDataset(str2);
            string ayd = "", sp1 = "", sp2 = "", temp_ayid = "", ac = "";
            ayd = dss1.Tables[0].Rows[0]["AYID"].ToString();
            ac = dss1.Tables[0].Rows[0][1].ToString();
            sp1 = ac.Substring(10, 2);
            sp2 = ac.Substring(22, 2);
            temp_ayid = sp1 + "-" + sp2;
            string str3 = "select max(srno) as sr from noc where srno like '%" + temp_ayid + "%'";
            DataSet dss = cls1.fillDataset(str3);
            string a = dss.Tables[0].Rows[0]["sr"].ToString();
            string cal = "";
            if (a == "" || a == "0") { cal = "0001"; }
            else
            {
                string sep = a.Substring(13, 4);
                string i = Convert.ToString(Convert.ToInt32(sep) + 1);
                if (i.Length.ToString() == "1") { cal = "000" + i; }
                else if (i.Length.ToString() == "2") { cal = "00" + i; }
                else if (i.Length.ToString() == "3") { cal = "0" + i; }
                else if (i.Length.ToString() == "4") { cal = i; }

            }

            string p1 = "", p2 = "", p3 = "", p4 = "";
            p1 = "VC/"; p2 = "NOC/"; p3 = "/"; p4 = "-";
            //  string tc1 = sp1 + p4 + sp2;
            string all = p1 + p2 + sp1 + p4 + sp2 + p3 + cal;
            string prn_no = "";
            string query = "";
            if (enroll.ToString() == "Confirmed")
            {
                prn_no = dsID.Tables[0].Rows[0]["ID_No"].ToString();
                if (chk_dt.ToString() == "true")
                {
                    query = "insert into NOC(stud_id,srno,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no,user_id) values('" + stud_id + "','" + all + "','" + sel_iss_dt + "','0','--','" + enroll + "','" + letter_no + "',getdate(),'" + case_no + "',null,'" + year + "',1,'" + prn_no + " ','" + user_id + " ')";
                }
                else
                {
                    query = "insert into NOC(stud_id,srno,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no,user_id) values('" + stud_id + "','" + all + "','" + sel_iss_dt + "','0','--','" + enroll + "','" + letter_no + "',getdate(),'" + case_no + "',null,'" + year + "',1,'" + prn_no + " ','" + user_id + " ')";
                }
            }
            else
            {
                if (dsID.Tables[0].Rows[0]["prn_no"].ToString() == "")
                {
                    prn_no = "--";
                }
                else { prn_no = dsID.Tables[0].Rows[0]["prn_no"].ToString(); }
                query = "insert into NOC(stud_id,srno,issue_date,exam_result,exam_heldin,con_noc,letter_no,letter_date,case_no,case_date,ayid,issue_count,prn_no,user_id) values('" + stud_id + "','" + all + "','" + sel_iss_dt + "','0','--','" + enroll + "','" + letter_no + "',null,'" + case_no + "',null,'" + year + "',1,'" + prn_no + " ','" + user_id + " ')";
            }

            string query2 = "insert into NOC_Details values ('" + stud_id + "',getdate(),'" + all + "','" + user_id + " ')";

            if (cls1.DMLqueries(query) == true && cls1.DMLqueries(query2) == true)
            {
                string upt = " update m_std_personaldetails_tbl set Del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' ; update m_std_studentacademic_tbl set Del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' and AYID='" + year + "'; update m_FeeEntry set del_flag = 1,del_dt = getdate() where Stud_id='" + stud_id + "' and AYID='" + year + "' ; update m_std_feedetails_tbl set Del_flag = 1 where Stud_id='" + stud_id + "' and AYID='" + year + "' ; update m_std_pervrecord_tbl set Del_flag = 1 where Stud_id='" + stud_id + "' and AYID='" + year + "'   update d_adm_applicant set Del_flag = 1 where Stud_id='" + stud_id + "' and AcdID='" + year + "'; insert into cancel_remark (stud_id,Remark) values ('" + stud_id + "','Noc Token')  ";
                cls1.DMLqueries(upt);
                string st_noc = "select  *,convert(varchar(10),issue_date,105) as issue_date1 from NOC where stud_id='" + stud_id + "' and ayid='" + year + "'";
                DataSet ds_noc = cls1.fillDataset(st_noc);
                if (ds_noc.Tables[0].Rows[0]["con_noc"].ToString() == "Confirmed")
                {
                    if (ds_noc.Tables[0].Rows[0]["case_date"].ToString() == "")
                    {
                        nc.case_dt = "1/1/1111";
                    }
                    else { nc.case_dt = ds_noc.Tables[0].Rows[0]["case_date"].ToString(); }

                    if (ds_noc.Tables[0].Rows[0]["letter_date"].ToString() == "")
                    {
                        nc.letter_dt = "1/1/1111";
                    }
                    else { nc.letter_dt = ds_noc.Tables[0].Rows[0]["letter_date"].ToString(); }
                }
                else
                {
                    nc.letter_dt = "1/1/1111";
                    nc.case_dt = "1/1/1111";
                }
                nc.iss_dt = ds_noc.Tables[0].Rows[0]["issue_date1"].ToString();
                if (ds_noc.Tables[0].Rows[0]["prn_no"].ToString() == "")
                {
                    nc.prn_no = "--";
                }
                else { nc.prn_no = ds_noc.Tables[0].Rows[0]["prn_no"].ToString(); }
                if (ds_noc.Tables[0].Rows[0]["letter_date"].ToString() == "")
                {
                    nc.letter_dt = "--";
                }
                else { nc.letter_dt = ds_noc.Tables[0].Rows[0]["letter_date"].ToString(); }
                if (ds_noc.Tables[0].Rows[0]["letter_no"].ToString() == "")
                {
                    nc.letter_no = "--";
                }
                else { nc.letter_no = ds_noc.Tables[0].Rows[0]["letter_no"].ToString(); }
                if (ds_noc.Tables[0].Rows[0]["case_no"].ToString() == "")
                {
                    nc.case_no = "--";
                }
                else { nc.case_no = ds_noc.Tables[0].Rows[0]["case_no"].ToString(); }
                nc.enrol = enroll;
                nc.name = ds.Tables[0].Rows[0]["stud_name"].ToString();
                nc.sr_no = ds_noc.Tables[0].Rows[0]["srno"].ToString();
                nc.roll_no = ds.Tables[0].Rows[0]["roll no"].ToString();
                nc.group = ds.Tables[0].Rows[0]["class"].ToString();
                nc.gender = ds.Tables[0].Rows[0]["gender"].ToString();
            }
        }
        details.Add(nc);
        return details.ToArray();
    }

    public Noc[] search_noc(string name, string noc_no)
    {
        List<Noc> details = new List<Noc>();
        string str = ""; DataSet dss = new DataSet();
        str = "select o.*,s.Group_id from dbo.Noc_for_OldStudents o left join m_crs_subjectgroup_tbl s on o.class=s.Group_title where (fname+mname+lname) like '%" + name + "%' or  srno='" + noc_no + "' ";

        DataSet ds = cls1.fillDataset(str);
        if (ds.Tables[0].Rows.Count > 0)
        {
            Noc nc = new Noc();
            nc.fname = ds.Tables[0].Rows[0]["fname"].ToString();
            nc.mname = ds.Tables[0].Rows[0]["mname"].ToString();
            nc.lname = ds.Tables[0].Rows[0]["lname"].ToString();
            nc.grp_title = ds.Tables[0].Rows[0]["class"].ToString();
            nc.roll_no = ds.Tables[0].Rows[0]["roll"].ToString();
            nc.gender = ds.Tables[0].Rows[0]["gender"].ToString();
            nc.iss_dt = ds.Tables[0].Rows[0]["issue_date"].ToString();
            nc.con_noc = ds.Tables[0].Rows[0]["con_noc"].ToString();
            nc.letter_no = ds.Tables[0].Rows[0]["letter_no"].ToString();
            nc.case_no = ds.Tables[0].Rows[0]["case_no"].ToString();
            nc.letter_date = ds.Tables[0].Rows[0]["letter_date"].ToString();
            nc.case_dt = ds.Tables[0].Rows[0]["case_date"].ToString();
            nc.prn_no = ds.Tables[0].Rows[0]["prn_no"].ToString();
            details.Add(nc);
        }

        return details.ToArray();
    }
    //----------newspaper
    public List<ListItem> paper_type()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select dd_name,dd_no from Description_Details_R where DM_NO='D021'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["dd_no"].ToString(),
                            Text = sdr["dd_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }
    public List<ListItem> paper_lang()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select dd_name,dd_no from Description_Details_R where DM_NO='D022'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["dd_no"].ToString(),
                            Text = sdr["dd_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }
    public newspapermaster_class[] paper_master_load(string type, string select_condition, string news_id, string newspapername, string newspapertype, string newspaperlanguage, string user_id)
    {
        List<newspapermaster_class> confirm = new List<newspapermaster_class>();
        if (type == "insert")
        {
            news_id = "select [dbo].[getIdOf]('ll_newspaper_master')";
            DataTable newi = cls1.fillDataTable(news_id);
            news_id = newi.Rows[0][0].ToString();
        }
        string str = "EXECUTE [pro_ll_newspaper_master_insert_update]    '" + type + "' ,'" + select_condition + "','" + news_id + "'  ,'" + newspapername + "'  ,'" + newspapertype + "'  ,'" + newspaperlanguage + "'  ,'" + user_id + "',0";
        if (type == "insert" || type == "update")
        {
            newspapermaster_class sdb = new newspapermaster_class();

            if (cls1.DMLqueries(str) == true)
            {
                if (type == "insert")
                {

                    string str1 = "update Master_System_T set runningvalue = runningvalue + 1 where tablename='ll_newspaper_master'";
                    cls1.DMLqueries(str1);
                }
                sdb.ins_val = "1";
            }
            else
            {
                sdb.ins_val = "1";
            }
            confirm.Add(sdb);
        }
        else
        {
            DataTable dt = cls1.fillDataTable(str);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                newspapermaster_class sdb = new newspapermaster_class();
                sdb.id = dt.Rows[i]["news_id"].ToString();
                sdb.name = dt.Rows[i]["newspaper_name"].ToString();
                sdb.news_type = dt.Rows[i]["newspaper_type"].ToString();
                sdb.news_lang = dt.Rows[i]["newspaper_language"].ToString();
                confirm.Add(sdb);
            }
        }

        return confirm.ToArray();
    }

    public bool ins_lang_type(string name, string dm_no)
    {
        string str = "insert into Description_details_R values((select [dbo].[getIdOf]('Description_Details_R')),'" + name + "','" + dm_no + "','')";
        if (cls1.DMLqueries(str))
        {
            string str1 = "update Master_System_T set runningvalue = runningvalue + 1 where tablename='Description_Details_R'";
            cls1.DMLqueries(str1);
            return true;
        }
        else
        {
            return false;
        }
    }
    public newspapermaster_class[] details_load(string date, string lab)
    {
        if (lab == "LIB1") { lab = "0"; } else { lab = "1"; }
        List<newspapermaster_class> confirm = new List<newspapermaster_class>();
        string str = "select * from ll_newspaper_details where del_flag=0 and news_paper_deli_dt='" + date + "' and lab='" + lab + "'";
        string str1 = "";
        DataTable dt = cls1.fillDataTable(str);
        if (dt.Rows.Count == 0)
        {
            str1 = "EXECUTE [pro_ll_newspaper_details_insert_update]    'load' ,'','','','','','','',0,'','" + lab + "',''";
            DataTable dt1 = cls1.fillDataTable(str1);
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                newspapermaster_class sdb = new newspapermaster_class();
                sdb.id = dt1.Rows[i]["news_id"].ToString();
                sdb.amount = "";
                sdb.vendor = "";
                sdb.qty = "";
                confirm.Add(sdb);

            }
        }
        else
        {
            str1 = "EXECUTE [pro_ll_newspaper_details_insert_update]    'select' ,'" + date + "','" + date + "'  ,''  ,''  ,'','','',0,'','" + lab + "',''";
            DataTable dt1 = cls1.fillDataTable(str1);
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                newspapermaster_class sdb = new newspapermaster_class();
                sdb.id = dt1.Rows[i]["news_id"].ToString();
                sdb.amount = dt1.Rows[i]["price"].ToString();
                sdb.vendor = dt1.Rows[i]["vendor_id"].ToString();
                sdb.qty = dt1.Rows[i]["qty"].ToString();
                confirm.Add(sdb);

            }
        }


        return confirm.ToArray();
    }
    public List<ListItem> load_newspaper(string date, string lab)
    {
        string str1 = "";
        if (date != "" && lab != "")
        {
            if (lab == "LIB1") { lab = "0"; } else { lab = "1"; }
            //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));

            str1 = "EXECUTE [pro_ll_newspaper_details_insert_update]    'load' ,'','','','','','','',0,'','" + lab + "',''";
        }
        else
        {
            str1 = "select news_id,newspaper_name as [Newspaper Name] from ll_newspaper_master where del_flag='0'";
        }
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str1))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {

                        course.Add(new ListItem
                        {
                            Value = sdr["news_id"].ToString(),
                            Text = sdr["Newspaper Name"].ToString()
                        });

                    }
                }
                con.Close();
                return course;
            }

        }
    }
    public List<ListItem> load_vendor()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        string str = "select general_name,general_id from ll_general_master where general_type='V'";


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {

                        course.Add(new ListItem
                        {
                            Value = sdr["general_id"].ToString(),
                            Text = sdr["general_name"].ToString()
                        });

                    }
                }
                con.Close();
                return course;
            }

        }
    }
    public newspapermaster_class[] paper_details_save(string type, string select_condition, string news_id, string news_paper_deli_dt, string price, string vendor_id, string is_sub, string qty, string lab, string user_id, string remark)
    {
        if (lab == "LIB1") { lab = "0"; } else { lab = "1"; }
        List<newspapermaster_class> confirm = new List<newspapermaster_class>();
        string str = "EXECUTE [pro_ll_newspaper_details_insert_update]    '" + type + "' ,'" + select_condition + "','" + news_paper_deli_dt + "'  ,'" + news_id + "'  ,'" + price + "'  ,'" + vendor_id + "'  ,'" + is_sub + "','" + user_id + "',0," + qty + ",'" + lab + "','" + remark + "'";

        newspapermaster_class sdb = new newspapermaster_class();

        if (cls1.DMLqueries(str) == true)
        {

            sdb.ins_val = "1";
        }
        else
        {
            sdb.ins_val = "1";
        }
        confirm.Add(sdb);
        return confirm.ToArray();
    }


    public List<ListItem> filldepartment()
    {
        string qry = "select distinct Dept_id,department_name from m_department where del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> coure = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        coure.Add(new ListItem

                        {
                            Value = sdr["Dept_id"].ToString(),
                            Text = sdr["department_name"].ToString()
                        });
                    }
                }
                con.Close();
                return coure;
            }
        }
    }

    public Periodic[] gettitle()
    {
        string str = "";
        str = "select serial_id,serial_name from periodical_master where del_flag=0 and Subscribe_Enddt > getdate()";
        //str = "select serial_id,serial_name from ll_serial_master where del_flag=0";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<Periodic> per = new List<Periodic>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                Periodic dat = new Periodic();
                dat.serid = drrow["serial_id"].ToString();
                dat.title = drrow["serial_name"].ToString();
                dat.msg = "";
                per.Add(dat);
            }
        }
        else
        {
            //Periodic dat = new Periodic();
            //dat.msg = "No Data";
            //per.Add(dat);
        }
        return per.ToArray();
    }

    //for prefix fro peridical
    public PeriodicPrefix[] GettingPrefix()
    {
        string str = "";
        str = "select serial_prefix from ll_serial_master where del_flag=0";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<PeriodicPrefix> per = new List<PeriodicPrefix>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                PeriodicPrefix dat = new PeriodicPrefix();
                dat.title = drrow["serial_prefix"].ToString();
                dat.msg = "";
                per.Add(dat);
            }
        }
        else
        {
            PeriodicPrefix dat = new PeriodicPrefix();
            dat.msg = "No Data";
            per.Add(dat);
        }
        return per.ToArray();
    }
    //
    //prriodical
    public bool insertperiodical(string Type, string Name, string Startdate, string enddate, string SubSdate, string SubEdate, string frequency, string language, string deaprtment, string vendor, string prefix, string price, string userid, string str)
    {
        string str1 = "select prefix,runningvalue+1 as r from dbo.Master_System_T where tablename='ll_serial_master'";
        DataTable dt = cls1.fillDataTable(str1);
        string bill = dt.Rows[0]["prefix"].ToString().Trim();
        int i = Convert.ToInt32(dt.Rows[0]["r"].ToString());
        if (i < 10)
        {
            bill = bill + "0000" + i;
        }
        else if (i < 100)
        {
            bill = bill + "000" + i;
        }
        else if (i < 1000)
        {
            bill = bill + "00" + i;
        }
        else if (i < 10000)
        {
            bill = bill + "0" + i;
        }
        else if (i < 100000)
        {
            bill = bill + i;
        }
        string str2 = " insert into periodical_master values('" + bill + "','" + Name + "','" + prefix + "','" + Type + "','" + Startdate + "','" + enddate + "','" + SubSdate + "','" + SubEdate + "','" + deaprtment + "','" + frequency + "','" + language + "','" + vendor + "','" + userid + "','" + price + "',null,getdate(),0) ";
        if (cls1.DMLqueries(str2) == true)
        {
            string str11 = "update Master_System_T set runningvalue=runningvalue+1 where tablename='ll_serial_master'";
            cls1.DMLqueries(str11);
            if (str != "")
            {
                str = str.Replace("serial_id", bill);
                cls1.DMLqueries(str);
            }
            return true;
        }
        else
        {
            return false;
        }
    }

    //for checking already exist

    public periodical[] CheckData(string Name)
    {
        string str1 = "select serial_id,serial_name from periodical_master where del_flag=0 and serial_name='" + Name + "'  and Subscribe_Enddt > getdate()";
        DataTable dt = cls1.fillDataTable(str1);
        List<periodical> confirm = new List<periodical>();
        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                periodical sdb = new periodical();
                sdb.ddltype = dt.Rows[i]["serial_id"].ToString();
                confirm.Add(sdb);

            }
        }
        else
        {
            periodical sdb = new periodical();
            sdb.ddltype = "0";
            confirm.Add(sdb);
        }
        return confirm.ToArray();

    }

    public periodical[] checkaccexist(string acc_no)
    {
        string str1 = "select serial_id,serial_name from periodical_master where serial_id='" + acc_no + "' ";
        DataTable dt = cls1.fillDataTable(str1);
        List<periodical> confirm = new List<periodical>();
        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                periodical sdb = new periodical();
                sdb.ddltype = dt.Rows[i]["serial_id"].ToString();
                confirm.Add(sdb);

            }
        }
        else
        {
            periodical sdb = new periodical();
            sdb.ddltype = "0";
            confirm.Add(sdb);
        }
        return confirm.ToArray();

    }


    public string getMaxAccessionPriodic(string prefix)
    {

        String qry = "";

        qry = "select top 1  max(AccessionNo) as maxacc,SUBSTRING( AccessionNo ,PATINDEX('%[0-9]%', AccessionNo ),LEN(AccessionNo)-1) as acc from periodical_details where substring(SUBSTRING( AccessionNo ,1,PATINDEX('%[0-9]%', AccessionNo )), 1, (len(SUBSTRING( AccessionNo ,1,PATINDEX('%[0-9]%', AccessionNo ))) - 1)) like '" + prefix + "' and  AccessionNo like '%" + prefix + "%' group by AccessionNo order by SUBSTRING( AccessionNo ,PATINDEX('%[0-9]%', AccessionNo ),LEN(AccessionNo)-1) desc";


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                string acc = "";
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        acc = sdr["acc"].ToString();


                        if (acc == "")
                        {
                            acc = sdr["maxacc"].ToString() + "1";
                        }
                        else
                        {
                            int ine = Convert.ToInt32(acc) + 1;
                            acc = prefix + Convert.ToString(ine);
                        }
                    }
                    if (acc == "")
                    {
                        acc = prefix + "1";
                    }

                }
                con.Close();
                return acc;
            }
        }
    }

    //bookloadretrive

    public periodical[] LoadPeriodicData(string txtname)
    {
        string strquery1 = "select * from periodical_master where Serial_Name='" + txtname + "' and Subscribe_Enddt > getdate()";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        List<periodical> confirm = new List<periodical>();
        using (SqlConnection con = new SqlConnection(constr))
        {

            DataTable dt1 = cls1.fillDataTable(strquery1);
            if (dt1.Rows.Count > 0)
            {
                string strquery = "select  * from periodical_master as a,periodical_details as b where Serial_Name='" + txtname + "' and a.Serial_ID=b.Serial_ID and a.del_flag='0' and b.del_flag='0' and Subscribe_Enddt > getdate()";
                DataTable dt = cls1.fillDataTable(strquery);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        periodical sdb = new periodical();
                        sdb.id = dt.Rows[i]["Serial_id"].ToString();
                        sdb.ddltype = dt.Rows[i]["Typee"].ToString();
                        sdb.ddlstartdt = dt.Rows[i]["Subscribe_Startdt"].ToString();
                        sdb.ddlenddt = dt.Rows[i]["Subscribe_Enddt"].ToString();
                        sdb.ddlfrequency = dt.Rows[i]["Frequency"].ToString();
                        sdb.ddllanguage = dt.Rows[i]["Languagee"].ToString();
                        sdb.ddldepartment = dt.Rows[i]["Department"].ToString();
                        sdb.txtvendor = dt.Rows[i]["Vendor"].ToString();
                        sdb.txtprefix = dt.Rows[i]["Prefix"].ToString();
                        sdb.txtprice = dt.Rows[i]["Price"].ToString();
                        sdb.Sstartdate = dt.Rows[i]["startdate"].ToString();
                        sdb.Senddate = dt.Rows[i]["Enddate"].ToString();
                        sdb.AccessionNo = dt.Rows[i]["AccessionNo"].ToString();
                        sdb.VolumeNo = dt.Rows[i]["Volume_no"].ToString();
                        sdb.IssueNo = dt.Rows[i]["Issue_No"].ToString();
                        sdb.ISSNNo = dt.Rows[i]["ISSN_no"].ToString();
                        sdb.Publisher = dt.Rows[i]["Publisher"].ToString();
                        sdb.PublisherStartDate = dt.Rows[i]["Publication_start_dt"].ToString();
                        sdb.PublisherEndDate = dt.Rows[i]["Publication_end_dt"].ToString();
                        sdb.Remarks = dt.Rows[i]["Remark"].ToString();
                        sdb.ContentPage = dt.Rows[i]["contentPage"].ToString();
                        sdb.AcompaningMaterial = dt.Rows[i]["AcompMaterial"].ToString();
                        sdb.RegisterDate = dt.Rows[i]["Reg_dt"].ToString();
                        sdb.Price = dt.Rows[i]["Ind_Price"].ToString();


                        confirm.Add(sdb);
                    }
                }
                else
                {
                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        periodical sdb = new periodical();
                        sdb.id = dt1.Rows[i]["Serial_id"].ToString();
                        sdb.ddltype = dt1.Rows[i]["Typee"].ToString();
                        sdb.ddlstartdt = dt1.Rows[i]["Subscribe_Startdt"].ToString();
                        sdb.ddlenddt = dt1.Rows[i]["Subscribe_Enddt"].ToString();
                        sdb.ddlfrequency = dt1.Rows[i]["Frequency"].ToString();
                        sdb.ddllanguage = dt1.Rows[i]["Languagee"].ToString();
                        sdb.ddldepartment = dt1.Rows[i]["Department"].ToString();
                        sdb.txtvendor = dt1.Rows[i]["Vendor"].ToString();
                        sdb.txtprefix = dt1.Rows[i]["Prefix"].ToString();
                        sdb.txtprice = dt1.Rows[i]["Price"].ToString();
                        sdb.Sstartdate = dt1.Rows[i]["startdate"].ToString();
                        sdb.Senddate = dt1.Rows[i]["Enddate"].ToString();
                        confirm.Add(sdb);
                    }
                }

            }

        }
        return confirm.ToArray();

    }


    public Periodiccal[] Periodicreport(string prefix_val)
    {
        List<Periodiccal> confirm = new List<Periodiccal>();

        string strp = "select m.Serial_Name,m.Typee,m.Department,m.Vendor,d.AccessionNo,d.Volume_no,d.Issue_No,d.ISSN_no,convert(varchar(10),d.Publication_start_dt,105)as Publication_start_dt,convert(varchar(10),d.Publication_end_dt,105) as Publication_end_dt,d.Publisher,d.Remark,d.contentPage,d.AcompMaterial,d.Reg_dt,d.Ind_Price from periodical_master as m inner join periodical_details as d on m.serial_id=d.serial_id where m.prefix='" + prefix_val + "'";
        DataTable dt = cls1.fillDataTable(strp);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                Periodiccal sdb = new Periodiccal();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.Serial_Name = dt.Rows[i]["Serial_Name"].ToString();
                sdb.Typee = dt.Rows[i]["Typee"].ToString();
                sdb.Department = dt.Rows[i]["Department"].ToString();
                sdb.Vendor = dt.Rows[i]["Vendor"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.AccessionNo = dt.Rows[i]["AccessionNo"].ToString();
                sdb.Volume_no = dt.Rows[i]["Volume_no"].ToString();
                sdb.Issue_No = dt.Rows[i]["Issue_No"].ToString();
                sdb.ISSN_no = dt.Rows[i]["ISSN_no"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                sdb.Publication_start_dt = dt.Rows[i]["Publication_start_dt"].ToString();
                sdb.Publication_end_dt = dt.Rows[i]["Publication_end_dt"].ToString();
                sdb.Publisher = dt.Rows[i]["Publisher"].ToString();
                sdb.Remark = dt.Rows[i]["Remark"].ToString();
                sdb.contentPage = dt.Rows[i]["contentPage"].ToString();
                sdb.AcompMaterial = dt.Rows[i]["AcompMaterial"].ToString();
                sdb.Reg_dt = dt.Rows[i]["Reg_dt"].ToString();
                sdb.Ind_Price = dt.Rows[i]["Ind_Price"].ToString();
                confirm.Add(sdb);
            }

        }


        return confirm.ToArray();


    }


    public Departmentwise[] DepPeriodicreport(string Dep_val)
    {
        List<Departmentwise> confirm = new List<Departmentwise>();

        string strp = "select m.Serial_Name,m.Typee,m.Department,m.Vendor,d.AccessionNo,d.Volume_no,d.Issue_No,d.ISSN_no,convert(varchar(10),d.Publication_start_dt,105)as Publication_start_dt,convert(varchar(10),d.Publication_end_dt,105) as Publication_end_dt,d.Publisher,d.Remark,d.contentPage,d.AcompMaterial,d.Reg_dt,d.Ind_Price from periodical_master as m inner join periodical_details as d on m.serial_id=d.serial_id where m.Department like '%" + Dep_val + "%'";
        DataTable dt = cls1.fillDataTable(strp);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                Departmentwise sdb = new Departmentwise();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.Serial_Name = dt.Rows[i]["Serial_Name"].ToString();
                sdb.Typee = dt.Rows[i]["Typee"].ToString();
                sdb.Department = dt.Rows[i]["Department"].ToString();
                sdb.Vendor = dt.Rows[i]["Vendor"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.AccessionNo = dt.Rows[i]["AccessionNo"].ToString();
                sdb.Volume_no = dt.Rows[i]["Volume_no"].ToString();
                sdb.Issue_No = dt.Rows[i]["Issue_No"].ToString();
                sdb.ISSN_no = dt.Rows[i]["ISSN_no"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                sdb.Publication_start_dt = dt.Rows[i]["Publication_start_dt"].ToString();
                sdb.Publication_end_dt = dt.Rows[i]["Publication_end_dt"].ToString();
                sdb.Publisher = dt.Rows[i]["Publisher"].ToString();
                sdb.Remark = dt.Rows[i]["Remark"].ToString();
                sdb.contentPage = dt.Rows[i]["contentPage"].ToString();
                sdb.AcompMaterial = dt.Rows[i]["AcompMaterial"].ToString();
                sdb.Reg_dt = dt.Rows[i]["Reg_dt"].ToString();
                sdb.Ind_Price = dt.Rows[i]["Ind_Price"].ToString();
                confirm.Add(sdb);
            }

        }


        return confirm.ToArray();


    }


    //for prefix fro peridical

    public List<ListItem> GetPrefix()
    {
        string str = "";
        str = "select Prefix from periodical_master where del_flag=0";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["prefix"].ToString(),
                            Text = sdr["prefix"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public lib_report[] Adv_book_search(string book_name, string author, string publisher, string flagKey1, string flagKey2, string flagKey3, string flagLogic, string flagLogic1, string type)
    {
        List<lib_report> confirm = new List<lib_report>();
        string tblname = "";
        string str = "";
        if (type == "CD")
        {
            tblname = "lib_cd_master";
            str = "select  distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR from " + tblname + " where del_flag='0' and ";
        }
        else if (type == "BOOK")
        {
            tblname = "lib_book_master";
            str = "select  distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from " + tblname + " where del_flag='0' and ";
        }
        else
        {

            tblname = "lib_book_master";
            str = "select  distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from " + tblname + " where del_flag='0' and ";
        }


        if (flagKey1 != "")
        {
            str += flagKey1 + " like '%" + book_name.Trim() + "%' ";
        }
        if (flagKey2 != "" && book_name != "")
        {
            if (flagKey1 != flagKey2)
            {
                if (flagLogic != "NOT")
                {
                    str += " " + flagLogic + " " + flagKey2 + " like '%" + author.Trim() + "%' ";
                }
                else if (flagLogic == "NOT")
                {
                    if (book_name != "")
                    {

                        str += " and " + flagKey2 + " not like '%" + author.Trim() + "%' ";
                    }
                    else
                    {
                        str += " " + flagKey2 + " not like '%" + author.Trim() + "%' ";
                    }
                }

            }
            else
            {
                if (flagLogic != "NOT")
                {
                    str += " or  " + flagKey2 + " like '%" + author.Trim() + "%' ";
                }
                else if (flagLogic == "NOT")
                {
                    str += " and " + flagKey2 + " not like '%" + author.Trim() + "%' ";
                }
            }

        }
        if (flagKey3 != "" && author != "")
        {
            if (flagKey3 != flagKey1 && flagKey3 != flagKey2)
            {
                if (flagLogic1 != "NOT")
                {
                    str += " " + flagLogic1 + " " + flagKey3 + " like '%" + publisher.Trim() + "%' ";
                }
                else if (flagLogic1 == "NOT")
                {
                    str += " and " + flagKey3 + " not like '%" + publisher.Trim() + "%' ";
                }
            }
            else
            {
                if (flagLogic1 != "NOT")
                {
                    str += " or  " + flagKey3 + " like '%" + publisher.Trim() + "%' ";
                }
                else if (flagLogic1 == "NOT")
                {
                    str += " and " + flagKey3 + " not like '%" + publisher.Trim() + "%' ";
                }
            }


        }
        str += " order by title";

        DataTable dt = cls1.fillDataTable(str);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();

                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();

                string str2 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                DataTable dt1 = cls1.fillDataTable(str2);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                DataTable dt11 = cls1.fillDataTable(str1);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();

                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);


                string str22 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where   t1.del_flag=1 and t1.remark like '%Withdraw%' and t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO  from lib_book_Master t1 where Accession_No in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "')";
                DataTable dt22 = cls1.fillDataTable(str22);
                if (dt22.Rows[0]["ACCESSION_NO"].ToString() != "")
                {
                    string[] tot_wid = dt22.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                    int aval = Convert.ToInt32(tot_wid.Length);
                    sdb.REMARK = Convert.ToString(aval);
                }
                else
                {
                    int aval = 0;
                    sdb.REMARK = Convert.ToString(aval);
                }
                sdb.SUBJ = dt22.Rows[0]["ACCESSION_NO"].ToString();
                string str33 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where  t1.del_flag=1 and t1.remark like '%Missing%' and t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO  from lib_book_Master t1 where Accession_No in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') ";
                DataTable dt33 = cls1.fillDataTable(str33);
                if (dt33.Rows[0]["ACCESSION_NO"].ToString() != "")
                {
                    string[] tot_miss = dt33.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                    int avala = Convert.ToInt32(tot_miss.Length);

                    sdb.ISSUE_TYPE = Convert.ToString(avala);
                }
                else
                {
                    int avala = 0;

                    sdb.ISSUE_TYPE = Convert.ToString(avala);
                }
                sdb.REG_DT = dt33.Rows[0]["ACCESSION_NO"].ToString();
                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }

    public lib_report[] book_search(string book_name, string author, string publisher, string keyword, string isbn, string acc_no)
    {
        List<lib_report> confirm = new List<lib_report>();

        string whr = ""; string strquerycd = "";
        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

        strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from lib_book_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";
        if (book_name != "")
        {
            whr = "title like N'%" + book_name + "%'";
        }
        if (author != "")
        {
            if (whr == "")
            {
                whr = "author like N'%" + author + "%'";
            }
            else
            {
                whr = whr + " and author like N'%" + author + "%'";
            }
        }
        if (publisher != "")
        {
            if (whr == "")
            {
                whr = "publisher like N'%" + publisher + "%'";
            }
            else
            {
                whr = whr + " and publisher like N'%" + publisher + "%'";
            }
        }
        if (keyword != "")
        {
            if (whr == "")
            {
                whr = "keyword like N'%" + keyword + "%'";
            }
            else
            {
                whr = whr + " and keyword like N'%" + keyword + "%'";
            }
        }
        if (isbn != "")
        {
            if (whr == "")
            {
                whr = "isbn like N'%" + isbn + "%'";
            }
            else
            {
                whr = whr + " and isbn like N'%" + isbn + "%'";
            }
        }
        if (acc_no != "")
        {
            if (whr == "")
            {
                whr = "ACCESSION_NO like N'%" + acc_no + "%'";
            }
            else
            {
                whr = whr + " and ACCESSION_NO like N'%" + acc_no + "%'";
            }
        }
        strquerycd = strquerycd + whr;
        DataTable dt = cls1.fillDataTable(strquerycd);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                DataTable dt1 = cls1.fillDataTable(str);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                DataTable dt11 = cls1.fillDataTable(str1);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);

                string str22 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where   t1.del_flag=1 and t1.remark like '%Withdraw%' and t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO  from lib_book_Master t1 where Accession_No in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "')";
                DataTable dt22 = cls1.fillDataTable(str22);
                if (dt22.Rows[0]["ACCESSION_NO"].ToString() != "")
                {
                    string[] tot_wid = dt22.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                    int aval = Convert.ToInt32(tot_wid.Length);
                    sdb.REMARK = Convert.ToString(aval);
                }
                else
                {
                    int aval = 0;
                    sdb.REMARK = Convert.ToString(aval);
                }
                sdb.SUBJ = dt22.Rows[0]["ACCESSION_NO"].ToString();
                string str33 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where  t1.del_flag=1 and t1.remark like '%Missing%' and t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO  from lib_book_Master t1 where Accession_No in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') ";
                DataTable dt33 = cls1.fillDataTable(str33);
                if (dt33.Rows[0]["ACCESSION_NO"].ToString() != "")
                {
                    string[] tot_miss = dt33.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                    int avala = Convert.ToInt32(tot_miss.Length);

                    sdb.ISSUE_TYPE = Convert.ToString(avala);
                }
                else
                {
                    int avala = 0;

                    sdb.ISSUE_TYPE = Convert.ToString(avala);
                }
                sdb.REG_DT = dt33.Rows[0]["ACCESSION_NO"].ToString();
                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }
    //public lib_report[] book_search(string book_name, string author, string publisher, string keyword, string isbn)
    //{
    //    List<lib_report> confirm = new List<lib_report>();

    //    string whr = ""; string strquerycd = "";
    //    //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

    //    strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from lib_book_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";
    //    if (book_name != "")
    //    {
    //        whr = "title like N'%" + book_name + "%'";
    //    }
    //    if (author != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "author like N'%" + author + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and author like N'%" + author + "%'";
    //        }
    //    }
    //    if (publisher != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "publisher like N'%" + publisher + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and publisher like N'%" + publisher + "%'";
    //        }
    //    }
    //    if (keyword != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "keyword like N'%" + keyword + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and keyword like N'%" + keyword + "%'";
    //        }
    //    }
    //    if (isbn != "")
    //    {
    //        if (whr == "")
    //        {
    //            whr = "isbn like N'%" + isbn + "%'";
    //        }
    //        else
    //        {
    //            whr = whr + " and isbn like N'%" + isbn + "%'";
    //        }
    //    }
    //    strquerycd = strquerycd + whr;
    //    DataTable dt = cls1.fillDataTable(strquerycd);

    //    if (dt.Rows.Count > 0)
    //    {

    //        for (int i = 0; i <= dt.Rows.Count - 1; i++)
    //        {
    //            lib_report sdb = new lib_report();
    //            //  sdb.ID = dt.Rows[i]["ID"].ToString();
    //            sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
    //            sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
    //            sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
    //            sdb.LANG = dt.Rows[i]["LANG"].ToString();
    //            // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
    //            sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
    //            sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
    //            sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
    //            sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
    //            //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
    //            //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
    //            //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
    //            //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
    //            string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
    //            DataTable dt1 = cls1.fillDataTable(str);
    //            string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
    //            DataTable dt11 = cls1.fillDataTable(str1);
    //            string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
    //            int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
    //            sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
    //            sdb.issued = Convert.ToString(dt11.Rows.Count);
    //            sdb.available = Convert.ToString(ava);
    //            sdb.cnt = Convert.ToString(dt.Rows.Count);

    //            //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
    //            //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
    //            //sdb.MRP = dt.Rows[i]["MRP"].ToString();
    //            //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
    //            //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
    //            //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
    //            //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
    //            //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
    //            confirm.Add(sdb);
    //        }

    //    }
    //    return confirm.ToArray();


    //}
    public lib_report[] CD_search(string book_name, string author, string publisher, string keyword, string isbn)
    {
        List<lib_report> confirm = new List<lib_report>();

        string whr = ""; string strquerycd = "";
        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

        strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR from lib_cd_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";


        if (book_name != "")
        {
            whr = "title like N'" + book_name + "%'";
        }
        if (author != "")
        {
            if (whr == "")
            {
                whr = "author like N'" + author + "%'";
            }
            else
            {
                whr = whr + " and author like N'" + author + "%'";
            }
        }
        if (publisher != "")
        {
            if (whr == "")
            {
                whr = "publisher like N'" + publisher + "%'";
            }
            else
            {
                whr = whr + " and publisher like N'" + publisher + "%'";
            }
        }
        if (keyword != "")
        {
            if (whr == "")
            {
                whr = "keyword like N'" + keyword + "%'";
            }
            else
            {
                whr = whr + " and keyword like N'" + keyword + "%'";
            }
        }
        if (isbn != "")
        {
            if (whr == "")
            {
                whr = "isbn like N'" + isbn + "%'";
            }
            else
            {
                whr = whr + " and isbn like N'" + isbn + "%'";
            }
        }
        strquerycd = strquerycd + whr;
        DataTable dt = cls1.fillDataTable(strquerycd);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = "";
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                DataTable dt1 = cls1.fillDataTable(str);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                DataTable dt11 = cls1.fillDataTable(str1);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);

                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }
    public lib_report[] Map_search(string book_name, string author, string publisher, string keyword, string isbn)
    {
        List<lib_report> confirm = new List<lib_report>();

        string whr = ""; string strquerycd = "";
        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";


        strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from lib_book_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";        


        if (book_name != "")
        {
            whr = "title like N'" + book_name + "%'";
        }
        if (author != "")
        {
            if (whr == "")
            {
                whr = "author like N'" + author + "%'";
            }
            else
            {
                whr = whr + " and author like N'" + author + "%'";
            }
        }
        if (publisher != "")
        {
            if (whr == "")
            {
                whr = "publisher like N'" + publisher + "%'";
            }
            else
            {
                whr = whr + " and publisher like N'" + publisher + "%'";
            }
        }
        if (keyword != "")
        {
            if (whr == "")
            {
                whr = "keyword like N'" + keyword + "%'";
            }
            else
            {
                whr = whr + " and keyword like N'" + keyword + "%'";
            }
        }
        if (isbn != "")
        {
            if (whr == "")
            {
                whr = "isbn like N'" + isbn + "%'";
            }
            else
            {
                whr = whr + " and isbn like N'" + isbn + "%'";
            }
        }
        strquerycd = strquerycd + whr;
        DataTable dt = cls1.fillDataTable(strquerycd);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                DataTable dt1 = cls1.fillDataTable(str);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                DataTable dt11 = cls1.fillDataTable(str1);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);

                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }

    //---------------------------bloxkj result
    public List<ListItem> fillexamClass(string courseID, string ayid)
    {
        String qry = "select exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end when 2 then case when exam_code like 'E%' then '(Additional)' else '(Reval Additional)' end  else  case  when exam_code like 'E%' then '(Regular)' else '(Reval Regular)' end  end as a1,exam_code from cre_exam where ayid='" + ayid + "' and branch_id='" + courseID + "' and del_flag=0 and is_current=1 and exam_code in (select exam_code from cre_marks_tbl where del_flag=0 and ayid='" + ayid + "')";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public BlockRes[] getdatablock(string ayid, string course, string subcourse, string group, string exam, string semester, string from, string to, string stud_id)
    {
        string qry = "";
        if (stud_id != "" && stud_id != "''")
        {

            //  qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus from cre_webresult w,m_std_personaldetails_tbl p,m_std_studentacademic_tbl a left join (select * from StudResultBlock_tbl where del_flag=0 and Exam_code='"+exam+"' and Sem_id='"+semester+"') as b on  a.stud_id=b.stud_id where w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and a.group_id='" + group + "' and w.exam_code='" + exam + "' and w.sem_id='" + semester + "' and a.stud_id in (" + stud_id + ") order by cast(a.roll_no as int)";

            //qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus,w.sem_id,w.exam_code,(select exam_date +case when atkt_exam=0 then ' Regular'  else ' ATKT' end from cre_exam where exam_code=w.exam_code) as exm_name,a.group_id from cre_webresult w,m_std_personaldetails_tbl p,m_std_studentacademic_tbl a left join (select * from StudResultBlock_tbl where del_flag=0 ) as b on  a.stud_id=b.stud_id and a.group_id=b.group_id where w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and w.sem_id=b.Sem_id and   w.exam_code=b.Exam_code and w.exam_code in (select exam_code from cre_exam where ayid='" + ayid + "') and a.stud_id in (" + stud_id + ") order by cast(a.roll_no as int)";
            qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus,w.sem_id,w.exam_code,(select exam_date +case when atkt_exam=0 then ' Regular'  else ' ATKT' end from cre_exam where exam_code=w.exam_code) as exm_name,a.group_id from m_std_studentacademic_tbl a,m_std_personaldetails_tbl p ,cre_webresult w left join (select * from StudResultBlock_tbl where del_flag=0 ) as b on  w.stud_id=b.stud_id   and w.sem_id=b.Sem_id and   w.exam_code=b.Exam_code     where a.group_id=w.col2 and w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and w.exam_code in (select exam_code from cre_exam where ayid='" + ayid + "')    and a.stud_id in (" + stud_id + ") order by cast(a.roll_no as int)";
        }
        else if (from != "" && to == "")
        {
            qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus,w.sem_id,w.exam_code,(select exam_date +case when atkt_exam=0 then ' Regular'  else ' ATKT' end from cre_exam where exam_code=w.exam_code) as exm_name,a.group_id from cre_webresult w,m_std_personaldetails_tbl p,m_std_studentacademic_tbl a left join (select * from StudResultBlock_tbl where del_flag=0 and Exam_code='" + exam + "' and Sem_id='" + semester + "') as b on  a.stud_id=b.stud_id where w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and a.group_id='" + group + "' and w.exam_code='" + exam + "' and w.sem_id='" + semester + "' and a.roll_no=" + from + " order by cast(a.roll_no as int)";
        }
        else if (from == "" && to != "")
        {
            qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus,w.sem_id,w.exam_code,(select exam_date +case when atkt_exam=0 then ' Regular'  else ' ATKT' end from cre_exam where exam_code=w.exam_code) as exm_name,a.group_id from cre_webresult w,m_std_personaldetails_tbl p,m_std_studentacademic_tbl a left join (select * from StudResultBlock_tbl where del_flag=0 and Exam_code='" + exam + "' and Sem_id='" + semester + "') as b on  a.stud_id=b.stud_id where w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and a.group_id='" + group + "' and w.exam_code='" + exam + "' and w.sem_id='" + semester + "' and a.roll_no=" + to + " order by cast(a.roll_no as int)";
        }
        else if (from != "" && to != "")
        {
            qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus,w.sem_id,w.exam_code,(select exam_date +case when atkt_exam=0 then ' Regular'  else ' ATKT' end from cre_exam where exam_code=w.exam_code) as exm_name,a.group_id from cre_webresult w,m_std_personaldetails_tbl p,m_std_studentacademic_tbl a left join (select * from StudResultBlock_tbl where del_flag=0 and Exam_code='" + exam + "' and Sem_id='" + semester + "') as b on  a.stud_id=b.stud_id where w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and a.group_id='" + group + "' and w.exam_code='" + exam + "' and w.sem_id='" + semester + "' and a.roll_no between " + from + " and " + to + " order by cast(a.roll_no as int)";
        }
        else
        {
            qry = "select distinct a.stud_id,isnull(p.stud_f_name,'')+' '+isnull(p.stud_m_name,'')+' '+isnull(p.stud_l_name,'') as Name,cast(a.roll_no as int) as RollNo,isnull(b.User_id,'') as User_id,case when b.stud_id is null then 'No Remark' else b.Remark end as BlockStatus,w.sem_id,w.exam_code,(select exam_date +case when atkt_exam=0 then ' Regular'  else ' ATKT' end from cre_exam where exam_code=w.exam_code) as exm_name,a.group_id from cre_webresult w,m_std_personaldetails_tbl p,m_std_studentacademic_tbl a left join (select * from StudResultBlock_tbl where del_flag=0 and Exam_code='" + exam + "' and Sem_id='" + semester + "') as b on  a.stud_id=b.stud_id where w.stud_id=a.stud_id and a.stud_id=p.stud_id and a.del_flag=0 and a.del_flag=p.del_flag and a.group_id='" + group + "' and w.exam_code='" + exam + "' and w.sem_id='" + semester + "' order by cast(a.roll_no as int)";
        }

        DataTable dtb = new DataTable();
        dtb = cls1.fillDataTable(qry);
        List<BlockRes> details = new List<BlockRes>();
        if (dtb.Rows.Count > 0)
        {
            foreach (DataRow dr in dtb.Rows)
            {
                BlockRes blk = new BlockRes();
                blk.studid = dr["stud_id"].ToString();
                blk.Rollno = dr["RollNo"].ToString();
                blk.exam_code = dr["exam_code"].ToString();
                blk.Semester = dr["sem_id"].ToString();
                blk.exm_name = dr["exm_name"].ToString();
                blk.group_id = dr["group_id"].ToString();
                //blk.status = dr["status"].ToString();
                blk.emp_id = dr["User_id"].ToString();
                if (dr["BlockStatus"].ToString() == "No Remark")
                {
                    blk.blkstatus = "";
                }
                else
                {
                    blk.blkstatus = dr["BlockStatus"].ToString();
                }
                blk.name = dr["Name"].ToString();
                blk.msg = "";
                details.Add(blk);
            }
        }
        else
        {
            BlockRes blk = new BlockRes();
            blk.msg = "No Data";
            details.Add(blk);
        }

        return details.ToArray();
    }

    public bool checktbl(string stud_id, string group, string exam, string semester)
    {
        string str = "";
        str = "select * from StudResultBlock_tbl where stud_id='" + stud_id + "' and exam_code='" + exam + "' and group_id='" + group + "' and sem_id='" + semester + "'";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        if (dt.Rows.Count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public URLClass[] getformdata(string formno)
    {
        List<URLClass> details = new List<URLClass>();
        if (formno.StartsWith("A") || formno.StartsWith("B"))
        {
            string qry = "select extra1 from URLAutoCode_Tbl where stud_id='" + formno + "' and extra1<>''";
            DataTable dtchk = cls1.fillDataTable(qry);
            if (dtchk.Rows.Count > 0)
            {
                URLClass regi = new URLClass();
                regi.msg = "Payment Done.";
                details.Add(regi);
            }
            else
            {
                string group_id = formno.Substring(5, 3);
                string form_no = formno.Substring(0, 5);
                string str = "select distinct isnull(d.f_name,'')+' '+isnull(d.m_name,'')+' '+isnull(d.l_name,'') as Name,a.mob_no as Mobileno,g.group_title as Course,m.Amount,a.inhouse from d_adm_applicant d,adm_applicant_entry_FY a,OLA_FY_adm_CourseSelection o,m_feemaster m,m_crs_subjectgroup_tbl g where d.form_no=a.formno and a.formno=o.formno and o.group_id=m.group_id and m.group_id=g.group_id and d.del_flag=0 and a.del_flag=0 and o.del_flag=0 and m.del_flag=0 and d.form_no='" + form_no + "' and m.ayid=(select max(ayid) from m_academic) and g.group_id='GRP" + group_id + "'";

                DataTable dt = new DataTable();
                dt = cls1.fillDataTable(str);

                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["inhouse"].ToString() == "0")
                    {
                        foreach (DataRow dtrow in dt.Rows)
                        {
                            URLClass regi = new URLClass();
                            regi.formno = formno;
                            regi.name = dtrow["Name"].ToString();
                            regi.mobno = dtrow["Mobileno"].ToString();
                            regi.amount = dtrow["Amount"].ToString();
                            regi.course = dtrow["Course"].ToString();
                            regi.msg = "";
                            details.Add(regi);
                        }
                    }
                    else
                    {
                        URLClass regi = new URLClass();
                        regi.msg = "Only Inhouse Student.";
                        details.Add(regi);
                    }
                }
                else
                {
                    URLClass regi = new URLClass();
                    regi.msg = "No Data Found.";
                    details.Add(regi);
                }
            }
        }
        else
        {
            URLClass regi = new URLClass();
            regi.msg = "Only Inhouse Student.";
            details.Add(regi);
        }
        return details.ToArray();
    }

    public URLClass[] getformdata_send_link(string formno)
    {
        List<URLClass> details = new List<URLClass>();
        if (formno.StartsWith("A") || formno.StartsWith("B"))
        {
            string qry = "select extra1 from URLAutoCode_Tbl where stud_id='" + formno + "' and extra1<>''";
            DataTable dtchk = cls1.fillDataTable(qry);
            if (dtchk.Rows.Count > 0)
            {
                URLClass regi = new URLClass();
                regi.msg = "Payment Done.";
                details.Add(regi);
            }
            else
            {
                string group_id = formno.Substring(5, 3);
                string form_no = formno.Substring(0, 5);
                string str = "select distinct isnull(d.f_name,'')+' '+isnull(d.m_name,'')+' '+isnull(d.l_name,'') as Name,a.mob_no as Mobileno,g.group_title as Course,m.Amount,a.inhouse,d.category,state from d_adm_applicant d,adm_applicant_entry_FY a,OLA_FY_adm_CourseSelection o,m_feemaster m,m_crs_subjectgroup_tbl g where d.form_no=a.formno and a.formno=o.formno and o.group_id=m.group_id and m.group_id=g.group_id and d.del_flag=0 and a.del_flag=0 and o.del_flag=0 and m.del_flag=0 and d.form_no='" + form_no + "' and m.ayid=(select max(ayid) from m_academic) and g.group_id='GRP" + group_id + "'";

                DataTable dt = new DataTable();
                dt = cls1.fillDataTable(str);

                if (dt.Rows.Count > 0)
                {

                    foreach (DataRow dtrow in dt.Rows)
                    {
                        URLClass regi = new URLClass();
                        regi.formno = formno;
                        regi.name = dtrow["Name"].ToString();
                        regi.mobno = dtrow["Mobileno"].ToString();
                        regi.amount = dtrow["Amount"].ToString();
                        regi.course = dtrow["Course"].ToString();
                        regi.Category = dtrow["category"].ToString();
                        regi.state = dtrow["state"].ToString();
                        regi.msg = "";
                        details.Add(regi);
                    }
                }

                else
                {
                    URLClass regi = new URLClass();
                    regi.msg = "No Data Found.";
                    details.Add(regi);
                }
            }
        }

        return details.ToArray();
    }

    public URLClass[] getdataformno(string date)
    {
        List<URLClass> details = new List<URLClass>();

        string str = "select * from merit_list where merit_dt=convert(date,'" + date + "',105) and formno not in (select stud_id  from  URLAutoCode_Tbl where ayid= (select ayid from m_academic where iscurrent='1'))";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                URLClass regi = new URLClass();
                regi.formno = dtrow["formno"].ToString();
                //regi.name = dtrow["Name"].ToString();
                //regi.mobno = dtrow["Mobileno"].ToString();
                //regi.amount = dtrow["Amount"].ToString();
                //regi.course = dtrow["Course"].ToString();
                regi.msg = "";
                details.Add(regi);

            }

        }

        return details.ToArray();
    }

    public shortfeerpt[] getfeedata(string ayid, string course, string sub_crs, string sub_grp_id)
    {
        List<shortfeerpt> details = new List<shortfeerpt>();
        //string str = "select a.*,case when b.refund is null then 0 else b.refund end as Refund from (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees],"
        //+ " case when ((case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) then (cast(TOTAL_COURSE_FEES as int)-((case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance',"
        //+ " case when Cash is null then 0 else cash end as cash,case when Cheque is null then 0 else Cheque end as Cheque from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,Amount from cheque_status c,m_std_personaldetails_tbl p "
        //+ " where subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "' and ayid='" + ayid + "'  and c.id=p.stud_id and Remark not like '%Refund%') s pivot( sum(amount) for mode in (Cash, Cheque)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees],"
        //+ " case when Refund is null then 0 else Refund end as Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount"
        //+ " from cheque_status c,m_std_personaldetails_tbl p where subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "' and ayid='" + ayid + "'  and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b"
        //+ " on a.[Student ID]=b.[Student ID] order by CAST(a.[ROLL NO] as int)";

        string str = "";
        if (ayid != "" && course == "" && sub_crs == "" && sub_grp_id == "")
        {
            str = "select a.[ROLL NO],a.[Student ID],a.[Student Name],a.Gender,a.Category,a.[Group Title],a.[Course Fees],a.Balance,a.cash,a.Cheque,a.DD,case when b.refund is null then 0 else b.refund end as Refund,a.remark,a.authorized_by from ("
            + " select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when ((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) then (cast(TOTAL_COURSE_FEES"
            + " as int)-((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance', case when Cash is null then 0 else cash end as cash,case when Cheque "
            + " is null then 0 else Cheque end as Cheque,case when DD is null then 0 else DD end as DD,CASE WHEN remark LIKE '%,'  THEN LEFT(remark, LEN(remark)-1)ELSE remark END as remark,CASE WHEN authorized_by LIKE '%,'  THEN LEFT(authorized_by, LEN(authorized_by)-1)ELSE authorized_by END as authorized_by  from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,"
            + " Amount,(STUFF((SELECT ', ' + CAST(remark AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' FOR XML PATH(''), TYPE)"
            + " .value('.','NVARCHAR(MAX)'),1,2,' ')) as remark,(STUFF((SELECT ', ' + CAST(authorized_by AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' FOR XML PATH(''), TYPE)"
            + ".value('.','NVARCHAR(MAX)'),1,2,' ')) as authorized_by from cheque_status c,m_std_personaldetails_tbl p  where ayid='" + ayid + "' and c.id=p.stud_id and Remark not like '%Refund%'"
            + ") s pivot( sum(amount) for mode in (Cash, Cheque,DD)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when Refund is null then 0 else Refund end as "
            + " Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount from cheque_status c,"
            + " m_std_personaldetails_tbl p where ayid='" + ayid + "'  and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b on a.[Student ID]=b.[Student ID] order by CAST(a.[ROLL NO] as int)";
        }
        else if (ayid != "" && course != "" && sub_crs == "" && sub_grp_id == "")
        {
            str = "select a.[ROLL NO],a.[Student ID],a.[Student Name],a.Gender,a.Category,a.[Group Title],a.[Course Fees],a.Balance,a.cash,a.Cheque,a.DD,case when b.refund is null then 0 else b.refund end as Refund,a.remark,a.authorized_by from ("
           + " select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when ((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) then (cast(TOTAL_COURSE_FEES"
           + " as int)-((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance', case when Cash is null then 0 else cash end as cash,case when Cheque "
           + " is null then 0 else Cheque end as Cheque,case when DD is null then 0 else DD end as DD,CASE WHEN remark LIKE '%,'  THEN LEFT(remark, LEN(remark)-1)ELSE remark END as remark,CASE WHEN authorized_by LIKE '%,'  THEN LEFT(authorized_by, LEN(authorized_by)-1)ELSE authorized_by END as authorized_by  from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,"
           + " Amount,(STUFF((SELECT ', ' + CAST(remark AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' and course_id='" + course + "' FOR XML PATH(''), TYPE)"
           + " .value('.','NVARCHAR(MAX)'),1,2,' ')) as remark,(STUFF((SELECT ', ' + CAST(authorized_by AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' and course_id='" + course + "' FOR XML PATH(''), TYPE)"
           + ".value('.','NVARCHAR(MAX)'),1,2,' ')) as authorized_by from cheque_status c,m_std_personaldetails_tbl p  where ayid='" + ayid + "' and course_id='" + course + "' and c.id=p.stud_id and Remark not like '%Refund%'"
           + ") s pivot( sum(amount) for mode in (Cash, Cheque,DD)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when Refund is null then 0 else Refund end as "
           + " Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount from cheque_status c,"
           + " m_std_personaldetails_tbl p where ayid='" + ayid + "' and course_id='" + course + "'  and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b on a.[Student ID]=b.[Student ID] order by CAST(a.[ROLL NO] as int)";
        }
        else if (ayid != "" && course != "" && sub_crs != "" && sub_grp_id == "")
        {
            str = "select a.[ROLL NO],a.[Student ID],a.[Student Name],a.Gender,a.Category,a.[Group Title],a.[Course Fees],a.Balance,a.cash,a.Cheque,a.DD,case when b.refund is null then 0 else b.refund end as Refund,a.remark,a.authorized_by from ("
            + " select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when ((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) then (cast(TOTAL_COURSE_FEES"
            + " as int)-((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance', case when Cash is null then 0 else cash end as cash,case when Cheque "
            + " is null then 0 else Cheque end as Cheque,case when DD is null then 0 else DD end as DD,CASE WHEN remark LIKE '%,'  THEN LEFT(remark, LEN(remark)-1)ELSE remark END as remark,CASE WHEN authorized_by LIKE '%,'  THEN LEFT(authorized_by, LEN(authorized_by)-1)ELSE authorized_by END as authorized_by  from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,"
            + " Amount,(STUFF((SELECT ', ' + CAST(remark AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' FOR XML PATH(''), TYPE)"
            + " .value('.','NVARCHAR(MAX)'),1,2,' ')) as remark,(STUFF((SELECT ', ' + CAST(authorized_by AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' FOR XML PATH(''), TYPE)"
            + ".value('.','NVARCHAR(MAX)'),1,2,' ')) as authorized_by from cheque_status c,m_std_personaldetails_tbl p  where ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' and c.id=p.stud_id and Remark not like '%Refund%'"
            + ") s pivot( sum(amount) for mode in (Cash, Cheque,DD)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when Refund is null then 0 else Refund end as "
            + " Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount from cheque_status c,"
            + " m_std_personaldetails_tbl p where ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b on a.[Student ID]=b.[Student ID] order by CAST(a.[ROLL NO] as int)";
        }
        else
        {
            str = "select a.[ROLL NO],a.[Student ID],a.[Student Name],a.Gender,a.Category,a.[Group Title],a.[Course Fees],a.Balance,a.cash,a.Cheque,a.DD,case when b.refund is null then 0 else b.refund end as Refund,a.remark,a.authorized_by from ("
            + " select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when ((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) then (cast(TOTAL_COURSE_FEES"
            + " as int)-((case when DD is null then 0 else DD end)+(case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance', case when Cash is null then 0 else cash end as cash,case when Cheque "
            + " is null then 0 else Cheque end as Cheque,case when DD is null then 0 else DD end as DD,CASE WHEN remark LIKE '%,'  THEN LEFT(remark, LEN(remark)-1)ELSE remark END as remark,CASE WHEN authorized_by LIKE '%,'  THEN LEFT(authorized_by, LEN(authorized_by)-1)ELSE authorized_by END as authorized_by from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,"
            + " Amount,(STUFF((SELECT ', ' + CAST(remark AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "' FOR XML PATH(''), TYPE)"
            + " .value('.','NVARCHAR(MAX)'),1,2,' ')) as remark,(STUFF((SELECT ', ' + CAST(authorized_by AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "' FOR XML PATH(''), TYPE)"
            + ".value('.','NVARCHAR(MAX)'),1,2,' ')) as authorized_by from cheque_status c,m_std_personaldetails_tbl p  where ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "' and c.id=p.stud_id and Remark not like '%Refund%'"
            + ") s pivot( sum(amount) for mode in (Cash, Cheque,DD)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when Refund is null then 0 else Refund end as "
            + " Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount from cheque_status c,"
            + " m_std_personaldetails_tbl p where ayid='" + ayid + "' and course_id='" + course + "' and subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "' and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b on a.[Student ID]=b.[Student ID] order by CAST(a.[ROLL NO] as int)";
        }

        DataTable dtfill = cls1.fillDataTable(str);

        if (dtfill.Rows.Count > 0)
        {
            //dtfill.Columns.Add("Remark");
            //dtfill.Columns.Add("AuthorizedBy");
            //string qry = "";
            //string remark = "";
            //string authorizedby = "";
            //for (int i = 0; i < dtfill.Rows.Count; i++)
            //{
            //    qry = "select distinct remark,authorized_by from cheque_status where id='" + dtfill.Rows[i]["Student ID"].ToString() + "' and ayid='" + ayid + "' and subcourse_Id='" + sub_crs + "' and group_id='" + sub_grp_id + "'";
            //    DataTable dtmks = cls1.fillDataTable(qry);
            //    if (dtmks.Rows.Count > 0)
            //    {
            //        remark = "";
            //        authorizedby = "";
            //        for (int j = 0; j < dtmks.Rows.Count; j++)
            //        {
            //            if (j == dtmks.Rows.Count - 1)
            //            {
            //                remark = remark + dtmks.Rows[j]["remark"].ToString();
            //                authorizedby = authorizedby + dtmks.Rows[j]["authorized_by"].ToString();
            //            }
            //            else
            //            {
            //                if (dtmks.Rows[j]["remark"].ToString() == "")
            //                {
            //                    remark = remark + dtmks.Rows[j]["remark"].ToString();
            //                }
            //                else
            //                {
            //                    remark = remark + dtmks.Rows[j]["remark"].ToString() + ',';
            //                }

            //                if (dtmks.Rows[j]["authorized_by"].ToString() == "")
            //                {
            //                    authorizedby = authorizedby + dtmks.Rows[j]["authorized_by"].ToString();
            //                }
            //                else
            //                {
            //                    authorizedby = authorizedby + dtmks.Rows[j]["authorized_by"].ToString() + ',';
            //                }
            //            }
            //        }
            //    }
            //    dtfill.Rows[i]["Remark"] = remark;
            //    dtfill.Rows[i]["AuthorizedBy"] = authorizedby;
            //}

            foreach (DataRow dtrow in dtfill.Rows)
            {
                shortfeerpt regi = new shortfeerpt();
                regi.rollno = dtrow["ROLL NO"].ToString();
                regi.id = dtrow["Student ID"].ToString();
                regi.name = dtrow["Student Name"].ToString();
                regi.group = dtrow["Group Title"].ToString();
                regi.coursefee = dtrow["Course Fees"].ToString();
                regi.refund = dtrow["Refund"].ToString();
                regi.gender = dtrow["Gender"].ToString();
                regi.category = dtrow["Category"].ToString();
                regi.balance = dtrow["Balance"].ToString();
                regi.cash = dtrow["Cash"].ToString();
                regi.cheque = dtrow["Cheque"].ToString();
                regi.DD = dtrow["DD"].ToString();
                regi.remark = dtrow["Remark"].ToString();
                regi.authorized = dtrow["Authorized_By"].ToString();
                regi.msg = "";
                details.Add(regi);
            }
        }
        else
        {
            shortfeerpt regi = new shortfeerpt();
            regi.msg = "No Data Found";
            details.Add(regi);
        }
        return details.ToArray();
    }

    public List<ListItem> fillselect(string type)
    {
        string qry = "";
        if (type.Remove(type.Length - 1) == "personal")
        {
            qry = "select 'stud_Category' as 'Fieldid','CATEGORY' as 'Text' union all select 'stud_Caste' as 'Fieldid','CASTE' as 'Text' union all select 'stud_SubCaste' as 'Fieldid','SUB-CASTE' as 'Text' union all"
            + " select 'stud_Father_FName' as 'Fieldid','FATHER NAME' as 'Text' union all select 'stud_Father_TelNo' as 'Fieldid','FATHER PHONE NO' as 'Text' union all select 'stud_Mother_FName' as 'Fieldid','MOTHER NAME' as 'Text' union all "
            + " select 'stud_Mother_TelNo' as 'Fieldid','MOTHER PHONE NO' as 'Text' union all select 'stud_NativePhone' as 'Fieldid','NATIVE PHONE NO' as 'Text' union all select 'stud_Gaurd_FName' as 'Fieldid','GAURDIAN NAME' as 'Text' union all "
            + " select 'stud_Email' as 'Fieldid','STUDENT EMAIL' as 'Text' union all select 'stud_Gaurd_TelNo' as 'Fieldid','GAURDIAN PHONE NO' as 'Text' union all select 'stud_YearlyIncome' as 'Fieldid','YEARLY INCOME' as 'Text' union all select 'stud_aadhar' as 'Fieldid','AADHAR NO' as 'Text' union all "
            + " select 'stud_voterid' as 'Fieldid','VOTER ID NO' as 'Text' union all select 'dob1' as 'Fieldid','DOB' as 'Text' union all select 'stud_PermanentPhone' as 'Fieldid','STUDENT PHONE NO' as 'Text' union all select 'stud_PermanentAdd' as 'Fieldid','STUDENT ADDRESS' as 'Text' "
            + " union all select 'ID_No' as 'Fieldid','PRN NO' as 'Text' union all select 'stud_Earning' as 'Fieldid','EARNING' as 'Text' union all select 'stud_NonEarning' as 'Fieldid','NON-EARNING' as 'Text'";
        }
        else if (type.Remove(type.Length - 1) == "fee")
        {
            qry = "select 'Balance' as 'Fieldid','BALANCE AMOUNT' as 'Text' union all select 'MODE' as 'Fieldid','PAY MODE' as 'Text' union all"
            + " select 'rpt' as 'Fieldid','RECEIPT NO' as 'Text' union all select 'AMOUNT' as 'Fieldid','AMOUNT PAID' as 'Text' union all select 'authorized_by' as 'Fieldid','AUTHORISED BY' as 'Text' union all select 'remark' as 'Fieldid','REMARK' as 'Text' ";
        }
        else if (type.Remove(type.Length - 1) == "personal,fee" || type.Remove(type.Length - 1) == "fee,personal")
        {
            //qry = "select 'stud_Category' as 'Fieldid','CATEGORY' as 'Text' union all select 'stud_Caste' as 'Fieldid','CASTE' as 'Text' union all select 'stud_SubCaste' as 'Fieldid','SUB-CASTE' as 'Text' union all"
            //+ " select 'stud_Father_FName' as 'Fieldid','FATHER NAME' as 'Text' union all select 'stud_Father_TelNo' as 'Fieldid','FATHER PHONE NO' as 'Text' union all select 'stud_Mother_FName' as 'Fieldid','MOTHER NAME' as 'Text' union all "
            //+ " select 'stud_Mother_TelNo' as 'Fieldid','MOTHER PHONE NO' as 'Text' union all select 'stud_NativePhone' as 'Fieldid','NATIVE PHONE NO' as 'Text' union all select 'stud_Gaurd_FName' as 'Fieldid','GAURDIAN NAME' as 'Text' union all "
            //+ " select 'stud_Gaurd_TelNo' as 'Fieldid','GAURDIAN PHONE NO' as 'Text' union all select 'stud_YearlyIncome' as 'Fieldid','YEARLY INCOME' as 'Text' union all select 'stud_aadhar' as 'Fieldid','AADHAR NO' as 'Text' union all "
            //+ " select 'stud_voterid' as 'Fieldid','VOTER ID NO' as 'Text' union all select 'dob1' as 'Fieldid','DOB' as 'Text' union all select 'stud_PermanentPhone' as 'Fieldid','STUDENT PHONE NO' as 'Text' union all select 'stud_PermanentAdd' as 'Fieldid','STUDENT ADDRESS' as 'Text' "
            //+ " union all select 'ID_No' as 'Fieldid','PRN NO' as 'Text' union all select 'stud_Earning' as 'Fieldid','EARNING' as 'Text' union all select 'stud_NonEarning' as 'Fieldid','NON-EARNING' as 'Text' union all"
            //+ " select 'Balance' as 'Fieldid','BALANCE AMOUNT' as 'Text' union all select 'cash' as 'Fieldid','CASH' as 'Text' union all"
            //+ " select 'Cheque' as 'Fieldid','CHEQUE' as 'Text' union all select 'Refund' as 'Fieldid','REFUND AMOUNT' as 'Text' union all select 'authorized_by' as 'Fieldid','AUTHORIZED' as 'Text'";

            qry = "select 'stud_Category' as 'Fieldid','CATEGORY' as 'Text' union all select 'stud_Caste' as 'Fieldid','CASTE' as 'Text' union all select 'stud_SubCaste' as 'Fieldid','SUB-CASTE' as 'Text' union all"
        + " select 'stud_Father_FName' as 'Fieldid','FATHER NAME' as 'Text' union all select 'stud_Father_TelNo' as 'Fieldid','FATHER PHONE NO' as 'Text' union all select 'stud_Mother_FName' as 'Fieldid','MOTHER NAME' as 'Text' union all "
        + " select 'stud_Mother_TelNo' as 'Fieldid','MOTHER PHONE NO' as 'Text' union all select 'stud_NativePhone' as 'Fieldid','NATIVE PHONE NO' as 'Text' union all select 'stud_Gaurd_FName' as 'Fieldid','GAURDIAN NAME' as 'Text' union all "
        + " select 'stud_Gaurd_TelNo' as 'Fieldid','GAURDIAN PHONE NO' as 'Text' union all select 'stud_YearlyIncome' as 'Fieldid','YEARLY INCOME' as 'Text' union all select 'stud_aadhar' as 'Fieldid','AADHAR NO' as 'Text' union all "
        + " select 'stud_voterid' as 'Fieldid','VOTER ID NO' as 'Text' union all select 'dob1' as 'Fieldid','DOB' as 'Text' union all select 'stud_PermanentPhone' as 'Fieldid','STUDENT PHONE NO' as 'Text' union all select 'stud_PermanentAdd' as 'Fieldid','STUDENT ADDRESS' as 'Text' "
        + " union all select 'ID_No' as 'Fieldid','PRN NO' as 'Text' union all select 'stud_Earning' as 'Fieldid','EARNING' as 'Text' union all select 'stud_NonEarning' as 'Fieldid','NON-EARNING' as 'Text' union all"
        + " select 'Balance' as 'Fieldid','BALANCE AMOUNT' as 'Text' union all "
        + " select 'authorized_by' as 'Fieldid','AUTHORIZED' as 'Text'";
        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> subgrp = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subgrp.Add(new ListItem
                        {
                            Value = sdr["Fieldid"].ToString(),
                            Text = sdr["Text"].ToString()
                        });
                    }
                }
                con.Close();
                return subgrp;
            }
        }
    }

    public overalldt[] overalldata(string ayid, string course, string field)
    {
        string str = "";
        List<overalldt> details = new List<overalldt>();
        if (field == "")
        {
            //str = "select [ROLL NO],[Student Name],[Group Title],[Course Fees],Balance,cash,Cheque,Refund,remark,authorized_by,x.* from (select distinct p.stud_id,case when ID_No is not null and ID_no like '%|%' then LEFT(ID_No,charindex('|',ID_No)-1) else ' ' end as ID_No,case when stud_Gender=0 then 'Female' else 'Male' end as stud_Gender,convert(varchar(10),stud_DOB,103) as stud_dob,"
            //    + " case when (stud_Category is null or stud_Category='NULL') then ' ' else stud_category end as stud_Category,case when (stud_Caste is null or stud_caste='NULL') then ' ' else stud_caste end as stud_Caste,case when (stud_SubCaste is null or stud_SubCaste='NULL') then ' ' else stud_SubCaste end as stud_SubCaste,stud_Father_FName,stud_Father_TelNo,stud_Mother_FName,stud_Mother_TelNo,stud_NativePhone,"
            //    + " case when stud_Gaurd_FName is null then ' ' else stud_Gaurd_FName end as stud_Gaurd_FName,case when stud_Gaurd_TelNo is null then ' ' else stud_Gaurd_TelNo end as stud_Gaurd_TelNo,stud_YearlyIncome,case when stud_aadhar is null then ' ' else stud_aadhar end as stud_aadhar,case when stud_Earning is null then 0 else stud_Earning end as stud_Earning,case when stud_NonEarning is null then 0 else stud_NonEarning end as stud_NonEarning,case when stud_voterid is null then ' ' else stud_voterid end as stud_voterid,case when stud_PermanentPhone is null then '0' else stud_PermanentPhone end as stud_PermanentPhone,case when stud_PermanentAdd is null then ' ' else stud_PermanentAdd+' '+isnull(stud_PermanentState,'')+' '+isnull(stud_PermanentCity,'')+' '+isnull(stud_PermanentPincode,'') end as stud_PermanentAdd "
            //    + " from m_std_personaldetails_tbl p,m_std_studentacademic_tbl a where a.group_id in (select Group_id from m_crs_subjectgroup_tbl where subcourse_id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "'))  and p.stud_id=a.stud_id and p.del_flag=0 and p.del_flag=a.del_flag) x inner join (select a.[ROLL NO],a.[Student ID],a.[Student Name],a.Gender,a.Category,a.[Group Title],a.[Course Fees],a.Balance,a.cash,a.Cheque,case when b.refund is null then 0 else b.refund end as Refund,a.remark,a.authorized_by from ("
            //    + " select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when ((case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) and remark  not like '%Scholarship%' then (cast(TOTAL_COURSE_FEES as int)-((case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance',"
            //    + " case when Cash is null then 0 else cash end as cash,case when Cheque is null then 0 else Cheque end as Cheque,CASE WHEN remark LIKE '%,'  THEN LEFT(remark, LEN(remark)-1)ELSE remark END as remark,CASE WHEN authorized_by LIKE '%,'  THEN LEFT(authorized_by, LEN(authorized_by)-1)ELSE authorized_by END as authorized_by  from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,"
            //    + " Amount,(STUFF((SELECT ', ' + CAST(remark AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)'),1,2,' ')) as remark,(STUFF((SELECT ', ' + CAST(authorized_by AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' FOR XML PATH(''), TYPE)"
            //    + " .value('.','NVARCHAR(MAX)'),1,2,' ')) as authorized_by from cheque_status c,m_std_personaldetails_tbl p  where  c.group_id in (select Group_id from m_crs_subjectgroup_tbl where subcourse_id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "'))  and ayid='" + ayid + "' and c.id=p.stud_id and Remark not like '%Refund%') s pivot( sum(amount) for mode in (Cash, Cheque)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when Refund is null then 0 else Refund end as "
            //    + " Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount from cheque_status c,"
            //    + " m_std_personaldetails_tbl p where c.group_id in (select Group_id from m_crs_subjectgroup_tbl where subcourse_id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "'))  and ayid='" + ayid + "'  and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b on a.[Student ID]=b.[Student ID]) y on x.stud_id=y.[Student ID] order by [Group Title],CAST(y.[ROLL NO] as int)";
            str = "select  convert(varchar(11),stud_DOB,103) as dob1,c.Group_title,case when ID_No is not null and ID_no like '%|%' then LEFT(ID_No,charindex('|',ID_No)-1) else ' ' end as ID_No,b.Roll_no,upper(isnull(a.stud_F_Name,'')+' '+isnull(a.stud_m_Name,'')+' '+isnull(a.stud_L_Name,'')) as [Student Name],case when a.stud_gender=0 then 'Female' else 'Male' "
+ " end as Gender,a.* from m_std_personaldetails_tbl a,m_std_studentacademic_tbl b,m_crs_subjectgroup_tbl c where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and "
+ " b.subcourse_Id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "') and b.del_flag=0 and b.group_id=c.Group_id";
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(str);

            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    overalldt regi = new overalldt();
                    regi.rollno = dtrow["Roll_no"].ToString();
                    regi.id = dtrow["stud_id"].ToString();
                    regi.name = dtrow["Student Name"].ToString();
                    regi.group = dtrow["Group_title"].ToString();
                    // regi.coursefee = dtrow["Course Fees"].ToString();
                    //regi.refund = dtrow["Refund"].ToString();
                    regi.gender = dtrow["Gender"].ToString();
                    regi.category = dtrow["stud_category"].ToString();
                    //regi.balance = dtrow["Balance"].ToString();
                    //regi.cash = dtrow["Cash"].ToString();
                    //regi.cheque = dtrow["Cheque"].ToString();
                    //regi.remark = dtrow["Remark"].ToString();
                    //regi.authorized = dtrow["Authorized_By"].ToString();
                    regi.email = dtrow["stud_email"].ToString();
                    regi.FatherName = dtrow["stud_Father_FName"].ToString();
                    regi.FatherPhoneNo = dtrow["stud_Father_TelNo"].ToString();
                    regi.MotherName = dtrow["stud_Mother_FName"].ToString();
                    regi.MotherPhoneNo = dtrow["stud_Mother_TelNo"].ToString();
                    regi.GauridanName = dtrow["stud_Gaurd_FName"].ToString();
                    regi.GauridanPhoneNo = dtrow["stud_Gaurd_TelNo"].ToString();
                    regi.NativePhoneNo = dtrow["stud_NativePhone"].ToString();
                    regi.YearlyIncome = dtrow["stud_YearlyIncome"].ToString();
                    regi.AadharNo = dtrow["stud_aadhar"].ToString();
                    regi.VoterIdNo = dtrow["stud_voterid"].ToString();
                    regi.caste = dtrow["stud_Caste"].ToString();
                    regi.subcaste = dtrow["stud_SubCaste"].ToString();
                    regi.dob = dtrow["dob1"].ToString();
                    regi.PRN = dtrow["ID_No"].ToString();
                    regi.studphone = dtrow["stud_PermanentPhone"].ToString();
                    regi.studadd = dtrow["stud_PermanentAdd"].ToString();
                    regi.earning = dtrow["stud_Earning"].ToString();
                    regi.nonearning = dtrow["stud_NonEarning"].ToString();
                    regi.msg = "";
                    details.Add(regi);
                }
            }
            else
            {
                overalldt regi = new overalldt();
                regi.msg = "No Data Found";
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            //str = "select stud_id,[Student Name],stud_gender,[ROLL NO],[Group Title]," + field + " from ( select [ROLL NO],[Student Name],[Group Title],[Course Fees],Balance,cash,Cheque,Refund,remark,authorized_by,x.* from (select distinct p.stud_id,case when ID_No is not null and ID_no like '%|%' then LEFT(ID_No,charindex('|',ID_No)-1) else ' ' end as ID_No,case when stud_Gender=0 then 'Female' else 'Male' end as stud_Gender,convert(varchar(10),stud_DOB,103) as stud_dob,"
            //   + "ISNULL(stud_category,'')  as stud_Category,ISNULL(stud_caste,'')   as stud_Caste, ISNULL(stud_SubCaste,'')  as stud_SubCaste,stud_Father_FName,stud_Father_TelNo,stud_Mother_FName,stud_Mother_TelNo,stud_NativePhone,"
            //   + " case when stud_Gaurd_FName is null then ' ' else stud_Gaurd_FName end as stud_Gaurd_FName,case when stud_Gaurd_TelNo is null then ' ' else stud_Gaurd_TelNo end as stud_Gaurd_TelNo,case when stud_Earning is null then 0 else stud_Earning end as stud_Earning,case when stud_NonEarning is null then 0 else stud_NonEarning end as stud_NonEarning,stud_YearlyIncome,case when stud_aadhar is null then ' ' else stud_aadhar end as stud_aadhar,case when stud_voterid is null then ' ' else stud_voterid end as stud_voterid,case when stud_PermanentPhone is null then '0' else stud_PermanentPhone end as stud_PermanentPhone,case when stud_PermanentAdd is null then ' ' else stud_PermanentAdd+' '+isnull(stud_PermanentState,'')+' '+isnull(stud_PermanentCity,'')+' '+isnull(stud_PermanentPincode,'') end as stud_PermanentAdd"
            //   + " from m_std_personaldetails_tbl  p,m_std_studentacademic_tbl a where a.group_id in (select Group_id from m_crs_subjectgroup_tbl where subcourse_id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "')) and p.stud_id=a.stud_id and p.del_flag=0 and p.del_flag=a.del_flag) x inner join (select a.[ROLL NO],a.[Student ID],a.[Student Name],a.Gender,a.Category,a.[Group Title],a.[Course Fees],a.Balance,a.cash,a.Cheque,case when b.refund is null then 0 else b.refund end as Refund,a.remark,a.authorized_by from ("
            //   + " select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when ((case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))<cast(TOTAL_COURSE_FEES as int) and remark  not like '%Scholarship%' then (cast(TOTAL_COURSE_FEES as int)-((case when Cash is null then 0 else cash end)+(case when Cheque is null then 0 else Cheque end))) else 0 end as 'Balance',"
            //   + " case when Cash is null then 0 else cash end as cash,case when Cheque is null then 0 else Cheque end as Cheque,CASE WHEN remark LIKE '%,'  THEN LEFT(remark, LEN(remark)-1)ELSE remark END as remark,CASE WHEN authorized_by LIKE '%,'  THEN LEFT(authorized_by, LEN(authorized_by)-1)ELSE authorized_by END as authorized_by  from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,MODE,"
            //   + " Amount,(STUFF((SELECT ', ' + CAST(remark AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)'),1,2,' ')) as remark,(STUFF((SELECT ', ' + CAST(authorized_by AS VARCHAR(Max)) [text()] FROM cheque_status WHERE ID = c.ID and ayid='" + ayid + "' FOR XML PATH(''), TYPE)"
            //   + " .value('.','NVARCHAR(MAX)'),1,2,' ')) as authorized_by from cheque_status c,m_std_personaldetails_tbl p  where c.group_id in (select Group_id from m_crs_subjectgroup_tbl where subcourse_id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "')) and ayid = '" + ayid + "' and c.id=p.stud_id and Remark not like '%Refund%') s pivot( sum(amount) for mode in (Cash, Cheque)) as p1) as a left join (select [ROLL NO],ID as [Student ID],[Student Name],Gender,stud_category as Category,GROUP_TITLE as [Group Title],TOTAL_COURSE_FEES as [Course Fees], case when Refund is null then 0 else Refund end as "
            //   + " Refund from (select [ROLL NO],[Student Name],case when p.stud_gender=0 then 'Female' else 'Male' end as Gender,GROUP_TITLE,ID,TOTAL_COURSE_FEES,p.stud_category,remark,Amount from cheque_status c,"
            //   + " m_std_personaldetails_tbl p where c.group_id in (select Group_id from m_crs_subjectgroup_tbl where subcourse_id in (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "')) and ayid ='" + ayid + "' and c.id=p.stud_id  and Remark  like '%Refund%') s pivot( sum(amount) for remark in (Refund)) as p1) as b on a.[Student ID]=b.[Student ID]) y on x.stud_id=y.[Student ID]) a order by [Group Title],CAST([ROLL NO] as int)";

            //    str = "select stud_id,roll,GENDER,stud_name,GROUP_TITLE," + field + " from "
            //+ " (select distinct convert(varchar(11),stud_DOB,103) as dob1,CASE WHEN e.remark LIKE '%,'  THEN LEFT(e.remark, LEN(e.remark)-1)ELSE e.remark END as remark,CASE WHEN e.authorized_by LIKE '%,'  THEN LEFT(e.authorized_by, LEN(e.authorized_by)-1)ELSE e.authorized_by END as authorized_by,e.GROUP_TITLE,case when  a.stud_Gender=0 then 'Female' else 'Male' end as GENDER,isnull(a.stud_F_Name,'')+' '+isnull(a.stud_m_Name,'')+' '+isnull(a.stud_l_Name,'')"
            //+ " as stud_name,b.Roll_no as roll,e.[Recpt No] as rpt,e.MODE,e.AMOUNT,e.BALANCE,a.* From m_std_personaldetails_tbl a,m_std_studentacademic_tbl b, m_FeeEntry c,m_FeeMaster d,"
            //+ " Cheque_Status e where a.stud_id=b.stud_id and b.stud_id=c.Stud_id and c.Stud_id=e.ID and b.ayid=c.Ayid and c.Ayid=e.ayid and b.subcourse_Id in"
            //+ " (select subcourse_id from m_crs_subcourse_tbl where course_id = '"+course+"') and b.ayid='"+ayid+"' and b.del_flag=0 ) x order by GROUP_TITLE,roll";

            str = "select stud_id,roll,GENDER,stud_name,GROUP_TITLE," + field + ""
+ " from (select distinct a.stud_id,convert(varchar(11),stud_DOB,103) as dob1,"
+ " CASE WHEN c.remark LIKE '%,'  THEN LEFT(c.remark, LEN(c.remark)-1)ELSE c.remark END as remark,CASE WHEN c.authorized_by LIKE '%,'  THEN LEFT(c.authorized_by,LEN(c.authorized_by)-1)ELSE c.authorized_by END as authorized_by,"
+ " case when ID_No is not null and ID_no like '%|%' then LEFT(ID_No,charindex('|',ID_No)-1) else ' ' end as ID_No,case when  a.stud_Gender=0 then 'Female' else 'Male' end as GENDER,"
+ " isnull(a.stud_F_Name,'')+' '+isnull(a.stud_m_Name,'')+' '+isnull(a.stud_l_Name,'') as stud_name,b.Roll_no as roll,c.Recpt_no as rpt,c.Recpt_mode as MODE,sum(c.amount) AMOUNT,sum(d.Amount)-sum(c.Amount) as Balance,"
+ " stud_SubCaste,stud_Caste,stud_Email,stud_Category,stud_NativePhone,stud_PermanentPhone,stud_PermanentAdd,stud_Earning,stud_NonEarning,stud_YearlyIncome,stud_aadhar,"
+ " stud_F_Name,stud_m_Name,stud_l_Name,stud_Mother_FName,stud_voterid,stud_Gaurd_TelNo,stud_Father_FName,stud_Father_TelNo,stud_Mother_TelNo,stud_Gaurd_FName,(select group_title from m_crs_subjectgroup_tbl where"
+ " b.group_id=Group_id) as GROUP_TITLE From m_std_personaldetails_tbl a,m_std_studentacademic_tbl b, m_FeeEntry c,m_FeeMaster d where a.stud_id=b.stud_id and b.stud_id=c.Stud_id  and b.ayid=c.Ayid and c.Ayid=d.Ayid and b.group_id=d.Group_id and c.ayid='" + ayid + "'  and b.del_flag=c.del_flag and b.del_flag=0 and b.subcourse_Id in "
+ " (select subcourse_id from m_crs_subcourse_tbl where course_id = '" + course + "') group by a.stud_id,a.stud_DOB,a.stud_Grno,stud_Nationality,stud_Religion,stud_SubCaste,stud_Caste,stud_Email,stud_Category,stud_NativePhone,stud_PermanentPhone,stud_PermanentAdd,stud_Father_FName,stud_voterid,stud_Gaurd_TelNo,stud_Father_TelNo,stud_Earning,stud_NonEarning,stud_YearlyIncome,stud_aadhar,stud_F_Name,stud_m_Name,stud_l_Name,stud_Mother_FName,stud_Mother_TelNo,stud_Gaurd_FName,"
+ " stud_Gaurd_TelNo,b.ayid,a.stud_BloodGroup,convert(varchar(11),stud_DOB,103),ID_No,c.Remark,b.group_id,c.Authorized_By,a.stud_Gender,a.stud_F_Name,a.stud_m_Name,a.stud_l_Name,b.Roll_no,c.Recpt_no,c.Recpt_mode) x order by GROUP_TITLE,stud_name";

            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(str);

            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    overalldt regi = new overalldt();
                    regi.rollno = dtrow["roll"].ToString();
                    regi.id = dtrow["stud_id"].ToString();
                    regi.name = dtrow["stud_name"].ToString();
                    regi.group = dtrow["GROUP_TITLE"].ToString();
                    regi.gender = dtrow["GENDER"].ToString();
                    //regi.dob = dtrow["stud_dob"].ToString();

                    if (ContainColumn("stud_Email", dt) == true)
                    {
                        regi.email = dtrow["stud_Email"].ToString();
                    }
                    else
                    {
                        regi.email = "";
                    }

                    if (ContainColumn("dob1", dt) == true)
                    {
                        regi.dob = dtrow["dob1"].ToString();
                    }
                    else
                    {
                        regi.dob = "";
                    }

                    if (ContainColumn("stud_Earning", dt) == true)
                    {
                        regi.earning = dtrow["stud_Earning"].ToString();
                    }
                    else
                    {
                        regi.earning = "";
                    }

                    if (ContainColumn("stud_NonEarning", dt) == true)
                    {
                        regi.nonearning = dtrow["stud_NonEarning"].ToString();
                    }
                    else
                    {
                        regi.nonearning = "";
                    }

                    if (ContainColumn("ID_No", dt) == true)
                    {
                        regi.PRN = dtrow["ID_No"].ToString();
                    }
                    else
                    {
                        regi.PRN = "";
                    }

                    if (ContainColumn("stud_PermanentPhone", dt) == true)
                    {
                        regi.studphone = dtrow["stud_PermanentPhone"].ToString();
                    }
                    else
                    {
                        regi.studphone = "";
                    }

                    if (ContainColumn("stud_PermanentAdd", dt) == true)
                    {
                        regi.studadd = dtrow["stud_PermanentAdd"].ToString();
                    }
                    else
                    {
                        regi.studadd = "";
                    }

                    //if (ContainColumn("Course Fees", dt) == true)
                    //{
                    //    regi.coursefee = dtrow["Course Fees"].ToString();
                    //}
                    //else
                    //{
                    //    regi.coursefee = "";
                    //}

                    //if (ContainColumn("Refund", dt) == true)
                    //{
                    //    regi.refund = dtrow["Refund"].ToString();
                    //}
                    //else
                    //{
                    //    regi.refund = "";
                    //}

                    if (ContainColumn("stud_category", dt) == true)
                    {
                        regi.category = dtrow["stud_category"].ToString();
                    }
                    else
                    {
                        regi.category = "";
                    }
                    if (ContainColumn("Remark", dt) == true)
                    {
                        regi.remark = dtrow["Remark"].ToString();
                    }
                    else
                    {
                        regi.remark = "";
                    }
                    if (ContainColumn("stud_Father_FName", dt) == true)
                    {
                        regi.FatherName = dtrow["stud_Father_FName"].ToString();
                    }
                    else
                    {
                        regi.FatherName = "";
                    }

                    if (ContainColumn("stud_Father_TelNo", dt) == true)
                    {
                        regi.FatherPhoneNo = dtrow["stud_Father_TelNo"].ToString();
                    }
                    else
                    {
                        regi.FatherPhoneNo = "";
                    }

                    if (ContainColumn("stud_Mother_FName", dt) == true)
                    {
                        regi.MotherName = dtrow["stud_Mother_FName"].ToString();
                    }
                    else
                    {
                        regi.MotherName = "";
                    }

                    if (ContainColumn("stud_Mother_TelNo", dt) == true)
                    {
                        regi.MotherPhoneNo = dtrow["stud_Mother_TelNo"].ToString();
                    }
                    else
                    {
                        regi.MotherPhoneNo = "";
                    }

                    if (ContainColumn("stud_Gaurd_FName", dt) == true)
                    {
                        regi.GauridanName = dtrow["stud_Gaurd_FName"].ToString();
                    }
                    else
                    {
                        regi.GauridanName = "";
                    }

                    if (ContainColumn("stud_Gaurd_TelNo", dt) == true)
                    {
                        regi.GauridanPhoneNo = dtrow["stud_Gaurd_TelNo"].ToString();
                    }
                    else
                    {
                        regi.GauridanPhoneNo = "";
                    }

                    if (ContainColumn("stud_NativePhone", dt) == true)
                    {
                        regi.NativePhoneNo = dtrow["stud_NativePhone"].ToString();
                    }
                    else
                    {
                        regi.NativePhoneNo = "";
                    }

                    if (ContainColumn("stud_YearlyIncome", dt) == true)
                    {
                        regi.YearlyIncome = dtrow["stud_YearlyIncome"].ToString();
                    }
                    else
                    {
                        regi.YearlyIncome = "";
                    }

                    if (ContainColumn("stud_aadhar", dt) == true)
                    {
                        regi.AadharNo = dtrow["stud_aadhar"].ToString();
                    }
                    else
                    {
                        regi.AadharNo = "";
                    }

                    if (ContainColumn("stud_voterid", dt) == true)
                    {
                        regi.VoterIdNo = dtrow["stud_voterid"].ToString();
                    }
                    else
                    {
                        regi.VoterIdNo = "";
                    }
                    if (ContainColumn("stud_Caste", dt) == true)
                    {
                        regi.caste = dtrow["stud_Caste"].ToString();
                    }
                    else
                    {
                        regi.caste = "";
                    }
                    if (ContainColumn("stud_SubCaste", dt) == true)
                    {
                        regi.subcaste = dtrow["stud_SubCaste"].ToString();
                    }
                    else
                    {
                        regi.subcaste = "";
                    }

                    if (ContainColumn("Balance", dt) == true)
                    {
                        regi.balance = dtrow["Balance"].ToString();
                    }
                    else
                    {
                        regi.balance = "";
                    }

                    if (ContainColumn("MODE", dt) == true)
                    {
                        regi.mode = dtrow["MODE"].ToString();
                    }
                    else
                    {
                        regi.mode = "";
                    }
                    if (ContainColumn("rpt", dt) == true)
                    {
                        regi.rcpt = dtrow["rpt"].ToString();
                    }
                    else
                    {
                        regi.rcpt = "";
                    }
                    if (ContainColumn("AMOUNT", dt) == true)
                    {
                        regi.amt = dtrow["AMOUNT"].ToString();
                    }
                    else
                    {
                        regi.amt = "";
                    }
                    if (ContainColumn("authorized_by", dt) == true)
                    {
                        regi.authorized = dtrow["authorized_by"].ToString();
                    }
                    else
                    {
                        regi.authorized = "";
                    }
                    if (ContainColumn("remark", dt) == true)
                    {
                        regi.remark = dtrow["remark"].ToString();
                    }
                    else
                    {
                        regi.remark = "";
                    }

                    regi.msg = "";
                    details.Add(regi);
                }
            }
            else
            {
                overalldt regi = new overalldt();
                regi.msg = "No Data Found";
                details.Add(regi);
            }
            return details.ToArray();
        }
    }

    public bool ContainColumn(string columnName, DataTable table)
    {
        DataColumnCollection columns = table.Columns;
        if (columns.Contains(columnName))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //----------------exam generate--------------------------------
    public List<ListItem> fillbranch()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select course_name,course_id from m_Crs_course_tbl ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["course_id"].ToString(),
                            Text = sdr["course_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillbranch2()
    {
        String qry = "select course_name,course_id from m_Crs_course_tbl where  faculty_id in ('FAC00001','FAC00002','FAC00003','FAC00004') order by course_name";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["course_id"].ToString(),
                            Text = sdr["course_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> acdYear()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select Duration,AYID from m_academic order by ayid desc";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["AYID"].ToString(),
                            Text = sdr["Duration"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }


    public ExamStatus[] filldgvstatus(string ayid, string branch)
    {
        string query = "";
        // query = "EXECUTE cre_sp_exam_insert_delete 'select','exam_code like ''E%'' and del_flag=0 and ayid =''" + ayid + "'' and branch_id=''" + branch + "''',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL";
        query = "EXECUTE cre_sp_exam_insert_delete 'select','del_flag=0 and ayid =''" + ayid + "'' and branch_id=''" + branch + "''',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL";
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);

        List<ExamStatus> details = new List<ExamStatus>();
        foreach (DataRow dtrow in dt.Rows)
        {
            ExamStatus modal = new ExamStatus();
            modal.exam_code = dtrow["exam_code"].ToString();
            modal.exam_date = dtrow["exam_date"].ToString();
            modal.is_current = dtrow["is_current"].ToString();
            modal.is_lock = dtrow["is_lock"].ToString();
            details.Add(modal);
        }
        return details.ToArray();
    }

    public ExamStatus[] updatcurreexam(string examcode, string current, string curflag)
    {
        List<ExamStatus> details = new List<ExamStatus>();
        ExamStatus exs = new ExamStatus();
        string query = "";
        exs.msg = "";
        if (curflag == "true")
        {
            exs.msg = "check";
        }
        else if (curflag == "false")
        {
            exs.msg = "Uncheck";
        }
        else
        {
            exs.msg = "";
        }

        if (current == "true")
        {
            query = "UPDATE cre_exam SET is_current=1 where exam_code='" + examcode + "';";
            examcode = "R" + examcode;
            query = query + "UPDATE cre_exam SET is_current=1 where exam_code='" + examcode + "'";
        }
        else
        {
            query = "UPDATE cre_exam SET is_current=0 where exam_code='" + examcode + "';";
            examcode = "R" + examcode;
            query = query + "UPDATE cre_exam SET is_current=0 where exam_code='" + examcode + "'";
        }
        if (cls1.DMLqueries(query) == true)
        {
            details.Add(exs);
        }
        else
        {
            details.Add(exs);
        }
        return details.ToArray();
    }

    public ExamStatus[] updatelockexam(string examcode, string islock, string lockflag)
    {
        List<ExamStatus> details = new List<ExamStatus>();
        ExamStatus exs = new ExamStatus();
        string query = "";

        if (lockflag == "true")
        {
            exs.msg = "check";
        }
        else if (lockflag == "false")
        {
            exs.msg = "Uncheck";
        }
        else
        {
            exs.msg = "";
        }

        if (islock == "true")
        {
            query = "UPDATE cre_exam SET is_lock=1 where exam_code='" + examcode + "';";
            examcode = "R" + examcode;
            query = query + "UPDATE cre_exam SET is_lock=1 where exam_code='" + examcode + "'";
        }
        else
        {
            query = "UPDATE cre_exam SET is_lock=0 where exam_code='" + examcode + "';";
            examcode = "R" + examcode;
            query = query + "UPDATE cre_exam SET is_lock=0 where exam_code='" + examcode + "'";
        }
        if (cls1.DMLqueries(query) == true)
        {
            details.Add(exs);
        }
        else
        {
            details.Add(exs);
        }
        return details.ToArray();
    }
    public bool checkexist(string examcode)
    {
        string qry = "";
        qry = "select distinct(exam_code)  from cre_marks_tbl where  (h1 is not null or h2 is not null or h3 is not null) and del_flag=0";
        DataSet dss = new DataSet();
        dss = cls1.fillDataset(qry);

        for (int j = 0; j < dss.Tables[0].Rows.Count; j++)
        {
            if (dss.Tables[0].Rows[j]["exam_code"].ToString() == examcode)
            {
                return true;
            }
            else
            {

            }
        }
        return false;
    }
    public Resolution[] validity(string examcode, string ayid)
    {
        string msg = "";
        string query = "";
        DataTable dt = new DataTable();
        query = "select * from Online_KT_form_validity where exam_code ='" + examcode + "' and ayid='" + ayid + "' order by curr_date asc";
        DataTable dt1 = new DataTable();
        dt1 = cls1.fillDataTable(query);

        List<Resolution> details = new List<Resolution>();
        Resolution res = new Resolution();
        if (dt1.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt1.Rows)
            {
                res.date_val = dtrow["validity"].ToString();

                details.Add(res);
            }
        }
        else
        {
            res.msg = msg;
            details.Add(res);
        }
        return details.ToArray();
    }
    public bool deleteexam(string examcode, string ayid)
    {
        string qry = "";
        SqlCommand cmd = new SqlCommand();
        if (examcode != "")
        {
            qry = "";
            qry = "EXECUTE cre_sp_exam_insert_delete 'delete',NULL,'" + examcode + "',NULL,'" + ayid + "',NULL,NULL,NULL,NULL,NULL ";
            cmd.CommandType = CommandType.StoredProcedure;
            cls1.ExecuteDataBaseQuery(qry);
            qry = "";
            examcode = "R" + examcode;
            qry = "EXECUTE cre_sp_exam_insert_delete 'delete',NULL,'" + examcode + "',NULL,'" + ayid + "',NULL,NULL,NULL,NULL,NULL";
            cmd.CommandType = CommandType.StoredProcedure;
            //if (cls1.ExecuteDataBaseQuery(qry) == true)
            //{
            //    return true;
            //}
            //else
            //{
            //    return false;
            //}
            cls1.ExecuteDataBaseQuery(qry);
            return true;
        }
        else
        {
            return false;
        }
    }

    public List<ListItem> fillsubgrp(string branch, string semid)
    {
        string subcourse_id = "";
        string qry = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 ";
        DataTable dtSubCrs = new DataTable();
        dtSubCrs = cls1.fillDataTable(qry);

        //semester like '%sem-7%'

        if (semid == "Sem-1" || semid == "Sem-2")
        {
            subcourse_id = dtSubCrs.Rows[0]["subcourse_id"].ToString();
        }
        else if (semid == "Sem-3" || semid == "Sem-4")
        {
            subcourse_id = dtSubCrs.Rows[1]["subcourse_id"].ToString();
        }
        else if (semid == "Sem-5" || semid == "Sem-6")
        {
            subcourse_id = dtSubCrs.Rows[2]["subcourse_id"].ToString();
        }
        else if (semid == "Sem-7" || semid == "Sem-8")
        {
            subcourse_id = dtSubCrs.Rows[3]["subcourse_id"].ToString();
        }
        else
        {
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable("select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where semester like '%" + semid + "%' and del_flag=0 ");
            if (dt.Rows.Count > 0)
            {
                subcourse_id = dt.Rows[0]["subcourse_id"].ToString();
            }
            else
            {
                subcourse_id = dtSubCrs.Rows[4]["subcourse_id"].ToString();
            }
        }


        qry = "";
        qry = "select group_id,group_title from m_crs_subjectgroup_tbl where Subcourse_id='" + subcourse_id + "' and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["group_id"].ToString(),
                            Text = sdr["group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillsubject(string branch, string semid, string year, string group)
    {
        string qry = "";
        qry = "SELECT subject_name,subject_id FROM cre_subject WHERE subject_id in (select subject_id from cre_credit_tbl where ayid='" + year + "') and sem_id='" + semid + "' and branch_id='" + branch + "' and group_id like '%" + group + "%' and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["subject_id"].ToString(),
                            Text = sdr["subject_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillexam(string branch, string year)
    {
        string qry = "";
        // qry = "SELECT exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end else case atkt_exam when 2 then case when exam_code like 'E%' then '(Additional)'  else '(Reval Additional)' end else case  when exam_code like 'E%' then '(Regular)' else '(Reval Regular)' end end end as a1,exam_code FROM cre_exam WHERE ayid='" + year + "' and branch_id='" + branch + "'  and           del_flag= 0 and is_lock=0 and exam_code in (select distinct exam_code from cre_marks_tbl where del_flag=0)";

        qry = " SELECT exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end else "
  + " case atkt_exam when 2 then case when exam_code like 'E%' then '(Additional)'  else '(Reval Additional)' end else case  when exam_code "
  + " like 'E%' then '(Regular)' else '(Reval Regular)' end end end as a1,exam_code FROM cre_exam WHERE ayid='" + year + "' and branch_id='" + branch + "'  and     "
  + " del_flag= 0  and exam_date not like '%2018%'"
  + " and is_lock=0 and exam_code in (select distinct exam_code from cre_marks_tbl where del_flag=0) ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public Resolution[] fillResolution(string year, string subject, string exam)
    {
        string msg = "";
        string query = "";
        DataTable dt = new DataTable();
        query = "select distinct r.* from dbo.cre_resolution as r,dbo.cre_credit_tbl as c where r.credit_sub_id=c.credit_sub_id and r.ayid='" + year + "' and c.subject_id='" + subject + "' and r.exam_code='" + exam + "' and c.del_flag=0";
        DataTable dt1 = new DataTable();
        dt1 = cls1.fillDataTable(query);
        if (dt1.Rows.Count > 0)
        {
            msg = "Already Defined.";
        }
        else
        {
            msg = "";
            query = "";
            query = "select credit_sub_id,h1_out,h1_pass,h1_type,h2_out,h2_pass,h2_type from cre_credit_tbl where subject_id='" + subject + "' and ayid='" + year + "' and del_flag=0";
            SqlCommand cmd = new SqlCommand();
            dt = cls1.fillDataTable(query);
        }
        List<Resolution> details = new List<Resolution>();
        Resolution res = new Resolution();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                res.cre_credit = dtrow["credit_sub_id"].ToString();
                res.h1_type = dtrow["h1_type"].ToString();
                res.h1_out = dtrow["h1_out"].ToString();
                res.h1_pass = dtrow["h1_pass"].ToString();
                res.h1_res = "0";
                res.msg = msg;
                res.h2_type = dtrow["h2_type"].ToString();
                res.h2_out = dtrow["h2_out"].ToString();
                res.h2_pass = dtrow["h2_pass"].ToString();
                res.h2_res = "0";
                details.Add(res);
            }
        }
        else
        {
            res.msg = msg;
            details.Add(res);
        }
        return details.ToArray();
    }

    public Resolution[] filleditres(string year, string subject, string exam)
    {
        string query = "";
        string qry = "select * from cre_resolution where exam_code='" + exam + "' and ayid='" + year + "' and credit_sub_id=(select credit_sub_id from cre_credit_tbl where subject_id='" + subject + "' and ayid='" + year + "')";
        DataTable dts = new DataTable();
        dts = cls1.fillDataTable(qry);
        List<Resolution> details = new List<Resolution>();
        Resolution res = new Resolution();
        if (dts.Rows.Count > 0)
        {
            query = "select distinct r.credit_sub_id,r.h1_res,r.h2_res,c.h1_out,c.h1_pass,c.h1_type,c.h2_out,c.h2_pass,c.h2_type from dbo.cre_resolution as r,dbo.cre_credit_tbl as c where r.credit_sub_id=c.credit_sub_id and r.ayid='" + year + "' and c.subject_id='" + subject + "' and r.exam_code='" + exam + "' and c.del_flag=0";
            SqlCommand cmd = new SqlCommand();
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(query);

            foreach (DataRow dtrow in dt.Rows)
            {
                res.cre_credit = dtrow["credit_sub_id"].ToString();
                res.h1_type = dtrow["h1_type"].ToString();
                res.h1_out = dtrow["h1_out"].ToString();
                res.h1_pass = dtrow["h1_pass"].ToString();
                res.h1_res = dtrow["h1_res"].ToString();
                res.h2_type = dtrow["h2_type"].ToString();
                res.h2_out = dtrow["h2_out"].ToString();
                res.h2_pass = dtrow["h2_pass"].ToString();
                res.h2_res = dtrow["h2_res"].ToString();
                res.msg = "";
                details.Add(res);
            }
        }
        else
        {
            res.msg = "Not Defined";
            details.Add(res);
        }
        return details.ToArray();
    }
    public bool saveResolution(string qry)
    {
        return cls1.DMLqueries(qry);
    }

    public bool checkresolution(string qry)
    {
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        if (dt.Rows.Count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //---stored procedure used
    public Resolution[] generatnewexm(string branch, string year, string atktexam, string Date, string branch_text)
    {
        string qry = "";
        if (atktexam == "0")
        {
            qry = "select distinct(exam_date) from cre_exam where del_flag=0 and atkt_exam=0  and ayid='" + year + "' and branch_id='" + branch + "' ";
        }
        else if (atktexam == "1")
        {
            qry = "select distinct(exam_date) from cre_exam where del_flag=0 and atkt_exam=1 and ayid='" + year + "' and branch_id='" + branch + "' ";
        }
        else if (atktexam == "2")
        {
            qry = "select distinct(exam_date) from cre_exam where del_flag=0 and atkt_exam=2  and ayid='" + year + "' and branch_id='" + branch + "'";
        }
        else
        {

        }

        List<Resolution> details = new List<Resolution>();
        Resolution res = new Resolution();

        if (atktexam == "")
        {
            res.msg = "";
        }
        else
        {
            SqlCommand cmd = new SqlCommand();
            DataSet dss1 = new DataSet();
            dss1 = cls1.fillDataset(qry);
            string exam_code = "";
            string query = "";
            for (int i = 0; i <= dss1.Tables[0].Rows.Count; i++)
            {
                //Check Duplicate Exam
                if (dss1.Tables[0].Rows.Count > i)
                {
                    for (int j = 0; j < dss1.Tables[0].Rows.Count; j++)
                    {
                        if (dss1.Tables[0].Rows[j]["exam_date"].ToString() == Date)
                        {
                            res.msg = "Exist";
                            details.Add(res);
                            return details.ToArray();
                        }
                    }
                }
                else if (branch_text == "FIRST YEAR ENGINEERING")
                {
                    exam_code = cls1.Auto_ID("cre_exam", "exam_code", "EXM");
                    DataSet ds = cls1.fillDataset("Select course_id from m_crs_course_tbl");
                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                    {
                        query = "EXECUTE [cre_sp_exam_insert_delete] 'insert',NULL,'" + exam_code + "','" + Date + "'  ,'" + year + "'  ,'" + ds.Tables[0].Rows[j]["course_id"].ToString() + "'," + atktexam + ",0,0,0";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cls1.DMLqueries(query);
                    }
                    res.msg = "genrated";
                    details.Add(res);
                    return details.ToArray();
                }
                else
                {

                    exam_code = cls1.Auto_ID("cre_exam", "exam_code", "EXM");

                    query = "EXECUTE [cre_sp_exam_insert_delete] 'insert',NULL,'" + exam_code + "','" + Date + "'  ,'" + year + "'  ,'" + branch + "'  ," + atktexam + ",0,0,0";
                    cmd.CommandType = CommandType.StoredProcedure;
                    // objcon.opencon();
                    cls1.DMLqueries(query);
                    res.msg = "genrated";
                    details.Add(res);
                    return details.ToArray();
                }
            }
        }
        return details.ToArray();
    }
    //---------------------assign exam --------------------------------
    public assignexam[] fillgrid(string branch, string semid, string year, string group, string exam, string subject, bool flag)
    {
        DataTable dt = new DataTable();
        DataSet ds = new DataSet();

        //if (dtfind.Rows.Count > 0)
        //{

        //}
        //else
        //{
        ds = cls1.fillgrid(branch, semid, year, group, exam, subject);
        //}
        List<assignexam> details = new List<assignexam>();
        if (flag == true)
        {
            dt = ds.Tables[1];
            foreach (DataRow dtrow in dt.Rows)
            {
                assignexam ass = new assignexam();
                ass.stud_id = dtrow["Stud_ID"].ToString();
                ass.roll_no = dtrow["Roll_no"].ToString();
                ass.name = dtrow["Student_Name"].ToString();
                details.Add(ass);
            }

        }
        else
        {
            dt = ds.Tables[0];
            foreach (DataRow dtrow in dt.Rows)
            {
                assignexam ass = new assignexam();
                ass.stud_id = dtrow["Stud_ID"].ToString();
                ass.roll_no = dtrow["Roll_no"].ToString();
                ass.name = dtrow["Student_Name"].ToString();
                details.Add(ass);
            }
        }
        return details.ToArray();
    }

    public bool executedata(string query, string qry)
    {
        if (cls1.DMLqueries(query) == true)
        {
            if (qry == "")
            {
                return true;
            }
            else
            {
                if (cls1.DMLqueries(qry) == true)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        else
        {
            return false;
        }
    }

    public assignexam[] geteligall(string branch, string semid, string year, string group, string exam)
    {
        List<assignexam> details = new List<assignexam>();
        assignexam ass = new assignexam();

        string qry = "select * from dbo.cre_marks_tbl where exam_code='" + exam + "' and ayid='" + year + "' and sem_id='" + semid + "'";
        string query = "SELECT subject_name,subject_id FROM cre_subject WHERE subject_id in (select subject_id from cre_credit_tbl where ayid='" + year + "') and sem_id='" + semid + "' and branch_id='" + branch + "' and group_id like '%" + group + "%' and del_flag=0";

        DataTable dt = new DataTable();
        DataTable dt2 = new DataTable();

        dt = cls1.fillDataTable(qry);
        dt2 = cls1.fillDataTable(query);

        if (dt.Rows.Count > 0)
        {
            ass.msg = "exist";
            details.Add(ass);
        }
        else
        {
            foreach (DataRow dtrow in dt2.Rows)
            {
                ass.sub_id = dtrow["subject_id"].ToString();
                ass.msg = "";
                details.Add(ass);
            }
        }
        return details.ToArray();
    }

    public bool forallassign(string branch, string semid, string year, string group, string exam, string stud_id, string type, string subjectid)
    {
        string qry = "";
        if (type == "all")
        {
            if (subjectid == "")
            {
                qry = "SELECT subject_id FROM cre_subject WHERE subject_id in (select subject_id from cre_credit_tbl where ayid='" + year + "') and sem_id='" + semid + "' and branch_id='" + branch + "' and group_id like '%" + group + "%' and del_flag=0";

                DataTable dtsub = new DataTable();
                dtsub = cls1.fillDataTable(qry);
                qry = "";
                for (int i = 0; i < dtsub.Rows.Count; i++)
                {
                    qry = qry + "delete from cre_marks_tbl where stud_id='" + stud_id + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and ayid='" + year + "';";
                }
            }
            else
            {
                return false;
            }
        }
        else
        {
            qry = "";
            qry = "delete from cre_marks_tbl where stud_id='" + stud_id + "' and subject_id='" + subjectid + "' and ayid='" + year + "'";
        }

        if (cls1.DMLqueries(qry) == true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public List<ListItem> fill_assignexam(string branch, string year)
    {
        string qry = "";
        qry = "select exam_date+' '+ case atkt_exam when 1 then '(A.T.K.T)' else '(Regular)' end as a1,exam_code from cre_exam where ayid='" + year + "' and branch_id='" + branch + "' and exam_code like 'EXM%' and  is_lock=0 and is_current=1 and atkt_exam=0 and del_flag= 0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public bool checkdata(string branch, string semid, string year, string group, string exam, string subject)
    {
        DataTable dt = new DataTable();
        DataSet ds = new DataSet();
        ds = cls1.fillgrid(branch, semid, year, group, exam, subject);

        dt = ds.Tables[1];
        if (dt.Rows.Count > 0)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        else
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                return false;
            }
            else
            {
                return false;
            }
        }
    }


    public assignexam[] checkcredit(string year, string sub_id)
    {
        List<assignexam> details = new List<assignexam>();
        assignexam ass = new assignexam();

        string str = "select credit_sub_id from cre_credit_tbl where subject_id='" + sub_id + "' and ayid='" + year + "' and del_flag=0";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        if (dt.Rows.Count == 0)
        {
            ass.msg = "defined";
            details.Add(ass);
        }
        else
        {
            ass.msg = "";
            foreach (DataRow dtrow in dt.Rows)
            {
                ass.credit_id = dtrow["credit_sub_id"].ToString();
                details.Add(ass);
            }
        }
        return details.ToArray();
    }

    public assignexam[] checkexist(string branch, string semid, string year, string group, string exam)
    {
        List<assignexam> details = new List<assignexam>();
        assignexam ass = new assignexam();

        string query = "SELECT subject_name,subject_id FROM cre_subject WHERE subject_id in (select subject_id from cre_credit_tbl where ayid='" + year + "') and sem_id='" + semid + "' and branch_id='" + branch + "' and group_id like '%" + group + "%' and del_flag=0";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);

        String[] arr_sub = new String[dt.Rows.Count];
        string str = "";
        DataSet ds = new DataSet();
        DataTable dts = new DataTable();
        DataTable dtcredit = new DataTable();
        DataTable dtfill = new DataTable();
        DataColumn col1 = new DataColumn("Credit");
        DataColumn col2 = new DataColumn("Subject");
        dtfill.Columns.Add(col1);
        dtfill.Columns.Add(col2);
        //DataRow dr = dtfill.NewRow();

        for (int i = 0; i < dt.Rows.Count; i++)
        {
            arr_sub[i] = dt.Rows[i][1].ToString();
            ds = cls1.get_Credit_Sub_ID(arr_sub[i], year);
            dtcredit = ds.Tables[1];
            str = dtcredit.Rows[0][0].ToString();

            dtfill.Rows.Add(str, arr_sub[i]);


            if (ds.Tables[1].Rows.Count == 0)
            {
                ass.msg = "defined";
                details.Add(ass);
                return details.ToArray();
            }
            else
            {
                //ass.sub_id = arr_sub[i].ToString();
                ass.msg = "";
                // details.Add(ass);
            }
        }
        string qry = "";

        if (ass.msg == "")
        {
            foreach (DataRow dtrow in dtfill.Rows)
            {
                assignexam ass1 = new assignexam();
                ass1.credit_id = dtrow["Credit"].ToString();
                ass1.sub_id = dtrow["Subject"].ToString();
                details.Add(ass1);
            }
        }
        return details.ToArray();
    }
    public bool checklock(string examcode)
    {
        string str = "";
        str = "select * from dbo.cre_exam where is_lock=1 and exam_code='" + examcode + "' and del_flag=0 ";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        if (dt.Rows.Count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //-------------------reexam-----------------------------------------
    public reexam[] fillgriddata(string branch, string group_id, string semid, string examcode, string from, string to, string type, string year)
    {
        string query;
        DataTable dtatkt = new DataTable();
        DataTable dtStud = new DataTable();
        DataTable dtkt;
        if (type == "New")
        {
            if (from == "" && to == "")
            {
                query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct  m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc  from dbo.cre_marks_tbl as m,dbo.m_std_personaldetails_tbl as p ,m_std_studentacademic_tbl as a   where p.stud_id=m.stud_id  and m.stud_id=a.stud_id and   a.group_id='" + group_id + "'  and m.sem_id='" + semid + "' and remark='UnSuccessful' and m.del_flag=0 and p.del_flag=0 and   m.stud_id not in (select stud_id from cre_marks_tbl where exam_code = '" + examcode + "'  and  sem_id='" + semid + "' ) ) a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int)";
            }
            else
            {
                if (to == "")
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct  m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc  from dbo.cre_marks_tbl as m,dbo.m_std_personaldetails_tbl as p ,m_std_studentacademic_tbl as a where p.stud_id=m.stud_id  and m.stud_id=a.stud_id and   a.group_id='" + group_id + "'  and m.sem_id='" + semid + "' and remark='UnSuccessful' and m.del_flag=0 and p.del_flag=0 and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) = '" + from + "' and   m.stud_id not in (select stud_id from cre_marks_tbl where exam_code = '" + examcode + "'  and  sem_id='" + semid + "' ) ) a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int)";
                }
                else
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct  m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc  from dbo.cre_marks_tbl as m,dbo.m_std_personaldetails_tbl as p ,m_std_studentacademic_tbl as a where p.stud_id=m.stud_id  and m.stud_id=a.stud_id and   a.group_id='" + group_id + "'  and m.sem_id='" + semid + "' and remark='UnSuccessful' and m.del_flag=0 and p.del_flag=0 and   cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) between '" + from + "' and '" + to + "' and   m.stud_id not in (select stud_id from cre_marks_tbl where exam_code = '" + examcode + "'  and  sem_id='" + semid + "' ) ) a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int)";
                }
            }
        }
        else
        {
            if (from == "" && to == "")
            {
                query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc from dbo.cre_marks_tbl m,dbo.m_std_personaldetails_tbl p ,m_std_studentacademic_tbl as a where m.stud_id=p.stud_id  and m.stud_id=a.stud_id and a.group_id='" + group_id + "'  and m.sem_id='" + semid + "' and exam_code = '" + examcode + "') a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int ))   as int)";
            }
            else
            {
                if (to == "")
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc from dbo.cre_marks_tbl m,dbo.m_std_personaldetails_tbl p ,m_std_studentacademic_tbl as a where m.stud_id=p.stud_id  and m.stud_id=a.stud_id and a.group_id='" + group_id + "'  and m.sem_id='" + semid + "' and exam_code = '" + examcode + "' and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int )='" + from + "') a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int ))   as int)";
                }
                else
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc from dbo.cre_marks_tbl m,dbo.m_std_personaldetails_tbl p ,m_std_studentacademic_tbl as a where m.stud_id=p.stud_id  and m.stud_id=a.stud_id and a.group_id='" + group_id + "'  and m.sem_id='" + semid + "' and exam_code = '" + examcode + "' and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) between '" + from + "' and '" + to + "') a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int ))   as int)";
                }
            }
        }

        dtatkt = cls1.fillDataTable(query);
        dtStud = dtatkt.Copy();
        DataTable dtcount = new DataTable();
        DataTable dtsub = new DataTable();
        DataTable dtmarks = new DataTable();
        DataTable dtcredit = new DataTable();
        dtStud.Columns.Add("ATKTCOUNT");
        string[] arr = new string[3];
        string qry = "";
        string str;
        string subjectid = "";
        List<reexam> details = new List<reexam>();
        //------to remove row if student is successful in all subject
        if (type == "New")
        {
            for (int i = 0; i < dtatkt.Rows.Count; i++)
            {

                query = "";
                dtkt = new DataTable();
                query = query + " select distinct(remark) from dbo.cre_marks_tbl a, dbo.cre_credit_tbl b where a.credit_sub_id=b.credit_sub_id and stud_id='" + dtatkt.Rows[i]["stud_id"].ToString() + "' and a.del_flag=0 and b.del_flag=0 and a.sem_id='" + semid + "' and ";
                query = query + " remark='UnSuccessful' and exam_code=(select distinct exam_code from dbo.cre_marks_tbl a where stud_id='" + dtatkt.Rows[i]["stud_id"].ToString() + "'  and a.sem_id='" + semid + "' and";
                query = query + " curr_date=(select distinct max(curr_date) from dbo.cre_marks_tbl a where stud_id='" + dtatkt.Rows[i]["stud_id"].ToString() + "' and a.sem_id='" + semid + "'))";
                dtkt = cls1.fillDataTable(query);

                //--------?????----
                if (dtkt.Rows.Count == 0)
                {
                    for (int r = 0; r < dtStud.Rows.Count; r++)
                    {
                        if (dtatkt.Rows[i]["stud_id"].ToString() == dtStud.Rows[r]["stud_id"].ToString())
                        {
                            dtStud.Rows.RemoveAt(r);
                            break;
                        }
                    }
                }
                qry = "";
                //----to get atkt count
                qry = "select sum(cast(h3_grace as int)) as count from cre_marks_tbl where stud_id='" + dtatkt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semid + "' and remark='UnSuccessful' and exam_code=(select distinct exam_code from dbo.cre_marks_tbl a where  stud_id='" + dtatkt.Rows[i]["stud_id"].ToString() + "'  and a.sem_id='" + semid + "' and curr_date=(select distinct max(curr_date) from dbo.cre_marks_tbl a where stud_id='" + dtatkt.Rows[i]["stud_id"].ToString() + "' and a.sem_id='" + semid + "'))";

                dtcount = cls1.fillDataTable(qry);
                //dtStud.Rows[i]["ATKTCOUNT"] = dtcount.Rows[0]["count"].ToString();
                //-----------------------------------count-------------end
            }
        }
        else
        {

        }
        qry = "";
        qry = "select a.subject_name,credit,a.subject_id,credit_sub_id,b.h1_out,b.h1_pass,b.h2_out,b.h2_pass,b.h1_resolution,b.h2_resolution,case when (h1_out<>'' and h2_out='') then 'h1' when (h1_out='' and h2_out<>'') then 'h2' else 'h1h2' end as header from dbo.cre_subject a left join cre_credit_tbl b on a.subject_id=b.subject_id where a.sem_id='" + semid + "' and branch_id='" + branch + "' and b.ayid='" + year + "' and group_id like '%" + group_id + "%' and a.del_flag=0 and credit_sub_id is not NULL order by a.subject_id";

        dtsub = cls1.fillDataTable(qry);  //subject name and details

        for (int a = 0; a < (dtsub.Rows.Count); a++)
        {
            dtStud.Columns.Add(dtsub.Rows[a]["subject_name"].ToString() + ' ' + dtsub.Rows[a]["credit"].ToString());
            if (a == dtsub.Rows.Count - 1)
            {
                subjectid += dtsub.Rows[a]["subject_id"].ToString();
            }
            else
            {
                subjectid += dtsub.Rows[a]["subject_id"].ToString() + ",";
            }
        }

        // for header
        string header = "";
        dtStud.Columns.Add("header");
        for (int j = 0; j < (dtsub.Rows.Count); j++)
        {
            if (j == dtsub.Rows.Count - 1)
            {
                header += dtsub.Rows[j]["header"].ToString();
            }
            else
            {
                header += dtsub.Rows[j]["header"].ToString() + ",";
            }
        }

        if (dtStud.Rows.Count > 0)
        {
            dtStud.Rows[0]["header"] = header;

            //------for student marks

            string hmarks = "";
            int atkt_total = 0;
            dtStud.Columns.Add("HeadMarks");

            for (int k = 0; k < dtStud.Rows.Count; k++)
            {
                hmarks = "";
                atkt_total = 0;
                string h1 = "", h2 = "";
                double h1_per, h2_per;
                if (dtStud.Rows[k]["stud_id"].ToString() == "16020029A")
                {

                }

                for (int i = 0; i < dtsub.Rows.Count; i++)
                {
                    if (dtsub.Rows[i]["subject_id"].ToString() == "SUB21" && dtatkt.Rows[k]["stud_id"].ToString() == "17010003A")
                    {

                    }
                    bool h1flag = false, h2flag = false;
                    str = "";
                    str = "select * from dbo.cre_marks_tbl where stud_id='" + dtStud.Rows[k]["stud_id"].ToString() + "' and sem_id='" + semid + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0 and curr_date =(select max(curr_date)  from dbo.cre_marks_tbl where stud_id='" + dtStud.Rows[k]["stud_id"].ToString() + "' and sem_id='" + semid + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0)";

                    dtmarks = cls1.fillDataTable(str);
                    str = "";
                    str = "select * from dbo.cre_credit_tbl where ayid='" + year + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0";
                    dtcredit = cls1.fillDataTable(str);

                    //if (dtmarks.Rows.Count == 0)
                    //{
                    //    //continue;
                    //}
                    //else
                    //{
                    if (dtmarks.Rows[0]["h1"].ToString() != "")
                    {
                        //check contain + or not
                        if (Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                        {
                            dtmarks.Rows[0]["h1"] = dtmarks.Rows[0]["h1"].ToString().Substring(0, dtmarks.Rows[0]["h1"].ToString().Length - 1);
                            h1flag = true;
                        }
                        else
                        {

                        }

                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"]))) //adding grace
                        {
                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"]));
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                        }

                        if (Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() == "Ab")
                        {
                            atkt_total++;
                            if (h1flag == false && type == "Edit")
                            {
                                if (i == dtsub.Rows.Count - 1)
                                {
                                    hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                }
                                else
                                {
                                    hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                }
                            }
                            else
                            {
                                if (i == dtsub.Rows.Count - 1)
                                {
                                    hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                }
                                else
                                {
                                    hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                }
                            }
                        }
                        else if (Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() != "Ab")
                        {
                            //h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();

                            arr = cls1.get_GradeForDeg(Convert.ToInt32(h1), Convert.ToInt32(dtcredit.Rows[0]["h1_out"]), Convert.ToInt32(dtcredit.Rows[0]["h1_pass"]));
                            if ((Convert.ToInt32(h1) >= Convert.ToInt32(dtcredit.Rows[0]["h1_pass"])) && arr[0] == "F")//p-40% in theory  and 50% in IA(obt_mrks*100/out=40%  but get_GradeForDeg function contain 45% criteria)
                            {
                                arr[0] = "P";
                                arr[1] = "4";
                                arr[2] = "Pass";
                            }
                            h1_per = (Convert.ToDouble(h1) / Convert.ToDouble(dtcredit.Rows[0]["h1_out"])) * 100;

                            if (arr[0] != "F") //pass
                            {
                                if (i == dtsub.Rows.Count - 1)
                                {
                                    hmarks += h1;
                                }
                                else
                                {
                                    hmarks += h1 + ",";
                                }
                            }
                            else
                            {
                                atkt_total++;
                                if (h1flag == false && type == "Edit")
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                    }
                                    else
                                    {
                                        hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                                else
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                    }
                                    else
                                    {
                                        hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                            }
                        }
                        else
                        {
                            //if (i == dtsub.Rows.Count - 1)
                            //{
                            //    hmarks += h1;
                            //}
                            //else
                            //{
                            //    hmarks += h1 + ",";
                            //}
                        }
                    }
                    else if (dtmarks.Rows[0]["h1"].ToString() == "" && dtcredit.Rows[0]["h1_type"].ToString() != "")
                    {
                        atkt_total++;
                        if (i == dtsub.Rows.Count - 1)
                        {
                            hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                        }
                        else
                        {
                            hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                        }
                    }
                    else
                    {
                    }

                    //------------------------for H2
                    if (dtmarks.Rows[0]["h2"].ToString() != "")
                    {
                        //check contain + or not
                        if (Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                        {
                            dtmarks.Rows[0]["h2"] = dtmarks.Rows[0]["h2"].ToString().Substring(0, dtmarks.Rows[0]["h2"].ToString().Length - 1);
                            h2flag = true;
                        }

                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"]))) //adding grace
                        {
                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"]));
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                        }

                        if (Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() == "Ab")
                        {
                            atkt_total++;
                            if (type == "Edit" && h2flag == false)
                            {
                                if (i == dtsub.Rows.Count - 1)
                                {
                                    hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                }
                                else
                                {
                                    hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                }
                            }
                            else
                            {
                                if (i == dtsub.Rows.Count - 1)
                                {
                                    hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                }
                                else
                                {
                                    hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                }
                            }
                        }
                        else if (Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() != "Ab")
                        {
                            //h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                            arr = cls1.get_GradeForDeg(Convert.ToInt32(h2), Convert.ToInt32(dtcredit.Rows[0]["h2_out"]), Convert.ToInt32(dtcredit.Rows[0]["h2_pass"]));
                            if ((Convert.ToInt32(h2) < Convert.ToInt32(dtcredit.Rows[0]["h2_pass"])) && arr[0] == "P")//50% passing in IA ---(h2 < h2_pass it will take 45 % passing)
                            {
                                arr[0] = "F";
                                arr[1] = "0";
                                arr[2] = "Fail";
                            }
                            h2_per = (Convert.ToDouble(h2) / Convert.ToDouble(dtcredit.Rows[0]["h2_out"])) * 100;

                            if (arr[0] != "F") //pass
                            {
                                if (i == dtsub.Rows.Count - 1)
                                {
                                    hmarks += h2;
                                }
                                else
                                {
                                    hmarks += h2 + ",";
                                }
                            }
                            else
                            {
                                atkt_total++;
                                if (type == "Edit" && h2flag == false)
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                    }
                                    else
                                    {
                                        hmarks += "KTC_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                                else
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                                    }
                                    else
                                    {
                                        hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                            }
                        }
                        else
                        {
                            //if (i == dtsub.Rows.Count - 1)
                            //{
                            //    hmarks += h2;
                            //}
                            //else
                            //{
                            //    hmarks += h2 + ",";
                            //}
                        }
                    }
                    else if (dtmarks.Rows[0]["h2"].ToString() == "" && dtcredit.Rows[0]["h2_type"].ToString() != "")
                    {
                        atkt_total++;
                        if (i == dtsub.Rows.Count - 1)
                        {
                            hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";
                        }
                        else
                        {
                            hmarks += "KT_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                        }
                    }
                    else
                    {
                    }
                    //}
                }
                //if (dtStud.Rows.Count >17)
                //{
                dtStud.Rows[k]["HeadMarks"] = hmarks;
                dtStud.Rows[k]["ATKTCOUNT"] = atkt_total;
                //}
                //else
                //{

                //}
            }

            dtStud.Columns.Add("subjectid");
            dtStud.Rows[0]["subjectid"] = subjectid;
            foreach (DataRow dtrow in dtStud.Rows)
            {
                reexam reexm = new reexam();
                reexm.srno = dtrow["srno"].ToString();
                reexm.id = dtrow["stud_id"].ToString();
                reexm.name = dtrow["student_name"].ToString();
                reexm.seatno = dtrow["Seat No"].ToString();
                reexm.rollno = dtrow["abc"].ToString();
                reexm.header = dtrow["header"].ToString();
                reexm.marks = dtrow["HeadMarks"].ToString();
                reexm.subid = dtrow["subjectid"].ToString();
                reexm.atktcnt = dtrow["ATKTCOUNT"].ToString();
                reexm.msg = "";
                int col = 6;
                for (int y = 6; y < dtStud.Columns.Count; y++)
                {
                    reexm.column += dtStud.Columns[col].ColumnName.ToString() + ",";
                    col++;
                }
                details.Add(reexm);
            }
        }
        else
        {
            reexam reexm = new reexam();
            reexm.msg = "no data found";
            details.Add(reexm);
        }

        return details.ToArray();

    }

    //---on click of reval radiobutton for both new and edit
    public reexam[] filleditgriddata(string branch, string group_id, string semid, string prevexam, string examcode, string from, string to, string type, string year)
    {
        string query;
        DataTable dtatkt = new DataTable();
        DataTable dtStud = new DataTable();
        DataTable dtkt;
        if (type == "New")
        {
            if (from == "" && to == "")
            {
                query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,p.stud_L_Name+ ' ' + p.stud_F_Name + ' ' + p.stud_M_Name + ' ' as Student_Name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1),  LEN(m.seat_no))) as int ) as abc  from dbo.cre_marks_tbl as m,dbo.m_std_personaldetails_tbl as p ,m_std_studentacademic_tbl as a   where p.stud_id=m.stud_id  and m.stud_id=a.stud_id  and a.group_id='" + group_id + "' and m.sem_id='" + semid + "'  and exam_code = '" + prevexam + "' and m.del_flag=0 and p.del_flag=0 and m.stud_id not in (select stud_id from cre_marks_tbl where exam_code = '" + examcode + "' and sem_id='" + semid + "') )a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int)";
            }
            else
            {
                if (to == "")
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,p.stud_L_Name+ ' ' + p.stud_F_Name + ' ' + p.stud_M_Name + ' ' as Student_Name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1),  LEN(m.seat_no))) as int ) as abc  from dbo.cre_marks_tbl as m,dbo.m_std_personaldetails_tbl as p ,m_std_studentacademic_tbl as a   where p.stud_id=m.stud_id  and m.stud_id=a.stud_id  and a.group_id='" + group_id + "' and m.sem_id='" + semid + "'  and exam_code = '" + prevexam + "' and m.del_flag=0 and p.del_flag=0 and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) = '" + from + "' and m.stud_id not in (select stud_id from cre_marks_tbl where exam_code = '" + examcode + "' and sem_id='" + semid + "') )a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int)";
                }
                else
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,p.stud_L_Name+ ' ' + p.stud_F_Name + ' ' + p.stud_M_Name + ' ' as Student_Name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1),  LEN(m.seat_no))) as int ) as abc  from dbo.cre_marks_tbl as m,dbo.m_std_personaldetails_tbl as p ,m_std_studentacademic_tbl as a   where p.stud_id=m.stud_id  and m.stud_id=a.stud_id  and a.group_id='" + group_id + "' and m.sem_id='" + semid + "'  and exam_code = '" + prevexam + "' and m.del_flag=0 and p.del_flag=0 and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) between '" + from + "' and '" + to + "' and m.stud_id not in (select stud_id from cre_marks_tbl where exam_code = '" + examcode + "' and sem_id='" + semid + "') )a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int)";
                }
            }
        }
        else
        {
            if (from == "" && to == "")
            {
                query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc from dbo.cre_marks_tbl m,dbo.m_std_personaldetails_tbl p,m_std_studentacademic_tbl as b where m.stud_id=p.stud_id and m.stud_id=b.stud_id  and b.group_id='" + group_id + "' and m.sem_id='" + semid + "'  and m.ayid='" + year + "' and m.exam_code = '" + examcode + "' ) a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int ))   as int)";
            }
            else
            {
                if (to == "")
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc from dbo.cre_marks_tbl m,dbo.m_std_personaldetails_tbl p,m_std_studentacademic_tbl as b where m.stud_id=p.stud_id and m.stud_id=b.stud_id  and b.group_id='" + group_id + "' and m.sem_id='" + semid + "'  and m.ayid='" + year + "' and m.exam_code = '" + examcode + "' and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int )='" + from + "') a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int ))   as int)";
                }
                else
                {
                    query = "select  cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int )) as int) as srno,* from(select distinct m.stud_id ,case stud_Gender when 0 then '/ '+ upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name) else upper(p.stud_F_Name+' '+p.stud_M_Name+' '+p.stud_L_Name ) end as student_name,m.seat_no as [Seat No],cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc from dbo.cre_marks_tbl m,dbo.m_std_personaldetails_tbl p,m_std_studentacademic_tbl as b where m.stud_id=p.stud_id and m.stud_id=b.stud_id  and b.group_id='" + group_id + "' and m.sem_id='" + semid + "'  and m.ayid='" + year + "' and m.exam_code = '" + examcode + "' and cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) between '" + from + "' and '" + to + "') a order by cast( ROW_NUMBER() OVER (ORDER BY cast(LEFT(a.[seat no], ISNULL(NULLIF(CHARINDEX('/', a.[seat no]) - 1, -1), LEN(a.[seat no]))) as int ))   as int)";
                }
            }
        }

        dtatkt = cls1.fillDataTable(query);
        dtStud = dtatkt.Copy();
        DataTable dtcount = new DataTable();
        DataTable dtsub = new DataTable();
        DataTable dtmarks = new DataTable();
        DataTable dtcredit = new DataTable();
        dtStud.Columns.Add("ATKTCOUNT");
        string[] arr = new string[3];
        string qry = "";
        string str;
        string subjectid = "";
        List<reexam> details = new List<reexam>();

        qry = "";
        qry = "select a.subject_name,credit,a.subject_id,credit_sub_id,b.h1_out,b.h1_pass,b.h2_out,b.h2_pass,b.h1_resolution,b.h2_resolution,case when (h1_out<>'' and h2_out='') then 'h1' when (h1_out='' and h2_out<>'') then 'h2' else 'h1h2' end as header from dbo.cre_subject a left join cre_credit_tbl b on a.subject_id=b.subject_id where a.sem_id='" + semid + "' and branch_id='" + branch + "' and b.ayid='" + year + "' and group_id like '%" + group_id + "%' and a.del_flag=0 and credit_sub_id is not NULL order by a.subject_id";

        dtsub = cls1.fillDataTable(qry);  //subject name and details

        for (int a = 0; a < (dtsub.Rows.Count); a++)
        {
            dtStud.Columns.Add(dtsub.Rows[a]["subject_name"].ToString() + ' ' + dtsub.Rows[a]["credit"].ToString());
            if (a == dtsub.Rows.Count - 1)
            {
                subjectid += dtsub.Rows[a]["subject_id"].ToString();
            }
            else
            {
                subjectid += dtsub.Rows[a]["subject_id"].ToString() + ",";
            }
        }

        // for header
        string header = "";
        dtStud.Columns.Add("header");
        for (int j = 0; j < (dtsub.Rows.Count); j++)
        {
            if (j == dtsub.Rows.Count - 1)
            {
                header += dtsub.Rows[j]["header"].ToString();
            }
            else
            {
                header += dtsub.Rows[j]["header"].ToString() + ",";
            }
        }
        if (dtStud.Rows.Count > 0)
        {
            dtStud.Rows[0]["header"] = header;

            //------for student marks
            string h1 = "", h2 = "";
            double h1_per, h2_per;
            string hmarks = "";
            int atkt_total = 0;
            dtStud.Columns.Add("HeadMarks");

            for (int k = 0; k < dtStud.Rows.Count; k++)
            {
                hmarks = "";
                atkt_total = 0;
                for (int i = 0; i < dtsub.Rows.Count; i++)
                {
                    bool h1flag = false, h2flag = false;
                    str = "";
                    str = "select * from dbo.cre_marks_tbl where stud_id='" + dtStud.Rows[k]["stud_id"].ToString() + "' and sem_id='" + semid + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0 and curr_date =(select max(curr_date)  from dbo.cre_marks_tbl where stud_id='" + dtStud.Rows[k]["stud_id"].ToString() + "' and sem_id='" + semid + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0)";

                    dtmarks = cls1.fillDataTable(str);
                    str = "";
                    str = "select * from dbo.cre_credit_tbl where ayid='" + year + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0";
                    dtcredit = cls1.fillDataTable(str);

                    if (dtmarks.Rows[0]["h1"].ToString() != "")//&& dtcredit.Rows[0]["h1_type"].ToString().Contains("ESE")
                    {
                        //check contain + or not
                        if (Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                        {
                            dtmarks.Rows[0]["h1"] = dtmarks.Rows[0]["h1"].ToString().Substring(0, dtmarks.Rows[0]["h1"].ToString().Length - 1);
                            h1flag = true;
                        }

                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"]))) //adding grace
                        {
                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"]));
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                        }

                        if (Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() == "Ab")
                        {
                            if (i == dtsub.Rows.Count - 1)
                            {
                                hmarks += "NR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Not Reval disabled checkbox
                            }
                            else
                            {
                                hmarks += "NR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";//Not reval disabled checkbox
                            }
                        }
                        else
                        {
                            //h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();

                            arr = cls1.get_GradeForDeg(Convert.ToInt32(h1), Convert.ToInt32(dtcredit.Rows[0]["h1_out"]), Convert.ToInt32(dtcredit.Rows[0]["h1_pass"]));
                            if ((Convert.ToInt32(h1) >= Convert.ToInt32(dtcredit.Rows[0]["h1_pass"])) && arr[0] == "F")//p-40% in theory  and 50% in IA(obt_mrks*100/out=40%  but get_GradeForDeg function contain 45% criteria)
                            {
                                arr[0] = "P";
                                arr[1] = "4";
                                arr[2] = "Pass";
                            }
                            h1_per = (Convert.ToDouble(h1) / Convert.ToDouble(dtcredit.Rows[0]["h1_out"])) * 100;

                            if (arr[0] != "F") //pass
                            {
                                if (type == "Edit" && h1flag == false && Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() != "")
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Reval checked checkbox
                                    }
                                    else
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                                else
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Unchecked checkbox for new
                                    }
                                    else
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                            }
                            else
                            {

                                if (type == "Edit" && h1flag == false && Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() != "")
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Reval checked checkbox
                                    }
                                    else
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                                else
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Unchecked checkbox for new
                                    }
                                    else
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                            }
                        }

                    }
                    //else if (dtmarks.Rows[0]["h1"].ToString() != "" && !dtcredit.Rows[0]["h1_type"].ToString().Contains("ESE"))
                    //{
                    //    if (i == dtsub.Rows.Count - 1)
                    //    {
                    //        hmarks += "";//Not Reval checked checkbox
                    //    }
                    //    else
                    //    {
                    //        hmarks += "" + ",";//Not reval disabled checkbox
                    //    }
                    //}
                    else
                    {
                    }

                    //------------------------for H2
                    if (dtmarks.Rows[0]["h2"].ToString() != "")//&& dtcredit.Rows[0]["h2_type"].ToString().Contains("ESE")
                    {
                        //check contain + or not
                        if (Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                        {
                            dtmarks.Rows[0]["h2"] = dtmarks.Rows[0]["h2"].ToString().Substring(0, dtmarks.Rows[0]["h2"].ToString().Length - 1);
                            h2flag = true;
                        }

                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"]))) //adding grace
                        {
                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"]));
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                        }

                        if (Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() == "Ab")
                        {
                            if (i == dtsub.Rows.Count - 1)
                            {
                                hmarks += "NR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Not Reval checked checkbox
                            }
                            else
                            {
                                hmarks += "NR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";//Not reval disabled checkbox
                            }
                        }
                        else
                        {
                            //h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                            arr = cls1.get_GradeForDeg(Convert.ToInt32(h2), Convert.ToInt32(dtcredit.Rows[0]["h2_out"]), Convert.ToInt32(dtcredit.Rows[0]["h2_pass"]));
                            if ((Convert.ToInt32(h2) < Convert.ToInt32(dtcredit.Rows[0]["h2_pass"])) && arr[0] == "P")//50% passing in IA ---(h2 < h2_pass it will take 45 % passing)
                            {
                                arr[0] = "F";
                                arr[1] = "0";
                                arr[2] = "Fail";
                            }
                            h2_per = (Convert.ToDouble(h2) / Convert.ToDouble(dtcredit.Rows[0]["h2_out"])) * 100;

                            if (arr[0] != "F") //pass
                            {
                                if (type == "Edit" && h2flag == false && Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() != "")
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Reval checked checkbox
                                    }
                                    else
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                                else
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Unchecked checkbox for new
                                    }
                                    else
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                            }
                            else
                            {
                                if (type == "Edit" && h2flag == false && Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() != "")
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Reval checked checkbox
                                    }
                                    else
                                    {
                                        hmarks += "R_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                                else
                                {
                                    if (i == dtsub.Rows.Count - 1)
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'";//Unchecked checkbox for new
                                    }
                                    else
                                    {
                                        hmarks += "UR_'" + dtsub.Rows[i]["subject_id"].ToString() + '_' + dtsub.Rows[i]["credit_sub_id"].ToString() + "'" + ",";
                                    }
                                }
                            }
                        }
                    }
                    //else if (dtmarks.Rows[0]["h2"].ToString() != "" && !dtcredit.Rows[0]["h2_type"].ToString().Contains("ESE"))
                    //{
                    //    if (i == dtsub.Rows.Count - 1)
                    //    {
                    //        hmarks += "";//Unchecked checkbox for new
                    //    }
                    //    else
                    //    {
                    //        hmarks += "" + ",";
                    //    }
                    //}
                    else
                    {

                    }
                }
                dtStud.Rows[k]["HeadMarks"] = hmarks;
                //dtStud.Rows[k]["ATKTCOUNT"] = atkt_total;
            }


            dtStud.Columns.Add("subjectid");
            dtStud.Rows[0]["subjectid"] = subjectid;
            foreach (DataRow dtrow in dtStud.Rows)
            {
                reexam reexm = new reexam();
                reexm.srno = dtrow["srno"].ToString();
                reexm.id = dtrow["stud_id"].ToString();
                reexm.name = dtrow["student_name"].ToString();
                reexm.seatno = dtrow["Seat No"].ToString();
                reexm.rollno = dtrow["abc"].ToString();
                reexm.header = dtrow["header"].ToString();
                reexm.marks = dtrow["HeadMarks"].ToString();
                reexm.subid = dtrow["subjectid"].ToString();
                reexm.msg = "";
                int col = 6;
                for (int y = 6; y < dtStud.Columns.Count; y++)
                {
                    reexm.column += dtStud.Columns[col].ColumnName.ToString() + ",";
                    col++;
                }
                details.Add(reexm);
            }
        }
        else
        {
            reexam reexm = new reexam();
            reexm.msg = "No data found";
            details.Add(reexm);
        }

        return details.ToArray();
    }

    public bool atktdata(string branch, string group_id, string semid, string examcode, string type, string studid, string checkedid, string credit_sub_id, string empId, string seat_no, string year)
    {
        List<reexam> details = new List<reexam>();
        string subjectid = "";
        string str = "";
        str = "select a.subject_name,credit,a.subject_id,credit_sub_id,b.h1_out,b.h1_pass,b.h2_out,b.h2_pass,b.h1_resolution,b.h2_resolution,case when (h1_out<>'' and h2_out='') then 'h1' when (h1_out='' and h2_out<>'') then 'h2' else 'h1h2' end as header from dbo.cre_subject a left join cre_credit_tbl b on a.subject_id=b.subject_id where a.sem_id='" + semid + "' and branch_id='" + branch + "' and b.ayid='" + year + "' and group_id like '%" + group_id + "%' and a.del_flag=0 and credit_sub_id is not NULL order by a.subject_id";

        DataTable dtsub = new DataTable();
        DataTable dtmarks = new DataTable();
        dtsub = cls1.fillDataTable(str);
        str = "";
        string[] arr = new string[3];
        string h1 = "", h2 = "";
        string h1_grc = "", h2_grc = "";
        string qry = "";
        arr = checkedid.Split(',');
        for (int i = 0; i < dtsub.Rows.Count; i++)
        {
            //if (type == "atkt")
            //{
            str = "select * from dbo.cre_marks_tbl where stud_id='" + studid + "' and sem_id='" + semid + "'  and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0 and curr_date =(select max(curr_date) from dbo.cre_marks_tbl where stud_id='" + studid + "' and sem_id='" + semid + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0)";
            //}
            //else
            //{
            //    str = "select * from dbo.cre_marks_tbl where stud_id='" + studid + "' and ayid='" + year + "' and sem_id='" + semid + "'  and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0 and curr_date =(select max(curr_date)  from dbo.cre_marks_tbl where stud_id='" + studid + "' and ayid='" + year + "' and sem_id='" + semid + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0)";
            //}
            h1 = "";
            h2 = "";
            h1_grc = ""; h2_grc = "";
            dtmarks = cls1.fillDataTable(str);

            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"]))) //h1
            {
                if (dtmarks.Rows[0]["h1"].ToString().Contains("+"))
                {
                    dtmarks.Rows[0]["h1"] = Convert.ToInt32(dtmarks.Rows[0]["h1"].ToString().Substring(0, dtmarks.Rows[0]["h1"].ToString().Length - 1)) + Convert.ToInt32(dtmarks.Rows[0]["h1_grace"].ToString().Substring(0, dtmarks.Rows[0]["h1_grace"].ToString().Length - 1));
                }
                else
                {
                    dtmarks.Rows[0]["h1"] = Convert.ToInt32(Convert.ToInt32(dtmarks.Rows[0]["h1"].ToString()) + Convert.ToInt32(dtmarks.Rows[0]["h1_grace"].ToString().Substring(0, dtmarks.Rows[0]["h1_grace"].ToString().Length - 1)));
                }
                dtmarks.Rows[0]["h1"] = dtmarks.Rows[0]["h1"] + "+";
            }

            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"]))) //h2
            {
                if (dtmarks.Rows[0]["h2"].ToString().Contains("+"))
                {
                    dtmarks.Rows[0]["h2"] = Convert.ToInt32(dtmarks.Rows[0]["h2"].ToString().Substring(0, dtmarks.Rows[0]["h2"].ToString().Length - 1)) + Convert.ToInt32(dtmarks.Rows[0]["h2_grace"].ToString().Substring(0, dtmarks.Rows[0]["h2_grace"].ToString().Length - 1));

                }
                else
                {
                    dtmarks.Rows[0]["h2"] = Convert.ToInt32(Convert.ToInt32(dtmarks.Rows[0]["h1"].ToString()) + Convert.ToInt32(dtmarks.Rows[0]["h2_grace"].ToString().Substring(0, dtmarks.Rows[0]["h2_grace"].ToString().Length - 1)));
                }
                dtmarks.Rows[0]["h2"] = dtmarks.Rows[0]["h2"] + "+";
            }

            //--------------------------------------------for H1
            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"])) && string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"])))
            {
                if (checkedid.Contains(dtsub.Rows[i]["subject_id"].ToString()) == true)//for checked id
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[j] != "")
                        {
                            if (dtsub.Rows[i]["subject_id"].ToString() == arr[j].Split('_')[2].ToString())
                            {
                                if (arr[j].Contains("_H1") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                                    {
                                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h1"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                                        {
                                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"]));
                                        }
                                        else
                                        {
                                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))
                        h1_grc = "";
                    else
                        h1_grc = "";
                }
                else
                {
                    if ((!Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                        {
                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"])) + "+";
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))
                        h1_grc = "";
                    else
                        h1_grc = "";
                }
            }
            //--------------------------------------------for H2
            else if (string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"])) && !string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"])))
            {
                if (checkedid.Contains(dtsub.Rows[i]["subject_id"].ToString()) == true)//for checked id
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[j] != "")
                        {
                            if (dtsub.Rows[i]["subject_id"].ToString() == arr[j].Split('_')[2].ToString())
                            {
                                if (arr[j].Contains("_H2") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                                    {
                                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h2"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                                        {
                                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"]));
                                        }
                                        else
                                        {
                                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                }
                else
                {
                    //AddGrace//
                    if ((!Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                        {
                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"])) + "+";
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                    }
                }
                if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))
                    h2_grc = "";
                else
                    h2_grc = "";
            }
            else
            {
                if (checkedid.Contains(dtsub.Rows[i]["subject_id"].ToString()) == true)//for checked id
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[j] != "")
                        {
                            if (dtsub.Rows[i]["subject_id"].ToString() == arr[j].Split('_')[2].ToString())
                            {
                                if (arr[j].Contains("_H1") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                                    {
                                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h1"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                                        {
                                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"]));
                                        }
                                        else
                                        {
                                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }

                                if (arr[j].Contains("_H2") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                                    {
                                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h2"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                                        {
                                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"]));
                                        }
                                        else
                                        {
                                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                    if (h1 == "")
                    {
                        if (!Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                            {
                                h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"])) + "+";
                            }
                            else
                            {
                                h1 = Convert.ToString(dtmarks.Rows[0]["h1"]) + "+";
                            }
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]);
                        }
                    }
                    else if (h2 == "")
                    {
                        if (!Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                            {
                                h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"])) + "+";
                            }
                            else
                            {
                                h2 = Convert.ToString(dtmarks.Rows[0]["h2"]) + "+";
                            }
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]);
                        }
                    }
                    else
                    { }
                }
                else
                {
                    //AddGrace//
                    if ((!Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                        {
                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"])) + "+";
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                    }

                    //AddGrace//
                    if ((!Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                        {
                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"])) + "+";
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                    }
                }
                if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))
                    h1_grc = "";
                else
                    h1_grc = "";
                if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))
                    h2_grc = "";
                else
                    h2_grc = "";
            }

            if (type == "save")
            {
                qry = qry + "INSERT INTO cre_marks_tbl VALUES('" + dtsub.Rows[i]["subject_id"].ToString() + "','" + studid + "','" + h1 + "','" + h1_grc + "','" + h2 + "','" + h2_grc + "',Null,Null,'" + dtsub.Rows[i]["credit_sub_id"].ToString() + "', '" + examcode + "','" + semid + "','" + year + "',Null,'" + seat_no + "', '" + empId + "',Null,Null,Null,getDate(),null,0)  ";
            }
            else
            {
                qry = qry + "update cre_marks_tbl set h1='" + h1 + "', h2='" + h2 + "' where stud_id='" + studid + "' and sem_id='" + semid + "' and exam_code='" + examcode + "' and ayid='" + year + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and seat_no='" + seat_no + "' and del_flag=0 ";
            }

        }
        //qry = qry;
        if (cls1.DMLqueries(qry) == true)
        {
            return true;
        }
        else
        {
            return false;
        }
        //return true;
    }

    public bool revaldata(string branch, string group_id, string semid, string examcode, string type, string studid, string checkedid, string credit_sub_id, string empId, string seat_no, string year)
    {
        List<reexam> details = new List<reexam>();
        string subjectid = "";
        string str = "";
        str = "select a.subject_name,credit,a.subject_id,credit_sub_id,b.h1_out,b.h1_pass,b.h2_out,b.h2_pass,b.h1_resolution,b.h2_resolution,case when (h1_out<>'' and h2_out='') then 'h1' when (h1_out='' and h2_out<>'') then 'h2' else 'h1h2' end as header from dbo.cre_subject a left join cre_credit_tbl b on a.subject_id=b.subject_id where a.sem_id='" + semid + "' and branch_id='" + branch + "' and b.ayid='" + year + "' and group_id like '%" + group_id + "%' and a.del_flag=0 and credit_sub_id is not NULL order by a.subject_id";

        DataTable dtsub = new DataTable();
        DataTable dtmarks = new DataTable();
        dtsub = cls1.fillDataTable(str);
        str = "";
        string[] arr = new string[3];
        string h1 = "", h2 = "";
        string h1_grc = "", h2_grc = "";
        string qry = "";
        arr = checkedid.Split(',');
        for (int i = 0; i < dtsub.Rows.Count; i++)
        {
            str = "select * from dbo.cre_marks_tbl where stud_id='" + studid + "' and ayid='" + year + "' and sem_id='" + semid + "'  and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0 and curr_date =(select max(curr_date)  from dbo.cre_marks_tbl where stud_id='" + studid + "' and ayid='" + year + "' and sem_id='" + semid + "' and credit_sub_id='" + dtsub.Rows[i]["credit_sub_id"].ToString() + "' and del_flag=0)";

            h1 = "";
            h2 = "";
            h1_grc = ""; h2_grc = "";
            dtmarks = cls1.fillDataTable(str);

            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"]))) //h1
            {
                if (dtmarks.Rows[0]["h1"].ToString().Contains("+"))
                {
                    dtmarks.Rows[0]["h1"] = Convert.ToInt32(dtmarks.Rows[0]["h1"].ToString().Substring(0, dtmarks.Rows[0]["h1"].ToString().Length - 1)) + Convert.ToInt32(dtmarks.Rows[0]["h1_grace"].ToString().Substring(0, dtmarks.Rows[0]["h1_grace"].ToString().Length - 1));
                }
                else
                {
                    dtmarks.Rows[0]["h1"] = Convert.ToInt32(Convert.ToInt32(dtmarks.Rows[0]["h1"].ToString()) + Convert.ToInt32(dtmarks.Rows[0]["h1_grace"].ToString().Substring(0, dtmarks.Rows[0]["h1_grace"].ToString().Length - 1)));
                }
                dtmarks.Rows[0]["h1"] = dtmarks.Rows[0]["h1"] + "+";
            }

            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"]))) //h2
            {
                if (dtmarks.Rows[0]["h2"].ToString().Contains("+"))
                {
                    dtmarks.Rows[0]["h2"] = Convert.ToInt32(dtmarks.Rows[0]["h2"].ToString().Substring(0, dtmarks.Rows[0]["h2"].ToString().Length - 1)) + Convert.ToInt32(dtmarks.Rows[0]["h2_grace"].ToString().Substring(0, dtmarks.Rows[0]["h2_grace"].ToString().Length - 1));

                }
                else
                {
                    dtmarks.Rows[0]["h2"] = Convert.ToInt32(Convert.ToInt32(dtmarks.Rows[0]["h1"].ToString()) + Convert.ToInt32(dtmarks.Rows[0]["h2_grace"].ToString().Substring(0, dtmarks.Rows[0]["h2_grace"].ToString().Length - 1)));
                }
                dtmarks.Rows[0]["h2"] = dtmarks.Rows[0]["h2"] + "+";
            }

            //--------------------------------------------for H1
            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"])) && string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"])))
            {
                if (checkedid.Contains(dtsub.Rows[i]["subject_id"].ToString()) == true)//for checked id
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[j] != "")
                        {
                            if (dtsub.Rows[i]["subject_id"].ToString() == arr[j].Substring(7, 6))
                            {
                                if (arr[j].Contains("_H1") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                                    {
                                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h1"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                                        {
                                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"]));
                                        }
                                        else
                                        {
                                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))
                        h1_grc = "";
                    else
                        h1_grc = "";
                }
                else
                {
                    if ((!Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                        {
                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"])) + "+";
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))
                        h1_grc = "";
                    else
                        h1_grc = "";
                }
            }
            //--------------------------------------------for H2
            else if (string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"])) && !string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"])))
            {
                if (checkedid.Contains(dtsub.Rows[i]["subject_id"].ToString()) == true)//for checked id
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[j] != "")
                        {
                            if (dtsub.Rows[i]["subject_id"].ToString() == arr[j].Substring(7, 6))
                            {
                                if (arr[j].Contains("_H2") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                                    {
                                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h2"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                                        {
                                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"]));
                                        }
                                        else
                                        {
                                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                }
                else
                {
                    //AddGrace//
                    if ((!Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                        {
                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"])) + "+";
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                    }
                }
                if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))
                    h2_grc = "";
                else
                    h2_grc = "";
            }
            else
            {
                if (checkedid.Contains(dtsub.Rows[i]["subject_id"].ToString()) == true)//for checked id
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[j] != "")
                        {
                            if (dtsub.Rows[i]["subject_id"].ToString() == arr[j].Substring(7, 6))
                            {
                                if (arr[j].Contains("_H1") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                                    {
                                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h1"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                                        {
                                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"]));
                                        }
                                        else
                                        {
                                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }

                                if (arr[j].Contains("_H2") == true)
                                {
                                    if (Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                                    {
                                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Substring(0, Convert.ToString(dtmarks.Rows[0]["h2"]).IndexOf('+'));
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                                        {
                                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"]));
                                        }
                                        else
                                        {
                                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                    if (h1 == "")
                    {
                        if (!Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+"))
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                            {
                                h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"])) + "+";
                            }
                            else
                            {
                                h1 = Convert.ToString(dtmarks.Rows[0]["h1"]) + "+";
                            }
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]);
                        }
                    }
                    else if (h2 == "")
                    {
                        if (!Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+"))
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                            {
                                h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"])) + "+";
                            }
                            else
                            {
                                h2 = Convert.ToString(dtmarks.Rows[0]["h2"]) + "+";
                            }
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]);
                        }
                    }
                    else
                    { }
                }
                else
                {
                    //AddGrace//
                    if ((!Convert.ToString(dtmarks.Rows[0]["h1"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))//adding grace
                        {
                            h1 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h1_grace"]), Convert.ToString(dtmarks.Rows[0]["h1"])) + "+";
                        }
                        else
                        {
                            h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h1 = Convert.ToString(dtmarks.Rows[0]["h1"]).Trim();
                    }

                    //AddGrace//
                    if ((!Convert.ToString(dtmarks.Rows[0]["h2"]).Contains("+")) && (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2"]))))
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))//adding grace
                        {
                            h2 = cls1.Add_GraceMrks(Convert.ToString(dtmarks.Rows[0]["h2_grace"]), Convert.ToString(dtmarks.Rows[0]["h2"])) + "+";
                        }
                        else
                        {
                            h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim() + "+";
                        }
                    }
                    else
                    {
                        h2 = Convert.ToString(dtmarks.Rows[0]["h2"]).Trim();
                    }
                }
                if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h1_grace"])))
                    h1_grc = "";
                else
                    h1_grc = "";
                if (!string.IsNullOrEmpty(Convert.ToString(dtmarks.Rows[0]["h2_grace"])))
                    h2_grc = "";
                else
                    h2_grc = "";
            }

            if (type == "save")
            {
                qry = qry + "INSERT INTO cre_marks_tbl VALUES('" + dtsub.Rows[i]["subject_id"].ToString() + "','" + studid + "','" + h1 + "','" + h1_grc + "','" + h2 + "','" + h2_grc + "',Null,Null,'" + dtsub.Rows[i]["credit_sub_id"].ToString() + "', '" + examcode + "','" + semid + "','" + year + "',Null,'" + seat_no + "', '" + empId + "',Null,Null,Null,getDate(),null,0)  ";
            }
            else
            {
                qry = qry + "update cre_marks_tbl set h1='" + h1 + "', h2='" + h2 + "' where stud_id='" + studid + "' and sem_id='" + semid + "' and exam_code='" + examcode + "' and ayid='" + year + "' and subject_id='" + dtsub.Rows[i]["subject_id"].ToString() + "' and seat_no='" + seat_no + "' and del_flag=0; ";
            }
        }
        //qry = qry;
        if (cls1.DMLqueries(qry) == true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }



    public List<ListItem> fill_exam(string branch, string type, string year)
    {
        string qry = "";
        if (type == "reval")
        {
            qry = "select exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end when 2 then case when exam_code like 'E%' then '(Additional)' else '(Reval Additional)' end  else  case  when exam_code like 'E%' then '(Regular)' else '(Reval Regular)' end  end as a1,exam_code from cre_exam where branch_id='" + branch + "' and ayid='" + year + "' and del_flag=0 and is_current=1 and exam_code like 'E%' order by exam_code";

        }
        else if (type == "atkt")
        {
            qry = "select exam_date +' '+ case atkt_exam when 1 then '(A.T.K.T)' when 2 then '(Additional)' else '(Regular)' end as a1,exam_code FROM cre_exam where  is_current=1 and  ayid='" + year + "' and  exam_code like 'EXM%' and atkt_exam=1 and branch_id='" + branch + "' and del_flag= 0 order by curr_date";
        }
        else
        {
            //qry = "select exam_date +' '+ case atkt_exam when 1 then '(A.T.K.T)' when 2 then '(Additional)' else '(Regular)' end as a1,exam_code FROM cre_exam where  is_current=1 and  ayid='" + year + "' and  exam_code like 'EXM%' and atkt_exam=2 and branch_id='" + branch + "' and del_flag= 0 order by curr_date";
        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }


    public List<ListItem> fill_assexam(string branch, string year)
    {
        string qry = "";

        qry = "select exam_date+' '+ case atkt_exam when 1 then case when exam_code like 'E%' then '(A.T.K.T)' else '(Reval A.T.K.T)' end when 2 then case when exam_code like 'E%' then '(Additional)' else '(Reval Additional)' end  else  case  when exam_code like 'E%' then '(Regular)' else '(Reval Regular)' end  end as a1,exam_code from cre_exam where exam_code like 'R%' and ayid='" + year + "' and branch_id='" + branch + "' and del_flag=0 and is_current=1";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }
    //-----------------------------assign seat no---------------------------------------------
    public seatno[] fillgriddata(string year, string branch, string sem, string group, string exam)
    {



        string query = "";
        query = query + "select distinct a.stud_id as 'STUD_ID',isnull(b.stud_L_Name,'')+' '+isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'') as 'STUDENT NAME',isnull(quota_type,'') as 'QUOTA TYPE',case when a.seat_no like '%/%' then SUBSTRING(a.seat_no, 0, CHARINDEX('/', a.seat_no)) when (a.seat_no='' or a.seat_no is null) and ((select count(curr_exam_code) from KT_Exam where curr_exam_code='" + exam + "' and ayid=(select ayid from m_academic where IsCurrent='1'))>0) then '' when (a.seat_no='' or a.seat_no is null) then c.Roll_no  else a.seat_no end as 'ROLL_NO',case when a.seat_no like '%/%' and a.seat_no <> '' then RIGHT(a.seat_no,LEN(a.seat_no)-CHARINDEX('/',a.seat_no))  else '' end as 'Exam_SeatNo',case when a.stud_id not in (select stud_id from cre_stud_quota where exam_code = '" + exam + "' and sem_id = '" + sem + "') then 'insert' else 'update' end as Type ";
        query = query + "from m_std_studentacademic_tbl as c, cre_marks_tbl as a left join  m_std_personaldetails_tbl b on a.stud_id=b.stud_id left join cre_stud_quota d on d.stud_id=b.stud_id and d.sem_id=a.sem_id and d.exam_code=a.exam_code  ";
        query = query + "where c.stud_id=b.stud_id and c.group_id='" + group + "' and a.exam_code = '" + exam + "' and a.sem_id = '" + sem + "' and a.del_flag = 0 and b.del_flag=0 order by [STUDENT NAME],ROLL_NO";//and c.ayid='" + cmbYear.SelectedValue.ToString() + "'

        //query = "select distinct a.stud_id as 'STUD_ID',isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'')+' '+isnull(b.stud_L_Name,'') as 'STUDENT NAME',isnull(quota_type,'') as 'QUOTA TYPE',";
        //query = query + " cast(c.Roll_no as int) as 'ROLL_NO',case when a.seat_no like '%/%' and a.seat_no <> '' then RIGHT(a.seat_no,LEN(a.seat_no)-CHARINDEX('/',a.seat_no))  else '' end as 'Exam_SeatNo', ";
        //query = query + " case when a.stud_id not in (select stud_id from cre_stud_quota where exam_code = '" + exam + "' and sem_id = '" + sem + "') then 'insert' else 'update' end as Type ";
        //query = query + " from m_std_studentacademic_tbl as c, cre_marks_tbl as a left join  m_std_personaldetails_tbl b on a.stud_id=b.stud_id left join cre_stud_quota d on d.stud_id=b.stud_id where ";
        //query = query + " c.stud_id=b.stud_id and c.ayid='" + year + "'and c.group_id='" + group + "' and a.exam_code = '" + exam + "' and a.sem_id = '" + sem + "' and a.del_flag = 0 and b.del_flag=0 order by cast(c.Roll_no as int),[STUDENT NAME]";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        string qry = "";
        List<seatno> details = new List<seatno>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                seatno sn = new seatno();
                sn.stud_id = dr["STUD_ID"].ToString();
                sn.stud_name = dr["STUDENT NAME"].ToString();
                sn.stud_quota = dr["QUOTA TYPE"].ToString();
                sn.stud_rollno = dr["ROLL_NO"].ToString();
                sn.stud_seatno = dr["Exam_SeatNo"].ToString();
                sn.type = dr["Type"].ToString();
                sn.msg = "";
                details.Add(sn);
            }
        }
        else
        {
            seatno sn = new seatno();
            sn.msg = "Not Found";
            details.Add(sn);
        }
        return details.ToArray();
    }

    public seatno[] sem1data(string year, string branch, string sem, string group, string exam)
    {
        string query = "";

        query = "select distinct a.stud_id as 'STUD_ID',isnull(b.stud_L_Name,'')+' '+isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'') as 'STUDENT NAME',isnull(quota_type,'') as 'QUOTA TYPE',";
        query = query + " cast(c.Roll_no as int) as 'ROLL_NO',case when a.seat_no like '%/%' and a.seat_no <> '' then RIGHT(a.seat_no,LEN(a.seat_no)-CHARINDEX('/',a.seat_no))  else '' end as 'Exam_SeatNo', ";
        query = query + " case when a.stud_id not in (select stud_id from cre_stud_quota where exam_code = '" + exam + "' and sem_id = '" + sem + "') then 'insert' else 'update' end as Type ";
        query = query + " from m_std_studentacademic_tbl as c, cre_marks_tbl as a left join  m_std_personaldetails_tbl b on a.stud_id=b.stud_id left join cre_stud_quota d on d.stud_id=b.stud_id where ";
        query = query + " c.stud_id=b.stud_id and c.ayid='" + year + "'and c.group_id='" + group + "' and a.exam_code = '" + exam + "' and a.sem_id = '" + sem + "' and a.del_flag = 0 and b.del_flag=0 order by cast(c.Roll_no as int),[STUDENT NAME]";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        string qry = "";
        dt.Columns.Add("Seat_NO");
        if (dt.Rows.Count > 0)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataTable dt2 = new DataTable();
                qry = "select distinct seat_no from cre_marks_tbl where stud_id='" + dt.Rows[i]["STUD_ID"].ToString() + "' and sem_id='Sem-1' and del_flag=0 order by seat_no desc";
                dt2 = cls1.fillDataTable(qry);
                if (dt2.Rows.Count > 0)
                {
                    dt.Rows[i]["Seat_NO"] = dt2.Rows[0]["seat_no"].ToString();
                }
                else
                {

                }
            }
        }
        else
        {

        }

        List<seatno> details = new List<seatno>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                seatno sn = new seatno();
                sn.stud_id = dr["STUD_ID"].ToString();
                sn.stud_name = dr["STUDENT NAME"].ToString();
                sn.stud_quota = dr["QUOTA TYPE"].ToString();
                sn.stud_rollno = dr["ROLL_NO"].ToString();
                sn.stud_seatno = dr["seat_no"].ToString();
                sn.type = dr["Type"].ToString();
                sn.msg = "";
                details.Add(sn);
            }
        }
        else
        {
            seatno sn = new seatno();
            sn.msg = "Not Found";
            details.Add(sn);
        }
        return details.ToArray();
    }

    public seatno[] siglestuddata(string year, string branch, string sem, string group, string exam, string studid)
    {
        string query = "";
        Regex regex = new Regex(@"^\d+$");
        if (regex.IsMatch(studid))
        {
            query = "select distinct a.stud_id as 'STUD_ID',isnull(b.stud_L_Name,'')+' '+isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'') as 'STUDENT NAME',isnull(quota_type,'') as 'QUOTA TYPE',";
            query = query + " cast(c.Roll_no as int) as 'ROLL_NO',case when a.seat_no like '%/%' and a.seat_no <> '' then RIGHT(a.seat_no,LEN(a.seat_no)-CHARINDEX('/',a.seat_no))  else '' end as 'Exam_SeatNo', ";
            query = query + " case when a.stud_id not in (select stud_id from cre_stud_quota where exam_code = '" + exam + "' and sem_id = '" + sem + "') then 'insert' else 'update' end as Type ";
            query = query + " from m_std_studentacademic_tbl as c, cre_marks_tbl as a left join  m_std_personaldetails_tbl b on a.stud_id=b.stud_id left join cre_stud_quota d on d.stud_id=b.stud_id where ";
            query = query + " c.stud_id=b.stud_id and c.ayid='" + year + "'and c.group_id='" + group + "' and a.exam_code = '" + exam + "' and a.sem_id = '" + sem + "' and a.del_flag = 0 and b.del_flag=0 and a.stud_id='" + studid + "' order by cast(c.Roll_no as int),[STUDENT NAME]";
        }
        else
        {

            query = "select distinct a.stud_id as 'STUD_ID',isnull(b.stud_L_Name,'')+' '+isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'') as 'STUDENT NAME',isnull(quota_type,'') as 'QUOTA TYPE',";
            query = query + " cast(c.Roll_no as int) as 'ROLL_NO',case when a.seat_no like '%/%' and a.seat_no <> '' then RIGHT(a.seat_no,LEN(a.seat_no)-CHARINDEX('/',a.seat_no))  else '' end as 'Exam_SeatNo', ";
            query = query + " case when a.stud_id not in (select stud_id from cre_stud_quota where exam_code = '" + exam + "' and sem_id = '" + sem + "') then 'insert' else 'update' end as Type ";
            query = query + " from m_std_studentacademic_tbl as c, cre_marks_tbl as a left join  m_std_personaldetails_tbl b on a.stud_id=b.stud_id left join cre_stud_quota d on d.stud_id=b.stud_id where ";
            query = query + " c.stud_id=b.stud_id and c.ayid='" + year + "'and c.group_id='" + group + "' and a.exam_code = '" + exam + "' and a.sem_id = '" + sem + "' and a.del_flag = 0 and b.del_flag=0 and isNull(b.stud_F_Name,'')+' '+isNull(b.stud_M_Name,'')+' '+isNull(b.stud_L_Name,'') like '%" + studid + "%' order by cast(c.Roll_no as int),[STUDENT NAME]";
        }
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        string qry = "";
        List<seatno> details = new List<seatno>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                seatno sn = new seatno();
                sn.stud_id = dr["STUD_ID"].ToString();
                sn.stud_name = dr["STUDENT NAME"].ToString();
                sn.stud_quota = dr["QUOTA TYPE"].ToString();
                sn.stud_rollno = dr["ROLL_NO"].ToString();
                sn.stud_seatno = dr["Exam_SeatNo"].ToString();
                sn.type = dr["Type"].ToString();
                sn.msg = "";
                details.Add(sn);
            }
        }
        else
        {
            seatno sn = new seatno();
            sn.msg = "Not Found";
            details.Add(sn);
        }
        return details.ToArray();
    }
    public List<ListItem> fill_S_exam(string branch, string year)
    {
        string qry = "";
        qry = "select exam_date+' '+ case atkt_exam when 1 then '(A.T.K.T)' else '(Regular)' end as a1,exam_code from cre_exam where ayid='" + year + "' and branch_id='" + branch + "' and exam_code like 'EXM%' and is_lock=0 and is_current=1 and del_flag= 0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["exam_code"].ToString(),
                            Text = sdr["a1"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    //----------marks entry-----------------------------------------------------
    public marksentry[] getexceldata(string branch, string exam, string examname, string semester, string group, string subject, string year)
    {
        string qry = "";
        List<marksentry> confirm = new List<marksentry>();
        qry = "select distinct d.stud_id as [STUDENT ID], a.seat_no as [SEAT NO],case b.stud_Gender when 0 then '/'+isnull(b.stud_L_Name,'')+' ' +isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'') else isnull(b.stud_L_Name,'')+' ' +isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'') end as [STUDENT NAME],case when seat_no like '%/%' then cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) else cast(seat_no as int) end   as abc,cre.credit as credit from dbo.cre_marks_tbl as a,dbo.m_std_personaldetails_tbl as b ,dbo.cre_subject as c , dbo.m_std_studentacademic_tbl as d,cre_credit_tbl as cre";
        if (examname.Contains("A.T.K.T"))
        {
            qry = qry + " where  a.stud_id=b.stud_id and a.subject_id=c.subject_id and a.stud_id=d.stud_id  and a.sem_id='" + semester + "'  and c.branch_id='" + branch + "' and a.subject_id='" + subject + "' and exam_code='" + exam + "'  and d.group_id='" + group + "' and cre.subject_id=c.subject_id and a.subject_id=cre.subject_id and a.credit_sub_id=cre.credit_sub_id and cre.ayid='" + year + "' and a.del_flag = 0 and b.del_flag = 0  order by  (case when seat_no like '%/%' then cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) else cast(seat_no as int) end) ";// (case when  a.seat_no not like '%[^0-9]%' and a.seat_no != '' then a.seat_no else cast(LEFT(a.seat_no, ISNULL(NULLIF(CHARINDEX('/', a.seat_no) - 1, -1), LEN(a.seat_no))) as varchar )  end)";
        }
        else
        {
            qry = qry + " where  a.stud_id=b.stud_id and a.subject_id=c.subject_id and a.stud_id=d.stud_id and a.ayid='" + year + "' and a.sem_id='" + semester + "'  and c.branch_id='" + branch + "' and a.subject_id='" + subject + "' and cre.subject_id=c.subject_id and a.subject_id=cre.subject_id and a.credit_sub_id=cre.credit_sub_id and cre.ayid='" + year + "' and exam_code='" + exam + "' and d.ayid='" + year + "' and d.group_id='" + group + "' and a.del_flag = 0 and b.del_flag = 0 order by  (case when seat_no like '%/%' then cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ) else cast(seat_no as int) end) ";//(case when  a.seat_no not like '%[^0-9]%' and a.seat_no != '' then a.seat_no else cast(LEFT(a.seat_no,ISNULL(NULLIF(CHARINDEX('/', a.seat_no) - 1, -1), LEN(a.seat_no))) as varchar )  end)";
        }

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);

        if (dt.Rows.Count > 0)
        {
            DataTable cnt = new DataTable();
            DataTable new_dt = new DataTable();
            new_dt.Columns.Add("SR NO.");
            new_dt.Columns.Add("STUDENT ID");
            new_dt.Columns.Add("NAME OF THE CANDIDATE");
            // new_dt.Columns.Add("CREDIT");
            new_dt.Columns.Add("SEAT NO");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                new_dt.Rows.Add(new_dt.NewRow());
                new_dt.Rows[i]["SR NO."] = i + 1;
                new_dt.Rows[i]["STUDENT ID"] = dt.Rows[i]["STUDENT ID"].ToString();
                new_dt.Rows[i]["NAME OF THE CANDIDATE"] = dt.Rows[i]["STUDENT NAME"].ToString();
                // new_dt.Rows[i]["CREDIT"] = dt.Rows[i]["credit"].ToString();
                new_dt.Rows[i]["SEAT NO"] = dt.Rows[i]["SEAT NO"].ToString();
            }
            //new_dt.Columns.Add("CREDIT"); 
            string query = "";
            query = "select credit_sub_id,h1_out,h1_type,h2_out,h2_type from dbo.cre_credit_tbl where subject_id='" + subject + "' and ayid='" + year + "'";
            DataSet ds = new DataSet();
            ds = cls1.fillDataset(query);
            int inc = 0;
            string c_query = "";
            for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
            {
                if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[0].Rows[j]["h1_type"])))
                {
                    string column = "";
                    //column = ds.Tables[0].Rows[j]["h1_type"] + "(" + ds.Tables[0].Rows[j]["h1_out"] + ")";
                    column = "ESE/PR/OR";
                    new_dt.Columns.Add(column);
                    c_query += "select distinct ac.stud_id as [STUDENT ID],a.seat_no,h1 as [" + column + "],case when  a.seat_no not like '%[^0-9]%' and a.seat_no != '' then a.seat_no else cast(LEFT(a.seat_no,ISNULL(NULLIF(CHARINDEX('/', a.seat_no) - 1, -1), LEN(a.seat_no))) as int )  end as abc from dbo.cre_marks_tbl as a left join dbo.m_std_personaldetails_tbl as b on a.stud_id=b.stud_id left join dbo.cre_subject as c on a.subject_id=c.subject_id left join dbo.m_std_studentacademic_tbl ac on ac.stud_id=a.stud_id  where a.stud_id=b.stud_id and a.subject_id=c.subject_id and a.ayid='" + year + "' and a.sem_id='" + semester + "' and c.branch_id='" + branch + "' and a.subject_id='" + subject + "' and c.group_id like '%" + group + "%'  and ac.group_id='" + group + "'   and exam_code='" + exam + "' and a.del_flag = 0 and b.del_flag = 0 and credit_sub_id='" + ds.Tables[0].Rows[j]["credit_sub_id"] + "' order by (case when  a.seat_no not like '%[^0-9]%' and a.seat_no != '' then a.seat_no else cast(LEFT(a.seat_no, ISNULL(NULLIF(CHARINDEX('/', a.seat_no) - 1, -1), LEN(a.seat_no))) as int )  end) ";

                    inc = inc + 1;
                }

                if (!string.IsNullOrEmpty(Convert.ToString(ds.Tables[0].Rows[j]["h2_type"])))
                {
                    string column = "";
                    // column = ds.Tables[0].Rows[j]["h2_type"] + "(" + ds.Tables[0].Rows[j]["h2_out"] + ")";
                    column = "IA/TW";
                    new_dt.Columns.Add(column);

                    c_query += "select distinct ac.stud_id as [STUDENT ID],a.seat_no,h2 as [" + column + "],case when  a.seat_no not like '%[^0-9]%' and a.seat_no != '' then a.seat_no else cast(LEFT(a.seat_no,ISNULL(NULLIF(CHARINDEX('/', a.seat_no) - 1, -1), LEN(a.seat_no))) as int )  end as abc from dbo.cre_marks_tbl as a left join dbo.m_std_personaldetails_tbl as b on a.stud_id=b.stud_id left join dbo.cre_subject as c on a.subject_id=c.subject_id left join dbo.m_std_studentacademic_tbl ac on ac.stud_id=a.stud_id   where a.stud_id=b.stud_id and a.subject_id=c.subject_id and a.ayid='" + year + "'  and a.sem_id='" + semester + "' and c.branch_id='" + branch + "' and a.subject_id='" + subject + "' and c.group_id like '%" + group + "%' and ac.group_id='" + group + "'  and exam_code='" + exam + "' and a.del_flag = 0 and b.del_flag = 0 and credit_sub_id='" + ds.Tables[0].Rows[j]["credit_sub_id"] + "' order by (case when  a.seat_no not like '%[^0-9]%' and a.seat_no != '' then a.seat_no else cast(LEFT(a.seat_no, ISNULL(NULLIF(CHARINDEX('/', a.seat_no) - 1, -1), LEN(a.seat_no))) as int )  end) ";
                    inc = inc + 1;
                }
            }

            DataSet c_ds = new DataSet();
            if (c_query != "")
            {
                c_ds = cls1.fillDataset(c_query);
            }
            else
            {

            }
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                new_dt.Rows.Add(new_dt.NewRow());
                for (int j = 0; j < inc; j++)
                {
                    new_dt.Rows[i][4 + j] = c_ds.Tables[j].Rows[i][2].ToString();
                }
            }

            bool flag = false;
            if (examname.Contains("A.T.K.T") || examname.Contains("Reval"))
            {
                flag = true;
            }
            int headcount = 0;
            if (new_dt.Columns.Contains("ESE/PR/OR"))
            {
                if (new_dt.Columns.Contains("IA/TW"))
                {
                    headcount = 3;
                }
                else
                {
                    headcount = 2;
                }
            }
            else
            {
                headcount = 1;
            }

            foreach (DataRow drrow in new_dt.Rows)
            {
                marksentry ret = new marksentry();
                ret.stud_id = drrow["STUDENT ID"].ToString();
                ret.srno = drrow["SR NO."].ToString();
                ret.name = drrow["NAME OF THE CANDIDATE"].ToString();
                ret.seatno = drrow["SEAT NO"].ToString();
                if (headcount == 1)
                {
                    ret.h2mrks = drrow["IA/TW"].ToString();
                    ret.headcnt = "1";
                }
                else if (headcount == 2)
                {
                    ret.h1mrks = drrow["ESE/PR/OR"].ToString();
                    ret.headcnt = "2";
                }
                else
                {
                    ret.h1mrks = drrow["ESE/PR/OR"].ToString();
                    ret.h2mrks = drrow["IA/TW"].ToString();
                    ret.headcnt = "3";
                }
                ret.msg = "";
                confirm.Add(ret);
            }
        }
        else
        {
            marksentry ret = new marksentry();
            ret.msg = "No Data";
            confirm.Add(ret);
        }
        return confirm.ToArray();
    }

    //-------------------------gazatte---------------------------------------------

    public Gazette[] fillgazette(string branch, string sem, string exam, string examname, string group, string year)
    {
        string str = "";
        List<Gazette> details = new List<Gazette>();
        bool h1flagf = false;
        bool h2flagf = false;
        //=========================Add for 10point grading system ---------08-11-2016
        string qrygrade1 = "select Group_id,Descritption from m_crs_subjectgroup_tbl where Group_id='" + group + "'";
        DataTable dtgrade1 = cls1.fillDataTable(qrygrade1);
        //=========================================================

        DataTable dtStud;

        dtStud = cls1.fillDataTable("select stud_id from m_std_personaldetails_tbl where stud_id in (select distinct stud_id from cre_marks_tbl where del_flag=0 and exam_code='" + exam + "' and sem_id='" + sem + "' and ayid='" + year + "') order by LEFT(stud_id,PATINDEX('%[0-9]%',stud_id )-1), CONVERT(varchar(20),SUBSTRING(stud_id ,PATINDEX('%[0-9]%',stud_id ),LEN(stud_id )))");

        bool saveFlag = false;
        string grcQry = "select round(((sum(convert(float,h1_out)) + sum(convert(float,h2_out)))/100),0) from dbo.cre_credit_tbl where ayid='" + year + "'  and del_flag=0 and subject_id in (select distinct subject_id from dbo.cre_subject where sem_id='" + sem + "' and branch_id='" + branch + "' and group_id like '%" + group + "%' and del_flag=0)";
        DataTable dtGrace = cls1.fillDataTable(grcQry);
        int grcMrk = 0;
        int grace42 = 0;
        if (dtGrace.Rows.Count > 0)
        {
            if (dtGrace.Rows[0][0].ToString() != "")
            {
                grcMrk = Convert.ToInt32(dtGrace.Rows[0][0]);
            }
        }

        for (int i = 0; i < dtStud.Rows.Count; i++)
        {
            string query = " select m.stud_id,m.subject_id,m.credit_sub_id,m.h1,m.h1_grace,m.h2,m.h2_grace,c.h1_out,c.h1_pass,c.h1_type,c.h2_out,c.h2_pass,c.h2_type,m.exam_code,m.remark,dbo.getGraceFor42(convert(int,c.h1_out))as h1_grace42,dbo.getGraceFor42(convert(int,c.h2_out)) as h2_grace42,h3_grace from dbo.cre_credit_tbl as c,dbo.cre_marks_tbl as m where c.credit_sub_id=m.credit_sub_id and m.exam_code='" + exam + "' and m.stud_id='" + dtStud.Rows[i]["stud_id"] + "' and m.ayid='" + year + "' and m.sem_id='" + sem + "' and c.ayid='" + year + "' order by LEFT(m.subject_id ,PATINDEX('%[0-9]%',m.subject_id )-1), CONVERT(varchar(20),SUBSTRING(m.subject_id ,PATINDEX('%[0-9]%',m.subject_id ),LEN(m.subject_id )))";
            string query42 = "select sum(convert(int,isnull(h3_grace,'0'))) from dbo.cre_credit_tbl as c,dbo.cre_marks_tbl as m where c.credit_sub_id=m.credit_sub_id and m.exam_code='" + exam + "' and m.stud_id='" + dtStud.Rows[i]["stud_id"] + "' and m.ayid='" + year + "' and m.sem_id='" + sem + "' and m.del_flag=0 and c.del_flag=0 and c.ayid=m.ayid";
            DataTable dtmrk = cls1.fillDataTable(query);
            DataTable dt42 = cls1.fillDataTable(query42);

            string qry1 = "select subject_id from  dbo.cre_marks_tbl where stud_id='" + dtStud.Rows[i]["stud_id"] + "' and ayid='" + year + "' and sem_id='" + sem + "' and exam_code='" + exam + "' and (h2='Ab'  or h1='Ab') group by subject_id";
            DataTable dtAb = cls1.fillDataTable(qry1);

            grcQry = " select quota_type from dbo.cre_stud_quota where stud_id='" + dtStud.Rows[i]["stud_id"] + "' and exam_code='" + exam + "' and del_flag=0";
            dtGrace = new DataTable();
            dtGrace = cls1.fillDataTable(grcQry);
            string quota = "";
            if (dtGrace.Rows.Count > 0)
                quota = Convert.ToString(dtGrace.Rows[0][0]);


            //--------------------------------getting Resolution from Resolution Table----------------
            dtmrk.Columns.Add("h1_resolution");
            dtmrk.Columns.Add("h2_resolution");

            for (int j = 0; j < dtmrk.Rows.Count; j++)
            {
                DataTable dtRes = cls1.fillDataTable("select h1_res,h2_res from dbo.cre_resolution where credit_sub_id='" + dtmrk.Rows[j]["credit_sub_id"].ToString() + "'  and exam_code='" + exam + "' and del_flag=0");

                if (dtRes.Rows.Count > 0)
                {
                    if (string.IsNullOrEmpty(Convert.ToString(dtRes.Rows[0]["h1_res"])))
                    {
                        dtmrk.Rows[j]["h1_resolution"] = "0";
                    }
                    else
                    {
                        dtmrk.Rows[j]["h1_resolution"] = dtRes.Rows[0]["h1_res"];
                    }

                    if (string.IsNullOrEmpty(Convert.ToString(dtRes.Rows[0]["h2_res"])))
                    {
                        dtmrk.Rows[j]["h2_resolution"] = "0";
                    }
                    else
                    {
                        dtmrk.Rows[j]["h2_resolution"] = dtRes.Rows[0]["h2_res"];
                    }
                }
                else
                {
                    dtmrk.Rows[j]["h1_resolution"] = "0";
                    dtmrk.Rows[j]["h2_resolution"] = "0";
                }
            }

            //-----------------------------------------------------------------------------------------

            //if (examname.Contains("A.T.K.T"))
            //{

            //    if (dtgrade1.Rows[0]["Descritption"].ToString() == "10")
            //    {
            //        saveFlag = cls1.addOverallGraceNew(dtmrk, grcMrk, dt42, quota, dtAb);
            //    }
            //    else
            //    {
            //        saveFlag = cls1.OverallResolution(dtmrk, grcMrk, dt42, quota, dtAb);
            //    }
            //}
            //else
            //{
            //    saveFlag = cls1.addOverallGraceNew(dtmrk, grcMrk, dt42, quota, dtAb);
            //}
        }

        // string qry3 = "select distinct s.subject_id,s.subject_code,s.subject_name,c.h1_type,c.h2_type,c.h1_out,c.h1_pass,c.h2_out,c.h2_pass,c.credit_sub_id from dbo.cre_subject as s,dbo.cre_credit_tbl as c where  s.subject_id=c.subject_id and s.sem_id='" + sem + "' and s.group_id like '%" + group + "%' and c.ayid='" + year + "' and s.branch_id='" + branch + "' and s.del_flag=0 and c.del_flag=0 order by s.subject_id,c.credit_sub_id";
        string qry3 = "select a.* ,case when h1_type='' and h2_type<>'' then 1 when h1_type<>'' and h2_type='' then 1 else 2 end as headcnt from (select distinct s.subject_id,s.subject_code,s.subject_name,c.h1_type,c.h2_type,c.h1_out,c.h1_pass,c.h2_out,c.h2_pass,c.credit_sub_id from dbo.cre_subject as s,dbo.cre_credit_tbl as c where  s.subject_id=c.subject_id and s.sem_id='" + sem + "' and s.group_id like '%" + group + "%' and c.ayid='" + year + "' and s.branch_id='" + branch + "' and s.del_flag=0 and c.del_flag=0 ) a order by a.subject_id,a.credit_sub_id";
        string qry2 = "";
        string grpQuery = "select subject_id from dbo.cre_subject where branch_id='" + branch + "' and group_id like '%" + group + "%' and sem_id='" + sem + "' and del_flag=0 ";

        if (examname.Contains("A.T.K.T"))
        {

            qry2 = qry2 + " select a.*,case when h1_type='' and h2_type<>'' then 1 when h1_type<>'' and h2_type='' then 1 else 2 end as headcnt from ( select distinct m.stud_id,isnull(m.seat_no,'') as 'Seat_no',  case when stud_Gender=0 then '/ ' + (isnull(stud_L_Name,'') + ' ' +isnull(stud_F_Name,'')+ ' ' + isnull(stud_M_Name,''))  else (isnull(stud_L_Name,'') + ' ' +isnull(stud_F_Name,'')"
             + " + ' ' + isnull(stud_M_Name,'')) end  as [Name],s.subject_name,s.subject_code  ,isnull(h1,'') as h1,isnull(h1_grace,'')  as h1_grace,h1_out,h1_pass,h1_type,h1_resolution, isnull(h2,'') as h2, isnull(h2_grace,'') as h2_grace,h2_out,h2_pass,h2_type,h2_resolution,isnull(h3,'') as h3,isnull(h3_grace,'') as h3_grace,m.subject_id,m.credit_sub_id,credit,convert(int,m.extra3) as Rank,cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc,extra3 from dbo.cre_marks_tbl m,"
             + " dbo.m_std_personaldetails_tbl p, cre_credit_tbl c,dbo.m_std_studentacademic_tbl a,cre_subject s  where m.stud_id=p.stud_id and m.credit_sub_id=c.credit_sub_id and  c.ayid='" + year + "' and m.stud_id=a.stud_id "
             + " and m.stud_id in (select distinct stud_id from cre_marks_tbl where exam_code='" + exam + "'   and del_flag=0) and s.subject_id=m.subject_id and c.subject_id=s.subject_id and m.sem_id='" + sem + "'  and a.group_id='" + group + "' and  m.ayid='" + year + "'  and "
             + " m.exam_code='" + exam + "' and m.subject_id IN (select subject_id from dbo.cre_subject where branch_id='" + branch + "' and group_id like '%" + group + "%' and sem_id='" + sem + "' and del_flag=0 )  and m.del_flag=0 and p.del_flag=0 and c.del_flag=0 ) a order by cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ),[Name],convert(int,extra3),subject_id,credit_sub_id ";

        }
        else
        {
            qry2 = qry2 + " select a.*,case when h1_type='' and h2_type<>'' then 1 when h1_type<>'' and h2_type='' then 1 else 2 end as headcnt from (select isnull(m.seat_no,'') as 'Seat_no',  case when stud_Gender=0 then '/ ' + (isnull(stud_L_Name,'') + ' ' +isnull(stud_F_Name,'')+ ' ' + isnull(stud_M_Name,'')) else (isnull(stud_L_Name,'') + ' ' +isnull(stud_F_Name,'')+ ' ' + isnull(stud_M_Name,'')) end  as [Name],s.subject_name,s.subject_code  ,isnull(h1,'') as h1,isnull(h1_grace,'') as h1_grace,h1_out,h1_pass,h1_type,h1_resolution,convert(int,m.extra3) as Rank,";
            qry2 = qry2 + " isnull(h2,'') as h2,isnull(h2_grace,'') as h2_grace,h2_out,h2_pass,h2_type,h2_resolution,isnull(h3,'') as h3,isnull(h3_grace,'') as h3_grace,m.stud_id,m.subject_id,m.credit_sub_id,credit,cast(LEFT(m.seat_no, ISNULL(NULLIF(CHARINDEX('/', m.seat_no) - 1, -1), LEN(m.seat_no))) as int ) as abc ,extra3";
            qry2 = qry2 + " from dbo.cre_marks_tbl m, dbo.m_std_personaldetails_tbl p, cre_credit_tbl c,dbo.m_std_studentacademic_tbl a,cre_subject s ";
            qry2 = qry2 + " where m.stud_id=p.stud_id and m.credit_sub_id=c.credit_sub_id and a.ayid='" + year + "' and c.ayid='" + year + "' and m.stud_id=a.stud_id  and m.sem_id='" + sem + "' and a.group_id='" + group + "' and m.ayid='" + year + "'  and m.exam_code='" + exam + "' and m.subject_id IN (" + grpQuery + ")  and  m.del_flag=0 and p.del_flag=0 and c.del_flag=0 and s.subject_id=m.subject_id and s.group_id like '%" + group + "%' and a.group_id=s.group_id and c.subject_id=s.subject_id ) a  order by cast(LEFT(seat_no, ISNULL(NULLIF(CHARINDEX('/', seat_no) - 1, -1), LEN(seat_no))) as int ),[Name],convert(int,extra3),subject_id,credit_sub_id ";
        }

        DataTable dt1 = cls1.fillDataTable(qry3);
        DataTable dt2 = cls1.fillDataTable(qry2);
        int subjcnt = dt1.Rows.Count;
        if (dt1.Rows.Count > 0)
        {
            if (dt2.Rows.Count > 0)
            {
                dt1.Columns.Add("subject_idtemp");
                dt1.Columns.Add("ranktemp", typeof(int));

                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    for (int k = 0; k < dt2.Rows.Count; k++)
                    {
                        if (k == dt1.Rows.Count)
                        {
                            break;
                        }
                        if (dt1.Rows[i]["subject_id"].ToString() == dt2.Rows[k]["subject_id"].ToString())
                        {
                            if (string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["Rank"].ToString())))
                            {
                                dt1.Rows[i]["ranktemp"] = 0;
                                break;
                            }
                            else
                            {
                                // dt1.Rows.Add(dtsubject.Rows[i]["Rank"].ToString());
                                dt1.Rows[i]["ranktemp"] = dt2.Rows[k]["Rank"].ToString();
                                break;
                            }
                        }
                    }
                }

                dt1.DefaultView.Sort = "ranktemp ASC";
                dt1 = dt1.DefaultView.ToTable();
                string[] semArr = new string[0];
                if (sem == "Sem-1")
                {
                    semArr = new string[1];
                    semArr[0] = "Sem-1";
                }
                else
                {
                    if (sem == "Sem-2")
                    {
                        semArr = new string[2];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                    }
                    else if (sem == "Sem-3")
                    {
                        semArr = new string[3];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                        semArr[2] = "Sem-3";
                    }
                    else if (sem == "Sem-4")
                    {
                        semArr = new string[4];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                        semArr[2] = "Sem-3";
                        semArr[3] = "Sem-4";
                    }
                    else if (sem == "Sem-5")
                    {
                        semArr = new string[5];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                        semArr[2] = "Sem-3";
                        semArr[3] = "Sem-4";
                        semArr[4] = "Sem-5";
                    }
                    else if (sem == "Sem-6")
                    {
                        semArr = new string[6];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                        semArr[2] = "Sem-3";
                        semArr[3] = "Sem-4";
                        semArr[4] = "Sem-5";
                        semArr[5] = "Sem-6";
                    }
                    else if (sem == "Sem-7")
                    {
                        semArr = new string[7];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                        semArr[2] = "Sem-3";
                        semArr[3] = "Sem-4";
                        semArr[4] = "Sem-5";
                        semArr[5] = "Sem-6";
                        semArr[6] = "Sem-7";
                    }
                    else if (sem == "Sem-8")
                    {
                        semArr = new string[8];
                        semArr[0] = "Sem-1";
                        semArr[1] = "Sem-2";
                        semArr[2] = "Sem-3";
                        semArr[3] = "Sem-4";
                        semArr[4] = "Sem-5";
                        semArr[5] = "Sem-6";
                        semArr[6] = "Sem-7";
                        semArr[7] = "Sem-8";
                    }
                }


                dt2.Columns.Add("h1mrk");
                dt2.Columns.Add("h2mrk");
                dt2.Columns.Add("2head");
                dt2.Columns.Add("Grade");
                dt2.Columns.Add("EarnCredit");
                dt2.Columns.Add("totcredit");
                dt2.Columns.Add("GXC");
                dt2.Columns.Add("total");
                dt2.Columns.Add("TotalGXC");
                dt2.Columns.Add("Sgpi");
                dt2.Columns.Add("Result");
                dt2.Columns.Add("overallgrade");

                int semm = 0;
                for (int i = 0; i < semArr.Length - 1; i++)
                {
                    semm++;
                    dt2.Columns.Add("Semester" + (i + 1));
                }


                string Kt_qry = "";
                for (int j = 0; j < dt2.Rows.Count; j = j + dt1.Rows.Count)
                {

                    string qrygrade = "select Group_id,Descritption from m_crs_subjectgroup_tbl where Group_id='" + group + "'";
                    DataTable dtgrade = cls1.fillDataTable(qrygrade);

                    int xlCol = 1;
                    int xlColM = 3;
                    int Total = 0, atTot = 0;
                    double cTot = 0, gpTot = 0, Totgp = 0;
                    bool ctotFlag = false;
                    int FailCnt = 0;
                    decimal cgpi = 0, TotC = 0;
                    double creTotal = 0, cxgTotal = 0;
                    string stud_id = "";
                    int Th_Kt = 0, Oth_Kt = 0;
                    int subGrade = 0;

                    bool exmFlag = false, TWFlag = false;
                    bool GotGrace = false, isNss = false;
                    string Result = "NA";

                    //======================================================================================================stud Wise Loop================================================================
                    for (int k = j; k < j + dt1.Rows.Count; k++)
                    {
                        h1flagf = false;
                        h2flagf = false;
                        string atMrk = "0";
                        bool h1Imp = false, h2Imp = false;
                        if (k == j)
                        {
                            stud_id = dt2.Rows[k]["stud_id"].ToString();
                            if (sem == "Sem-2" || sem == "Sem-4")// -NCC check Sem
                            {
                                string qryQuota = "select * from cre_stud_quota where sem_id='" + sem + "' and exam_code='" + exam + "' and stud_id='" + dt2.Rows[k]["stud_id"].ToString() + "' and del_flag=0";
                                DataTable dtQuota = cls1.fillDataTable(qryQuota);
                                if (dtQuota.Rows.Count > 0)
                                {
                                    if (!string.IsNullOrEmpty(Convert.ToString(dtQuota.Rows[0][0])))
                                    {
                                        //if (Convert.ToString(dtQuota.Rows[0]["quota_type"]).ToUpper() == "NSS" || Convert.ToString(dtQuota.Rows[0][0]).ToUpper() == "NCC" || Convert.ToString(dtQuota.Rows[0][0]).ToUpper() == "SPORTS" || Convert.ToString(dtQuota.Rows[0][0]).ToUpper() == "EXT")  change for the quota condition  12april16 shweta
                                        if (Convert.ToString(dtQuota.Rows[0]["quota_type"]).ToUpper() == "NSS" || Convert.ToString(dtQuota.Rows[0]["quota_type"]).ToUpper() == "NCC" || Convert.ToString(dtQuota.Rows[0]["quota_type"]).ToUpper() == "SPORTS" || Convert.ToString(dtQuota.Rows[0]["quota_type"]).ToUpper() == "EXT")
                                        {
                                            isNss = true;
                                        }
                                    }
                                }
                            }

                            DataTable dtRemark = cls1.fillDataTable("select remark from dbo.cre_marks_tbl m, dbo.m_std_personaldetails_tbl p  where m.stud_id=p.stud_id and sem_id='" + sem + "' and m.ayid='" + year + "'  and m.exam_code='" + exam + "' and m.stud_id='" + dt2.Rows[k]["stud_id"].ToString() + "' and remark like 'un%' and  m.del_flag=0 and p.del_flag=0 ");
                            if (dtRemark.Rows.Count > 0)
                            {
                                exmFlag = true;
                            }

                            string query42 = "select sum(convert(int,isnull(h3_grace,'0'))) from dbo.cre_credit_tbl as c,dbo.cre_marks_tbl as m where c.credit_sub_id=m.credit_sub_id and m.exam_code='" + exam + "' and m.stud_id='" + dt2.Rows[k]["stud_id"].ToString() + "' and m.ayid='" + year + "' and m.sem_id='" + sem + "' and ((h1_grace like '%*%' or h1_grace like '%@%') or (h2_grace like '%*%' or h2_grace like '%@%')) and m.del_flag=0 and c.del_flag=0";

                            DataTable dt42 = cls1.fillDataTable(query42);

                            if (dt42.Rows.Count > 0)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(dt42.Rows[0][0])))
                                {
                                    if (Convert.ToInt32(dt42.Rows[0][0]) > 0)
                                    {
                                        GotGrace = true;
                                    }
                                }
                            }
                        }

                        bool h1F = false;
                        bool h2F = false;

                        string h1 = "0", h2 = "0";
                        int crdPt = 0;
                        bool abFlag = false, h1Fail = false, h2Fail = false;

                        bool h1KT = false, h2KT = false;
                        bool h1Blank = false, h2Blank = false;


                        //--------------------------------------------------------------H1---------------------------------------------------------------------------------------------------------------
                        if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1_type"]).Trim()) && !string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1"]).Trim()))
                        {
                            string[] arr1 = new string[3];
                            bool resFlag = false, atFlag = false, starFlag = false;
                            string zero = "";

                            if (dt2.Rows[k]["h1"].ToString().Contains("Ab"))
                            {
                                arr1[0] = "F";
                                dt2.Rows[k]["Grade"] = "F";
                                FailCnt++;
                                abFlag = true;
                                h1KT = true;
                            }
                            else
                            {

                                if (Convert.ToString(dt2.Rows[k]["h1"]).Trim().Length == 1)
                                {
                                    zero = "0";
                                }

                                if (Convert.ToString(dt2.Rows[k]["h1"]).Contains("+"))
                                {
                                    if (!examname.Contains("Reval"))
                                    { h1KT = true; }
                                    if (Convert.ToString(dt2.Rows[k]["h1"]).Trim().Length == 2)
                                    {
                                        zero = "0";
                                    }
                                    dt2.Rows[k]["h1mrk"] = Convert.ToString(dt2.Rows[k]["h1"]).Substring(0, Convert.ToString(dt2.Rows[k]["h1"]).Length - 1);
                                }

                                if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1_grace"])))
                                {

                                    h1 = cls1.Add_GraceMrks(Convert.ToString(dt2.Rows[k]["h1_grace"]), dt2.Rows[k]["h1mrk"].ToString());
                                    if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("^"))
                                    {
                                        if (h1KT == true)
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + h1 + "+";
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + h1;
                                        }
                                        resFlag = true;
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("*"))
                                    {
                                        if (h1KT == true)
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+" + Environment.NewLine + "*";
                                        }
                                        else
                                        {
                                            if (exmFlag == true)
                                            {
                                                dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "E" + Environment.NewLine + "*";
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + Environment.NewLine + "*";
                                            }
                                            //starFlag = true;
                                        }
                                        starFlag = true;
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("@"))
                                    {
                                        string S1 = "", S2 = "";
                                        atFlag = true;
                                        S2 = dt2.Rows[k]["h1_grace"].ToString().Substring(dt2.Rows[k]["h1_grace"].ToString().IndexOf('@'));
                                        S1 = dt2.Rows[k]["h1_grace"].ToString().Substring(0, dt2.Rows[k]["h1_grace"].ToString().IndexOf('@'));
                                        atMrk = S1;
                                        if (h1KT == true)
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1mrk"].ToString() + "+" + Environment.NewLine + S2 + S1;
                                        }
                                        else
                                        {
                                            if (exmFlag == true)
                                            {
                                                dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1mrk"].ToString() + "E" + Environment.NewLine + S2 + S1;
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1mrk"].ToString() + Environment.NewLine + S2 + S1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (h1KT == true)
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1mrk"].ToString() + "+" + Environment.NewLine + dt2.Rows[k]["h1_grace"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1mrk"].ToString() + Environment.NewLine + dt2.Rows[k]["h1_grace"].ToString();
                                        }
                                    }
                                }
                                else
                                {

                                    if (h1KT == true)
                                    {
                                        if (dt2.Rows[k]["h1"].ToString().Contains("+"))
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                        }
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString();
                                    }

                                    if (dt2.Rows[k]["h1"].ToString().Contains("+"))
                                    {
                                        h1 = dt2.Rows[k]["h1mrk"].ToString().Substring(0, Convert.ToString(dt2.Rows[k]["h1"]).Length - 1);
                                    }
                                    else
                                    {
                                        h1 = dt2.Rows[k]["h1mrk"].ToString();
                                    }
                                }


                                arr1 = cls1.get_GradeForDeg(Convert.ToInt32(h1), Convert.ToInt32(dt2.Rows[k]["h1_out"]), Convert.ToInt32(dt2.Rows[k]["h1_pass"]));

                                //if ((Convert.ToInt32(h1) >= Convert.ToInt32(dt2.Rows[k]["h1_pass"])) && arr1[0] == "F")//p-----40% in theory  and 50% in IA  (obt_mrks*100/out=40%  but get_GradeForDeg function contain 45% criteria)
                                //{
                                //    arr1[0] = "P";
                                //    arr1[1] = "4";
                                //    arr1[2] = "Pass";
                                //}

                                if (arr1[0] == "F")
                                {
                                    if (Convert.ToString(dt2.Rows[k]["h1_type"]).Contains("ESE"))
                                    {
                                        Th_Kt++;
                                    }
                                    else
                                    {
                                        Oth_Kt++;
                                    }
                                }

                                //-----------For Grades-----//
                                dt2.Rows[k]["Grade"] = arr1[0];
                                if (atFlag == true)
                                {
                                    Total = Total + Convert.ToInt16(dt2.Rows[k]["h1"]);
                                    atTot = atTot + Convert.ToInt16(atMrk);
                                    atMrk = "0";
                                }
                                else if (starFlag == true)
                                {
                                    Total = Total + Convert.ToInt16(dt2.Rows[k]["h1"]);
                                }
                                else
                                {
                                    Total = Total + Convert.ToInt16(h1);
                                }
                            }

                            if (arr1[0] == "F" && dt2.Rows[k]["h1"].ToString().Contains("Ab"))
                            {
                                FailCnt++;
                                h1Fail = true;
                                dt2.Rows[k]["EarnCredit"] = "0";
                                ctotFlag = true;
                                if (h1KT == true && !dt2.Rows[k]["h1"].ToString().Contains("Ab"))
                                {
                                    if (dt2.Rows[k]["h1"].ToString().Contains("+"))
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString();
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                    }
                                    //dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                }
                                else
                                {
                                    dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString();
                                }

                            }
                            else if (arr1[0] == "F" && !dt2.Rows[k]["h1"].ToString().Contains("Ab") && exmFlag == true)
                            {
                                FailCnt++;
                                h1Fail = true;
                                dt2.Rows[k]["EarnCredit"] = "0";
                                ctotFlag = true;
                                if (h1KT == true)
                                {
                                    if (dt2.Rows[k]["h1"].ToString().Contains("+"))
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString();
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                    }
                                    //dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                }
                                else
                                {
                                    dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "F";
                                }

                            }
                            else
                            {
                                if (exmFlag == true && resFlag == true)
                                {
                                    if (h1KT == true && !Convert.ToString(dt2.Rows[k]["h1"]).Contains("Ab"))
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + h1 + "+";
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + h1 + "E";
                                    }


                                }
                                else if (exmFlag == true && resFlag == false && atFlag == false && starFlag == false)
                                {
                                    if (h1KT == true && !Convert.ToString(dt2.Rows[k]["h1"]).Contains("Ab"))
                                    {
                                        if (dt2.Rows[k]["h1"].ToString().Contains("+"))
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                        }
                                        //dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "+";
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h1mrk"] = zero + dt2.Rows[k]["h1"].ToString() + "E";
                                    }
                                }
                                dt2.Rows[k]["EarnCredit"] = dt2.Rows[k]["credit"].ToString();
                                h1Fail = false;

                            }

                            h1F = true;

                            //--------------For GP*C---------//
                            if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                            {
                                crdPt = cls1.getPtsFrmGrade(arr1[0]);
                            }
                            else
                            {
                                crdPt = cls1.getPtsFrmGrade(arr1[0]);
                            }
                            if (h1Fail == true)
                            {
                                dt2.Rows[k]["GXC"] = "F";
                            }
                            else
                            {
                                //===========================Subject Grade improvement=========
                                //string[] arrCopy = arr1;
                                //if (exmFlag == false && GotGrace == false && string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_type"]).Trim()) && subGrade < 2)
                                //{
                                //    if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                //    {
                                //    }
                                //    else
                                //    {
                                //        arr1 = cls.imp_subjGrade(h1, dt2.Rows[k]["h1_out"].ToString(), arr1);
                                //    }
                                //    if (arr1[0] != arrCopy[0])
                                //    {
                                //        if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                //        {
                                //            crdPt = Convert.ToInt32(arr1[0]);
                                //        }
                                //        else
                                //        {
                                //            crdPt = cls.getPtsFrmGrade(arr1[0]);
                                //        }
                                //        xlSheet.Cells[xlrow, xlColM] = h1 + "@" + (Convert.ToInt32(arr1[2]) - Convert.ToInt32(h1));
                                //        xlSheet.Cells[xlrow + 1, xlColM] = arr1[0];
                                //        subGrade++;
                                //        h1Imp = true;
                                //    }
                                //}

                                dt2.Rows[k]["GXC"] = crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                            }

                            //------------------------------TW PASS--------------------------------------------------------------------------------
                            xlColM++;
                        }
                        else if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1_type"]).Trim()) && string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1"]).Trim()))
                        {
                            xlColM++;
                            h1F = true;
                            h1Blank = true;
                            dt2.Rows[k]["h1"] = "0";
                            h1Fail = true;
                            FailCnt++;
                        }

                        bool flag50 = false;
                        //--------------------------------------------------------------H2---------------------------------------------------------------------------------------------------------------

                        if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_type"]).Trim()) && !string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2"]).Trim()))
                        {
                            string[] arr1 = new string[3];
                            bool resFlag = false, atFlag = false, starFlag = false;
                            string zero = "";

                            if (dt2.Rows[k]["h2"].ToString().Contains("Ab"))
                            {
                                arr1[0] = "F";
                                dt2.Rows[k]["Grade"] = "F";
                                FailCnt++;
                                h2KT = true;
                                abFlag = true;
                            }
                            else
                            {
                                if (Convert.ToString(dt2.Rows[k]["h2"]).Trim().Length == 1)
                                {
                                    zero = "0";
                                }
                                if (Convert.ToString(dt2.Rows[k]["h2"]).Contains("+"))
                                {
                                    if (Convert.ToString(dt2.Rows[k]["h2"]).Trim().Length == 2)
                                    {
                                        zero = "0";
                                    }
                                    if (!examname.Contains("Reval"))
                                    { h2KT = true; }
                                    dt2.Rows[k]["h2mrk"] = Convert.ToString(dt2.Rows[k]["h2"]).Substring(0, Convert.ToString(dt2.Rows[k]["h2"]).Length - 1);
                                }

                                if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_grace"])))
                                {
                                    h2 = cls1.Add_GraceMrks(Convert.ToString(dt2.Rows[k]["h2_grace"]), dt2.Rows[k]["h2"].ToString());
                                    if (Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("^"))
                                    {
                                        if (h2KT == true)
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + h2 + "+";
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + h2;
                                        }
                                        resFlag = true;
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("*"))
                                    {
                                        if (h2KT == true)
                                        {

                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+" + Environment.NewLine + "*";

                                        }
                                        else
                                        {
                                            if (exmFlag == true)
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "E" + Environment.NewLine + "*";
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + Environment.NewLine + "*";
                                            }
                                        }
                                        starFlag = true;
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("@"))
                                    {
                                        string S1 = "", S2 = "";
                                        atFlag = true;
                                        S2 = dt2.Rows[k]["h2_grace"].ToString().Substring(dt2.Rows[k]["h2_grace"].ToString().IndexOf('@'));
                                        S1 = dt2.Rows[k]["h2_grace"].ToString().Substring(0, dt2.Rows[k]["h2_grace"].ToString().IndexOf('@'));
                                        atMrk = S1;
                                        if (h2KT == true)
                                        {
                                            dt2.Rows[k]["h2"] = zero + dt2.Rows[k]["h2"].ToString() + "+" + Environment.NewLine + S2 + S1;
                                        }
                                        else
                                        {
                                            if (exmFlag == true)
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "E" + Environment.NewLine + S2 + S1;
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + Environment.NewLine + S2 + S1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (h2KT == true)
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+" + Environment.NewLine + dt2.Rows[k]["h2_grace"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + Environment.NewLine + dt2.Rows[k]["h2_grace"].ToString();
                                        }
                                    }
                                }
                                else
                                {

                                    if (h2KT)
                                    {
                                        if (dt2.Rows[k]["h2"].ToString().Contains("+"))
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                        }
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                    }

                                    if (dt2.Rows[k]["h2"].ToString().Contains("+"))
                                    {
                                        h2 = dt2.Rows[k]["h2mrk"].ToString().Substring(0, Convert.ToString(dt2.Rows[k]["h2"]).Length - 1);
                                    }
                                    else
                                    {
                                        h2 = dt2.Rows[k]["h2mrk"].ToString();
                                    }
                                }

                                arr1 = cls1.get_GradeForDeg(Convert.ToInt32(h2), Convert.ToInt32(dt2.Rows[k]["h2_out"]), Convert.ToInt32(dt2.Rows[k]["h2_pass"]));


                                //if ((Convert.ToInt32(h2) < Convert.ToInt32(dt2.Rows[k]["h2_pass"])) && arr1[0] == "P")//50% passing in IA ---(h2 < h2_pass it will take 45 % passing)
                                //{
                                //    arr1[0] = "F";
                                //    arr1[1] = "0";
                                //    arr1[2] = "Fail";
                                //}

                                if (arr1[0] == "F")
                                {
                                    if (h1Fail == false && (Convert.ToInt32(h1) > 0 || Convert.ToInt32(h2) > 0) && !string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1"])))
                                    {
                                        FailCnt++;
                                        if (h2KT == true)
                                        {
                                            if (dt2.Rows[k]["h2"].ToString().Contains("+"))
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                            }
                                            //dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                        }
                                        else
                                        {
                                            if (exmFlag == true)
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "F";
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                            }
                                        }

                                    }
                                    else
                                    {
                                        FailCnt++;
                                        if (h2KT == true)
                                        {
                                            //dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                            if (dt2.Rows[k]["h2"].ToString().Contains("+"))
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                            }
                                            else
                                            {
                                                dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                            }
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "F";
                                        }

                                    }
                                }
                                else if (arr1[0] != "F" && exmFlag == false && atFlag == false && starFlag == false && resFlag == false)
                                {

                                    if (h2KT == true)
                                    {
                                        if (dt2.Rows[k]["h2"].ToString().Contains("+"))
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                        }
                                        // dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                    }

                                }
                                else if (arr1[0] != "F" && exmFlag == true && resFlag == true)
                                {
                                    if (h2KT == true)
                                    {
                                        dt2.Rows[k]["h2mrk"] = zero + h2 + "+";
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h2mrk"] = zero + h2 + "E";
                                    }
                                }
                                else if (arr1[0] != "F" && exmFlag == true && resFlag == false && atFlag == false && starFlag == false)
                                {
                                    if (h2KT == true)
                                    {
                                        if (dt2.Rows[k]["h2"].ToString().Contains("+"))
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                        }
                                        else
                                        {
                                            dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                        }
                                        //dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "E";
                                    }
                                }


                                if (arr1[0] == "F")
                                {
                                    Oth_Kt++;
                                    h2Fail = true;
                                }

                                dt2.Rows[k]["Grade"] = arr1[0];
                                if (atFlag == true)
                                {
                                    Total = Total + Convert.ToInt16(dt2.Rows[k]["h2"]);
                                    atTot = atTot + Convert.ToInt16(atMrk);
                                    atMrk = "0";
                                }
                                else if (starFlag == true)
                                {
                                    Total = Total + Convert.ToInt16(dt2.Rows[k]["h2"]);
                                }
                                else
                                {
                                    Total = Total + Convert.ToInt16(h2);
                                }
                            }

                            h2F = true;

                            if (arr1[0] == "F" && dt2.Rows[k]["h2"].ToString().Contains("Ab"))
                            {
                                dt2.Rows[k]["EarnCredit"] = "- -";
                                h2Fail = true;
                                if (h2KT == true && !dt2.Rows[k]["h2"].ToString().Contains("Ab"))
                                {
                                    dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                }
                                else
                                {
                                    dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString();
                                }

                            }
                            else if (arr1[0] == "F" && !dt2.Rows[k]["h2"].ToString().Contains("Ab") && exmFlag == true)
                            {
                                dt2.Rows[k]["EarnCredit"] = "- -";
                                h2Fail = true;
                                if (h2KT == true)
                                {
                                    dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "+";
                                }
                                else
                                {
                                    dt2.Rows[k]["h2mrk"] = zero + dt2.Rows[k]["h2"].ToString() + "F";

                                }
                            }
                            else
                            {
                                dt2.Rows[k]["EarnCredit"] = dt2.Rows[k]["credit"].ToString();

                            }


                            if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                            {
                                crdPt = cls1.getPtsFrmGrade(arr1[0]);
                            }
                            else
                            {
                                crdPt = cls1.getPtsFrmGrade(arr1[0]);
                            }
                            if (h2Fail == true)
                            {
                                dt2.Rows[k]["GXC"] = "F";
                            }
                            else
                            {
                                //===========================Subject Grade improvement=========
                                //string[] arrCopy = arr1;
                                //if (exmFlag == false && GotGrace == false && h1F == false && subGrade < 2)
                                //{
                                //    if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                //    {
                                //        arr1 = cls.imp_subjGrade(h2, dt2.Rows[k]["h2_out"].ToString(), arr1);
                                //    }
                                //    else
                                //    {
                                //        arr1 = cls.imp_subjGrade(h2, dt2.Rows[k]["h2_out"].ToString(), arr1);
                                //    }

                                //    if (arrCopy[0] != arr1[0])
                                //    {

                                //        if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                //        {
                                //            crdPt = Convert.ToInt32(arr1[0]);
                                //        }
                                //        else
                                //        {
                                //            crdPt = cls.getPtsFrmGrade(arr1[0]);
                                //        }

                                //        xlSheet.Cells[xlrow, xlColM] = h2 + "@" + (Convert.ToInt32(arr1[2]) - Convert.ToInt32(h2));
                                //        xlSheet.Cells[xlrow + 1, xlColM] = arr1[0];
                                //        subGrade++;
                                //        h2Imp = true;
                                //    }
                                //}

                                dt2.Rows[k]["GXC"] = crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                            }
                            //-----------------------------------------------------TW PASS---------------------------------------------------

                            xlColM++;
                        }
                        else if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_type"]).Trim()) && string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2"]).Trim()))
                        {
                            xlColM++;
                            h2F = true;
                            h2Blank = true;
                            dt2.Rows[k]["h2"] = "0";
                            h2Fail = true;
                            FailCnt++;
                        }



                        //----------------------------------------------------------------------------------------H1 & H2-----------------------------------------------------------------------------------------------

                        if (h1F == true && h2F == true)
                        {
                            string zero = "";
                            string[] arr1 = new string[3];

                            if (abFlag == true)
                            {
                                if (Convert.ToString(dt2.Rows[k]["h1"]) == "Ab" && Convert.ToString(dt2.Rows[k]["h2"]) != "Ab")
                                {
                                    dt2.Rows[k]["2head"] = Convert.ToString(dt2.Rows[k]["h2"]);
                                    if (Convert.ToString(dt2.Rows[k]["h2"]).Trim().Length == 1)
                                    {
                                        zero = "0";
                                    }
                                }
                                else if (Convert.ToString(dt2.Rows[k]["h1"]) != "Ab" && Convert.ToString(dt2.Rows[k]["h2"]) == "Ab")
                                {
                                    dt2.Rows[k]["2head"] = Convert.ToString(dt2.Rows[k]["h1"]);
                                    if (Convert.ToString(dt2.Rows[k]["h1"]).Trim().Length == 1)
                                    {
                                        zero = "0";
                                    }
                                }
                                else
                                {
                                    dt2.Rows[k]["2head"] = "Ab";
                                }
                                dt2.Rows[k]["Grade"] = "F";
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1_grace"])) && !string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_grace"])))
                                {
                                    string S1 = "", S2 = "", s11 = "", s12 = "", tot = "";
                                    if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("^") && Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("^"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(h1) + Convert.ToInt32(h2));
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("^") && Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("@"))
                                    {

                                        s11 = dt2.Rows[k]["h2_grace"].ToString().Substring(0, dt2.Rows[k]["h2_grace"].ToString().IndexOf('@'));
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(h1) + Convert.ToInt32(dt2.Rows[k]["h2"])) + Environment.NewLine + "@" + s11;
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("@") && !Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("^"))
                                    {
                                        S1 = dt2.Rows[k]["h1_grace"].ToString().Substring(0, dt2.Rows[k]["h1_grace"].ToString().IndexOf('@'));
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"]) + Convert.ToInt32(h2)) + Environment.NewLine + "@" + S1;
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("^") && Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("*"))
                                    {

                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(h1) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString())) + Environment.NewLine + "*";
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("*") && !Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("^"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(h2)) + Environment.NewLine + "*";
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString())) + Environment.NewLine + dt2.Rows[k]["h1_grace"].ToString() + "," + dt2.Rows[k]["h2_grace"].ToString();
                                    }

                                    if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("@") && Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("@"))
                                    {

                                        S1 = dt2.Rows[k]["h1_grace"].ToString().Substring(0, dt2.Rows[k]["h1_grace"].ToString().IndexOf('@'));
                                        s11 = dt2.Rows[k]["h2_grace"].ToString().Substring(0, dt2.Rows[k]["h2_grace"].ToString().IndexOf('@'));

                                        tot = Convert.ToString(Convert.ToInt32(S1) + Convert.ToInt32(s11));
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"]) + Convert.ToInt32(dt2.Rows[k]["h2"])) + Environment.NewLine + "@" + tot;
                                    }

                                }
                                else if (!string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1_grace"])) && string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_grace"])))
                                {
                                    if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("^"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(h1) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString()));
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("*"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString())) + Environment.NewLine + "*";
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h1_grace"]).Contains("@"))
                                    {
                                        string S1 = "", S2 = "", tot = "";
                                        S1 = dt2.Rows[k]["h1_grace"].ToString().Substring(0, dt2.Rows[k]["h1_grace"].ToString().IndexOf('@'));
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"]) + Convert.ToInt32(dt2.Rows[k]["h2"])) + Environment.NewLine + "@" + S1;
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString())) + Environment.NewLine + dt2.Rows[k]["h1_grace"].ToString();
                                    }
                                }
                                else if (string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h1_grace"])) && !string.IsNullOrEmpty(Convert.ToString(dt2.Rows[k]["h2_grace"])))
                                {
                                    if (Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("^"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(h2));
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("*"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString())) + Environment.NewLine + "*";
                                    }
                                    else if (Convert.ToString(dt2.Rows[k]["h2_grace"]).Contains("@"))
                                    {
                                        string S1 = "", S2 = "", tot = "";
                                        S1 = dt2.Rows[k]["h2_grace"].ToString().Substring(0, dt2.Rows[k]["h2_grace"].ToString().IndexOf('@'));
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"]) + Convert.ToInt32(dt2.Rows[k]["h2"])) + Environment.NewLine + "@" + S1;
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString())) + Environment.NewLine + dt2.Rows[k]["h2_grace"].ToString();
                                    }
                                }
                                else
                                {
                                    if (dt2.Rows[k]["h2"].ToString().Contains("+") && !dt2.Rows[k]["h1"].ToString().Contains("+"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString().Substring(0, Convert.ToString(dt2.Rows[k]["h2"]).Length - 1)));
                                    }
                                    else if (!dt2.Rows[k]["h2"].ToString().Contains("+") && dt2.Rows[k]["h1"].ToString().Contains("+"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString().Substring(0, dt2.Rows[k]["h1"].ToString().Length - 1)) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString()));
                                    }
                                    else if (dt2.Rows[k]["h2"].ToString().Contains("+") && dt2.Rows[k]["h1"].ToString().Contains("+"))
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString().Substring(0, dt2.Rows[k]["h1"].ToString().Length - 1)) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString().Substring(0, Convert.ToString(dt2.Rows[k]["h2"]).Length - 1)));
                                    }
                                    else
                                    {
                                        dt2.Rows[k]["2head"] = zero + (Convert.ToInt32(dt2.Rows[k]["h1"].ToString()) + Convert.ToInt32(dt2.Rows[k]["h2"].ToString()));
                                    }
                                }

                                if (h1Fail == false && h2Fail == false)
                                {
                                    arr1 = cls1.get_GradeForDeg((Convert.ToInt32(h2) + Convert.ToInt32(h1)), (Convert.ToInt32(dt2.Rows[k]["h2_out"]) + Convert.ToInt32(dt2.Rows[k]["h1_out"])), (Convert.ToInt32(dt2.Rows[k]["h2_pass"]) + Convert.ToInt32(dt2.Rows[k]["h1_pass"])));
                                }
                                else
                                {
                                    arr1[0] = "F";
                                }

                                dt2.Rows[k]["Grade"] = arr1[0];

                                if (arr1[0] == "F")
                                {
                                    dt2.Rows[k]["EarnCredit"] = "- -";
                                }
                                else if (arr1[0] != "F" && h1Fail == false && h2Fail == false)
                                {
                                    dt2.Rows[k]["EarnCredit"] = dt2.Rows[k]["credit"].ToString();
                                }


                                if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                {
                                    crdPt = cls1.getPtsFrmGrade(arr1[0]);
                                }
                                else
                                {
                                    crdPt = cls1.getPtsFrmGrade(arr1[0]);
                                }

                                if (h1Fail == false && h2Fail == false)
                                {
                                    if (exmFlag == false && GotGrace == false && subGrade < 2)
                                    {
                                        //===========================Subject Grade improvement=========
                                        //string[] arrCopy = arr1;
                                        //if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                        //{
                                        //    arr1 = cls.imp_subjGrade(Convert.ToString(Convert.ToInt32(h2) + Convert.ToInt32(h1)), Convert.ToString(Convert.ToInt32(dt2.Rows[k]["h2_out"]) + Convert.ToInt32(dt2.Rows[k]["h1_out"])), arr1);

                                        //}
                                        //else
                                        //{
                                        //    arr1 = cls.imp_subjGrade(Convert.ToString(Convert.ToInt32(h2) + Convert.ToInt32(h1)), Convert.ToString(Convert.ToInt32(dt2.Rows[k]["h2_out"]) + Convert.ToInt32(dt2.Rows[k]["h1_out"])), arr1);
                                        //}

                                        //if (arr1[0] != arrCopy[0])
                                        //{
                                        //    if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                                        //    {
                                        //        crdPt = Convert.ToInt32(arr1[0]);
                                        //    }
                                        //    else
                                        //    {
                                        //        crdPt = cls.getPtsFrmGrade(arr1[0]);
                                        //    }

                                        //    xlSheet.Cells[xlrow, xlColM] = Convert.ToString(Convert.ToInt32(h2) + Convert.ToInt32(h1)) + "@" + (Convert.ToInt32(arr1[2]) - (Convert.ToInt32(h2) + Convert.ToInt32(h1)));
                                        //    xlSheet.Cells[xlrow + 1, xlColM] = arr1[0];
                                        //    if (h1Imp == true && h2Imp == true)
                                        //    {
                                        //        subGrade = subGrade - 2;
                                        //    }
                                        //    else if (h1Imp == true && h2Imp == false)
                                        //    {
                                        //        subGrade = subGrade - 1;
                                        //    }
                                        //    else if (h1Imp == false && h2Imp == true)
                                        //    {
                                        //        subGrade = subGrade - 1;
                                        //    }
                                        //    subGrade++;
                                        //}
                                    }

                                    dt2.Rows[k]["GXC"] = Convert.ToString(crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString()));
                                }
                                else
                                {
                                    dt2.Rows[k]["GXC"] = "F";
                                }
                            }
                            xlColM++;
                        }



                        //-------------------------------------------------for summation of c n cgp===========================================


                        if (h1F == true && h2F == true)
                        {
                            if (h1Fail == false && h2Fail == false)
                            {
                                TotC = TotC + Convert.ToDecimal(dt2.Rows[k]["credit"].ToString());
                                Totgp = Totgp + crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                            }
                        }
                        else if (h1F == true && h2F == false)
                        {
                            if (h1Fail == false)
                            {
                                TotC = TotC + Convert.ToDecimal(dt2.Rows[k]["credit"].ToString());
                                Totgp = Totgp + crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                            }
                        }
                        else if (h1F == false && h2F == true)
                        {
                            if (h2Fail == false)
                            {
                                TotC = TotC + Convert.ToDecimal(dt2.Rows[k]["credit"].ToString());
                                Totgp = Totgp + crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                            }
                        }

                        cTot = cTot + Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                        gpTot = gpTot + (crdPt * Convert.ToDouble(dt2.Rows[k]["credit"].ToString()));

                        creTotal = creTotal + Convert.ToDouble(dt2.Rows[k]["credit"].ToString());
                        //==================cgpi========================

                    }
                    cxgTotal = Totgp;
                    bool gotNss = false;
                    if (FailCnt == 0 && GotGrace == false && isNss)
                    {
                        cxgTotal = cxgTotal + 1;
                        // Totgp = Totgp + 1;
                        Totgp = Totgp;
                        gotNss = true;
                    }

                    bool prevFail = false;
                    string arrRLE = "";
                    string cgpi2 = "";


                    //=======================================for sgpi=========================================
                    string SGPI1 = Convert.ToString(Math.Round((cxgTotal / creTotal), 2)); //--------for other


                    DataTable dtfail = cls1.fillDataTable("select remark from dbo.cre_marks_tbl where stud_id='" + stud_id + "' and sem_id='" + sem + "' and exam_code ='" + exam + "' and del_flag=0 and remark like 'UN%'");
                    if (dtfail.Rows.Count > 0)
                    {
                        FailCnt++;
                    }

                    if (atTot != 0)
                    {
                        dt2.Rows[j]["total"] = Total + Environment.NewLine + "@" + atTot;  //===========Total   
                    }
                    else
                    {
                        dt2.Rows[j]["total"] = Convert.ToString(Total);  //===========Total   
                    }

                    dt2.Rows[j]["totcredit"] = Convert.ToString(TotC);  //===========Total  

                    if (gotNss)
                    {
                        dt2.Rows[j]["overallgrade"] = Convert.ToString(Totgp) + "#1";  //===========Total                          
                    }
                    else
                    {
                        dt2.Rows[j]["overallgrade"] = Convert.ToString(Totgp);
                    }

                    int flag = 0;

                    if (FailCnt == 0)
                    {
                        flag = 1;
                    }

                    string grade;
                    if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                    {
                        grade = cls1.Total_Grade(SGPI1, flag);
                    }
                    else
                    {
                        grade = cls1.Total_Grade(SGPI1, flag);
                    }


                    if (FailCnt > 0)// && TWFlag == false)
                    {
                        dt2.Rows[j]["Sgpi"] = "NA"; //Convert.ToString(SGPI1);  //===========SGPI
                        dt2.Rows[j]["Result"] = "F";   //==========Result
                        dt2.Rows[j]["overallgrade"] = "NA";  //==========GRADE

                        Result = "UNSUCCESSFUL";
                    }

                    else
                    {
                        if (dtgrade.Rows[0]["Descritption"].ToString() == "10")
                        {
                        }
                        else
                        {
                            if ((grade == "B" || grade == "A") && GotGrace == false)
                            {
                                string newSGPI = Convert.ToString(Math.Round(((cxgTotal + 1.0) / creTotal), 2));
                                string newGrade = cls1.Total_Grade(newSGPI, flag);
                                if (newGrade != grade)
                                {
                                    SGPI1 = newSGPI;
                                    grade = newGrade;
                                    //Totgp = cxgTotal + 1;
                                    Totgp = cxgTotal;
                                    if (gotNss)
                                    {
                                        dt2.Rows[j]["overallgrade"] = Convert.ToString(Totgp) + "#1@1";  //===========Total      
                                    }
                                    else
                                    {
                                        dt2.Rows[j]["overallgrade"] = Convert.ToString(Totgp) + "@1";  //===========Total      
                                    }
                                }
                            }
                        }
                        Result = "SUCCESSFUL";
                        dt2.Rows[j]["Sgpi"] = Convert.ToString(SGPI1);  //===========SGPI
                        dt2.Rows[j]["Result"] = "P";  //==========Result
                        dt2.Rows[j]["overallgrade"] = grade;  //==========GRADE

                        flag = 1;
                    }

                    //==========###################################################update qry for Kt count and summation of CxG on cre_stud_academic table
                    Kt_qry = "";


                    //======================fot stud_id==========
                    string chk_qry = "select distinct exam_code from dbo.cre_marks_tbl a where  stud_id='" + dt2.Rows[j]["stud_id"] + "'  and a.sem_id='" + sem + "' and curr_date=(select distinct max(curr_date) from dbo.cre_marks_tbl a where stud_id='" + dt2.Rows[j]["stud_id"] + "'  and a.sem_id='" + sem + "' and del_flag=0)";
                    chk_qry = chk_qry + " ; select * from dbo.cre_stud_academic where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0";
                    chk_qry = chk_qry + " ; select * from dbo.cre_webresult where stud_id='" + dt2.Rows[j]["stud_id"] + "' and sem_id='" + sem + "' and exam_code='" + examname + "'  and del_flag=0 ";
                    DataSet ds_check = cls1.fillDataset(chk_qry);

                    string exam_cre = "select * from cre_stud_academic_by_examwise where stud_id='" + stud_id + "' and sem_id='" + sem + "' and exam_id='" + exam + "' and del_flag=0";
                    DataTable dt_cre_exm = cls1.fillDataTable(exam_cre);
                    string ins_upt_exam_cre = "";
                    if (dt_cre_exm.Rows.Count == 0)
                    {
                        ins_upt_exam_cre = "insert into cre_stud_academic_by_examwise values('" + stud_id + "','" + exam + "','" + sem + "','" + Totgp + "','" + TotC + "','" + creTotal + "','" + Th_Kt + "','" + Oth_Kt + "',getdate(),null,0)";
                    }
                    else
                    {
                        ins_upt_exam_cre = "update dbo.cre_stud_academic set CG='" + Totgp + "',CE='" + TotC + "',credit='" + creTotal + "',theory=" + Th_Kt + ",other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + stud_id + "' and sem_id='" + sem + "' and exam_id='" + examname + "' and del_flag=0";
                    }
                    cls1.DMLqueries(ins_upt_exam_cre);
                    string examCode = "";
                    if (ds_check.Tables[0].Rows.Count > 0)
                    { examCode = ds_check.Tables[0].Rows[0]["exam_code"].ToString(); }
                    if (ds_check.Tables[1].Rows.Count > 0 && (examCode != "") && (examCode == examname.ToString()))
                    {
                        if (sem == "Sem-1")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem1_cg='" + Totgp + "',sem1_credit_earn='" + TotC + "',sem1_credit='" + creTotal + "',sem1_theory=" + Th_Kt + ",sem1_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-2")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem2_cg='" + Totgp + "',sem2_credit_earn='" + TotC + "',sem2_credit='" + creTotal + "',sem2_theory=" + Th_Kt + ",sem2_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-3")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem3_cg='" + Totgp + "',sem3_credit_earn='" + TotC + "',sem3_credit='" + creTotal + "',sem3_theory=" + Th_Kt + ",sem3_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-4")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem4_cg='" + Totgp + "',sem4_credit_earn='" + TotC + "',sem4_credit='" + creTotal + "',sem4_theory=" + Th_Kt + ",sem4_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-5")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem5_cg='" + Totgp + "',sem5_credit_earn='" + TotC + "',sem5_credit='" + creTotal + "',sem5_theory=" + Th_Kt + ",sem5_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-6")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem6_cg='" + Totgp + "',sem6_credit_earn='" + TotC + "',sem6_credit='" + creTotal + "',sem6_theory=" + Th_Kt + ",sem6_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-7")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem7_cg='" + Totgp + "',sem7_credit_earn='" + TotC + "',sem7_credit='" + creTotal + "',sem7_theory=" + Th_Kt + ",sem7_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-8")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem8_cg='" + Totgp + "',sem8_credit_earn='" + TotC + "',sem8_credit='" + creTotal + "',sem8_theory=" + Th_Kt + ",sem8_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-9")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem9_cg='" + Totgp + "',sem9_credit='" + creTotal + "',sem9_credit_earn='" + TotC + "',sem9_theory=" + Th_Kt + ",sem9_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                        else if (sem == "Sem-10")
                        { Kt_qry = "  update dbo.cre_stud_academic set sem10_cg='" + Totgp + "',sem10_credit_earn='" + TotC + "',sem10_credit='" + creTotal + "',sem10_theory=" + Th_Kt + ",sem10_other=" + Oth_Kt + ",mod_date=getDate() where stud_id='" + dt2.Rows[j]["stud_id"] + "' and del_flag=0"; }
                    }
                    if (Kt_qry != "")
                    { cls1.DMLqueries(Kt_qry); }

                    string webResultQry = "";
                    if (ds_check.Tables[2].Rows.Count == 0)
                    {
                        webResultQry = " insert into dbo.cre_webresult values('" + dt2.Rows[j]["stud_id"] + "','" + sem + "','" + exam + "','" + Result + "',getDate(),0,'','" + group + "',null,null,null,0)";
                    }
                    else if (ds_check.Tables[2].Rows.Count > 0)
                    {
                        webResultQry = " update dbo.cre_webresult set remark='" + Result + "' ,  col2='" + group + "' where stud_id ='" + dt2.Rows[j]["stud_id"] + "' and sem_id='" + sem + "' and exam_code='" + exam + "'  and del_flag=0";
                    }

                    if (webResultQry != "")
                    { cls1.DMLqueries(webResultQry); }

                    //==========####################################################

                    if (semm != 0)
                    {
                        for (int r = 1; r <= semm; r++)
                        {
                            DataTable CREarn = cls1.fillDataTable("select sem" + r + "_credit_earn from cre_stud_academic where stud_id='" + dt2.Rows[j]["stud_id"] + "' ");
                            if (CREarn.Rows.Count != 0)
                            {
                                string a = CREarn.Rows[0]["sem" + r + "_credit_earn"].ToString();
                                dt2.Rows[j]["Semester" + r] = a;
                            }
                        }
                    }
                }

                foreach (DataRow drrow in dt2.Rows)
                {
                    Gazette get = new Gazette();
                    get.subcode = drrow["subject_code"].ToString();
                    get.subname = drrow["subject_name"].ToString();
                    get.h1type = drrow["h1_type"].ToString();
                    get.h2type = drrow["h2_type"].ToString();
                    get.h1out = drrow["h1_out"].ToString();
                    get.h2out = drrow["h2_out"].ToString();
                    get.h1pass = drrow["h1_pass"].ToString();
                    get.h2pass = drrow["h2_pass"].ToString();
                    get.subcnt = subjcnt;
                    get.headcnt = Convert.ToInt32(drrow["headcnt"].ToString());
                    get.seatno = drrow["Seat_no"].ToString();
                    get.studid = drrow["stud_id"].ToString();
                    get.studname = drrow["Name"].ToString();
                    get.h1_obt = drrow["h1mrk"].ToString();
                    get.h2_obt = drrow["h2mrk"].ToString();
                    get.h1m = drrow["h1"].ToString();
                    get.h2m = drrow["h2"].ToString();
                    get.grade = drrow["Grade"].ToString();
                    get.credit = drrow["EarnCredit"].ToString();
                    get.GPC = drrow["GXC"].ToString();
                    get.sgpi = drrow["sgpi"].ToString();
                    get.result = drrow["Result"].ToString();
                    get.totgrade = drrow["overallgrade"].ToString();
                    get.semcount = semm;
                    if (semm == 1)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                    }
                    else if (semm == 2)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                    }
                    else if (semm == 3)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                    }
                    else if (semm == 4)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                        get.sem4 = drrow["Semester4"].ToString();
                    }
                    else if (semm == 5)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                        get.sem4 = drrow["Semester4"].ToString();
                        get.sem5 = drrow["Semester5"].ToString();
                    }
                    else if (semm == 6)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                        get.sem4 = drrow["Semester4"].ToString();
                        get.sem5 = drrow["Semester5"].ToString();
                        get.sem6 = drrow["Semester6"].ToString();
                    }
                    else if (semm == 7)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                        get.sem4 = drrow["Semester4"].ToString();
                        get.sem5 = drrow["Semester5"].ToString();
                        get.sem6 = drrow["Semester6"].ToString();
                        get.sem7 = drrow["Semester7"].ToString();
                    }
                    else if (semm == 8)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                        get.sem4 = drrow["Semester4"].ToString();
                        get.sem5 = drrow["Semester5"].ToString();
                        get.sem6 = drrow["Semester6"].ToString();
                        get.sem7 = drrow["Semester7"].ToString();
                        get.sem8 = drrow["Semester8"].ToString();
                    }
                    else if (semm == 9)
                    {
                        get.sem1 = drrow["Semester1"].ToString();
                        get.sem2 = drrow["Semester2"].ToString();
                        get.sem3 = drrow["Semester3"].ToString();
                        get.sem4 = drrow["Semester4"].ToString();
                        get.sem5 = drrow["Semester5"].ToString();
                        get.sem6 = drrow["Semester6"].ToString();
                        get.sem7 = drrow["Semester7"].ToString();
                        get.sem8 = drrow["Semester8"].ToString();
                        get.sem9 = drrow["Semester9"].ToString();
                    }
                    //get.totalcdt = drrow[""].ToString();
                    // get.subcnt = subjcnt;
                    // get.headcnt = Convert.ToInt32(drrow["headcnt"].ToString());
                    get.msg = "";
                    details.Add(get);
                }
            }
            else
            {
                Gazette get = new Gazette();
                get.msg = "Credits Not Defined";
                details.Add(get);
            }
        }
        else
        {
            Gazette get = new Gazette();
            get.msg = "No student Found";
            details.Add(get);
        }

        return details.ToArray();
    }

    public List<ListItem> fillgroup(string branch, string semid, string year)
    {
        string acdyear = "";
        ////if (semid == "Sem-1" || semid == "Sem-2")
        ////{
        ////    acdyear = "FIRST";
        ////}
        ////else if (semid == "Sem-3" || semid == "Sem-4")
        ////{
        ////    acdyear = "SECOND";
        ////}
        ////else if (semid == "Sem-5" || semid == "Sem-6")
        ////{
        ////    acdyear = "THIRD";
        ////}
        ////else if (semid == "Sem-7" || semid == "Sem-8")
        ////{
        ////    acdyear = "FORTH";
        ////}
        ////else if (semid == "Sem-9" || semid == "Sem-10")
        ////{
        ////    acdyear = "FIFTH";
        ////}
        ////else
        ////{
        ////    acdyear = "FIRST";
        ////}
        string subjGrp_id = "";
        System.Data.DataTable dtSubCrs = new System.Data.DataTable();
        string qrySubCrs = "select subcourse_name,subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and del_flag=0 ";
        dtSubCrs = cls1.fillDataTable(qrySubCrs);

        for (int i = 0; i < dtSubCrs.Rows.Count; i++)
        {
            if (dtSubCrs.Rows[i]["subcourse_name"].ToString().Contains(acdyear))
            {
                subjGrp_id = dtSubCrs.Rows[i]["subcourse_id"].ToString();
                break;
            }
        }

        string qry = "";
        qry = "select Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where Subcourse_id in (select subcourse_id from dbo.m_crs_subcourse_tbl where course_id='" + branch + "' and semester like '%" + semid + "%' and del_flag=0 ) and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public freeshipReport[] fill_fsdata(string course, string subcourse, string group, string year, string type)
    {
        string str = "";
        List<freeshipReport> details = new List<freeshipReport>();
        if (type == "excel")
        {
            if (year != "" && course != "" && subcourse != "" && group != "")
            {
                str = "select a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,c.Total As Tot_fees_paid ,(a.Course_tot_fees - c.Total) as Tot_fee_balance,b.Remark,b.Authorized_By ,a.stud_Category,a.Group_title from allreport_new_V as a ,v5_new as b ,amount_tot_report as c where a.ayid =b.ayid and a.stud_id =b.Stud_id and a.stud_id=c.stud_id and b.Stud_id=c.stud_id and a.ayid=c.ayid and b.ayid=c.ayid "
                + " and (b.Remark like '%Freeship%' or b.Remark like '%Scholarship%' or b.Remark like '%Rajarshi%')  and   a.AYID='" + year + "' and a.course_id='" + course + "' and a.Subcourse_id='" + subcourse + "' and a.Group_id='" + group + "' group by a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,a.stud_Category,a.Group_title ,b.Remark,b.Authorized_By ,c.Total order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
            }
            else if (year != "" && course != "" && subcourse != "" && group == "")
            {
                str = "select a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,c.Total As Tot_fees_paid ,(a.Course_tot_fees - c.Total) as Tot_fee_balance,b.Remark,b.Authorized_By ,a.stud_Category,a.Group_title from allreport_new_V as a ,v5_new as b ,amount_tot_report as c where a.ayid =b.ayid and a.stud_id =b.Stud_id and a.stud_id=c.stud_id and b.Stud_id=c.stud_id and a.ayid=c.ayid and b.ayid=c.ayid "
                + " and (b.Remark like '%Freeship%' or b.Remark like '%Scholarship%' or b.Remark like '%Rajarshi%')  and   a.AYID='" + year + "' and a.course_id='" + course + "' and a.Subcourse_id='" + subcourse + "' group by a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,a.stud_Category,a.Group_title ,b.Remark,b.Authorized_By ,c.Total order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
            }
            else if (year != "" && course != "" && subcourse == "" && group == "")
            {
                str = "select a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,c.Total As Tot_fees_paid ,(a.Course_tot_fees - c.Total) as Tot_fee_balance,b.Remark,b.Authorized_By ,a.stud_Category,a.Group_title from allreport_new_V as a ,v5_new as b ,amount_tot_report as c where a.ayid =b.ayid and a.stud_id =b.Stud_id and a.stud_id=c.stud_id and b.Stud_id=c.stud_id and a.ayid=c.ayid and b.ayid=c.ayid "
                + " and (b.Remark like '%Freeship%' or b.Remark like '%Scholarship%' or b.Remark like '%Rajarshi%')  and   a.AYID='" + year + "' and a.course_id='" + course + "'  group by a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,a.stud_Category,a.Group_title ,b.Remark,b.Authorized_By ,c.Total order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
            }
            else if (year != "" && course == "" && subcourse == "" && group == "")
            {
                str = "select a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,c.Total As Tot_fees_paid ,(a.Course_tot_fees - c.Total) as Tot_fee_balance,b.Remark,b.Authorized_By ,a.stud_Category,a.Group_title from allreport_new_V as a ,v5_new as b ,amount_tot_report as c where a.ayid =b.ayid and a.stud_id =b.Stud_id and a.stud_id=c.stud_id and b.Stud_id=c.stud_id and a.ayid=c.ayid and b.ayid=c.ayid "
                + " and (b.Remark like '%Freeship%' or b.Remark like '%Scholarship%' or b.Remark like '%Rajarshi%')  and   a.AYID='" + year + "'  group by a.Roll_no,a.stud_id,a.Name,a.Course_tot_fees,a.stud_Category,a.Group_title ,b.Remark,b.Authorized_By ,c.Total order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
            }

            DataTable dtfill = cls1.fillDataTable(str);
            if (dtfill.Rows.Count > 0)
            {
                foreach (DataRow drrow in dtfill.Rows)
                {
                    freeshipReport fr = new freeshipReport();
                    fr.msg = "";
                    fr.id = drrow["stud_id"].ToString();
                    fr.Name = drrow["Name"].ToString();
                    fr.Remark = drrow["Remark"].ToString();
                    fr.category = drrow["stud_Category"].ToString();
                    fr.grp_title = drrow["Group_title"].ToString();
                    fr.Course_tot_fees = drrow["Course_tot_fees"].ToString();
                    fr.Tot_fees_paid = drrow["Tot_fees_paid"].ToString();
                    fr.Tot_fee_balance = drrow["Tot_fee_balance"].ToString();
                    fr.Authorized_By = drrow["Authorized_By"].ToString();
                    fr.rollno = drrow["Roll_no"].ToString();
                    details.Add(fr);
                }
            }
            else
            {
                freeshipReport fr = new freeshipReport();
                fr.msg = "No Data Found";
                details.Add(fr);
            }
        }
        else
        {
            if (type == "")
            {
                if (year != "" && course != "" && subcourse != "" && group != "")
                {
                    // str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark from allreport_new_V a where ( Remark = 'Freeship Send' or Remark = 'Freeship /Scholarship' or Remark = 'Freeship / Scholarship' or Remark like '%Rajarshi%') and a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' and group_id='" + group + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                    //str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark from allreport_new_V a where a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' and group_id='" + group + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";

                    str = "select distinct  stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark,case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end as roll from allreport_new_V a where a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' and group_id='" + group + "' and ( remark is null  or remark='Freeship / Scholarship')  order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
                else if (year != "" && course != "" && subcourse != "" && group == "")
                {
                    str = "select distinct  stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark,case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end as roll from allreport_new_V a where a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' and ( remark is null  or remark='Freeship / Scholarship')  order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                    //str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark from allreport_new_V a where  a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
                else if (year != "" && course != "" && subcourse == "" && group == "")
                {
                    str = "select distinct  stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark,case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end as roll from allreport_new_V a where a.ayid='" + year + "' and course_id='" + course + "'  and ( remark is null  or remark='Freeship / Scholarship')  order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                    //str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark from allreport_new_V a where  a.ayid='" + year + "'and course_id='" + course + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
                else if (year != "" && course == "" && subcourse == "" && group == "")
                {
                    str = "select distinct  stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark,case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end as roll from allreport_new_V a where a.ayid='" + year + "'  and ( remark is null  or remark='Freeship / Scholarship')  order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                    //str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,'' as given_remark from allreport_new_V a where   a.ayid='" + year + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
            }
            else
            {
                if (year != "" && course != "" && subcourse != "" && group != "")
                {
                    str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,case when Remark = 'Freeship Send' then 'F' when Remark = 'Scholarship Send' then 'S' when Remark like '%Rajarshi Sahu%' then 'R' else '' end as given_remark from allreport_new_V a where (Remark = 'Scholarship Send' or Remark = 'Freeship Send' or Remark like '%Rajarshi%') and a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' and group_id='" + group + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
                else if (year != "" && course != "" && subcourse != "" && group == "")
                {
                    str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,case when Remark = 'Freeship Send' then 'F' when Remark = 'Scholarship Send' then 'S' when Remark like '%Rajarshi Sahu%' then 'R' else '' end as given_remark from allreport_new_V a where (Remark = 'Scholarship Send' or Remark = 'Freeship Send' or Remark like '%Rajarshi%') and a.ayid='" + year + "' and course_id='" + course + "' and subcourse_id='" + subcourse + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
                else if (year != "" && course != "" && subcourse == "" && group == "")
                {
                    str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,case when Remark = 'Freeship Send' then 'F' when Remark = 'Scholarship Send' then 'S' when Remark like '%Rajarshi Sahu%' then 'R' else '' end as given_remark from allreport_new_V a where (Remark = 'Scholarship Send' or Remark = 'Freeship Send' or Remark like '%Rajarshi%') and a.ayid='" + year + "'and course_id='" + course + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
                else if (year != "" && course == "" && subcourse == "" && group == "")
                {
                    str = "select stud_id,Ayid,Name,Remark,stud_Category,Group_title,case when Remark = 'Freeship Send' then 'F' when Remark = 'Scholarship Send' then 'S'  when Remark like '%Rajarshi Sahu%' then 'R' else '' end as given_remark from allreport_new_V a where (Remark = 'Scholarship Send' or Remark = 'Freeship Send' or Remark like '%Rajarshi%') and a.ayid='" + year + "' order by case IsNumeric(a.Roll_no) when 1 then Replicate('0', 100 - Len(a.Roll_no)) + a.Roll_no else a.Roll_no end";
                }
            }

            DataTable dtfill = cls1.fillDataTable(str);
            if (dtfill.Rows.Count > 0)
            {
                foreach (DataRow drrow in dtfill.Rows)
                {
                    freeshipReport fr = new freeshipReport();
                    fr.msg = "";
                    fr.id = drrow["stud_id"].ToString();
                    fr.ayid = drrow["Ayid"].ToString();
                    fr.Name = drrow["Name"].ToString();
                    fr.Remark = drrow["Remark"].ToString();
                    fr.category = drrow["stud_Category"].ToString();
                    fr.grp_title = drrow["Group_title"].ToString();
                    fr.givenRmk = drrow["given_remark"].ToString();
                    details.Add(fr);
                }
            }
            else
            {
                freeshipReport fr = new freeshipReport();
                fr.msg = "No Data Found";
                details.Add(fr);
            }
        }
        return details.ToArray();
    }

    //old meirt
    //public List<ListItem> getcaste(string group, string year)
    //{
    //    string qry = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OPEN%' and b.group_id='" + group + "'"
    //                   + " union all "
    //                   + " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OBC%' and b.group_id='" + group + "'"
    //                    + "   union ALL"
    //                   + "  select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno AND a.Category not like  '%OPEN%' and  a.Category not like  '%OBC%' and b.group_id='" + group + "'";


    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        using (SqlCommand cmd = new SqlCommand(qry))
    //        {
    //            List<ListItem> listData = new List<ListItem>();
    //            cmd.CommandType = CommandType.Text;
    //            cmd.Connection = con;
    //            con.Open();
    //            using (SqlDataReader sdr = cmd.ExecuteReader())
    //            {
    //                while (sdr.Read())
    //                {
    //                    if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
    //                    {
    //                        listData.Add(new ListItem
    //                        {
    //                            Value = sdr["Category"].ToString(),
    //                            Text = sdr["Category"].ToString()
    //                        });
    //                    }
    //                }
    //            }
    //            con.Close();
    //            return listData;
    //        }
    //    }
    //}
    public List<ListItem> getcaste(string group, string year)
    {
        string qry = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OPEN%' and b.group_id='" + group + "'"
                       + " union all "
                       + " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OBC%' and b.group_id='" + group + "'"
                        + "   union ALL"
                       + "  select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno AND a.Category not like  '%OPEN%' and  a.Category not like  '%OBC%' and b.group_id='" + group + "'";


        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Category"].ToString(),
                                Text = sdr["Category"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }


    //public Merit_data[] allstudent(string caste, string ddlgroup, string year)
    //{
    //    List<Merit_data> details = new List<Merit_data>();
    //    DataSet dt;

    //    string qry = "";
    //    string qry1 = "";

    //    if (caste == "0")
    //    {
    //        qry1 = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OPEN%' and b.group_id='" + ddlgroup + "'"
    //                       + " union all "
    //                       + " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OBC%' and b.group_id='" + ddlgroup + "'"
    //                        + "   union ALL"
    //                       + "  select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno AND a.Category not like  '%OPEN%' and  a.Category not like  '%OBC%' and b.group_id='" + ddlgroup + "'";
    //    }
    //    else
    //    {
    //        qry1 = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category='" + caste + "' and b.group_id='" + ddlgroup + "'";
    //    }
    //    DataSet dss = cls1.fillDataset(qry1);
    //    if (dss.Tables[0].Rows.Count > 0)
    //    {
    //        for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
    //        {


    //            string qrry = " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
    //              + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
    //               + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //              + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //              + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
    //              + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //              + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //              + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //              + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
    //              + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //               + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
    //               + "  and submit_dt is not null and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
    //               +"and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%' order by percentage desc)a ";

    //            DataTable dttcheck=cls1.fillDataTable(qrry);
    //            if (dttcheck.Rows.Count > 0)
    //            {
    //                if (qry != "")
    //                {
    //                    qry = qry + "  Union all  ";
    //                }

    //                qry = qry + " select '' as Form_no,'' as stud_id,'" + dss.Tables[0].Rows[i]["Category"].ToString() + "' as Name,'' as Group_title,'' as pre_faculty,'' as Exam,0 as Mks_Obtained,0 as Mks_Outof,0.0 as percentage,0 as Year,'s' as MONTH ,'' as firstAttempt,'' as Inhouse, "
    //                 + " '' as Category,'' as Caste,'' as comp_subjects,'' as compulsory_subject_marks,'' as Board_name,'' as State_board,'' as Other_criteria,'' as subcourse_name, "
    //                 + " '' as subjects,'' as diploma_holder,'' as Gender,'' as S_Exam,'' as S_Mks_Obtained,'' as S_Mks_OutOf,'' as S_Month,'' as S_Year,'' as Phy_handicap,GETDATE() as merit_dt,'' as ACDID,'' as user_id,GETDATE() as CURR_DT,"
    //                 + " '' as group_id,'' as subcourse_id,'' as course_id,'' as faculty_id,'' as course_name,'' as faculty_name,'' as submit_dt "

    //                 + " union all"

    //              + " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
    //             + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
    //              + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //             + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //             + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
    //             + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //             + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //             + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //             + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
    //             + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //              + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
    //              + "and  ( app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
    //              + "  and submit_dt is not null   and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%' order by percentage desc)a ";
    //            }
    //        }

    //    }

    //    dt = cls1.fill_dataset(qry);
    //    foreach (DataRow dtrow in dt.Tables[0].Rows)
    //    {
    //        Merit_data stud = new Merit_data();
    //        stud.formno = dtrow["Form_No"].ToString();
    //        stud.studentname = dtrow["Name"].ToString().ToUpper();
    //        stud.Category = dtrow["Category"].ToString();
    //        stud.Percentage = dtrow["percentage"].ToString();
    //        stud.inhouse = dtrow["Inhouse"].ToString();
    //        stud.stud_id = dtrow["stud_id"].ToString();
    //        stud.Group_title = dtrow["Group_title"].ToString();
    //        stud.pre_faculty = dtrow["pre_faculty"].ToString();
    //        stud.Exam = dtrow["Exam"].ToString();
    //        stud.Mks_Obtained = dtrow["Mks_Obtained"].ToString();
    //        stud.Mks_Outof = dtrow["Mks_Outof"].ToString();
    //        stud.Year = dtrow["Year"].ToString();
    //        stud.MONTH = dtrow["MONTH"].ToString();
    //        stud.firstAttempt = dtrow["firstAttempt"].ToString();
    //        stud.Caste = dtrow["Caste"].ToString();
    //        stud.comp_subjects = dtrow["comp_subjects"].ToString();
    //        stud.compulsory_subject_marks = dtrow["compulsory_subject_marks"].ToString();
    //        stud.Board_name = dtrow["Board_name"].ToString();
    //        stud.State_board = dtrow["State_board"].ToString();
    //        stud.Other_criteria = dtrow["Other_criteria"].ToString();
    //        stud.subcourse_name = dtrow["subcourse_name"].ToString();
    //        stud.subjects = dtrow["subjects"].ToString();
    //        stud.diploma_holder = dtrow["diploma_holder"].ToString();
    //        stud.Gender = dtrow["Gender"].ToString();
    //        stud.S_Exam = dtrow["S_Exam"].ToString();
    //        stud.S_Mks_Obtained = dtrow["S_Mks_Obtained"].ToString();
    //        stud.S_Mks_OutOf = dtrow["S_Mks_OutOf"].ToString();
    //        stud.S_Month = dtrow["S_Month"].ToString();
    //        stud.S_Year = dtrow["S_Year"].ToString();
    //        stud.Phy_handicap = dtrow["Phy_handicap"].ToString();
    //        stud.ACDID = dtrow["ACDID"].ToString();
    //        stud.user_id = dtrow["user_id"].ToString();
    //        stud.CURR_DT = dtrow["CURR_DT"].ToString();
    //        stud.group_id = dtrow["group_id"].ToString();
    //        stud.subcourse_id = dtrow["subcourse_id"].ToString();
    //        stud.course_id = dtrow["course_id"].ToString();
    //        stud.faculty_id = dtrow["faculty_id"].ToString();
    //        stud.course_name = dtrow["course_name"].ToString();
    //        stud.faculty_name = dtrow["faculty_name"].ToString();
    //        stud.submit_dt = dtrow["submit_dt"].ToString();
    //        details.Add(stud);
    //    }
    //    return details.ToArray();

    //}
    public Merit_data[] allstudent(string caste, string ddlgroup, string year)
    {
        List<Merit_data> details = new List<Merit_data>();
        DataSet dt = new DataSet();

        string qry = "";
        string qry1 = "";

        if (caste == "0")
        {
            qry1 = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OPEN%' and b.group_id='" + ddlgroup + "'"
                           + " union all "
                           + " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OBC%' and b.group_id='" + ddlgroup + "'"
                            + "   union ALL"
                           + "  select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno AND a.Category not like  '%OPEN%' and  a.Category not like  '%OBC%' and b.group_id='" + ddlgroup + "'";
        }
        else
        {
            qry1 = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category='" + caste + "' and b.group_id='" + ddlgroup + "'";
        }
        DataSet dss = cls1.fillDataset(qry1);
        if (dss.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
            {


                string qrry = " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
                  + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
                   + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                  + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                  + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
                  + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                  + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                  + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                  + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
                  + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                   + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
                   + "  and submit_dt is not null and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
                   + "and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%' order by percentage desc)a ";

                DataTable dttcheck = cls1.fillDataTable(qrry);
                if (dttcheck.Rows.Count > 0)
                {
                    if (qry != "")
                    {
                        qry = qry + "  Union all  ";
                    }

                    qry = qry + " select '' as Form_no,'' as stud_id,'" + dss.Tables[0].Rows[i]["Category"].ToString() + "' as Name,'' as Group_title,'' as pre_faculty,'' as Exam,0 as Mks_Obtained,0 as Mks_Outof,0.0 as percentage,0 as Year,'s' as MONTH ,'' as firstAttempt,'' as Inhouse, "
                     + " '' as Category,'' as Caste,'' as comp_subjects,'' as compulsory_subject_marks,'' as Board_name,'' as State_board,'' as Other_criteria,'' as subcourse_name, "
                     + " '' as subjects,'' as diploma_holder,'' as Gender,'' as S_Exam,'' as S_Mks_Obtained,'' as S_Mks_OutOf,'' as S_Month,'' as S_Year,'' as Phy_handicap,GETDATE() as merit_dt,'' as ACDID,'' as user_id,GETDATE() as CURR_DT,"
                     + " '' as group_id,'' as subcourse_id,'' as course_id,'' as faculty_id,'' as course_name,'' as faculty_name,'' as submit_dt "

                     + " union all"

                  + " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
                 + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
                  + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                 + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                 + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
                 + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                 + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                 + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                 + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
                 + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                  + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
                  + "and  ( app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
                  + "  and submit_dt is not null   and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%' order by percentage desc)a ";
                }
            }

        }
        if (qry != "")
        {
            dt = cls1.fill_dataset(qry);
        }
        if (dt.Tables.Count > 0)
        {
            foreach (DataRow dtrow in dt.Tables[0].Rows)
            {
                Merit_data stud = new Merit_data();
                stud.formno = dtrow["Form_No"].ToString();
                stud.studentname = dtrow["Name"].ToString().ToUpper();
                stud.Category = dtrow["Category"].ToString();
                stud.Percentage = dtrow["percentage"].ToString();
                stud.inhouse = dtrow["Inhouse"].ToString();
                stud.stud_id = dtrow["stud_id"].ToString();
                stud.Group_title = dtrow["Group_title"].ToString();
                stud.pre_faculty = dtrow["pre_faculty"].ToString();
                stud.Exam = dtrow["Exam"].ToString();
                stud.Mks_Obtained = dtrow["Mks_Obtained"].ToString();
                stud.Mks_Outof = dtrow["Mks_Outof"].ToString();
                stud.Year = dtrow["Year"].ToString();
                stud.MONTH = dtrow["MONTH"].ToString();
                stud.firstAttempt = dtrow["firstAttempt"].ToString();
                stud.Caste = dtrow["Caste"].ToString();
                stud.comp_subjects = dtrow["comp_subjects"].ToString();
                stud.compulsory_subject_marks = dtrow["compulsory_subject_marks"].ToString();
                stud.Board_name = dtrow["Board_name"].ToString();
                stud.State_board = dtrow["State_board"].ToString();
                stud.Other_criteria = dtrow["Other_criteria"].ToString();
                stud.subcourse_name = dtrow["subcourse_name"].ToString();
                stud.subjects = dtrow["subjects"].ToString();
                stud.diploma_holder = dtrow["diploma_holder"].ToString();
                stud.Gender = dtrow["Gender"].ToString();
                stud.S_Exam = dtrow["S_Exam"].ToString();
                stud.S_Mks_Obtained = dtrow["S_Mks_Obtained"].ToString();
                stud.S_Mks_OutOf = dtrow["S_Mks_OutOf"].ToString();
                stud.S_Month = dtrow["S_Month"].ToString();
                stud.S_Year = dtrow["S_Year"].ToString();
                stud.Phy_handicap = dtrow["Phy_handicap"].ToString();
                stud.ACDID = dtrow["ACDID"].ToString();
                stud.user_id = dtrow["user_id"].ToString();
                stud.CURR_DT = dtrow["CURR_DT"].ToString();
                stud.group_id = dtrow["group_id"].ToString();
                stud.subcourse_id = dtrow["subcourse_id"].ToString();
                stud.course_id = dtrow["course_id"].ToString();
                stud.faculty_id = dtrow["faculty_id"].ToString();
                stud.course_name = dtrow["course_name"].ToString();
                stud.faculty_name = dtrow["faculty_name"].ToString();
                stud.submit_dt = dtrow["submit_dt"].ToString();
                details.Add(stud);
            }
        }
        return details.ToArray();

    }

    //public Merit_data[] Overall(string caste, string ddlgroup, string year)
    //{
    //    List<Merit_data> details = new List<Merit_data>();
    //    DataSet dt;
    //    //karishma
    //    string qry = "";
    //    string qry1 = "";

    //    if (caste == "0")
    //    {
    //      qry=  " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
    //              + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
    //               + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //              + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //              + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
    //              + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //              + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //              + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //              + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
    //              + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //               + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
    //               + "  and submit_dt is not null    order by percentage desc)a ";
    //    }
    //    else
    //    {
    //        qry= " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
    //            + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
    //             + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //            + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //            + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
    //            + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //            + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //            + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //            + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
    //            + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //             + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
    //             + "  and submit_dt is not null   and Category like '%" + caste + "%' order by percentage desc)a ";
    //    }


    //    dt = cls1.fill_dataset(qry);
    //    foreach (DataRow dtrow in dt.Tables[0].Rows)
    //    {
    //        Merit_data stud = new Merit_data();
    //        stud.formno = dtrow["Form_No"].ToString();
    //        stud.studentname = dtrow["Name"].ToString().ToUpper();
    //        stud.Category = dtrow["Category"].ToString();
    //        stud.Percentage = dtrow["percentage"].ToString();
    //        stud.inhouse = dtrow["Inhouse"].ToString();
    //        stud.stud_id = dtrow["stud_id"].ToString();
    //        stud.Group_title = dtrow["Group_title"].ToString();
    //        stud.pre_faculty = dtrow["pre_faculty"].ToString();
    //        stud.Exam = dtrow["Exam"].ToString();
    //        stud.Mks_Obtained = dtrow["Mks_Obtained"].ToString();
    //        stud.Mks_Outof = dtrow["Mks_Outof"].ToString();
    //        stud.Year = dtrow["Year"].ToString();
    //        stud.MONTH = dtrow["MONTH"].ToString();
    //        stud.firstAttempt = dtrow["firstAttempt"].ToString();
    //        stud.Caste = dtrow["Caste"].ToString();
    //        stud.comp_subjects = dtrow["comp_subjects"].ToString();
    //        stud.compulsory_subject_marks = dtrow["compulsory_subject_marks"].ToString();
    //        stud.Board_name = dtrow["Board_name"].ToString();
    //        stud.State_board = dtrow["State_board"].ToString();
    //        stud.Other_criteria = dtrow["Other_criteria"].ToString();
    //        stud.subcourse_name = dtrow["subcourse_name"].ToString();
    //        stud.subjects = dtrow["subjects"].ToString();
    //        stud.diploma_holder = dtrow["diploma_holder"].ToString();
    //        stud.Gender = dtrow["Gender"].ToString();
    //        stud.S_Exam = dtrow["S_Exam"].ToString();
    //        stud.S_Mks_Obtained = dtrow["S_Mks_Obtained"].ToString();
    //        stud.S_Mks_OutOf = dtrow["S_Mks_OutOf"].ToString();
    //        stud.S_Month = dtrow["S_Month"].ToString();
    //        stud.S_Year = dtrow["S_Year"].ToString();
    //        stud.Phy_handicap = dtrow["Phy_handicap"].ToString();
    //        stud.ACDID = dtrow["ACDID"].ToString();
    //        stud.user_id = dtrow["user_id"].ToString();
    //        stud.CURR_DT = dtrow["CURR_DT"].ToString();
    //        stud.group_id = dtrow["group_id"].ToString();
    //        stud.subcourse_id = dtrow["subcourse_id"].ToString();
    //        stud.course_id = dtrow["course_id"].ToString();
    //        stud.faculty_id = dtrow["faculty_id"].ToString();
    //        stud.course_name = dtrow["course_name"].ToString();
    //        stud.faculty_name = dtrow["faculty_name"].ToString();
    //        stud.submit_dt = dtrow["submit_dt"].ToString();
    //        details.Add(stud);
    //    }
    //    return details.ToArray();

    //}
    public Merit_data[] Overall(string caste, string ddlgroup, string year)
    {
        List<Merit_data> details = new List<Merit_data>();
        DataSet dt;
        //karishma
        string qry = "";
        string qry1 = "";

        if (caste == "0")
        {
            qry = " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
                    + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
                     + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                    + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                    + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
                    + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                    + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                    + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                    + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
                    + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where  (APP.Mks_Obtained<>'' OR APP.Mks_Obtained<>'0')    AND  (APP.Mks_Outof<>'' OR APP.Mks_Outof<>'0') AND app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                     + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
                     + "  and submit_dt is not null    order by percentage desc)a ";
        }
        else
        {
            qry = " select * from (SELECT   distinct top 1000000 app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  , "
                + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage, "
                 + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects,  "
                + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g "
                + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where  (APP.Mks_Obtained<>'' OR APP.Mks_Obtained<>'0')    AND  (APP.Mks_Outof<>'' OR APP.Mks_Outof<>'0') AND app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                 + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' "
                 + "  and submit_dt is not null   and Category like '%" + caste + "%' order by percentage desc)a ";
        }


        dt = cls1.fill_dataset(qry);
        foreach (DataRow dtrow in dt.Tables[0].Rows)
        {
            Merit_data stud = new Merit_data();
            stud.formno = dtrow["Form_No"].ToString();
            stud.studentname = dtrow["Name"].ToString().ToUpper();
            stud.Category = dtrow["Category"].ToString();
            stud.Percentage = dtrow["percentage"].ToString();
            stud.inhouse = dtrow["Inhouse"].ToString();
            stud.stud_id = dtrow["stud_id"].ToString();
            stud.Group_title = dtrow["Group_title"].ToString();
            stud.pre_faculty = dtrow["pre_faculty"].ToString();
            stud.Exam = dtrow["Exam"].ToString();
            stud.Mks_Obtained = dtrow["Mks_Obtained"].ToString();
            stud.Mks_Outof = dtrow["Mks_Outof"].ToString();
            stud.Year = dtrow["Year"].ToString();
            stud.MONTH = dtrow["MONTH"].ToString();
            stud.firstAttempt = dtrow["firstAttempt"].ToString();
            stud.Caste = dtrow["Caste"].ToString();
            stud.comp_subjects = dtrow["comp_subjects"].ToString();
            stud.compulsory_subject_marks = dtrow["compulsory_subject_marks"].ToString();
            stud.Board_name = dtrow["Board_name"].ToString();
            stud.State_board = dtrow["State_board"].ToString();
            stud.Other_criteria = dtrow["Other_criteria"].ToString();
            stud.subcourse_name = dtrow["subcourse_name"].ToString();
            stud.subjects = dtrow["subjects"].ToString();
            stud.diploma_holder = dtrow["diploma_holder"].ToString();
            stud.Gender = dtrow["Gender"].ToString();
            stud.S_Exam = dtrow["S_Exam"].ToString();
            stud.S_Mks_Obtained = dtrow["S_Mks_Obtained"].ToString();
            stud.S_Mks_OutOf = dtrow["S_Mks_OutOf"].ToString();
            stud.S_Month = dtrow["S_Month"].ToString();
            stud.S_Year = dtrow["S_Year"].ToString();
            stud.Phy_handicap = dtrow["Phy_handicap"].ToString();
            stud.ACDID = dtrow["ACDID"].ToString();
            stud.user_id = dtrow["user_id"].ToString();
            stud.CURR_DT = dtrow["CURR_DT"].ToString();
            stud.group_id = dtrow["group_id"].ToString();
            stud.subcourse_id = dtrow["subcourse_id"].ToString();
            stud.course_id = dtrow["course_id"].ToString();
            stud.faculty_id = dtrow["faculty_id"].ToString();
            stud.course_name = dtrow["course_name"].ToString();
            stud.faculty_name = dtrow["faculty_name"].ToString();
            stud.submit_dt = dtrow["submit_dt"].ToString();
            details.Add(stud);
        }
        return details.ToArray();

    }

    //old merit
    //public Merit_data[] allstudentMerit(string caste, string ddlgroup, string subcourse, string year)
    //{
    //    List<Merit_data> details = new List<Merit_data>();
    //    DataSet dt;
    //    //karishma
    //    string qry = "";
    //    string qry1 = "";
    //    string qry2 = "";
    //    string qry3 = "";
    //    string qry4 = "";
    //    string qry5 = "";
    //    double avlseat = 0;
    //    double limit = 0;
    //    double newlimit = 0;

    //    if (caste == "0")
    //    {
    //        qry1 = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OPEN%' and b.group_id='" + ddlgroup + "'"
    //                       + " union all "
    //                       + " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OBC%' and b.group_id='" + ddlgroup + "'"
    //                        + "   union ALL"
    //                       + "  select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno AND a.Category not like  '%OPEN%' and  a.Category not like  '%OBC%' and b.group_id='" + ddlgroup + "'";
    //    }
    //    else
    //    {
    //        qry1 = " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category='" + caste + "' and b.group_id='" + ddlgroup + "'";
    //    }
    //    DataSet dss = cls1.fillDataset(qry1);
    //    if (dss.Tables[0].Rows.Count > 0)
    //    {
    //        qry2 = "select * from m_intake where group_id like '%" + ddlgroup + "%' and ayid='" + year + "' and subcourse_id='" + subcourse + "'";
    //        DataTable intake = cls1.fillDataTable(qry2);
    //        if (intake.Rows.Count > 0)
    //        {
    //            qry3 = "select * from merit_list_criteria";
    //            DataTable cat = cls1.fillDataTable(qry3);

    //            for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
    //            {
    //                double admissioncount = 0;
    //                qry5 = "select * from merit_list_criteria where Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'";
    //                DataTable catper = cls1.fillDataTable(qry5);
    //                qry4 = "select count(a.stud_id) as admissiondone from m_std_studentacademic_tbl a,m_std_personaldetails_tbl b where a.ayid='" + year + "' and a.group_id='" + ddlgroup + "' and b.stud_Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%' and   a.stud_id  is not null and a.del_flag=0 and a.stud_id=b.stud_id";
    //                DataTable admission = cls1.fillDataTable(qry4);
    //                if (admission.Rows.Count > 0)
    //                {
    //                    admissioncount = Convert.ToDouble(admission.Rows[0]["admissiondone"]);
    //                }


    //                avlseat = (Convert.ToDouble(intake.Rows[0]["intake"].ToString()) - (Convert.ToDouble(intake.Rows[0]["intake"].ToString()) * (Convert.ToDouble(cat.Rows[0]["percentage"].ToString()) / 100)));
    //                limit = (Convert.ToDouble(avlseat) * (Convert.ToDouble(catper.Rows[0]["percentage"].ToString()) / 100)) - (admissioncount);
    //                limit = Math.Round(limit);

    //                if (limit < 0)
    //                {
    //                    limit = 0;
    //                }
    //                    qry2 = "  select min(percentage) as mper from( "
    //                    + "  SELECT  distinct top " + limit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
    //                   + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
    //                   + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //                  + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //                  + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
    //                  + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //                  + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //                  + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //                  + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
    //                  + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //                   + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
    //                    + "and submit_dt is not null  and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) order by percentage desc ) a   ";
    //                    DataTable nn = cls1.fillDataTable(qry2);
    //                    if (nn.Rows[0]["mper"].ToString() != "")
    //                    {
    //                        qry3 = "  select Form_No from( select Form_No,percentage from( "
    //                        + "  SELECT  distinct  app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
    //                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
    //                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
    //                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
    //                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
    //                        + "and submit_dt is not null  and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
    //                        + " ) a  where percentage='" + nn.Rows[0]["mper"].ToString() + "' and Form_No not in(  "
    //                        + "  select Form_No from( "
    //                        + "  SELECT  distinct top " + limit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
    //                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
    //                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
    //                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
    //                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
    //                        + " and submit_dt is not null and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
    //                        + " order by percentage desc ) b  ))c";
    //                        DataTable pp = cls1.fillDataTable(qry3);
    //                        if (pp.Rows.Count > 0)
    //                        {
    //                            newlimit = limit + pp.Rows.Count;
    //                        }
    //                        else
    //                        {
    //                            newlimit = limit;
    //                        }
    //                    }
    //                    else
    //                    {
    //                        newlimit = limit;
    //                    }


    //                    if (qry != "")
    //                    {
    //                        qry = qry + "  Union all  ";
    //                    }


    //                    string qrry = "  select '' as Form_No,'" + dss.Tables[0].Rows[i]["Category"].ToString() + "' as Name,'' as Category,0 as percentage,'' as Inhouse  union all "
    //                       + "  select Form_No,Name,Category,percentage,Inhouse from( "
    //                        + "  SELECT  distinct top " + newlimit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
    //                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
    //                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
    //                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
    //                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
    //                        + " and submit_dt is not null   and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) order by percentage desc ) a   ";

    //                    DataTable dtcheck = cls1.fillDataTable(qrry);




    //                    if (dtcheck.Rows.Count > 0)
    //                    {


    //                        qry = qry + "  select '' as Form_No,'" + dss.Tables[0].Rows[i]["Category"].ToString() + "' as Name,'' as Category,0 as percentage,'' as Inhouse  union all "
    //                       + "  select Form_No,Name,Category,percentage,Inhouse from( "
    //                        + "  SELECT  distinct top " + newlimit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
    //                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
    //                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
    //                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
    //                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
    //                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
    //                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
    //                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
    //                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
    //                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
    //                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
    //                        + " and submit_dt is not null   and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) order by percentage desc ) a   ";
    //                    }
    //                    limit = 0;
    //                    newlimit = 0;
    //                }

    //            }

    //            dt = cls1.fill_dataset(qry);


    //            DataRow dr;
    //            dr = dt.Tables[0].NewRow();
    //            string lstr = "select distinct merit_dt  from merit_list where  YEAR(merit_dt)=YEAR(GETDATE()) and faculty_name in (select Group_title from m_crs_subjectgroup_tbl where group_id='" + ddlgroup + "' )";
    //            DataSet l = cls1.fill_dataset(lstr);

    //            if (l.Tables[0].Rows.Count == 0)
    //            {
    //                dr[0] = "First";
    //            }
    //            if (l.Tables[0].Rows.Count == 1)
    //            {
    //                dr[0] = "Second";
    //            }
    //            if (l.Tables[0].Rows.Count == 2)
    //            {
    //                dr[0] = "Third";
    //            }
    //            if (l.Tables[0].Rows.Count == 3)
    //            {
    //                dr[0] = "Fourth";
    //            }
    //            if (l.Tables[0].Rows.Count == 4)
    //            {
    //                dr[0] = "Fifth";
    //            }
    //            if (l.Tables[0].Rows.Count == 5)
    //            {
    //                dr[0] = "Sixth";
    //            }
    //            if (l.Tables[0].Rows.Count == 6)
    //            {
    //                dr[0] = "Seven";
    //            }
    //            if (l.Tables[0].Rows.Count == 7)
    //            {
    //                dr[0] = "Eighth";
    //            }
    //            if (l.Tables[0].Rows.Count == 8)
    //            {
    //                dr[0] = "Ninth";
    //            }
    //            if (l.Tables[0].Rows.Count == 9)
    //            {
    //                dr[0] = "Tenth";
    //            }
    //            dt.Tables[0].Rows.InsertAt(dr, 0);


    //            foreach (DataRow dtrow in dt.Tables[0].Rows)
    //            {
    //                Merit_data stud = new Merit_data();
    //                stud.formno = dtrow["Form_No"].ToString();
    //                stud.studentname = dtrow["Name"].ToString().ToUpper();
    //                stud.Category = dtrow["Category"].ToString();
    //                stud.Percentage = dtrow["percentage"].ToString();
    //                stud.inhouse = dtrow["Inhouse"].ToString();
    //                details.Add(stud);
    //            }
    //        }
    //        else
    //        {

    //        }

    //    return details.ToArray();

    //}

    //old merit
    //public List<ListItem> getgroupMerit(string subcourse)
    //{
    //    string qry = "select Group_title,Group_id from m_crs_subjectgroup_tbl where subcourse_id='" + subcourse + "' and Group_title not like '%20%'";

    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        using (SqlCommand cmd = new SqlCommand(qry))
    //        {
    //            List<ListItem> listData = new List<ListItem>();
    //            cmd.CommandType = CommandType.Text;
    //            cmd.Connection = con;
    //            con.Open();
    //            using (SqlDataReader sdr = cmd.ExecuteReader())
    //            {
    //                while (sdr.Read())
    //                {
    //                    if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
    //                    {
    //                        listData.Add(new ListItem
    //                        {
    //                            Value = sdr["Group_id"].ToString(),
    //                            Text = sdr["Group_title"].ToString()
    //                        });
    //                    }
    //                }
    //            }
    //            con.Close();
    //            return listData;
    //        }
    //    }
    //}
    public Merit_data[] allstudentMerit(string caste, string ddlgroup, string subcourse, string year)
    {
        List<Merit_data> details = new List<Merit_data>();
        DataSet dt;
        //karishma
        string qry = "";
        string qry1 = "";
        string qry2 = "";
        string qry3 = "";
        string qry4 = "";
        string qry5 = "";
        double avlseat = 0;
        double limit = 0;
        double newlimit = 0;

        if (caste == "0")
        {
            qry1 = "select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OPEN%' and b.group_id='" + ddlgroup + "'"
                           + " union all "
                           + " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category like '%OBC%' and b.group_id='" + ddlgroup + "'"
                            + "   union ALL"
                           + "  select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno AND a.Category not like  '%OPEN%' and  a.Category not like  '%OBC%' and b.group_id='" + ddlgroup + "'";
        }
        else
        {
            qry1 = " select distinct a.Category from d_adm_applicant a,OLA_FY_adm_CourseSelection b where a.ACDID='" + year + "' and a.Form_no=b.formno and a.Category='" + caste + "' and b.group_id='" + ddlgroup + "'";
        }
        DataSet dss = cls1.fillDataset(qry1);
        if (dss.Tables[0].Rows.Count > 0)
        {
            qry2 = "select * from m_intake where group_id like '%" + ddlgroup + "%' and ayid='" + year + "' and subcourse_id='" + subcourse + "'";
            DataTable intake = cls1.fillDataTable(qry2);
            if (intake.Rows.Count > 0)
            {
                qry3 = "select * from merit_list_criteria";
                DataTable cat = cls1.fillDataTable(qry3);

                for (int i = 0; i < dss.Tables[0].Rows.Count; i++)
                {
                    double admissioncount = 0;
                    qry5 = "select * from merit_list_criteria where Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'";
                    DataTable catper = cls1.fillDataTable(qry5);
                    qry4 = "select count(a.stud_id) as admissiondone from m_std_studentacademic_tbl a,m_std_personaldetails_tbl b where a.ayid='" + year + "' and a.group_id='" + ddlgroup + "' and b.stud_Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%' and   a.stud_id  is not null and a.del_flag=0 and a.stud_id=b.stud_id";
                    DataTable admission = cls1.fillDataTable(qry4);
                    if (admission.Rows.Count > 0)
                    {
                        admissioncount = Convert.ToDouble(admission.Rows[0]["admissiondone"]);
                    }


                    avlseat = (Convert.ToDouble(intake.Rows[0]["intake"].ToString()) - (Convert.ToDouble(intake.Rows[0]["intake"].ToString()) * (Convert.ToDouble(cat.Rows[0]["percentage"].ToString()) / 100)));
                    limit = (Convert.ToDouble(avlseat) * (Convert.ToDouble(catper.Rows[0]["percentage"].ToString()) / 100)) - (admissioncount);
                    limit = Math.Round(limit);

                    if (limit < 0)
                    {
                        limit = 0;
                    }
                    qry2 = "  select min(percentage) as mper from( "
                    + "  SELECT  distinct top " + limit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
                   + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
                   + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                  + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                  + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
                  + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                  + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                  + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                  + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
                  + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                   + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
                    + "and submit_dt is not null  and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) order by percentage desc ) a   ";
                    DataTable nn = cls1.fillDataTable(qry2);
                    if (nn.Rows[0]["mper"].ToString() != "")
                    {
                        qry3 = "  select Form_No from( select Form_No,percentage from( "
                        + "  SELECT  distinct  app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where  (APP.Mks_Obtained<>'' OR APP.Mks_Obtained<>'0')    AND  (APP.Mks_Outof<>'' OR APP.Mks_Outof<>'0') AND app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
                        + "and submit_dt is not null  and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
                        + " ) a  where percentage='" + nn.Rows[0]["mper"].ToString() + "' and Form_No not in(  "
                        + "  select Form_No from( "
                        + "  SELECT  distinct top " + limit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
                        + " and submit_dt is not null and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) "
                        + " order by percentage desc ) b  ))c";
                        DataTable pp = cls1.fillDataTable(qry3);
                        if (pp.Rows.Count > 0)
                        {
                            newlimit = limit + pp.Rows.Count;
                        }
                        else
                        {
                            newlimit = limit;
                        }
                    }
                    else
                    {
                        newlimit = limit;
                    }


                    if (qry != "")
                    {
                        qry = qry + "  Union all  ";
                    }


                    string qrry = "  select '' as Form_No,'" + dss.Tables[0].Rows[i]["Category"].ToString() + "' as Name,'' as Category,0 as percentage,'' as Inhouse  union all "
                       + "  select Form_No,Name,Category,percentage,Inhouse from( "
                        + "  SELECT  distinct top " + newlimit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where  (APP.Mks_Obtained<>'' OR APP.Mks_Obtained<>'0')    AND  (APP.Mks_Outof<>'' OR APP.Mks_Outof<>'0') AND app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
                        + " and submit_dt is not null   and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) order by percentage desc ) a   ";

                    DataTable dtcheck = cls1.fillDataTable(qrry);




                    if (dtcheck.Rows.Count > 0)
                    {


                        qry = qry + "  select '' as Form_No,'" + dss.Tables[0].Rows[i]["Category"].ToString() + "' as Name,'' as Category,0 as percentage,'' as Inhouse  union all "
                       + "  select Form_No,Name,Category,percentage,Inhouse from( "
                        + "  SELECT  distinct top " + newlimit + " app.Form_no + '' + RIGHT(s.group_id,3) as Form_No, s.stud_id,app.L_name + ' '+app.F_name + ' '+ CASE WHEN Rtrim(Ltrim(app.M_name)) = '' THEN '.' WHEN app.M_name <> '' THEN app.M_name END +' '+ app.Mo_name AS Name  ,  "
                       + "  g.Group_title, app.pre_faculty,app.Exam,app.Mks_Obtained,app.Mks_Outof,cast(round(COALESCE (app.Mks_Obtained,0)*100.0/COALESCE (app.Mks_Outof,1),2,2)AS DECIMAL(18, 2)) as percentage,  "
                       + "  app.Year,app.MONTH,CASE WHEN app.firstAttempt = 0 THEN 'NO' WHEN app.firstAttempt = 1 THEN 'YES' END AS firstAttempt,       "
                      + "  CASE WHEN app.Is_Inhouse = 0 THEN 'Inhouse' WHEN app.Is_Inhouse = 1 THEN 'Outsider' WHEN app.Is_Inhouse = 2 THEN 'OutsiderP' END AS Inhouse, "
                      + "  app.Category,app.Caste, ma.comp_subjects, s.compulsory_subject_marks, app.Board_name, app.State_board,app.Other_criteria,ss.subcourse_name,app.subjects, "
                      + "  CASE WHEN app.diploma_holder = 1 THEN 'Yes' WHEN app.diploma_holder = 0 THEN 'No' END AS diploma_holder,               "
                      + "  CASE WHEN app.Gender = 0 THEN 'F' WHEN app.Gender = 1 THEN 'M' END AS Gender,app.S_Exam,app.S_Mks_Obtained,app.S_Mks_OutOf, app.S_Month,app.S_Year,app.Phy_handicap,s.merit_dt,app.ACDID,app.user_id,app.CURR_DT,s.group_id, "
                      + "  ss.subcourse_id,c.course_id,f.faculty_id,c.course_name,f.faculty_name,s.submit_dt "
                      + "  from d_adm_applicant app ,dbo.OLA_FY_adm_CourseSelection s,dbo.m_crs_subcourse_tbl ss,dbo.m_crs_course_tbl c,dbo.m_crs_faculty f ,dbo.m_crs_subjectgroup_tbl g  "
                      + "  left join m_adm_eligibility ma on  g.Subcourse_id  = ma.subcrs_id where  (APP.Mks_Obtained<>'' OR APP.Mks_Obtained<>'0')    AND  (APP.Mks_Outof<>'' OR APP.Mks_Outof<>'0') AND app.form_no=s.formno and g.Group_id=s.group_id and ss.subcourse_id=g.Subcourse_id and c.course_id=ss.course_id and f.faculty_id=c.faculty_id  "
                       + "  and acdid='" + year + "' and s.del_flag=0  and app.Del_Flag=0 and s.group_id='" + ddlgroup + "' and Category like '%" + dss.Tables[0].Rows[i]["Category"].ToString() + "%'  "
                        + " and submit_dt is not null   and (app.Form_no + '' + RIGHT(s.group_id,3)) not in(select  formno from merit_list where faculty_name in(select Group_title from m_crs_subjectgroup_tbl where Group_id='" + ddlgroup + "') and YEAR(merit_dt)=YEAR(GETDATE())) order by percentage desc ) a   ";
                    }
                    limit = 0;
                    newlimit = 0;
                }

            }

            dt = cls1.fill_dataset(qry);


            DataRow dr;
            dr = dt.Tables[0].NewRow();
            string lstr = "select distinct merit_dt  from merit_list where  YEAR(merit_dt)=YEAR(GETDATE()) and faculty_name in (select Group_title from m_crs_subjectgroup_tbl where group_id='" + ddlgroup + "' )";
            DataSet l = cls1.fill_dataset(lstr);

            if (l.Tables[0].Rows.Count == 0)
            {
                dr[0] = "First";
            }
            if (l.Tables[0].Rows.Count == 1)
            {
                dr[0] = "Second";
            }
            if (l.Tables[0].Rows.Count == 2)
            {
                dr[0] = "Third";
            }
            if (l.Tables[0].Rows.Count == 3)
            {
                dr[0] = "Fourth";
            }
            if (l.Tables[0].Rows.Count == 4)
            {
                dr[0] = "Fifth";
            }
            if (l.Tables[0].Rows.Count == 5)
            {
                dr[0] = "Sixth";
            }
            if (l.Tables[0].Rows.Count == 6)
            {
                dr[0] = "Seven";
            }
            if (l.Tables[0].Rows.Count == 7)
            {
                dr[0] = "Eighth";
            }
            if (l.Tables[0].Rows.Count == 8)
            {
                dr[0] = "Ninth";
            }
            if (l.Tables[0].Rows.Count == 9)
            {
                dr[0] = "Tenth";
            }
            dt.Tables[0].Rows.InsertAt(dr, 0);


            foreach (DataRow dtrow in dt.Tables[0].Rows)
            {
                Merit_data stud = new Merit_data();
                stud.formno = dtrow["Form_No"].ToString();
                stud.studentname = dtrow["Name"].ToString().ToUpper();
                stud.Category = dtrow["Category"].ToString();
                stud.Percentage = dtrow["percentage"].ToString();
                stud.inhouse = dtrow["Inhouse"].ToString();
                details.Add(stud);
            }
        }
        else
        {

        }

        return details.ToArray();

    }

    public List<ListItem> getgroupMerit(string subcourse)
    {
        string qry = "select Group_title,Group_id from m_crs_subjectgroup_tbl where subcourse_id='" + subcourse + "' and Group_title not like '%20%'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Group_id"].ToString(),
                                Text = sdr["Group_title"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    //old merit
    //public Merit_data[] fillCategrid()
    //{
    //    List<Merit_data> details = new List<Merit_data>();

    //    string str = "";
    //    str = "select sr,category,percentage from  merit_list_criteria  union all "
    //         + "  select (select count(sr) from merit_list_criteria)+ROW_NUMBER() OVER(ORDER BY  category)as sr,* from  (select  distinct Parent as category,'' as percentage "
    //        + "  from State_category_details where Main='Reserved Category' and parent not in(select category from  merit_list_criteria) )b ";

    //    DataTable dt = new DataTable();
    //    dt = cls1.fillDataTable(str);
    //    double percal = 0;
    //    for (int i = 0; i < dt.Rows.Count; i++)
    //    {
    //        percal = percal + Convert.ToDouble(dt.Rows[i]["percentage"].ToString());
    //    }

    //    foreach (DataRow dr in dt.Rows)
    //    {

    //        Merit_data retval = new Merit_data();
    //        retval.formno = dr["sr"].ToString();
    //        retval.Category = dr["category"].ToString();
    //        retval.Percentage = dr["percentage"].ToString();
    //        retval.studentname = percal.ToString();
    //        details.Add(retval);
    //    }

    //    return details.ToArray();
    //}
    public Merit_data[] fillCategrid()
    {
        List<Merit_data> details = new List<Merit_data>();

        string str = "";
        str = "select sr,category,percentage from  merit_list_criteria  union all "
             + "  select (select count(sr) from merit_list_criteria)+ROW_NUMBER() OVER(ORDER BY  category)as sr,* from  (select  distinct Parent as category,'' as percentage "
            + "  from State_category_details where Main='Reserved Category' and parent not in(select category from  merit_list_criteria) )b ";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        double percal = 0;
        for (int i = 0; i < dt.Rows.Count; i++)
        {
            percal = percal + Convert.ToDouble(dt.Rows[i]["percentage"].ToString());
        }

        foreach (DataRow dr in dt.Rows)
        {

            Merit_data retval = new Merit_data();
            retval.formno = dr["sr"].ToString();
            retval.Category = dr["category"].ToString();
            retval.Percentage = dr["percentage"].ToString();
            retval.studentname = percal.ToString();
            details.Add(retval);
        }

        return details.ToArray();
    }

    //old meirt
    //public Merit_data[] saveCat(string sr, string category, string percentage)
    //{

    //    List<Merit_data> details = new List<Merit_data>();
    //    Merit_data retval = new Merit_data();
    //    string qry = "";
    //    string qry1 = "";
    //    string[] a = sr.Split(',');
    //    string[] b = category.Split(',');
    //    string[] c = percentage.Split(',');
    //    for (int i = 0; i < a.Length; i++)
    //    {
    //        qry = "select * from merit_list_criteria where category='" + b[i] + "'";
    //        DataTable dt = cls1.fillDataTable(qry);
    //        if (dt.Rows.Count > 0)
    //        {
    //            qry1 = qry1 + "update merit_list_criteria set category='" + b[i] + "',percentage='" + c[i] + "',mod_dt=getdate() where sr='" + a[i] + "' ; ";
    //        }
    //        else
    //        {
    //            qry1 = qry1 + " insert into merit_list_criteria (sr,category,percentage,curr_dt,del_flag)values('" + a[i] + "','" + b[i] + "','" + c[i] + "',getdate(),0) ";
    //        }
    //    }

    //    if (cls1.DMLqueries(qry1) == true)
    //    {
    //        retval.msg = "Saved";
    //        details.Add(retval);
    //    }
    //    else
    //    {
    //        retval.msg = "No Data Saved";
    //        details.Add(retval);
    //    }


    //    return details.ToArray();


    //}
    public Merit_data[] saveCat(string sr, string category, string percentage, string del)
    {

        List<Merit_data> details = new List<Merit_data>();
        Merit_data retval = new Merit_data();
        string qry = "";
        string qry1 = "";
        string[] a = sr.Split(',');
        string[] b = category.Split(',');
        string[] c = percentage.Split(',');
        string[] d = del.Split(',');
        for (int i = 0; i < a.Length; i++)
        {
            qry = "select * from merit_list_criteria where sr='" + a[i] + "'";
            DataTable dt = cls1.fillDataTable(qry);
            if (dt.Rows.Count > 0)
            {
                qry1 = qry1 + "update merit_list_criteria set category='" + b[i] + "',percentage='" + c[i] + "',mod_dt=getdate(),del_flag='" + d[i] + "' where sr='" + a[i] + "' ; ";
            }
            else
            {
                if (d[i] == "0")
                {
                    qry1 = qry1 + " insert into merit_list_criteria (sr,category,percentage,curr_dt,del_flag)values('" + a[i] + "','" + b[i] + "','" + c[i] + "',getdate(),0) ";
                }
            }
        }

        if (cls1.DMLqueries(qry1) == true)
        {
            retval.msg = "Saved";
            details.Add(retval);
        }
        else
        {
            retval.msg = "No Data Saved";
            details.Add(retval);
        }


        return details.ToArray();


    }
    public Merit_data[] saveCat(string sr, string category, string percentage)
    {

        List<Merit_data> details = new List<Merit_data>();
        Merit_data retval = new Merit_data();
        string qry = "";
        string qry1 = "";
        string[] a = sr.Split(',');
        string[] b = category.Split(',');
        string[] c = percentage.Split(',');
        for (int i = 0; i < a.Length; i++)
        {
            qry = "select * from merit_list_criteria where category='" + b[i] + "'";
            DataTable dt = cls1.fillDataTable(qry);
            if (dt.Rows.Count > 0)
            {
                qry1 = qry1 + "update merit_list_criteria set category='" + b[i] + "',percentage='" + c[i] + "',mod_dt=getdate() where sr='" + a[i] + "' ; ";
            }
            else
            {
                qry1 = qry1 + " insert into merit_list_criteria (sr,category,percentage,curr_dt,del_flag)values('" + a[i] + "','" + b[i] + "','" + c[i] + "',getdate(),0) ";
            }
        }

        if (cls1.DMLqueries(qry1) == true)
        {
            retval.msg = "Saved";
            details.Add(retval);
        }
        else
        {
            retval.msg = "No Data Saved";
            details.Add(retval);
        }


        return details.ToArray();


    }

    public Noc[] Reprint_noc(string stud_id, string user_id)
    {

        List<Noc> details = new List<Noc>();
        Noc nc = new Noc();
        // string str = "select top 1 *,case c.course_id when 'CRS001' then class when 'CRS003' then class when 'CRS007' then class else Group_title end as 'class' from NOC a,prijesh_DataView_I_Card b,m_crs_subcourse_tbl c where a.stud_id='" + stud_id + "' and a.stud_id=b.stud_id  and b.subcourse_Id=c.subcourse_id order by b.ayid desc";
        string str = "select top 1 *,case c.course_id when 'CRS001' then Group_title when 'CRS003' then Group_title when 'CRS007' then Group_title "
+ " else Group_title end as 'class',e.stud_F_Name+' '+e.stud_M_Name+' '+e.stud_L_Name as stud_name,e.stud_Gender as gender from NOC a,m_std_studentacademic_tbl as b,m_crs_subcourse_tbl c,m_crs_subjectgroup_tbl as d,m_std_personaldetails_tbl e where a.stud_id='" + stud_id + "'"
 + " and a.stud_id=b.stud_id  and b.subcourse_Id=c.subcourse_id and b.group_id=d.Group_id and a.stud_id=e.stud_id order by b.ayid desc";
        DataSet ds = cls1.fillDataset(str);

        //string str1 = "select stud_id,ayid,SUBSTRING(ID_No,0,17) as ID_No,roll_no from m_std_studentacademic_tbl  where stud_id='" + stud_id + "' ";
        //DataSet dsID = cls1.fillDataset(str1);

        string st_noc = "select  *,convert(varchar(10),issue_date,105) as issue_date1 from NOC where stud_id='" + stud_id + "' ";
        DataSet ds_noc = cls1.fillDataset(st_noc);
        if (ds.Tables[0].Rows[0]["con_noc"].ToString() == "Confirmed")
        {
            if (ds.Tables[0].Rows[0]["case_date"].ToString() == "")
            {
                nc.case_dt = "1/1/1111";
            }
            else { nc.case_dt = ds_noc.Tables[0].Rows[0]["case_date"].ToString(); }

            if (ds.Tables[0].Rows[0]["letter_date"].ToString() == "")
            {
                nc.letter_dt = "1/1/1111";
            }
            else { nc.letter_dt = ds_noc.Tables[0].Rows[0]["letter_date"].ToString(); }
        }
        else
        {
            nc.letter_dt = "1/1/1111";
            nc.case_dt = "1/1/1111";
        }
        nc.iss_dt = ds_noc.Tables[0].Rows[0]["issue_date1"].ToString();
        if (ds.Tables[0].Rows[0]["prn_no"].ToString() == "")
        {
            nc.prn_no = "--";
        }
        else { nc.prn_no = ds_noc.Tables[0].Rows[0]["prn_no"].ToString(); }
        if (ds.Tables[0].Rows[0]["letter_date"].ToString() == "")
        {
            nc.letter_dt = "--";
        }
        else { nc.letter_dt = ds_noc.Tables[0].Rows[0]["letter_date"].ToString(); }
        if (ds.Tables[0].Rows[0]["letter_no"].ToString() == "")
        {
            nc.letter_no = "--";
        }
        else { nc.letter_no = ds_noc.Tables[0].Rows[0]["letter_no"].ToString(); }
        if (ds.Tables[0].Rows[0]["case_no"].ToString() == "")
        {
            nc.case_no = "--";
        }
        else { nc.case_no = ds_noc.Tables[0].Rows[0]["case_no"].ToString(); }
        nc.enrol = ds.Tables[0].Rows[0]["con_noc"].ToString(); ;// enroll;
        nc.name = ds.Tables[0].Rows[0]["stud_name"].ToString();
        nc.sr_no = ds_noc.Tables[0].Rows[0]["srno"].ToString();
        nc.roll_no = ds.Tables[0].Rows[0]["Roll_no"].ToString();
        nc.group = ds.Tables[0].Rows[0]["class"].ToString();
        nc.gender = ds.Tables[0].Rows[0]["gender"].ToString();


        details.Add(nc);
        return details.ToArray();
    }

    //---------------------------employee-----------------------
    public List<ListItem> filldesignation()
    {
        String qry = "select distinct Designation_Title,Designation_ID from m_designation where del_flag='0'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> coure = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        coure.Add(new ListItem
                        {
                            Value = sdr["Designation_ID"].ToString(),
                            Text = sdr["Designation_Title"].ToString()
                        });
                    }
                }
                con.Close();
                return coure;
            }
        }
    }
    public Employee[] savepersonaldata(string fname, string lname, string mname, string mothname, string dob, string doj, string gender, string bldgrp, string cat, string national, string marital, string email, string caste, string subcaste, string aadhar, string address1, string city1, string state1, string pincode1, string phoneno1, string telno1, string address2, string city2, string state2, string pincode2, string phoneno2, string telno2, string depart, string desig, string salary, string handicaped, string empid, string type, string pfno, string panno, string group_id, string role_id, string depart_name, string role, string logincategory, string grouplist)
    {
        string str = "";
        List<Employee> empdet = new List<Employee>();
        Employee emp = new Employee();

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("m_emp_personal", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                if (type == "Insert")
                {
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@emp_id", "");
                    cmd.Parameters.Add("@del_dt", DateTime.Now);
                }
                else
                {
                    cmd.Parameters.Add("@type", type);
                    cmd.Parameters.Add("@emp_id", empid);
                }

                cmd.Parameters.Add("@emp_fname", fname);
                cmd.Parameters.Add("@emp_mname", mname);
                cmd.Parameters.Add("@emp_lname", lname);
                cmd.Parameters.Add("@emp_mother_name", mothname);
                cmd.Parameters.Add("@emp_dob", DateTime.ParseExact(dob, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
                cmd.Parameters.Add("@emp_doj", DateTime.ParseExact(doj, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
                cmd.Parameters.Add("@emp_blood_group", bldgrp);
                cmd.Parameters.Add("@emp_gender", gender);
                cmd.Parameters.Add("@emp_maritial_status", marital);
                cmd.Parameters.Add("@emp_nationality", national);
                cmd.Parameters.Add("@emp_handicaped", handicaped);
                cmd.Parameters.Add("@emp_category", cat);
                cmd.Parameters.Add("@emp_cast", caste);
                cmd.Parameters.Add("@emp_photo", null);
                cmd.Parameters.Add("@emp_sign", null);
                cmd.Parameters.Add("@emp_phone1", telno1);
                cmd.Parameters.Add("@emp_phone2", telno2);

                cmd.Parameters.Add("@emp_mobile1", phoneno1);
                cmd.Parameters.Add("@emp_mobile2", phoneno2);
                cmd.Parameters.Add("@emp_email", email);
                cmd.Parameters.Add("@emp_p_f_num", pfno);
                cmd.Parameters.Add("@emp_pan_card_no", panno);
                cmd.Parameters.Add("@emp_tds_num", null);
                cmd.Parameters.Add("@emp_dricing_lic_no", null);
                cmd.Parameters.Add("@emp_pan_no", null);

                cmd.Parameters.Add("@emp_passport_no", null);
                cmd.Parameters.Add("@emp_address_curr", address1);
                cmd.Parameters.Add("@emp_state_curr", state1);
                cmd.Parameters.Add("@emp_pincode_curr", pincode1);
                cmd.Parameters.Add("@emp_address_per", address2);
                cmd.Parameters.Add("@emp_state_per", state2);

                cmd.Parameters.Add("@emp_pincode_per", pincode2);
                cmd.Parameters.Add("@date_of_leaving", null);
                cmd.Parameters.Add("@dept_id", depart);
                cmd.Parameters.Add("@emp_des_id", desig);

                cmd.Parameters.Add("@emp_from_date", DateTime.ParseExact(doj, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
                cmd.Parameters.Add("@actual_basic_salary", salary);

                cmd.Parameters.Add("@del_flag", false);
                cmd.Parameters.Add("@emp_del_flag", 1);

                cmd.Connection = con;
                con.Open();
                //string message = Convert.ToString(cmd.ExecuteScalar());
                DataTable dt = new DataTable();

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0 && dt.Rows[0][0].ToString().Length == 8)
                {
                    string qry = "";
                    string strdtp = "select * from web_tp_login where emp_id='" + dt.Rows[0][0].ToString().ToUpper() + "'";
                    string str_role = " select form_name from web_tp_roletype where role_id='" + role_id.ToString() + "'";
                    DataTable dtp = cls1.fillDataTable(strdtp);
                    DataTable dtp_new = cls1.fillDataTable(str_role);
                    if (dtp.Rows.Count > 0)
                    {
                        if (dtp.Rows[0]["role_id"].ToString() == role)
                        {
                            qry = "update web_tp_login set role_id='" + role_id + "',group_ids='" + grouplist + "',col1='" + logincategory + "',mod_date=getdate(),del_flag=0 where  emp_id='" + dt.Rows[0][0].ToString().ToUpper() + "'  ";
                        }
                        else
                        {

                            qry = "update web_tp_login set role_id='" + role_id + "',group_ids='" + grouplist + "',col1='" + logincategory + "',col2='" + dtp_new.Rows[0][0].ToString() + "',mod_date=getdate(),del_flag=0  where emp_id='" + dt.Rows[0][0].ToString().ToUpper() + "'";
                        }
                    }
                    else
                    {
                        qry = "insert into web_tp_login values('" + dt.Rows[0][0].ToString().ToUpper() + "','" + role_id + "','" + dt.Rows[0][0] + "','" + dt.Rows[0][0] + "','" + grouplist + "','" + logincategory + "','" + dtp_new.Rows[0][0].ToString() + "','',getdate(),0)";
                    }

                    cls1.DMLqueries(qry);

                    emp.msg = "Saved";

                    if (type == "Update")
                    {
                        emp.empid = empid;
                        string straad = "update m_employee_personal set emp_aadhar_no='" + aadhar + "' where emp_id='" + empid + "'";
                        cls1.DMLqueries(straad);

                    }
                    else
                    {

                        string emp_login = "";
                        emp.empid = dt.Rows[0][0].ToString();
                        string straad = "update m_employee_personal set emp_aadhar_no='" + aadhar + "' where emp_id='" + dt.Rows[0][0].ToString() + "'";
                        cls1.DMLqueries(straad);



                    }
                }
                else
                {
                    emp.msg = "Not Saved";
                    emp.empid = "";
                }
            }
        }
        empdet.Add(emp);
        return empdet.ToArray();
    }

    public Employee[] getempdata(string inputval)
    {
        string str = "";
        str = "select distinct top 1 e.emp_id,	emp_fname,	emp_mname,	emp_lname,	emp_mother_name,convert(varchar(10),emp_dob,103) emp_dob,convert(varchar(10),emp_doj,103)	emp_doj,	emp_blood_group,	emp_gender,	emp_maritial_status,	emp_nationality,	emp_handicaped,	emp_category,	emp_cast,emp_phone1,emp_phone2,	emp_mobile1,	emp_mobile2,	emp_email,	emp_p_f_num,emp_aadhar_no,	emp_pan_card_no,	emp_tds_num,	emp_dricing_lic_no,	emp_passport_no,	emp_address_curr,	emp_state_curr	,emp_cast,	emp_pincode_curr,emp_address_per,emp_state_per,	emp_pincode_per,convert(varchar(10),date_of_leaving,103)	date_of_leaving	,e.del_flag,d.emp_dept_id,d.emp_des_id,d.actual_basic_salary,d.jobtype,w.role_id,w.group_ids,w.col1	from m_employee_personal e,employee_department_des d,web_tp_login w where (e.emp_id like '%" + inputval + "%' or emp_fname like '%" + inputval + "%' or emp_lname like '%" + inputval + "%' or emp_mname like '%" + inputval + "%')  and e.emp_id=d.emp_id and w.emp_id=e.emp_id and e.del_flag=0 and d.emp_del_flag=1 and w.del_flag=0 ";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<Employee> empdet = new List<Employee>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                Employee emp = new Employee();
                emp.countemp = dt.Rows.Count;
                emp.msg = "";
                emp.empid = drrow["emp_id"].ToString();
                emp.fname = drrow["emp_fname"].ToString();
                emp.lname = drrow["emp_lname"].ToString();
                emp.mname = drrow["emp_mname"].ToString();
                emp.mothname = drrow["emp_mother_name"].ToString();
                emp.dob = drrow["emp_dob"].ToString();
                emp.doj = drrow["emp_doj"].ToString();
                emp.gender = drrow["emp_gender"].ToString();
                emp.bldgrp = drrow["emp_blood_group"].ToString();
                emp.cat = drrow["emp_category"].ToString();
                emp.national = drrow["emp_nationality"].ToString();
                emp.marital = drrow["emp_maritial_status"].ToString();
                emp.email = drrow["emp_email"].ToString();
                emp.caste = drrow["emp_cast"].ToString();
                emp.address1 = drrow["emp_address_curr"].ToString();
                emp.pfno = drrow["emp_p_f_num"].ToString();
                emp.aadhar = drrow["emp_aadhar_no"].ToString();
                emp.panno = drrow["emp_pan_card_no"].ToString();
                //emp.city1 = drrow[""].ToString();
                emp.state1 = drrow["emp_state_curr"].ToString();
                emp.pincode1 = drrow["emp_pincode_curr"].ToString();
                emp.phoneno1 = drrow["emp_mobile1"].ToString();
                emp.telno1 = drrow["emp_phone1"].ToString();
                emp.address2 = drrow["emp_address_per"].ToString();
                //emp.city2 = drrow[""].ToString();
                emp.state2 = drrow["emp_state_per"].ToString();
                emp.pincode2 = drrow["emp_pincode_per"].ToString();
                emp.phoneno2 = drrow["emp_phone2"].ToString();
                emp.telno2 = drrow["emp_mobile2"].ToString();
                emp.depart = drrow["emp_dept_id"].ToString();
                emp.desig = drrow["emp_des_id"].ToString();
                emp.salary = drrow["actual_basic_salary"].ToString();
                emp.handicap = drrow["emp_handicaped"].ToString();
                emp.jobtype = drrow["jobtype"].ToString();
                emp.role = drrow["role_id"].ToString();
                emp.grouplist = drrow["group_ids"].ToString();
                emp.logincat = drrow["col1"].ToString();
                empdet.Add(emp);
            }
        }
        else
        {
            Employee emp = new Employee();
            emp.countemp = 0;
            emp.msg = "No Data Found";
            empdet.Add(emp);
        }
        return empdet.ToArray();
    }
    public Employee[] getdepartdata(string empid)
    {
        string str = "";
        str = "select emp_id,	m.Department_name,emp_dept_id,emp_des_id,	d.Designation_Title,convert(varchar(10),emp_from_date,103) as emp_from_date,	emp_to_date,	emp_del_flag,	actual_basic_salary,	jobtype from employee_department_des e,m_department m,m_designation d where e.emp_id='" + empid + "' and m.Dept_id=e.emp_dept_id and d.Designation_ID=e.emp_des_id";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<Employee> empdet = new List<Employee>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                Employee emp = new Employee();
                emp.empid = drrow["emp_id"].ToString();
                emp.depart = drrow["Department_name"].ToString();
                emp.desig = drrow["Designation_Title"].ToString();
                emp.deptid = drrow["emp_dept_id"].ToString();
                emp.desid = drrow["emp_des_id"].ToString();
                emp.doj = drrow["emp_from_date"].ToString();
                emp.todt = drrow["emp_to_date"].ToString();
                emp.delflag = drrow["emp_del_flag"].ToString();
                emp.salary = drrow["actual_basic_salary"].ToString();
                emp.jobtype = drrow["jobtype"].ToString();
                emp.msg = "";
                empdet.Add(emp);
            }
        }
        else
        {
            Employee emp = new Employee();
            emp.msg = "No Data Found";
            empdet.Add(emp);
        }
        return empdet.ToArray();
    }
    public Employee[] getexpdata(string empid)
    {
        string str = "";
        str = "select emp_id,	emp_previous_organization,	emp_previous_designation,	emp_previous_job_dept,	emp_previous_salary,	convert(varchar(10),emp_previous_job_from,103) as emp_previous_job_from,convert(varchar(10),emp_previous_job_to,103) as emp_previous_job_to from employee_experience_details where emp_id='" + empid + "'";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<Employee> empdet = new List<Employee>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                Employee emp = new Employee();
                emp.empid = drrow["emp_id"].ToString();
                emp.comp = drrow["emp_previous_organization"].ToString();
                emp.desig = drrow["emp_previous_designation"].ToString();
                emp.depart = drrow["emp_previous_job_dept"].ToString();
                emp.prvsal = drrow["emp_previous_salary"].ToString();
                emp.jfdate = drrow["emp_previous_job_from"].ToString();
                emp.jtdate = drrow["emp_previous_job_to"].ToString();
                emp.msg = "";
                empdet.Add(emp);
            }
        }
        else
        {
            Employee emp = new Employee();
            emp.msg = "No Data Found";
            empdet.Add(emp);
        }
        return empdet.ToArray();
    }
    public bool saveeducation(string empid, string colgname, string obt, string out1, string board, string degree, string type, string class1, string pursuing, string yearpass, string month, string subject, string dmltype)
    {
        string str = "";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("m_emp_educat", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@type", "Insert_Update");
                cmd.Parameters.Add("@emp_id", empid);
                cmd.Parameters.Add("@emp_coll_name", colgname);
                cmd.Parameters.Add("@emp_unversity_board_name", board);
                cmd.Parameters.Add("@emp_degree_name", degree);
                cmd.Parameters.Add("@emp_degree_type", type);
                cmd.Parameters.Add("@emp_specialization_subj", subject);
                cmd.Parameters.Add("@emp_month_of_passing", month);
                cmd.Parameters.Add("@emp_year_of_passing", yearpass);

                cmd.Parameters.Add("@emp_marks_obtained", obt);
                cmd.Parameters.Add("@emp_total_marks", out1);
                cmd.Parameters.Add("@emp_class_secured", class1);
                cmd.Parameters.Add("@emp_pursuing", pursuing);
                con.Open();
                DataTable dt = new DataTable();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                con.Close();
                if (dt.Rows[0][0].ToString() == "DATA SAVED" || dt.Rows[0][0].ToString() == "SAVED SUCCESSFULLY")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    }
    public Employee[] showeducation(string empid)
    {
        string str = "";
        str = "select emp_id,	emp_coll_name,	emp_unversity_board_name,	emp_degree_name,	emp_degree_type,	emp_specialization_subj,	emp_month_of_passing,	emp_year_of_passing,	emp_marks_obtained	,emp_total_marks,	emp_class_secured,case when emp_pursuing=0 then 'Not' else 'Yes' end as emp_pursuing from employee_education_details where emp_id='" + empid + "'";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<Employee> empdet = new List<Employee>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                Employee emp = new Employee();
                emp.colgname = drrow["emp_coll_name"].ToString();
                emp.boardname = drrow["emp_unversity_board_name"].ToString();
                emp.degname = drrow["emp_degree_name"].ToString();
                emp.degtype = drrow["emp_degree_type"].ToString();
                emp.class1 = drrow["emp_class_secured"].ToString();
                emp.pursuing = drrow["emp_pursuing"].ToString();
                emp.obtmk = drrow["emp_marks_obtained"].ToString();
                emp.totmrk = drrow["emp_total_marks"].ToString();
                emp.subject = drrow["emp_specialization_subj"].ToString();
                emp.mop = drrow["emp_month_of_passing"].ToString();
                emp.yop = drrow["emp_year_of_passing"].ToString();
                emp.msg = "";
                empdet.Add(emp);
            }
        }
        else
        {
            Employee emp = new Employee();
            emp.msg = "No Data Found";
            empdet.Add(emp);
        }
        return empdet.ToArray();
    }

    public bool savedepart(string empid, string depart, string desig, string salary, string doj, string criteria)
    {
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("m_emp_dept_des", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                // cmd.Parameters.Add("@type", "Insert_Update");
                cmd.Parameters.Add("@emp_id", empid);
                cmd.Parameters.Add("@emp_dept_id", depart);
                cmd.Parameters.Add("@emp_des_id", desig);
                cmd.Parameters.Add("@emp_from_date", DateTime.ParseExact(doj, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
                cmd.Parameters.Add("@emp_to_date", null);
                cmd.Parameters.Add("@emp_del_flag", 1);
                cmd.Parameters.Add("@actual_basic_salary", salary);
                cmd.Parameters.Add("@type", "Insert_Update");
                cmd.Parameters.Add("@jobtype", criteria);

                DataTable dt = new DataTable();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                con.Close();
                if (dt.Rows[0][0].ToString() == "DATA SAVED" || dt.Rows[0][0].ToString() == "SAVED SUCCESSFULLY")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    }

    public bool saveaccount(string empid, string acntno, string acntype, string bankname, string branch, string isalary)
    {
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("m_emp_acc_det", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@type", "Insert_Update");
                cmd.Parameters.Add("@emp_id", empid);
                cmd.Parameters.Add("@emp_bank_acc_no", acntno);
                cmd.Parameters.Add("@bank_flag", isalary);
                cmd.Parameters.Add("@emp_bank_acc_type", acntype);
                cmd.Parameters.Add("@emp_bank_name", bankname);
                cmd.Parameters.Add("@emp_bank_branch", branch);

                DataTable dt = new DataTable();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                con.Close();
                if (dt.Rows[0][0].ToString().Contains("DATA SAVED") || dt.Rows[0][0].ToString().Contains("SAVED SUCCESSFULLY"))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    }

    public bool savexperience(string empid, string org, string depart, string desig, string prevsal, string doj, string dol)
    {
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand("m_emp_experience", con))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@type", "Insert_Update");
                cmd.Parameters.Add("@emp_id", empid);
                cmd.Parameters.Add("@emp_previous_organization", org);
                cmd.Parameters.Add("@emp_previous_designation", desig);
                cmd.Parameters.Add("@emp_previous_job_dept", depart);
                cmd.Parameters.Add("@emp_previous_salary", prevsal);
                cmd.Parameters.Add("@emp_previous_job_from", DateTime.ParseExact(doj, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
                cmd.Parameters.Add("@emp_previous_job_to", DateTime.ParseExact(dol, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
                DataTable dt = new DataTable();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                con.Close();
                if (dt.Rows[0][0].ToString().Contains("DATA SAVED") || dt.Rows[0][0].ToString().Contains("SAVED SUCCESSFULLY"))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    }
    public Employee[] getempPhoto(string empid)
    {
        List<Employee> details = new List<Employee>();
        Employee modal = new Employee();
        if (empid != "")
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Extension");
            dt.Rows.Add(".jpg");
            dt.Rows.Add(".jpeg");
            dt.Rows.Add(".png");
            dt.Rows.Add(".gif");
            dt.Rows.Add(".bmp");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                System.IO.DirectoryInfo dirInfo = new System.IO.DirectoryInfo(System.Web.HttpContext.Current.Server.MapPath("~/EmployeePhoto/photo/" + empid + dt.Rows[i]["Extension"].ToString()));
                System.IO.DirectoryInfo dirsign = new System.IO.DirectoryInfo(System.Web.HttpContext.Current.Server.MapPath("~/EmployeePhoto/sign/" + empid + dt.Rows[i]["Extension"].ToString()));

                string picpath = dirInfo.FullName;
                picpath = picpath.Replace("\\", "\\\\");

                string signpath = dirsign.FullName;
                signpath = signpath.Replace("\\", "\\\\");
                //FileInfo[] listfiles = dirInfo.GetFiles();

                if (File.Exists(picpath) || File.Exists(signpath))
                {
                    if (File.Exists(picpath))
                    {
                        modal.photo = "EmployeePhoto/photo/" + empid + dt.Rows[i]["Extension"].ToString();
                    }

                    if (File.Exists(signpath))
                    {
                        modal.sign = "EmployeePhoto/sign/" + empid + dt.Rows[i]["Extension"].ToString();
                    }
                    modal.msg = "Uploaded";
                    details.Add(modal);
                }
                else
                {
                    if (modal.msg != "")
                    {

                    }
                    else
                    {
                        modal.msg = "";
                    }
                }
            }
            return details.ToArray();
        }
        else
        {
            modal.msg = "Give emp_id";
            details.Add(modal);
            return details.ToArray();
        }

    }

    public List<ListItem> fillrole()
    {
        string qry = "select distinct role_id,role_name from web_tp_roletype where del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> coure = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        coure.Add(new ListItem

                        {
                            Value = sdr["role_id"].ToString(),
                            Text = sdr["role_name"].ToString()
                        });
                    }
                }
                con.Close();
                return coure;
            }
        }
    }

    public List<ListItem> fillgroup()
    {
        string qry = "select Group_id,case when course_name like '%70-30%' then Group_title+'(70-30)' else Group_title+'(80-20)'  end  as Group_title from m_crs_course_tbl as a,m_crs_subcourse_tbl as b,m_crs_subjectgroup_tbl as c where a.course_id=b.course_id and b.subcourse_id=c.Subcourse_id";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> coure = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        coure.Add(new ListItem

                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return coure;
            }
        }
    }

    //-------------------------------department & designation

    public deptdes[] saverecord(string deptname, string prefix, string type, string empid)
    {
        string qry = "";
        DateTime date = DateTime.Now;

        List<deptdes> details = new List<deptdes>();
        deptdes retval = new deptdes();

        if (type == "department")
        {
            qry = "exec MDepartment 'D','" + deptname.ToUpper() + "','','0','" + prefix.ToUpper() + "','Insert'";
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);
            if (dt.Rows[0][0].ToString() == "SAVED SUCCESSFULLY")
            {
                retval.msg = "Saved";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "MORE THAN ONE RECORD SAVED")
            {
                retval.msg = "More";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "Entry not saved ,Name Already Exists")
            {
                retval.msg = "Exist";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "Name Already Exists, Cant Save")
            {
                retval.msg = "Exist";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }
        else
        {
            qry = "exec MDesignation 'A','" + deptname.ToUpper() + "','Admin','0','Insert'";
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);

            if (dt.Rows[0][0].ToString() == "SAVED SUCCESSFULLY")
            {
                retval.msg = "Saved";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "MORE THAN ONE RECORD SAVED")
            {
                retval.msg = "More";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "Entry not saved ,Name Already Exists")
            {
                retval.msg = "Exist";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }

        return details.ToArray();
    }

    public deptdes[] filltblgrid()
    {
        List<deptdes> details = new List<deptdes>();

        string str = "";
        str = "select Dept_id,Department_name,PREFIX from m_department where del_flag=0 order by dept_id";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);

        foreach (DataRow dr in dt.Rows)
        {
            deptdes retval = new deptdes();
            retval.prefix = dr["PREFIX"].ToString();
            retval.deptname = dr["Department_name"].ToString();
            retval.deptid = dr["Dept_id"].ToString();
            details.Add(retval);
        }

        return details.ToArray();
    }

    public deptdes[] fillgesigrid()
    {
        List<deptdes> details = new List<deptdes>();

        string str = "";
        str = "select Designation_ID,Designation_Title from m_designation where del_flag=0 order by Designation_ID";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);

        foreach (DataRow dr in dt.Rows)
        {
            deptdes retval = new deptdes();
            retval.desname = dr["Designation_Title"].ToString();
            retval.desid = dr["Designation_ID"].ToString();
            details.Add(retval);
        }

        return details.ToArray();
    }

    public deptdes[] deletedept(string id, string type, string name, string prefix)
    {
        string qry = "";
        DateTime date = DateTime.Now;

        List<deptdes> details = new List<deptdes>();
        deptdes retval = new deptdes();

        if (type == "department")
        {
            qry = "exec MDepartment '" + id + "','" + name + "','','0','" + prefix + "','Delete'";
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);
            if (dt.Rows[0][0].ToString() == "Department Successfully deleted.")
            {
                retval.msg = "deleted";
                details.Add(retval);
            }
            else
            {
                retval.msg = "Cannot";
                details.Add(retval);
            }
        }
        else
        {
            qry = "exec MDesignation '" + id + "','" + name + "','Admin','0','Delete'";
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);

            if (dt.Rows[0][0].ToString() == "Designation deleted successfully.")
            {
                retval.msg = "deleted";
                details.Add(retval);
            }
            else
            {
                retval.msg = "Cannot";
                details.Add(retval);
            }
        }

        return details.ToArray();
    }

    public deptdes[] updaterecord(string deptname, string prefix, string type, string empid, string deptid)
    {
        string qry = "";
        DateTime date = DateTime.Now;

        List<deptdes> details = new List<deptdes>();
        deptdes retval = new deptdes();

        if (type == "department")
        {
            qry = "exec MDepartment '" + deptid + "','" + deptname + "','','0','" + prefix + "','update'";
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);
            if (dt.Rows[0][0].ToString() == "UPDATED SUCCESSFULLY")
            {
                retval.msg = "Update";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "MORE THAN ONE RECORD SAVED")
            {
                retval.msg = "More";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }
        else
        {
            qry = "exec MDesignation '" + deptid + "','" + deptname + "','Admin','0','update'";
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            DataTable dt = new DataTable();
            dt = cls1.fillDataTable(qry);

            if (dt.Rows[0][0].ToString() == "UPDATED SUCCESSFULLY")
            {
                retval.msg = "Update";
                details.Add(retval);
            }
            else if (dt.Rows[0][0].ToString() == "MORE THAN ONE RECORD SAVED")
            {
                retval.msg = "More";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }

        return details.ToArray();
    }
    public Employee[] getaccountdata(string empid)
    {
        string str = "";
        str = "SELECT emp_id,case when bank_flag=0 then 'Not' else 'Yes' end as bank_flag,emp_bank_acc_no,case when emp_bank_acc_type=0 then 'Saving' else 'Current' end as emp_bank_acc_type,emp_bank_name,emp_bank_branch FROM emp_bank_details WHERE emp_id='" + empid + "'";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);
        List<Employee> empdet = new List<Employee>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                Employee emp = new Employee();
                emp.empid = drrow["emp_id"].ToString();
                emp.isalary = drrow["bank_flag"].ToString();
                emp.accntno = drrow["emp_bank_acc_no"].ToString();
                emp.acntype = drrow["emp_bank_acc_type"].ToString();
                emp.bnkname = drrow["emp_bank_name"].ToString();
                emp.branch = drrow["emp_bank_branch"].ToString();
                emp.msg = "";
                empdet.Add(emp);
            }
        }
        else
        {
            Employee emp = new Employee();
            emp.msg = "No Data Found";
            empdet.Add(emp);
        }
        return empdet.ToArray();
    }

    public RoleSave[] saveRole(string rolename, string formname)
    {

        DateTime date = DateTime.Now;

        List<RoleSave> details = new List<RoleSave>();
        RoleSave retval = new RoleSave();
        if (qryCls.checkDuplicatesRolename(rolename) == false)
        {
            if (qryCls.InserRole(rolename, formname) == true)
            {
                retval.msg = "Saved";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }
        else
        {
            retval.msg = "Exist";
            details.Add(retval);
        }

        return details.ToArray();
    }

    public RoleSave[] fillrolegrid()
    {
        List<RoleSave> details = new List<RoleSave>();

        string str = "";
        str = "select * from dbo.Register_Form where [Del Flag]=0";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);

        foreach (DataRow dr in dt.Rows)
        {
            RoleSave retval = new RoleSave();
            retval.formname = dr["Form_Name"].ToString();
            //retval.deptname = dr["Department_name"].ToString();
            //retval.deptid = dr["Dept_id"].ToString();
            details.Add(retval);
        }

        return details.ToArray();
    }
    public RoleSave[] fillroleedit()
    {
        List<RoleSave> details = new List<RoleSave>();

        string str = "";
        str = "select  role_id,role_name,form_name  from web_tp_roletype where del_flag=0 and is_active=1";

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(str);

        foreach (DataRow dr in dt.Rows)
        {
            RoleSave retval = new RoleSave();
            retval.formname = dr["Form_Name"].ToString();
            retval.roleid = dr["role_id"].ToString();
            retval.rolename = dr["role_name"].ToString();
            details.Add(retval);
        }

        return details.ToArray();
    }
    //----------------------------------------Employee Entry-----------------------------------------------------------------

    public employee[] employeerecord(string emp_id, string fname, string mname, string lname, string mothernme, string emailid, string dobirth, string dojoin, string mobileno, string salary, string departid, string desigid, string gender, string mobile2, string role, string logincategory, string grouplist, string form_name, string address, string bloodgroup)
    {
        List<employee> details = new List<employee>();
        employee retval = new employee();
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        SqlConnection con = new SqlConnection(constr);
        SqlCommand cmd = new SqlCommand("m_emp_personal", con);
        cmd.CommandType = CommandType.StoredProcedure;



        int bldgrp = Convert.ToInt32(bloodgroup.ToString());


        cmd.Parameters.AddWithValue("@emp_id", emp_id);
        cmd.Parameters.AddWithValue("@emp_fname", fname.ToUpper());
        cmd.Parameters.AddWithValue("@emp_mname", mname.ToUpper());
        cmd.Parameters.AddWithValue("@emp_lname", lname.ToUpper());
        cmd.Parameters.AddWithValue("@emp_mother_name", mothernme.ToUpper());
        cmd.Parameters.AddWithValue("@emp_dob", DateTime.ParseExact(dobirth, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
        cmd.Parameters.AddWithValue("@emp_doj", DateTime.ParseExact(dojoin, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
        cmd.Parameters.AddWithValue("@emp_blood_group", bldgrp);
        cmd.Parameters.AddWithValue("@emp_gender", gender);
        cmd.Parameters.AddWithValue("@emp_maritial_status", "");
        cmd.Parameters.AddWithValue("@emp_nationality", "Indian");
        cmd.Parameters.AddWithValue("@emp_handicaped", "");
        cmd.Parameters.AddWithValue("@emp_category", "");
        cmd.Parameters.AddWithValue("@emp_cast", "");
        cmd.Parameters.AddWithValue("@emp_photo", null);
        cmd.Parameters.AddWithValue("@emp_sign", null);
        cmd.Parameters.AddWithValue("@emp_phone1", mobileno);
        cmd.Parameters.AddWithValue("@emp_phone2", "");
        cmd.Parameters.AddWithValue("@emp_mobile1", mobile2);
        cmd.Parameters.AddWithValue("@emp_mobile2", "");
        cmd.Parameters.AddWithValue("@emp_email", emailid);
        cmd.Parameters.AddWithValue("@emp_p_f_num", "");
        cmd.Parameters.AddWithValue("@emp_pan_card_no", "");
        cmd.Parameters.AddWithValue("@emp_tds_num", "");
        cmd.Parameters.AddWithValue("@emp_dricing_lic_no", "");
        cmd.Parameters.AddWithValue("@emp_pan_no", "");
        cmd.Parameters.AddWithValue("@emp_passport_no", "");
        cmd.Parameters.AddWithValue("@emp_address_curr", address);
        cmd.Parameters.AddWithValue("@emp_state_curr", "");
        cmd.Parameters.AddWithValue("@emp_pincode_curr", "");
        cmd.Parameters.AddWithValue("@emp_address_per", address);
        cmd.Parameters.AddWithValue("@emp_state_per", "");
        cmd.Parameters.AddWithValue("@emp_pincode_per", "");
        cmd.Parameters.AddWithValue("@date_of_leaving", "");
        cmd.Parameters.AddWithValue("@del_flag", 0);
        cmd.Parameters.AddWithValue("@del_dt", DBNull.Value);
        cmd.Parameters.AddWithValue("@dept_id", departid);
        cmd.Parameters.AddWithValue("@emp_des_id", desigid);
        cmd.Parameters.AddWithValue("@emp_from_date", DateTime.ParseExact(dojoin, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy"));
        cmd.Parameters.AddWithValue("@emp_to_date", DBNull.Value);
        cmd.Parameters.AddWithValue("@emp_del_flag", 1);
        cmd.Parameters.AddWithValue("@actual_basic_salary", salary);
        string query = "";
        if (emp_id != "")
        {
            cmd.Parameters.AddWithValue("@type", "Update");
            query = "update employee_department_des set actual_basic_salary='" + salary + "',emp_dept_id='" + departid + "',emp_des_id='" + desigid + "',emp_from_date='" + DateTime.ParseExact(dojoin, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") + "' where emp_id='" + emp_id + "'";
        }
        else
        {
            cmd.Parameters.AddWithValue("@type", "Insert");
        }
        con.Open();
        SqlDataAdapter adapter = new SqlDataAdapter(cmd);
        DataTable dt = new DataTable();
        adapter.Fill(dt);
        con.Close();
        if (dt.Rows.Count > 0)
        {
            string qry = "";
            string str = "select * from web_tp_login where emp_id='" + dt.Rows[0][0].ToString().ToUpper() + "'";
            DataTable dtp = cls1.fillDataTable(str);
            if (dtp.Rows.Count > 0)
            {
                if (dtp.Rows[0]["role_id"].ToString() == role)
                {
                    qry = "update web_tp_login set role_id='" + role + "',group_ids='" + grouplist + "',col1='" + logincategory + "',col2='" + form_name + "',mod_date=getdate(),del_flag=0 where  emp_id='" + dt.Rows[0][0].ToString().ToUpper() + "'  ";
                }
                else
                {

                    qry = "update web_tp_login set role_id='" + role + "',group_ids='" + grouplist + "',col1='" + logincategory + "',col2='" + form_name + "',mod_date=getdate(),del_flag=0  where emp_id='" + dt.Rows[0][0].ToString().ToUpper() + "'";
                }
            }
            else
            {
                qry = "insert into web_tp_login values('" + dt.Rows[0][0].ToString().ToUpper() + "','" + role + "','" + dt.Rows[0][0] + "','" + dt.Rows[0][0] + "','" + grouplist + "','" + logincategory + "','" + form_name + "','',getdate(),0)";
            }

            cls1.DMLqueries(qry);

            if (query != "" && qry != "")
            {
                if (cls1.DMLqueries(query) == true)
                {
                }
                retval.empid = dt.Rows[0][0].ToString().ToUpper();
                retval.msg = "Saved";
            }
            else
            {
                retval.empid = dt.Rows[0][0].ToString().ToUpper();
                retval.msg = "Saved";
            }
            details.Add(retval);
        }
        else
        {
            retval.msg = "No Data Saved";
            details.Add(retval);
        }

        return details.ToArray();
    }


    public List<ListItem> fillsub_grp()
    {
        string qry = "";

        qry = "select distinct Group_title,Group_id from dbo.m_crs_subjectgroup_tbl where del_flag=0 order by Group_title";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }


    public Employee[] fillformgrid()
    {
        List<Employee> confirm = new List<Employee>();
        string qry = "";

        qry = "select * from dbo.Register_Form where [Del Flag]=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        SqlDataAdapter da1 = new SqlDataAdapter(qry, constr);

        DataTable dt = new DataTable();
        da1.Fill(dt);
        //   DataTable dt = cls1.fillDataTable(str);
        for (int i = 0; i < dt.Rows.Count; i++)
        {
            Employee sdb = new Employee();
            sdb.form_id = dt.Rows[i]["Sr_no"].ToString();
            sdb.form_name = dt.Rows[i]["Form_Name"].ToString();

            confirm.Add(sdb);
        }
        return confirm.ToArray();
    }


    public List<ListItem> fill_form_name(string module_name)
    {
        string qry = "";
        string module = "";

        module = module_name.ToString().Replace(",", "','");

        qry = "select Form_Name,Form_Name from Register_Form  where Portal in ('" + module + "')";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Form_Name"].ToString().Trim(),
                            Text = sdr["Form_Name"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fill_model()
    {
        string qry = "";

        qry = "select distinct portal from Register_Form";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["portal"].ToString().Trim(),
                            Text = sdr["portal"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fill_form_name_new()
    {
        string qry = "";

        qry = "select Form_Name,Form_Name from Register_Form ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Form_Name"].ToString().Trim(),
                            Text = sdr["Form_Name"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public employee[] getemployeedata(string empid)
    {
        string query = "";

        //query = "select	emp_fname,emp_mname,emp_lname,emp_mother_name,convert (varchar(10),emp_dob,103) as emp_dob,convert (varchar(10),emp_doj,103) as emp_doj,emp_gender,emp_phone1,emp_mobile1,emp_email, e.emp_dept_id,e.emp_des_id,e.actual_basic_salary,w.role_id,w.group_ids,w.col1,w.col2 from m_employee_personal m,employee_department_des e,web_tp_login w where m.emp_id='" + empid + "' and m.emp_id=e.emp_id and m.emp_id=w.emp_id and w.del_flag=0 and m.del_flag=0 ";
        query = " SELECT * FROM   ( select  emp_fname,emp_mname,emp_lname,emp_mother_name,convert (varchar(10),emp_dob,103) as emp_dob,convert (varchar(10),emp_doj,103) as emp_doj,emp_gender,emp_phone1,emp_mobile1,emp_email,emp_blood_group,emp_address_curr, e.emp_dept_id,e.emp_des_id,e.actual_basic_salary,w.role_id,w.group_ids,w.col1,w.col2 from m_employee_personal m,employee_department_des e,web_tp_login w where m.emp_id='" + empid + "' and m.emp_id=e.emp_id and m.emp_id=w.emp_id and w.del_flag=0 and m.del_flag=0 ) AS A,(select distinct stuff((select distinct ','+ portal from Register_Form where Form_Name in (select x.Item as col2 from web_tp_login t cross apply (select Item from dbo.SplitString(t.col2,',') ) x where t.emp_id='" + empid + "') for xml path('')),1,1,'') as module from  Register_Form) AS B ";
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(query);
        List<employee> details = new List<employee>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                employee sn = new employee();
                sn.deptid = dr["emp_dept_id"].ToString();
                sn.desigid = dr["emp_des_id"].ToString();
                sn.salary = dr["actual_basic_salary"].ToString();
                sn.mothername = dr["emp_mother_name"].ToString();
                sn.lname = dr["emp_lname"].ToString();
                sn.mname = dr["emp_mname"].ToString();
                sn.fname = dr["emp_fname"].ToString();
                sn.mobileno = dr["emp_phone1"].ToString();
                sn.dob = dr["emp_dob"].ToString();
                sn.address = dr["emp_address_curr"].ToString();
                sn.bloodgroup = dr["emp_blood_group"].ToString();
                sn.dojoin = dr["emp_doj"].ToString();
                sn.emailid = dr["emp_email"].ToString();
                sn.gender = dr["emp_gender"].ToString();
                sn.mobile2 = dr["emp_mobile1"].ToString();
                sn.role = dr["role_id"].ToString();
                sn.grouplist = dr["group_ids"].ToString();
                sn.logincat = dr["col1"].ToString();
                sn.form_name = dr["col2"].ToString().Trim();
                sn.module = dr["module"].ToString().Trim();

                sn.msg = "";
                details.Add(sn);
            }
        }
        else
        {
            employee sn = new employee();
            sn.msg = "Not Found";
            details.Add(sn);
        }
        return details.ToArray();
    }


    public Employee[] saveForm(string formname, string model)
    {

        DateTime date = DateTime.Now;

        List<Employee> details = new List<Employee>();
        Employee retval = new Employee();
        if (qryCls.checkDuplicatesformname(formname) == false)
        {
            if (qryCls.Inserform(formname, model) == true)
            {
                retval.msg = "Saved";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }
        else
        {
            retval.msg = "Exist";
            details.Add(retval);
        }

        return details.ToArray();
    }

    public RoleSave[] updateRole(string roleid, string rolename, string formname)
    {

        DateTime date = DateTime.Now;

        List<RoleSave> details = new List<RoleSave>();
        RoleSave retval = new RoleSave();
        if (qryCls.checkDuplicatesRolenameid(roleid, rolename) == false)
        {
            if (qryCls.updRole(roleid, rolename, formname) == true)
            {
                retval.msg = "Saved";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }
        else
        {
            retval.msg = "Exist";
            details.Add(retval);
        }

        return details.ToArray();
    }

    public RoleSave[] deleteRole(string roleid)
    {

        DateTime date = DateTime.Now;

        List<RoleSave> details = new List<RoleSave>();
        RoleSave retval = new RoleSave();

        string query = "select * from web_tp_login where role_id='" + roleid + "' and del_flag=0";
        DataTable dt1 = cls1.fillDataTable(query);
        if (dt1.Rows.Count == 0)
        {

            if (qryCls.delRole(roleid) == true)
            {
                retval.msg = "Saved";
                details.Add(retval);
            }
            else
            {
                retval.msg = "No Data Saved";
                details.Add(retval);
            }
        }
        else
        {
            retval.msg = "stored";
            details.Add(retval);
        }

        return details.ToArray();
    }
    public Employee[] deleteForm(string id)
    {
        string qry = "";
        bool str_flag;
        List<Employee> details = new List<Employee>();
        Employee retval = new Employee();
        string query = "select * from ( select  t.emp_id,s.Item from    web_tp_login t cross apply dbo.SplitString(t.col2, ',') s ) access  where Item in ( select Form_Name from Register_Form where Sr_no='" + id + "' ) ";
        DataTable dt1 = cls1.fillDataTable(query);
        if (dt1.Rows.Count == 0)
        {
            qry = "delete FROM Register_Form where Sr_no='" + id + "'";
            str_flag = cls1.DMLqueries(qry);

            if (str_flag == true)
            {
                retval.msg = "deleted";
                details.Add(retval);
            }
            else
            {
                retval.msg = "Cannot";
                details.Add(retval);
            }

        }
        else
        {
            retval.msg = "stored";
            details.Add(retval);
        }
        return details.ToArray();
    }

    //roll no new
    public List<ListItem> fillstream(string grpIDs)
    {
        string finalGrp = qryCls.splitGrp(grpIDs);

        String qry = "select * from dbo.m_crs_faculty where faculty_id in (select faculty_id from m_crs_course_tbl where course_id in (select course_id from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + "))))";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["faculty_id"].ToString(),
                            Text = sdr["faculty_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillcourse(string grpIDs, string facultyID)
    {
        string finalGrp = qryCls.splitGrp(grpIDs);
        String qry = "select * from m_crs_course_tbl where course_id in (select course_id from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + ") and faculty_id='" + facultyID + "' ))";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["course_id"].ToString(),
                            Text = sdr["course_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillsubcourse(string grpIDs, string courseID)
    {
        string finalGrp = qryCls.splitGrp(grpIDs);
        String qry = "select * from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + ") and course_id='" + courseID + "')";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString(),
                            Text = sdr["subcourse_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillgroup(string grpIDs, string subcrs_id)
    {
        string finalGrp = qryCls.splitGrp(grpIDs);
        String qry = "select * from m_crs_subjectgroup_tbl where Group_id in(" + finalGrp + ") and subcourse_id='" + subcrs_id + "'";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Group_id"].ToString(),
                            Text = sdr["Group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public roll_col[] getdata(string year, string grp_title, string flag)
    {
        string qry = "";
        if (flag == "true")
        {
            qry = "SELECT distinct p.stud_id , isnull(stud_L_Name,'') + ' ' + isnull(stud_F_Name,'') + ' ' + isnull(stud_M_Name ,'')+' '+isnull(stud_Mother_FName ,'') as StudentName, (case when roll_no like '%[A-Z]%' then "
           + " LEFT(roll_no ,PATINDEX('%[0-9]%',roll_no )-1) else '' end),p.stud_PermanentPhone,p.stud_Email,substring(s.ID_No,0,17) as ID,(select top(1) Univ_Enrol_no from OLA_FY_adm_CourseSelection where stud_id=p.stud_id and group_id=g.Group_id and del_flag=0) as"
  + " univ_no,(select top(1) Exact_percentage from m_std_pervrecord_tbl where exam like 'H.S.C%' and stud_id=p.stud_id ) as hsc_percent ,"

+ " (select sum(cast(Amount as float)) from m_FeeEntry where Stud_id=p.stud_id and ayid='" + year + "'  and Chq_status='Clear') as paid,"

+ " ((select sum(cast(Amount as float)) from m_FeeMaster where group_id='" + grp_title + "' and Ayid='" + year + "') - (select sum(cast(Amount as float)) from m_FeeEntry where Stud_id=p.stud_id and ayid='" + year + "'  and Chq_status='Clear')) as bal,"
           + " CONVERT(INT,SUBSTRING(roll_no ,PATINDEX('%[0-9]%',roll_no ),"
   + " LEN(roll_no ))) as [Roll_No],case when stud_gender=0 then 'Female' else 'Male' end as Gender , stud_Category  as [Category] ,Group_title,univ_appl_no FROM dbo.m_std_studentacademic_tbl as s RIGHT "
  + " JOIN dbo.m_crs_subjectgroup_tbl  as g ON s.group_id = g.Group_id right join dbo.m_std_personaldetails_tbl as p on p.stud_id = s.stud_id where s.ayid ='" + year + "'and "
   + " g.group_id ='" + grp_title + "'and s.del_flag=0  ORDER BY (case when roll_no like '%[A-Z]%' then LEFT(roll_no ,PATINDEX('%[0-9]%',roll_no )-1) else '' end), "
          + " CONVERT(INT,SUBSTRING(roll_no ,PATINDEX('%[0-9]%',roll_no ),LEN(roll_no )))";

        }
        else
        {
            qry = "SELECT distinct p.stud_id , isnull(stud_L_Name,'') + ' ' + isnull(stud_F_Name,'') + ' ' + isnull(stud_M_Name ,'') as StudentName, (case when roll_no like '%[A-Z]%' then "
           + " LEFT(roll_no ,PATINDEX('%[0-9]%',roll_no )-1) else '' end),p.stud_PermanentPhone,p.stud_Email,substring(s.ID_No,0,17) as ID,(select top(1) Univ_Enrol_no from OLA_FY_adm_CourseSelection where stud_id=p.stud_id and group_id=g.Group_id and del_flag=0) as"
  + " univ_no,(select top(1) Exact_percentage from m_std_pervrecord_tbl where exam like 'H.S.C%' and stud_id=p.stud_id ) as hsc_percent ,"

+ " (select sum(cast(Amount as float)) from m_FeeEntry where Stud_id=p.stud_id and ayid='" + year + "'  and Chq_status='Clear') as paid,"

+ " ((select sum(cast(Amount as float)) from m_FeeMaster where group_id='" + grp_title + "' and Ayid='" + year + "') - (select sum(cast(Amount as float)) from m_FeeEntry where Stud_id=p.stud_id and ayid='" + year + "' and Chq_status='Clear')) as bal,"
           + " CONVERT(INT,SUBSTRING(roll_no ,PATINDEX('%[0-9]%',roll_no ),"
   + " LEN(roll_no ))) as [Roll_No],case when stud_gender=0 then 'Female' else 'Male' end as Gender , stud_Category  as [Category] ,Group_title,univ_appl_no FROM dbo.m_std_studentacademic_tbl as s RIGHT "
  + " JOIN dbo.m_crs_subjectgroup_tbl  as g ON s.group_id = g.Group_id right join dbo.m_std_personaldetails_tbl as p on p.stud_id = s.stud_id where s.ayid ='" + year + "'and "
   + " g.group_id ='" + grp_title + "'and s.del_flag=0  ORDER BY (case when roll_no like '%[A-Z]%' then LEFT(roll_no ,PATINDEX('%[0-9]%',roll_no )-1) else '' end), "
          + " CONVERT(INT,SUBSTRING(roll_no ,PATINDEX('%[0-9]%',roll_no ),LEN(roll_no )))";

        }

        DataTable dtcls = cls1.fillDataTable(qry);
        List<roll_col> details = new List<roll_col>();
        if (dtcls.Rows.Count > 0)
        {
            foreach (DataRow drrow in dtcls.Rows)
            {
                roll_col mcls = new roll_col();
                mcls.id = drrow["stud_id"].ToString();
                mcls.name = drrow["StudentName"].ToString();
                mcls.univ_no = drrow["univ_no"].ToString();
                mcls.roll_no = drrow["Roll_no"].ToString();
                mcls.amt_paid = drrow["paid"].ToString();
                mcls.bal_amt = drrow["bal"].ToString();
                mcls.gender = drrow["Gender"].ToString();
                mcls.appli_no = drrow["univ_appl_no"].ToString();
                mcls.phone_no = drrow["stud_PermanentPhone"].ToString();
                mcls.prn = drrow["ID"].ToString();
                mcls.std_email = drrow["stud_Email"].ToString();

                mcls.category = drrow["Category"].ToString();
                mcls.hsc_per = drrow["hsc_percent"].ToString();

                mcls.msg = "";
                details.Add(mcls);
            }
        }
        else
        {
            roll_col mcls = new roll_col();
            mcls.msg = "No Data Found";
            details.Add(mcls);
        }
        return details.ToArray();

    }

    public Employee[] del_ins(string id, string reason)
    {
        string qry = "";

        List<Employee> details = new List<Employee>();
        Employee retval = new Employee();

        qry = "update  EmployeePersonal set del_flag=1 where emp_id='" + id + "';update web_tp_login set del_flag=1 where emp_id='" + id + "';update EmployeePersonal set del_reason='" + reason + "' where emp_id='" + id + "'";
        bool str_flag = cls1.DMLqueries(qry);


        if (str_flag == true)
        {
            retval.msg = "deleted";
            details.Add(retval);
        }
        else
        {
            retval.msg = "Cannot";
            details.Add(retval);
        }
        return details.ToArray();
    }


    public castewise_rpt[] filltable(string ayid)
    {
        List<castewise_rpt> details = new List<castewise_rpt>();
        string str = "";

        str = "SELECT subcourse_id FROM m_crs_subcourse_tbl ";




        //qry without it filteration
        //string str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 ";

        //    select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='"+seme+"' and group_id='"+group+"'";

        DataSet dtcls = cls1.fillDataset(str);


        string subcourselist = "";

        if (dtcls.Tables[0].Rows.Count > 0)
        {

            for (int i = 0; i < dtcls.Tables[0].Rows.Count; i++)
            {
                if (subcourselist == "")
                {
                    subcourselist = dtcls.Tables[0].Rows[i]["subcourse_id"].ToString() + ",";
                }
                else
                {
                    subcourselist = subcourselist + dtcls.Tables[0].Rows[i]["subcourse_id"].ToString() + ",";
                }

            }
        }

        string[] subc = subcourselist.Split(',');

        for (int j = 0; j < subc.Length; j++)
        {
            string subcourse = subc[j].ToString();
            //string str = "";
            int txt_amt;
            str = "SELECT subcourse_name FROM m_crs_subcourse_tbl WHERE subcourse_id='" + subcourse + "'";
            DataSet dtsubcourename = cls1.fillDataset(str);
            if (dtsubcourename.Tables[0].Rows.Count > 0)
            {
                if (dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().StartsWith("S"))
                {
                    txt_amt = 2690;
                }
                //subcourse 
                else if (dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().StartsWith("T"))
                {
                    txt_amt = 2965;
                }
                else if (dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().StartsWith("M") && dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().Contains("Part I"))
                {
                    txt_amt = 3690;
                }
                else if (dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().StartsWith("M") && (dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().Contains("Part II") || dtsubcourename.Tables[0].Rows[0]["subcourse_name"].ToString().Contains("II")))
                {
                    txt_amt = 3690;
                }
                else
                {
                    txt_amt = 2690;
                }
                if (ayid != "" && subcourse != "")
                {
                    str = "select distinct subcourse_name,(select distinct  CASE (cast(Amount as float)) WHEN '' THEN 0   else (cast(Amount as float))  END   from m_FeeMaster where group_id in (select Group_id from m_crs_subjectgroup_tbl where Subcourse_id='" + subcourse + "') and Ayid='" + ayid + "' and del_flag=0 and group_id in (select group_id from m_std_studentacademic_tbl where ayid='AYD0020' and del_flag=0)) as fees, " +
        " (select CASE count(stud_id)  WHEN '' THEN 0 else count(stud_id) END AS total_addmission   from m_std_studentacademic_tbl where ayid='" + ayid + "' and subcourse_id='" + subcourse + "' and del_flag=0 ) as total_addmission , " +

        " (select CASE count(a.stud_id)   WHEN '' THEN 0  else count(a.stud_id)  END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c" +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%SC%' and stud_Gender=0   and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and  c.Amount=" + txt_amt + ") as [sc], " +
         " (select CASE count(a.stud_id)   WHEN '' THEN 0  else count(a.stud_id)  END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%SC%' and stud_Gender=1  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as [sc2], " +

         " (select CASE count(a.stud_id)  WHEN '' THEN 0 else count(a.stud_id) END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%St%' and stud_Gender=0   and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and  c.Amount=" + txt_amt + " ) as st, " +
         " (select CASE count(a.stud_id) WHEN '' THEN 0 else count(a.stud_id) END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%St%' and stud_Gender=1  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as st2, " +

          " (select CASE count(a.stud_id)  WHEN '' THEN 0 else count(a.stud_id) END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%dt%' and stud_Gender=0  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as dt, " +
        " (select CASE count(a.stud_id)  WHEN '' THEN 0  else count(a.stud_id) END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%dt%' and stud_Gender=1  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as dt2, " +

         "(select CASE count(a.stud_id)  WHEN '' THEN 0 else count(a.stud_id) END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%nt%' and stud_Gender=0  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as nt, " +
         " (select CASE count(a.stud_id)  WHEN '' THEN 0  else count(a.stud_id) END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%nt%' and stud_Gender=1  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as nt2, " +

         " (select CASE count(a.stud_id) WHEN '' THEN 0  else count(a.stud_id)   END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%obc%' and stud_Gender=0  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as obc, " +
         " (select CASE count(a.stud_id)  WHEN '' THEN 0  else count(a.stud_id)   END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%obc%' and stud_Gender=1  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as obc2, " +

         " (select CASE count(a.stud_id)    WHEN '' THEN 0  else count(a.stud_id)  END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%sbc%' and stud_Gender=0   and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as sbc, " +
         " (select CASE count(a.stud_id)   WHEN '' THEN 0  else count(a.stud_id)  END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0 and a.stud_Category like '%sbc%' and stud_Gender=1  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as sbc2, " +

          " (select CASE count(a.stud_id)    WHEN '' THEN 0   else count(a.stud_id)   END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0  and stud_Gender=0 and (a.stud_Category like '%sc%' or a.stud_Category like '%st%' or a.stud_Category like '%dt%' or a.stud_Category like '%nt%' or a.stud_Category like '%obc%' or a.stud_Category like '%sbc%')  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as girls, " +
         " (select CASE count(a.stud_id)    WHEN '' THEN 0     else count(a.stud_id)    END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c " +
         " where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0  and stud_Gender=1 and (a.stud_Category like '%sc%' or a.stud_Category like '%st%' or a.stud_Category like '%dt%' or a.stud_Category like '%nt%' or a.stud_Category like '%obc%' or a.stud_Category like '%sbc%') and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as boys, " +

          " (select CASE count(a.stud_id)    WHEN '' THEN 0   else count(a.stud_id)   END as stud_id from m_std_personaldetails_tbl a, m_std_studentacademic_tbl b ,m_FeeEntry c where a.stud_id=b.stud_id and b.ayid='" + ayid + "' and b.subcourse_id='" + subcourse + "' and b.del_flag=0  and (a.stud_Category like '%sc%' or a.stud_Category like '%st%' or a.stud_Category like '%dt%' or a.stud_Category like '%nt%' or a.stud_Category like '%obc%' or a.stud_Category like '%sbc%')  and a.stud_id=c.Stud_id   " +
          " and b.ayid=c.Ayid and   c.Amount=" + txt_amt + " ) as Total " +



    //    " ,(select sum(c.Amount) from  m_std_personaldetails_tbl a,m_std_studentacademic_tbl b,m_FeeEntry c  where c.stud_id=b.stud_id and c.ayid='" + ayid + "' and " +
                        //    "  b.subcourse_id='" + subcourse + "' and b.del_flag=0 and b.del_flag=c.del_flag and  c.Ayid=b.ayid   and b.stud_id=c.stud_id and (a.stud_Category like '%sc%' or a.stud_Category like '%st%' or a.stud_Category like '%dt%' " +
                        //"  or a.stud_Category like '%nt%' or a.stud_Category like '%obc%' or a.stud_Category like '%sbc%') and a.stud_id=c.Stud_id   " +
                        //      " and b.ayid=c.Ayid and   c.Amount=2690  ) as Gross " +

        " from m_crs_subcourse_tbl a,m_FeeMaster b where a.Subcourse_id='" + subcourse + "'";
                }
                else
                {

                }

                //qry without it filteration
                //string str = "select Rate,Description,status from Rate_tbl where Ayid='" + ayid + "';select '--select--' as subject_name,'--select--' as subject_id union all  select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='" + seme + "' and group_id like '%" + group + "%' and del_flag=0 ";

                //    select subject_name,subject_id from cre_subject where branch_id='" + branch + "' and sem_id='"+seme+"' and group_id='"+group+"'";

                DataSet dtclst = cls1.fillDataset(str);



                string course = "", fees = "", totaladmission = "", scg = "", scb = "", stg = "", stb = "", dtg = "", dtb = "", ntg = "", ntb = "", obcg = "", obcb = "", sbcg = "", sbcb = "", tg = "", tb = "", total = "", grossfees = "";

                if (dtcls.Tables[0].Rows.Count > 0)
                {
                    castewise_rpt castrpt = new castewise_rpt();
                    for (int i = 0; i < dtclst.Tables[0].Rows.Count; i++)
                    {

                        course = dtclst.Tables[0].Rows[i]["subcourse_name"].ToString();

                        totaladmission = dtclst.Tables[0].Rows[i]["total_addmission"].ToString();

                        fees = dtclst.Tables[0].Rows[i]["fees"].ToString();

                        scg = dtclst.Tables[0].Rows[i]["sc"].ToString();

                        scb = dtclst.Tables[0].Rows[i]["sc2"].ToString();

                        stg = dtclst.Tables[0].Rows[i]["st"].ToString();

                        stb = dtclst.Tables[0].Rows[i]["st2"].ToString();

                        dtg = dtclst.Tables[0].Rows[i]["dt"].ToString();

                        dtb = dtclst.Tables[0].Rows[i]["dt2"].ToString();

                        ntg = dtclst.Tables[0].Rows[i]["nt"].ToString();

                        ntb = dtclst.Tables[0].Rows[i]["nt2"].ToString();

                        obcg = dtclst.Tables[0].Rows[i]["obc"].ToString();

                        obcb = dtclst.Tables[0].Rows[i]["obc2"].ToString();

                        sbcg = dtclst.Tables[0].Rows[i]["sbc"].ToString();

                        sbcb = dtclst.Tables[0].Rows[i]["sbc2"].ToString();

                        tg = dtclst.Tables[0].Rows[i]["girls"].ToString();

                        tb = dtclst.Tables[0].Rows[i]["boys"].ToString();

                        total = dtclst.Tables[0].Rows[i]["Total"].ToString();

                        //grossfees = dtclst.Tables[0].Rows[i]["Gross"].ToString();

                    }
                    string[] courselist = course.Split(',');
                    string[] totadmisslist = totaladmission.Split(',');
                    string[] feeslist = fees.Split(',');
                    string[] scglist = scg.Split(',');
                    string[] scblist = scb.Split(',');
                    string[] stglist = stg.Split(',');
                    string[] stblist = stb.Split(',');
                    string[] dtglist = dtg.Split(',');
                    string[] dtblist = dtb.Split(',');
                    string[] ntglist = ntg.Split(',');
                    string[] ntblist = ntb.Split(',');
                    string[] obcglist = obcg.Split(',');
                    string[] obcblist = obcb.Split(',');
                    string[] sbcglist = sbcg.Split(',');
                    string[] sbcblist = sbcb.Split(',');
                    string[] tglist = tg.Split(',');
                    string[] tblist = tb.Split(',');
                    string[] totallist = total.Split(',');
                    //string[] grosslist = grossfees.Split(',');

                    for (int i = 0; i < courselist.Length; i++)
                    {
                        castrpt.course = courselist[0].Trim();
                        castrpt.totaladmission = totadmisslist[0].Trim();
                        castrpt.fees = feeslist[0].Trim();
                        castrpt.scg = scglist[0].Trim();
                        castrpt.scb = scblist[0].Trim();
                        castrpt.stg = stglist[0].Trim();
                        castrpt.stb = stblist[0].Trim();
                        castrpt.dtg = dtglist[0].Trim();
                        castrpt.dtb = dtblist[0].Trim();
                        castrpt.ntg = ntglist[0].Trim();
                        castrpt.ntb = ntblist[0].Trim();
                        castrpt.obcg = obcglist[0].Trim();
                        castrpt.obcb = obcblist[0].Trim();
                        castrpt.sbcg = sbcglist[0].Trim();
                        castrpt.sbcb = sbcblist[0].Trim();
                        castrpt.tg = tglist[0].Trim();
                        castrpt.tb = tblist[0].Trim();
                        castrpt.total = totallist[0].Trim();
                        //castrpt.grossfees = grosslist[0].Trim();
                        details.Add(castrpt);
                    }
                }
            }
            else
            {
                continue;
            }
        }
        return details.ToArray();
    }
    /// <summary>
    /// Inventory Web Methods
    /// </summary>
    /// <param name="qry"></param>
    /// <returns></returns>
    // store_master

    public storemaster[] checkdata(string qry)
    {

        List<storemaster> details = new List<storemaster>();
        storemaster stor = new storemaster();

        DataSet ds = cls1.fill_dataset(qry);
        if (ds.Tables[0].Rows.Count > 0)
        {
            stor.deptreturn = "ok";
            details.Add(stor);
        }
        else
        {
            stor.deptreturn = "cancel";
            details.Add(stor);
        }
        return details.ToArray();
    }

    public storemaster[] updatedata(string qry)
    {
        List<storemaster> details = new List<storemaster>();
        storemaster stor = new storemaster();
        if (cls1.DMLqueries(qry) == true)
        {
            stor.deptreturn = "ok";
            details.Add(stor);
        }
        else
        {
            stor.deptreturn = "cancel";
            details.Add(stor);
        }
        return details.ToArray();
    }

    public storemaster[] deletedata(string qry)
    {
        List<storemaster> details = new List<storemaster>();
        storemaster stor = new storemaster();
        if (cls1.DMLqueries(qry) == true)
        {
            stor.deptreturn = "ok";
            details.Add(stor);
        }
        else
        {
            stor.deptreturn = "cancel";
            details.Add(stor);
        }
        return details.ToArray();
    }

    //dept master

    public storemaster[] dep_id()
    {
        List<storemaster> details = new List<storemaster>();
        try
        {
            string qry = "";


            storemaster stor = new storemaster();

            qry = "select max(id) as id from store_dept_master ";
            DataTable ds = cls1.fillDataTable(qry);

            if (ds.Rows.Count > 0 && ds.Rows[0]["id"].ToString() != "")
            {
                stor.dept_id = Convert.ToInt32(ds.Rows[0]["id"].ToString()) + 1;
                details.Add(stor);
            }
            else
            {
                stor.dept_id = 1;
                details.Add(stor);
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public storemaster[] dep_grd()
    {
        List<storemaster> details = new List<storemaster>();
        try
        {
            string qry = "";




            qry = "select *  from store_dept_master where del_flag=0 order by id";
            DataTable ds = cls1.fillDataTable(qry);

            if (ds.Rows.Count > 0)
            {

                foreach (DataRow dr in ds.Rows)
                {
                    storemaster stor = new storemaster();
                    stor.dept_id = Convert.ToInt32(dr["id"].ToString());
                    stor.dept_name = dr["dept_name"].ToString();

                    details.Add(stor);
                }


            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    /// vendor_master

    public storemaster[] vendor_id()
    {
        List<storemaster> details = new List<storemaster>();
        try
        {
            string qry = "";


            storemaster stor = new storemaster();

            qry = "select max(vendor_id) as vendor_id from store_vendor_master ";
            DataTable ds = cls1.fillDataTable(qry);

            if (ds.Rows.Count > 0 && ds.Rows[0]["vendor_id"].ToString() != "")
            {
                stor.vendor_id = Convert.ToInt32(ds.Rows[0]["vendor_id"].ToString()) + 1;
                details.Add(stor);
            }
            else
            {
                stor.vendor_id = 1;
                details.Add(stor);
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public storemaster[] vendor_grd()
    {
        List<storemaster> details = new List<storemaster>();
        try
        {
            string qry = "";




            qry = "select *  from store_vendor_master where del_flag=0 order by vendor_id ";
            DataTable ds = cls1.fillDataTable(qry);

            if (ds.Rows.Count > 0)
            {

                foreach (DataRow dr in ds.Rows)
                {
                    storemaster stor = new storemaster();
                    stor.vendor_id = Convert.ToInt32(dr["vendor_id"].ToString());
                    stor.vendor_name = dr["vendor_name"].ToString();
                    stor.vendor_mobileno = dr["vendor_mobno"].ToString();
                    stor.vendor_emailid = dr["vendor_emailid"].ToString();
                    stor.vendor_location = dr["vendor_location"].ToString();
                    if (Convert.ToBoolean(dr["vendor_inuse"].ToString()) == true)
                    {
                        stor.vendor_inuse = "Yes";
                    }
                    else
                    {
                        stor.vendor_inuse = "No";
                    }

                    stor.vendor_address = dr["vendor_address"].ToString();
                    details.Add(stor);
                }


            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }



    // material master
    public storemaster[] mat_id()
    {
        List<storemaster> details = new List<storemaster>();
        try
        {
            string qry = "";


            storemaster stor = new storemaster();

            qry = "select max(cast( RIGHT(matr_id, LEN(matr_id) - 1) as int)) +1 as matr_id from store_material_master";
            DataTable ds = cls1.fillDataTable(qry);

            if (ds.Rows.Count > 0 && ds.Rows[0]["matr_id"].ToString() != "")
            {
                stor.mat_id = "M" + Convert.ToInt16(ds.Rows[0]["matr_id"].ToString());
                details.Add(stor);
            }
            else
            {
                stor.mat_id = "M1";
                details.Add(stor);
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public storemaster[] mat_grd()
    {
        List<storemaster> details = new List<storemaster>();
        try
        {
            string qry = "";

            qry = "select *  from store_material_master where del_flag=0 order by matr_id";
            DataTable ds = cls1.fillDataTable(qry);

            if (ds.Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Rows)
                {
                    storemaster stor = new storemaster();
                    stor.mat_id = dr["matr_id"].ToString();
                    stor.mat_name = dr["material_name"].ToString();
                    stor.mat_rackno = dr["rack_no"].ToString();

                    details.Add(stor);
                }
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    //inventory rohit--------------------------------------------------------
    public material_mast[] get_mtr_data(string mtr_year, string mtr_month)
    {
        List<material_mast> details = new List<material_mast>();
        try
        {
            string qry = "";
            qry = "select convert(varchar(11),purch_dt,103) as purch_dt1,convert(varchar(11),prn_no_dt,103) as bill_dt,convert(varchar(11),pay_dt,103) as pay_dt1,* from store_matr_entry where entr_year='" + mtr_year + "' and entr_mnth='" + mtr_month + "' and del_flag=0 ; select * from store_material_master where del_flag=0 ; select * from store_vendor_master where del_flag=0";
            string matrr = "", matrr_id = "", vendor = "", vndr_id = "";
            DataSet ds = cls.fillDataset(qry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drrow in ds.Tables[0].Rows)
                {
                    matrr = ""; matrr_id = ""; vendor = ""; vndr_id = "";
                    material_mast mtr = new material_mast();
                    mtr.id = drrow["ID_new"].ToString();
                    mtr.matr_name = drrow["matr_name"].ToString();
                    mtr.vendor_name = drrow["vendor_name"].ToString();
                    mtr.tot_rate = drrow["rate"].ToString();
                    mtr.brand = drrow["brand_name"].ToString();
                    mtr.bill_no = drrow["bill_no"].ToString();
                    mtr.discount = drrow["discount"].ToString();
                    mtr.final_rate = drrow["final_rate"].ToString();
                    mtr.dept_appl = drrow["dept_appl_no"].ToString();
                    mtr.purch_order_dt = drrow["purch_dt1"].ToString();
                    mtr.qty_order = drrow["qty_ordered"].ToString();
                    mtr.qty_rcvd = drrow["qty_recvd"].ToString();
                    mtr.challan_no = drrow["challan_no"].ToString();
                    mtr.bill_no_dt = drrow["bill_dt"].ToString();
                    mtr.pay_mode = drrow["pay_mode"].ToString();
                    mtr.pay_dt = drrow["pay_dt1"].ToString();

                    mtr.msg = "";
                    if (ds.Tables[1].Rows.Count > 0)
                    {

                        for (int j = 0; j < ds.Tables[1].Rows.Count; j++)
                        {
                            matrr = matrr + ds.Tables[1].Rows[j]["material_name"].ToString() + ",";
                            matrr_id = matrr_id + ds.Tables[1].Rows[j]["matr_id"].ToString() + ",";
                        }
                        mtr.matr_id2 = matrr_id.TrimEnd(',');
                        mtr.matr_name2 = matrr.TrimEnd(',');
                        //  details.Add(mtr);
                    }
                    if (ds.Tables[2].Rows.Count > 0)
                    {

                        for (int k = 0; k < ds.Tables[2].Rows.Count; k++)
                        {
                            vendor = vendor + ds.Tables[2].Rows[k]["vendor_name"].ToString() + ",";
                            vndr_id = vndr_id + ds.Tables[2].Rows[k]["vendor_id"].ToString() + ",";
                        }
                        mtr.vendor_idd2 = vndr_id.TrimEnd(',');
                        mtr.vendor_name2 = vendor.TrimEnd(',');
                        //  details.Add(mtr);
                    }
                    details.Add(mtr);
                }

            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public stationary_master_entry[] get_str_data(string mtr_year, string mtr_month)
    {
        List<stationary_master_entry> details = new List<stationary_master_entry>();
        List<materials_vendors> details2 = new List<materials_vendors>();
        try
        {
            string qry = "";
            qry = "select convert(varchar(11),issue_dt,103) as issue_dt1,* from store_stationary_mast where mtr_year='" + mtr_year + "' and mtr_month='" + mtr_month + "' and del_flag=0 ; select * from store_material_master where del_flag=0 ; select * from store_vendor_master where del_flag=0;select * from store_dept_master where del_flag=0";
            string matrr = "", matrr_id = "", dpt_id = "", dpt_name = "";
            DataSet ds = cls.fillDataset(qry);

            if (ds.Tables[0].Rows.Count > 0)
            {

                foreach (DataRow drrow in ds.Tables[0].Rows)
                {
                    matrr = ""; matrr_id = ""; dpt_id = ""; dpt_name = "";
                    stationary_master_entry mtr = new stationary_master_entry();
                    mtr.id = drrow["ID_new"].ToString();
                    mtr.part_name = drrow["mater_name"].ToString().Trim();
                    mtr.issue_dt = drrow["issue_dt1"].ToString();
                    mtr.dpt_name = drrow["dprt_name"].ToString();
                    mtr.regis_no = drrow["regis_no"].ToString();
                    mtr.rcvd_qty = drrow["rcvd_qty"].ToString();
                    mtr.tot_qty = drrow["tot_qty"].ToString();
                    mtr.issue_qty = drrow["issued_qty"].ToString();
                    mtr.mnth_on = drrow["mnth_on"].ToString();
                    mtr.mnth_closing = drrow["mnth_close"].ToString();
                    mtr.msg = "";
                    if (ds.Tables[1].Rows.Count > 0)
                    {

                        for (int j = 0; j < ds.Tables[1].Rows.Count; j++)
                        {
                            matrr = matrr + ds.Tables[1].Rows[j]["material_name"].ToString() + ",";
                            matrr_id = matrr_id + ds.Tables[1].Rows[j]["matr_id"].ToString() + ",";
                        }
                        mtr.matr_id = matrr_id.TrimEnd(',');
                        mtr.matr_name = matrr.TrimEnd(',');
                        //  details.Add(mtr);
                    }

                    if (ds.Tables[3].Rows.Count > 0)
                    {

                        for (int d = 0; d < ds.Tables[3].Rows.Count; d++)
                        {
                            dpt_name = dpt_name + ds.Tables[3].Rows[d]["dept_name"].ToString() + ",";
                            dpt_id = dpt_id + ds.Tables[3].Rows[d]["id"].ToString() + ",";
                        }
                        mtr.dept_idd = dpt_id.TrimEnd(',');
                        mtr.depart_name = dpt_name.TrimEnd(',');
                        //  details.Add(mtr);
                    }

                    details.Add(mtr);
                }
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public materials_vendors[] fill_materials_vendors()
    {
        List<materials_vendors> details = new List<materials_vendors>();
        try
        {
            string str = "select '--Select--' as matr_id,'--Select--' as material_name union all select matr_id,material_name from store_material_master where del_flag=0;select * from store_vendor_master where del_flag=0;select * from store_dept_master where del_flag=0";
            DataSet dtcls = cls1.fillDataset(str);

            string matrr = "", matrr_id = "", vendor = "", vndr_id = "", depart_name = "", dept_id = "";
            if (dtcls.Tables[0].Rows.Count > 0)
            {
                materials_vendors mcls = new materials_vendors();

                for (int j = 0; j < dtcls.Tables[0].Rows.Count; j++)
                {
                    matrr = matrr + dtcls.Tables[0].Rows[j]["material_name"].ToString() + ",";
                    matrr_id = matrr_id + dtcls.Tables[0].Rows[j]["matr_id"].ToString() + ",";
                }

                mcls.matr_id = matrr_id.TrimEnd(',');
                mcls.matr_name = matrr.TrimEnd(',');

                details.Add(mcls);
            }
            if (dtcls.Tables[1].Rows.Count > 0)
            {
                materials_vendors mcls = new materials_vendors();
                for (int j = 0; j < dtcls.Tables[1].Rows.Count; j++)
                {
                    vendor = vendor + dtcls.Tables[1].Rows[j]["vendor_name"].ToString() + ",";
                    vndr_id = vndr_id + dtcls.Tables[1].Rows[j]["vendor_id"].ToString() + ",";
                }

                mcls.vendor_idd = vndr_id.TrimEnd(',');
                mcls.vendor_name = vendor.TrimEnd(',');

                details.Add(mcls);
            }
            if (dtcls.Tables[2].Rows.Count > 0)
            {
                materials_vendors mcls = new materials_vendors();
                for (int j = 0; j < dtcls.Tables[2].Rows.Count; j++)
                {
                    depart_name = depart_name + dtcls.Tables[2].Rows[j]["dept_name"].ToString() + ",";
                    dept_id = dept_id + dtcls.Tables[2].Rows[j]["id"].ToString() + ",";
                }

                mcls.dept_idd = dept_id.TrimEnd(',');
                mcls.depart_name = depart_name.TrimEnd(',');

                details.Add(mcls);
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public stationary_master_entry[] get_stationary_data(string mtr_year, string mtr_month)
    {
        List<stationary_master_entry> details = new List<stationary_master_entry>();
        try
        {
            string qry = "select (select material_name from store_material_master where matr_id=mater_name) as matrial_name,(select dept_name from store_dept_master where cast(id as varchar)=a.dprt_name) as dprt_name,convert(varchar(11),issue_dt,103) as issu_date,regis_no,tot_qty,rcvd_qty,issued_qty,mnth_close"
+ " from store_stationary_mast a where mtr_month='" + mtr_month + "' and mtr_year='" + mtr_year + "' and del_flag=0";

            DataSet ds = cls.fillDataset(qry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drrow in ds.Tables[0].Rows)
                {
                    stationary_master_entry mtr = new stationary_master_entry();
                    mtr.part_name = drrow["matrial_name"].ToString().Trim();
                    mtr.issue_dt = drrow["issu_date"].ToString();
                    mtr.dpt_name = drrow["dprt_name"].ToString();
                    mtr.regis_no = drrow["regis_no"].ToString();
                    mtr.rcvd_qty = drrow["rcvd_qty"].ToString();
                    mtr.tot_qty = drrow["tot_qty"].ToString();
                    mtr.issue_qty = drrow["issued_qty"].ToString();
                    mtr.mnth_closing = drrow["mnth_close"].ToString();
                    mtr.msg = "";
                    details.Add(mtr);
                }
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public List<ListItem> fill_department()
    {
        String qry = "select * from store_dept_master where del_flag=0";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["id"].ToString(),
                            Text = sdr["dept_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public stationary_master_entry[] get_stationary_data_report(string date, string dprt, string chk_flag)
    {
        List<stationary_master_entry> details = new List<stationary_master_entry>();
        try
        {
            string qry = "";
            if (chk_flag == "date")
            {
                qry = " select (select material_name from store_material_master where matr_id=mater_name) as matrial_name,convert(date,issue_dt,103) as issu_date,(select dept_name from store_dept_master where cast(id as varchar)=a.dprt_name) as dprt_name,regis_no,tot_qty,rcvd_qty,issued_qty,mnth_close"
    + " from store_stationary_mast a where convert(date,issue_dt,103)=convert(date,'" + date + "',103) and del_flag=0";
            }
            if (chk_flag == "is_dpt")
            {
                qry = "select (select material_name from store_material_master where matr_id=mater_name) as matrial_name,convert(date,issue_dt,103) as issu_date,"
    + " (select dept_name from store_dept_master where cast(id as varchar)=a.dprt_name and del_flag=0) as dprt_name,regis_no,tot_qty,rcvd_qty,issued_qty,mnth_close"
    + " from store_stationary_mast a where dprt_name='" + dprt + "' and convert(date,issue_dt,103)=convert(date,'" + date + "',103) and del_flag=0";
            }
            if (chk_flag == "dpt")
            {
                qry = "select (select material_name from store_material_master where matr_id=mater_name) as matrial_name,convert(date,issue_dt,103) as issu_date,"
      + " (select dept_name from store_dept_master where cast(id as varchar)=a.dprt_name and del_flag=0) as dprt_name,regis_no,tot_qty,rcvd_qty,issued_qty,mnth_close"
     + " from store_stationary_mast a where dprt_name='" + dprt + "' and del_flag=0";
            }


            DataSet ds = cls.fillDataset(qry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drrow in ds.Tables[0].Rows)
                {
                    stationary_master_entry mtr = new stationary_master_entry();
                    mtr.part_name = drrow["matrial_name"].ToString().Trim();
                    mtr.dpt_name = drrow["dprt_name"].ToString().Trim();
                    mtr.issue_dt = drrow["issu_date"].ToString();
                    mtr.regis_no = drrow["regis_no"].ToString();
                    mtr.rcvd_qty = drrow["rcvd_qty"].ToString();
                    mtr.tot_qty = drrow["tot_qty"].ToString();
                    mtr.issue_qty = drrow["issued_qty"].ToString();
                    mtr.mnth_closing = drrow["mnth_close"].ToString();
                    mtr.msg = "";
                    details.Add(mtr);
                }
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
            throw;
        }

        return details.ToArray();
    }

    public material_mast[] get_material_data(string mtr_year, string mtr_month)
    {
        List<material_mast> details = new List<material_mast>();
        try
        {
            string qry = "select (select material_name from store_material_master where matr_id=matr_name) as matrial_name,(select vendor_name from store_vendor_master where cast(vendor_id as varchar)=a.vendor_name) as vendor_name,"
+ " rate,discount,final_rate,dept_appl_no,convert(varchar(11),purch_dt,103) as purchase_date,qty_ordered,qty_recvd,challan_no,convert(varchar(10),prn_no_dt,103) as prn_no_dt,pay_mode,convert(date,pay_dt,103) as pay_date"
+ " from store_matr_entry a where entr_year='" + mtr_year + "' and entr_mnth='" + mtr_month + "'";
            DataSet ds = cls.fillDataset(qry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drrow in ds.Tables[0].Rows)
                {
                    material_mast mtr = new material_mast();
                    mtr.matr_name = drrow["matrial_name"].ToString();
                    mtr.vendor_name = drrow["vendor_name"].ToString();
                    mtr.tot_rate = drrow["rate"].ToString();
                    mtr.discount = drrow["discount"].ToString();
                    mtr.final_rate = drrow["final_rate"].ToString();
                    mtr.dept_appl = drrow["dept_appl_no"].ToString();
                    mtr.purch_order_dt = drrow["purchase_date"].ToString();
                    mtr.qty_order = drrow["qty_ordered"].ToString();
                    mtr.qty_rcvd = drrow["qty_recvd"].ToString();
                    mtr.challan_no = drrow["challan_no"].ToString();
                    mtr.bill_no_dt = drrow["prn_no_dt"].ToString();
                    mtr.pay_mode = drrow["pay_mode"].ToString();
                    mtr.pay_dt = drrow["pay_date"].ToString();
                    mtr.msg = "";
                    details.Add(mtr);
                }
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    public stationary_master_entry[] get_mtr_qty(string mtr_name, string mtr_year)
    {
        List<stationary_master_entry> details = new List<stationary_master_entry>();
        List<materials_vendors> details2 = new List<materials_vendors>();
        try
        {
            string qry = "select distinct top(1) matr_name,qty_recvd from [store_matr_entry] where del_flag=0 and entr_year='" + mtr_year + "' and matr_name='" + mtr_name + "' and qty_recvd <> '0'";
            DataSet ds = cls.fillDataset(qry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drrow in ds.Tables[0].Rows)
                {
                    stationary_master_entry mtr = new stationary_master_entry();
                    mtr.tot_qty = drrow["qty_recvd"].ToString();
                    details.Add(mtr);
                }
            }
        }
        catch (Exception ex)
        {
            cls.err_cls(ex.ToString(), Convert.ToString(HttpContext.Current.Session["emp_id"]));
        }
        return details.ToArray();
    }

    ///---------------------------------------------------------------

    ////course master

    public course[] getcourse_mst()
    {
        string qry = "select *,case when course_pattern='0' then 'Term' else 'Semester' end as pat from m_crs_course_tbl as a,m_crs_faculty as b where a.faculty_id=b.faculty_id and a.del_flag=0 and b.del_flag=0  order by a.course_name";
        DataTable dt = cls1.fillDataTable(qry);
        List<course> details = new List<course>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                course regi = new course();
                regi.course_id = dtrow["course_id"].ToString();
                regi.fac_name = dtrow["faculty_name"].ToString();
                regi.course_name = dtrow["course_name"].ToString();
                regi.pattern = dtrow["pat"].ToString();

                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public course[] getsubcourse_mst()
    {
        string qry = "select * from m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where a.course_id=b.course_id and b.faculty_id=c.faculty_id and b.del_flag=0 and a.del_flag=0 and c.del_flag=0 order by a.subcourse_name";
        DataTable dt = cls1.fillDataTable(qry);
        List<course> details = new List<course>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                course regi = new course();
                regi.course_id = dtrow["course_id"].ToString();
                regi.fac_id = dtrow["faculty_id"].ToString();
                regi.fac_name = dtrow["faculty_name"].ToString();
                regi.course_name = dtrow["course_name"].ToString();
                regi.subcourse_id = dtrow["subcourse_id"].ToString();
                regi.subcourse_name = dtrow["subcourse_name"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public course[] getsubcourse_mstgrid(string fid, string cid, string get)
    {
        List<course> details = new List<course>();
        string qry = "";
        if (get == "subcourse")
        {
            if (cid != "" && cid != "null")
            {
                qry = "select * from m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where b.faculty_id=c.faculty_id and c.del_flag=0 and a.course_id=b.course_id and b.del_flag=0 and a.del_flag=0 and c.faculty_id='" + fid + "'  and a.course_id='" + cid + "' order by a.subcourse_name";

            }
            else if (fid != "" && fid != "null")
            {
                qry = "select * from m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where b.faculty_id=c.faculty_id and c.del_flag=0 and a.course_id=b.course_id and b.del_flag=0 and a.del_flag=0 and c.faculty_id='" + fid + "' order by a.subcourse_name ";
            }
        }
        else if (get == "group")
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where a.course_id=b.course_id and b.faculty_id=c.faculty_id and d.subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 and d.del_flag=0 and b.faculty_id='" + fid + "' and a.course_id='" + cid + "'";
        }

        if (qry != "")
        {
            DataTable dt = cls1.fillDataTable(qry);

            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dtrow in dt.Rows)
                {
                    course regi = new course();
                    if (get == "subcourse")
                    {
                        regi.course_id = dtrow["course_id"].ToString();
                        regi.fac_id = dtrow["faculty_id"].ToString();
                        regi.fac_name = dtrow["faculty_name"].ToString();
                        regi.course_name = dtrow["course_name"].ToString();
                        regi.subcourse_id = dtrow["subcourse_id"].ToString();
                        regi.subcourse_name = dtrow["subcourse_name"].ToString();
                    }
                    else if (get == "group")
                    {
                        regi.course_id = dtrow["course_id"].ToString();
                        regi.fac_id = dtrow["faculty_id"].ToString();
                        regi.fac_name = dtrow["faculty_name"].ToString();
                        regi.course_name = dtrow["course_name"].ToString();
                        regi.subcourse_id = dtrow["subcourse_id"].ToString();
                        regi.subcourse_name = dtrow["subcourse_name"].ToString();
                        regi.group_id = dtrow["group_id"].ToString();
                        regi.group_name = dtrow["group_title"].ToString();
                        // details.Add(regi);
                    }
                    details.Add(regi);
                }
                return details.ToArray();
            }
            else
            {
                return details.ToArray();
            }
        }
        else
        {
            return details.ToArray();
        }
    }
    //public course[] getgroup_mst(string facid, string cid, string sid, string sem, string pid, string ayid)
    //{
    //    string qry = "";
    //    if (pid != "")
    //    {
    //        qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' and a.subcourse_id='" + sid + "' and d.pattern='" + pid + "' ";
    //    }
    //    else if (sem != "")
    //    {
    //        qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' and a.subcourse_id='" + sid + "'  and d.sem_id='" + sem + "' ";
    //    }
    //    else if (sid != "")
    //    {
    //        qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' and a.subcourse_id='" + sid + "' ";
    //    }
    //    else if (cid != "")
    //    {
    //        qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b ,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' ";
    //    }
    //    else if (facid != "")
    //    {
    //        qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' ";
    //    }
    //    else
    //    {
    //        qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 ";
    //    }
    //    DataTable dt = cls1.fillDataTable(qry);
    //    List<course> details = new List<course>();
    //    if (dt.Rows.Count > 0)
    //    {
    //        foreach (DataRow dtrow in dt.Rows)
    //        {
    //            course regi = new course();
    //            regi.fac_id = dtrow["faculty_id"].ToString();
    //            regi.fac_name = dtrow["faculty_name"].ToString();
    //            regi.course_id = dtrow["course_id"].ToString();
    //            //regi.fac_id = dtrow["pattern"].ToString();
    //            //regi.fac_name = dtrow["sem_id"].ToString();
    //            regi.adm_flg = dtrow["Admission_flag"].ToString();
    //            regi.course_type = dtrow["Course_type"].ToString();
    //            regi.course_name = dtrow["course_name"].ToString();
    //            regi.subcourse_id = dtrow["subcourse_id"].ToString();
    //            regi.subcourse_name = dtrow["subcourse_name"].ToString();
    //            regi.group_id = dtrow["group_id"].ToString();
    //            regi.group_name = dtrow["Group_title"].ToString();
    //            regi.admission_confirm = dtrow["confirm_admission"].ToString();
    //            regi.inhouse_outside = dtrow["inhouse_outside"].ToString();
    //            details.Add(regi);
    //        }
    //        return details.ToArray();
    //    }
    //    else
    //    {
    //        return details.ToArray();
    //    }
    //}

    public course[] getgroup_mst(string facid, string cid, string sid, string sem, string pid, string ayid)
    {
        string qry = "";
        if (pid != "")
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' and a.subcourse_id='" + sid + "' and d.pattern='" + pid + "' order by a.subcourse_name ";
        }
        else if (sem != "")
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' and a.subcourse_id='" + sid + "'  and d.sem_id='" + sem + "' order by a.subcourse_name ";
        }
        else if (sid != "")
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' and a.subcourse_id='" + sid + "' order by a.subcourse_name ";
        }
        else if (cid != "")
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b ,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' and b.course_id='" + cid + "' order by a.subcourse_name ";
        }
        else if (facid != "")
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and  a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0 and c.faculty_id='" + facid + "' order by a.subcourse_name ";
        }
        else
        {
            qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where c.faculty_id=b.faculty_id and c.del_flag=0 and a.course_id=b.course_id  and d.Subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0  and d.del_flag=0  order by a.subcourse_name";
        }
        DataTable dt = cls1.fillDataTable(qry);
        List<course> details = new List<course>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                course regi = new course();
                regi.fac_id = dtrow["faculty_id"].ToString();
                regi.fac_name = dtrow["faculty_name"].ToString();
                regi.course_id = dtrow["course_id"].ToString();
                //regi.fac_id = dtrow["pattern"].ToString();
                //regi.fac_name = dtrow["sem_id"].ToString();
                regi.description = dtrow["Descritption"].ToString();
                regi.adm_flg = dtrow["Admission_flag"].ToString();
                regi.course_type = dtrow["Course_type"].ToString();
                regi.course_name = dtrow["course_name"].ToString();
                regi.subcourse_id = dtrow["subcourse_id"].ToString();
                regi.subcourse_name = dtrow["subcourse_name"].ToString();
                regi.group_id = dtrow["group_id"].ToString();
                regi.group_name = dtrow["Group_title"].ToString();
                regi.inhouse = dtrow["inhouse"].ToString();
                regi.outsider = dtrow["outsider"].ToString();
                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }
    //public course[] getgroup_mst()
    //{
    //    string qry = "select * from m_crs_subjectgroup_tbl as d,m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c where a.course_id=b.course_id and b.faculty_id=c.faculty_id and d.subcourse_id=a.subcourse_id and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 and d.del_flag=0 order by faculty_name";
    //    DataTable dt = cls1.fillDataTable(qry);
    //    List<course> details = new List<course>();
    //    if (dt.Rows.Count > 0)
    //    {
    //        foreach (DataRow dtrow in dt.Rows)
    //        {
    //            course regi = new course();
    //            regi.course_id = dtrow["course_id"].ToString();
    //            regi.fac_id = dtrow["faculty_id"].ToString();
    //            regi.fac_name = dtrow["faculty_name"].ToString();
    //            regi.course_name = dtrow["course_name"].ToString();
    //            regi.subcourse_id = dtrow["subcourse_id"].ToString();
    //            regi.subcourse_name = dtrow["subcourse_name"].ToString();
    //            regi.group_id = dtrow["group_id"].ToString();
    //            regi.group_name = dtrow["group_title"].ToString();
    //            details.Add(regi);
    //        }
    //        return details.ToArray();
    //    }
    //    else
    //    {
    //        return details.ToArray();
    //    }
    //}

    public subject[] getsubject_mst_from_crs(string subcourse_id)
    {
        string qry = "select *,case when Subject_Compulsion='0' then 'No' else 'Yes' end as Subject_Compulsion12 from m_crs_subcourse_tbl as a ,m_crs_course_tbl as b,m_crs_faculty as c,m_crs_subject_tbl as e where a.course_id=b.course_id and b.faculty_id=c.faculty_id  and e.subcourse_id=a.subcourse_id and e.subcourse_id='" + subcourse_id + "' and a.del_flag=0 and b.del_flag=0 and c.del_flag=0 and e.del_flag=0";
        DataTable dt = cls1.fillDataTable(qry);
        List<subject> details = new List<subject>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                subject regi = new subject();
                regi.course_id = dtrow["course_id"].ToString();
                regi.fac_id = dtrow["faculty_id"].ToString();
                regi.fac_name = dtrow["faculty_name"].ToString();
                regi.course_name = dtrow["course_name"].ToString();
                regi.subcourse_id = dtrow["subcourse_id"].ToString();
                regi.subcourse_name = dtrow["subcourse_name"].ToString();
                regi.semester = dtrow["Semester"].ToString();
                regi.subject_name = dtrow["Subject_Name"].ToString();
                regi.subject_id = dtrow["Subject_Id"].ToString();
                regi.is_comp = dtrow["Subject_Compulsion12"].ToString();

                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public subject[] getsubject_mst_grp(string group_id)
    {
        string qry = "select * from m_crs_subject_tbl as e,d_crs_subjectgroup_tbl as f where e.subject_id=f.subject_id and f.group_id='" + group_id + "' and f.del_flag=0 and e.del_flag=0";
        DataTable dt = cls1.fillDataTable(qry);
        List<subject> details = new List<subject>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                subject regi = new subject();

                regi.subject_name = dtrow["Subject_Name"].ToString();
                regi.subject_id = dtrow["Subject_Id"].ToString();


                details.Add(regi);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }


    //junior student transfer

    public List<ListItem> getfaculty(string empid)
    {
        string qry = " ";
        if (empid.Contains("ARCH"))
        {
            qry = "select faculty_name,faculty_Id from m_crs_faculty Where Del_Flag <>1 And faculty_name <> '' and faculty_name like '%ARCHITECTURE%'";
        }
        else
        {
            qry = "select faculty_name,faculty_Id from m_crs_faculty Where Del_Flag <>1 And faculty_name <> ''";
        }

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["faculty_Id"].ToString(),
                                Text = sdr["faculty_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }
    // student course transfer
    public junior_stud_trans[] fillgridtrans(string faculty, string course, string subcourse, string group, string division, string fyear, string tyear)
    {
        List<junior_stud_trans> details = new List<junior_stud_trans>();
        string qry = "";

        DataTable ds2 = new DataTable();
        int chkf = 0;
        qry = " SELECT distinct a.stud_id,CAST(a.Roll_no as int) as Roll_NO,b.stud_Grno, b.stud_F_Name+'   '+ b.stud_M_Name+'   '+ b.stud_L_Name as NAME "
             + "  from m_std_studentacademic_tbl a,m_std_personaldetails_tbl b "
            + "    where a.ayid='" + fyear + "' and a.del_flag=0 and b.del_flag=0 and a.stud_id=b.stud_id and a.group_id='" + group + "' and a.SubCourse_Id='" + subcourse + "' order by CAST(a.Roll_no as int),b.stud_Grno,NAME";// and a.Division='" + division + "'
        DataSet ds1 = cls1.fill_dataset(qry);
        if (ds1.Tables[0].Rows.Count > 0)
        {
            ds2.Columns.Add("stud_id");
            ds2.Columns.Add("NAME");
            ds2.Columns.Add("Roll_NO");
            ds2.Columns.Add("stud_Grno");
            ds2.Columns.Add("CHK");

            for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
            {
                ds2.Rows.Add();
                ds2.Rows[i]["stud_id"] = ds1.Tables[0].Rows[i]["stud_id"];
                ds2.Rows[i]["NAME"] = ds1.Tables[0].Rows[i]["NAME"];
                ds2.Rows[i]["Roll_NO"] = ds1.Tables[0].Rows[i]["Roll_NO"];
                ds2.Rows[i]["stud_Grno"] = ds1.Tables[0].Rows[i]["stud_Grno"];

                qry = " SELECT a.stud_id,CAST(a.Roll_no as int) as Roll_NO,b.stud_Grno, b.stud_F_Name+'   '+ b.stud_M_Name+'   '+ b.stud_L_Name as NAME "
             + "  from m_std_studentacademic_tbl a,m_std_personaldetails_tbl b "
            + "    where a.ayid='" + tyear + "' and a.del_flag=0 and b.del_flag=0 and a.stud_id=b.stud_id  and a.stud_id='" + ds1.Tables[0].Rows[i]["stud_id"].ToString() + "'";

                DataSet ds = cls1.fill_dataset(qry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    chkf = 1;
                    ds2.Rows[i]["CHK"] = chkf.ToString();
                }
                else
                {
                    chkf = 0;
                    ds2.Rows[i]["CHK"] = chkf.ToString();
                }

            }
            for (int j = 0; j < ds2.Rows.Count; j++)
            {
                junior_stud_trans sdb = new junior_stud_trans();
                sdb.stud_id = ds2.Rows[j]["stud_id"].ToString();
                sdb.studentname = ds2.Rows[j]["NAME"].ToString();
                sdb.rollno = ds2.Rows[j]["Roll_NO"].ToString();
                sdb.grno = ds2.Rows[j]["stud_Grno"].ToString();
                sdb.chkflag = ds2.Rows[j]["CHK"].ToString();
                details.Add(sdb);
            }
        }

        return details.ToArray();


    }
    public junior_stud_trans[] saveData(string stud_id, string faculty, string course, string subcourse, string group, string userid, string fyear, string tyear)
    {

        DateTime date = DateTime.Now;

        List<junior_stud_trans> details = new List<junior_stud_trans>();
        junior_stud_trans retval = new junior_stud_trans();

        string qry = "";
        string qry1 = "";
        string[] a = stud_id.Split(',');

        for (int i = 0; i < a.Length; i++)
        {
            qry = "select * from m_std_studentacademic_tbl where stud_id='" + a[i] + "' and ayid='" + tyear + "'";
            DataTable dt = cls1.fillDataTable(qry);
            if (a[i] != "")
            {
                if (dt.Rows.Count > 0)
                {
                    qry1 = qry1 + "update m_std_studentacademic_tbl set subcourse_Id='" + subcourse + "',group_id='" + group + "',mod_dt=getdate(),del_flag=0 where stud_id='" + a[i] + "' and ayid='" + tyear + "'; ";
                }
                else
                {
                    qry1 = qry1 + " insert into m_std_studentacademic_tbl (ayid,subcourse_Id,group_id,stud_id,user_id,curr_dt,del_flag)values('" + tyear + "','" + subcourse + "','" + group + "','" + a[i] + "','" + userid + "',getdate(),0) ";
                }
            }
        }
        // string qry_UP = "update m_std_studentacademic_tbl set del_flag=1 where group_id='" + group + "' and  ayid='" + tyear + "'";
        //cls1.DMLqueries(qry_UP);
        if (cls1.DMLqueries(qry1) == true)
        {
            retval.msg = "Saved";
            details.Add(retval);
        }
        else
        {
            retval.msg = "No Data Saved";
            details.Add(retval);
        }





        return details.ToArray();
    }
    public List<ListItem> getsubcourse1(string course)
    {
        string qry = "";

        qry = " select Distinct subcourse_name,subcourse_id from m_crs_subcourse_tbl Where Del_Flag <>1 And subcourse_name <> ''  And course_id='" + course + "'";




        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["subcourse_id"].ToString(),
                                Text = sdr["subcourse_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> getdiv(string subcourse)
    {
        string qry = "select distinct Division  from m_std_studentacademic_tbl where subcourse_Id='" + subcourse + "' and del_flag=0  ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Division"].ToString(),
                                Text = sdr["Division"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> getcoursenew(string fid)
    {
        string qry = "select Distinct Course_name,course_id from m_crs_course_tbl Where Del_Flag <>1 And Course_name <> '' ";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["course_id"].ToString(),
                                Text = sdr["Course_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    //Group Mapping

    public grp_mapping[] getgroupnew(string subcourse)
    {
        string qry = "select Group_title,Group_id from m_crs_subjectgroup_tbl where subcourse_id='" + subcourse + "' order by Group_title";

        DataTable dt = cls1.fillDataTable(qry);
        List<grp_mapping> details = new List<grp_mapping>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                grp_mapping grpmp = new grp_mapping();
                grpmp.group_id = dtrow["Group_id"].ToString();
                grpmp.group_title = dtrow["Group_title"].ToString();
                details.Add(grpmp);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }

    public grp_mapping[] getgroup_grpmapping(string cor, string subcor, string grp, string type, string gridtype)
    {
        string qry = "";
        if (gridtype == "gridmapgrp")
        {

            qry = "select distinct a.Group_id,a.Group_title,(0) as flag from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b,m_crs_course_tbl as c,Group_Mapping as d where a.Subcourse_id=b.subcourse_id and b.course_id=c.course_id and c.course_id='" + cor + "' and c.del_flag=0 and a.Group_id  in (select Map_Group_Id from Group_Mapping where Group_id='" + grp + "') and a.Course_type in  ((select  Course_type from m_crs_subjectgroup_tbl where Group_id='" + grp + "') union (select  case  when Course_type like 'FY%' then 'SY'  when Course_type like 'SY%' then 'TY' when Course_type like 'TY%' then 'TY'  end as Course_type  from m_crs_subjectgroup_tbl where Group_id='" + grp + "'))" +

" union all select distinct a.Group_id,a.Group_title,(1) as flag from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b,m_crs_course_tbl as c,Group_Mapping as d where a.Subcourse_id=b.subcourse_id and b.course_id=c.course_id and c.course_id='" + cor + "' and c.del_flag=0 and a.Group_id not in (select Map_Group_Id from Group_Mapping where Group_id='" + grp + "')  and a.Course_type in  ( (select  Course_type from m_crs_subjectgroup_tbl where Group_id='" + grp + "') union (select  case  when Course_type like 'FY%' then 'SY'  when Course_type like 'SY%' then 'TY' when Course_type like 'TY%' then 'TY'  end as Course_type  from m_crs_subjectgroup_tbl where Group_id='" + grp + "')) order by Group_title,flag";

        }
        else
        {
            //if (type == "course")
            //{

            //    qry = " select distinct a.Group_id,a.Group_title from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b,m_crs_course_tbl as c,Group_Mapping as d where a.Subcourse_id=b.subcourse_id and b.course_id=c.course_id and c.course_id='" + cor + "' and c.del_flag=0 and a.Group_id=d.Map_Group_Id  union all "
            //       + " select distinct a.Group_id,a.Group_title from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b,m_crs_course_tbl as c where a.Subcourse_id=b.subcourse_id and b.course_id=c.course_id and c.course_id='" + cor + "' and c.del_flag=0 and a.Group_id not in ( select Map_Group_Id from Group_Mapping )";
            //    //qry = "select Group_id,Group_title from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b,m_crs_course_tbl as c where a.Subcourse_id=b.subcourse_id and b.course_id=c.course_id and c.course_id='" + cor + "' and c.del_flag=0";
            //}
            //else if (type == "subcourse")
            //{
            //    qry = "select distinct a.Group_id,a.Group_title from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b,Group_Mapping as d where a.Subcourse_id=b.subcourse_id  and b.subcourse_id='" + subcor + "' and b.del_flag=0 and a.Group_id=d.Map_Group_Id "
            //         + "union all select distinct a.Group_id,a.Group_title from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b where a.Subcourse_id=b.subcourse_id  and b.subcourse_id='" + subcor + "' and b.del_flag=0 and a.Group_id not in ( select Map_Group_Id from Group_Mapping )";
            //    //qry = "select Group_id,Group_title from m_crs_subjectgroup_tbl as a,m_crs_subcourse_tbl as b where a.Subcourse_id=b.subcourse_id  and b.subcourse_id='" + subcor + "' and b.del_flag=0";
            //}
            //else if (type == "group")
            //{
            //    qry = "select Group_id,Group_title from m_crs_subjectgroup_tbl as a where  a.group_id='" + grp + "' and a.del_flag=0";
            //}
            //else
            //{
            //    qry = "select Group_id,Group_title from m_crs_subjectgroup_tbl where del_flag=0";
            //}
        }
        DataTable dt = cls1.fillDataTable(qry);
        List<grp_mapping> details = new List<grp_mapping>();
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                grp_mapping grpmp = new grp_mapping();
                grpmp.group_id = dtrow["Group_id"].ToString();
                grpmp.group_title = dtrow["Group_title"].ToString();
                details.Add(grpmp);
            }
            return details.ToArray();
        }
        else
        {
            return details.ToArray();
        }
    }


    public List<ListItem> fillcheck(string str)
    {
        string qry = str;

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Map_Group_Id"].ToString(),
                                //Text = sdr["Group_title"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    //student transfer---------------------------
    public stud_tarnsfer[] load_data(string ayid, string stud_id)
    {
        string str = "";

        //        if (ayid == "0")
        //        {
        //            ayid = "";
        //        }

        //        if (ayid != "")
        //        {
        //            str = "select f.stud_id,ISNULL(p.stud_F_Name,'')+' '+ISNULL(p.stud_M_Name,'')+' '+ISNULL(p.stud_L_Name,'') as Name,SUM(CAST(amount as int)) as Paid_Amount,Recpt_Chq_No,Group_title,CONVERT(varchar(10),pay_date,103) as Pay_date,Recpt_mode,Recpt_no,CONVERT(varchar(10),Recpt_Chq_dt,103) as Recpt_chq_date,Recpt_Bnk_Name as Bank_Name,Recpt_Bnk_Branch as Branch,Chq_status from m_FeeEntry f,m_std_personaldetails_tbl p ,m_std_studentacademic_tbl a,m_crs_subjectgroup_tbl g"
        //+ " where f.Ayid='" + ayid + "' and Recpt_Chq_No like '%" + number + "%' and f.Stud_id=p.stud_id and f.Stud_id=a.stud_id and a.stud_id=p.stud_id and a.group_id=g.Group_id and f.Ayid=a.ayid group by f.stud_id,Recpt_Chq_No,pay_date,Recpt_mode,Recpt_no,Recpt_Chq_dt,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,stud_F_Name,stud_M_Name,stud_L_Name,Group_title";
        //        }
        //        else
        //        {
        //            str = "select f.stud_id,ISNULL(p.stud_F_Name,'')+' '+ISNULL(p.stud_M_Name,'')+' '+ISNULL(p.stud_L_Name,'') as Name,SUM(CAST(amount as int)) as Paid_Amount,Recpt_Chq_No,Group_title,CONVERT(varchar(10),pay_date,103) as Pay_date,Recpt_mode,Recpt_no,CONVERT(varchar(10),Recpt_Chq_dt,103) as Recpt_chq_date,Recpt_Bnk_Name as Bank_Name,Recpt_Bnk_Branch as Branch,Chq_status from m_FeeEntry f,m_std_personaldetails_tbl p ,m_std_studentacademic_tbl a,m_crs_subjectgroup_tbl g"
        //+ " where Recpt_Chq_No like '%" + number + "%' and f.Stud_id=p.stud_id and f.Stud_id=a.stud_id and a.stud_id=p.stud_id and a.group_id=g.Group_id and f.Ayid=a.ayid group by f.stud_id,pay_date,Recpt_mode,Recpt_no,Recpt_Chq_No,Recpt_Chq_dt,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,stud_F_Name,stud_M_Name,stud_L_Name,Group_title";
        //        }
        //str = "select a.stud_id, stud_F_Name+' '+stud_M_Name+' '+stud_l_name  as Name,b.value as group_id, Group_title, (select stud_id from m_std_studentacademic_tbl where a.Stud_id= stud_id and ayid = a.to_year) as [transfer] from www_Eligibility as a,www_m_std_personaldetails_tbl as b,m_std_personaldetails_tbl as c,m_crs_subjectgroup_tbl as d where a.Stud_id=b.stud_id and a.to_year=b.ayid and a.to_group_id=b.value and a.Stud_id=c.stud_id and d.Group_id=a.to_group_id and a.to_year='" + ayid + "' and a.Stud_id='" + stud_id + "'";

        //data not loading for ty group id comma seprated in www_eligibility
        //       str = " select distinct * from (select a.stud_id, stud_F_Name+' '+stud_M_Name+' '+stud_l_name  as Name,b.value as group_id, Group_title, (select stud_id from m_std_studentacademic_tbl where a.Stud_id= stud_id and ayid = a.to_year and del_flag=0) as [transfer] from www_Eligibility as a,www_m_std_personaldetails_tbl as b,m_std_personaldetails_tbl as c,m_crs_subjectgroup_tbl as d where a.Stud_id = b.stud_id and a.to_year = b.ayid and a.to_group_id = b.value and a.Stud_id = c.stud_id and d.Group_id = a.to_group_id and a.to_year = '" + ayid + "' and a.Stud_id = '" + stud_id + "'"
        //+ " union all select b.stud_id, stud_F_Name + ' ' + stud_M_Name + ' ' + stud_l_name as Name,b.group_id, Group_title, (select stud_id from m_std_studentacademic_tbl where b.Stud_id = stud_id and ayid = b.ayid and del_flag=0) as [transfer] from m_std_studentacademic_tbl as b,m_std_personaldetails_tbl as c,m_crs_subjectgroup_tbl as d where c.Stud_id = b.stud_id and d.Group_id = b.group_id and b.ayid = '" + ayid + "' and c.Stud_id = '" + stud_id + "') a";

        str = " select distinct * from (select a.stud_id, stud_F_Name+' '+stud_M_Name+' '+stud_l_name  as Name,b.value as group_id, Group_title, (select distinct  stud_id from m_std_studentacademic_tbl where a.Stud_id= stud_id and ayid = a.to_year and del_flag=0) as [transfer] from www_Eligibility as a,www_m_std_personaldetails_tbl as b,m_std_personaldetails_tbl as c,m_crs_subjectgroup_tbl as d where a.Stud_id = b.stud_id and a.to_year = b.ayid and  a.to_group_id like '%' + b.value + '%' and a.Stud_id = c.stud_id and a.to_group_id like '%' + d.Group_id + '%' and b.value = d.Group_id and a.to_year = '" + ayid + "' and a.Stud_id = '" + stud_id + "'"
+ " union all select b.stud_id, stud_F_Name + ' ' + stud_M_Name + ' ' + stud_l_name as Name,b.group_id, Group_title, (select distinct stud_id from m_std_studentacademic_tbl where b.Stud_id = stud_id and ayid = b.ayid and del_flag=0) as [transfer] from m_std_studentacademic_tbl as b,m_std_personaldetails_tbl as c,m_crs_subjectgroup_tbl as d where c.Stud_id = b.stud_id and d.Group_id = b.group_id and b.ayid = '" + ayid + "' and c.Stud_id = '" + stud_id + "' and b.del_flag=0) a";

        DataTable dt = cls1.fillDataTable(str);
        List<stud_tarnsfer> det = new List<stud_tarnsfer>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow drrow in dt.Rows)
            {
                stud_tarnsfer fee = new stud_tarnsfer();
                fee.stud_id = drrow["stud_id"].ToString();
                fee.Name = drrow["Name"].ToString();
                fee.group_name = drrow["Group_title"].ToString();
                fee.group_id = drrow["group_id"].ToString();
                fee.Transfer = drrow["transfer"].ToString();

                fee.message = "Found";
                det.Add(fee);
            }
        }
        else
        {
            stud_tarnsfer fee = new stud_tarnsfer();
            fee.message = "Form Not Filled";
            det.Add(fee);
        }

        return det.ToArray();

    }
    public stud_tarnsfer[] save_data(string ayid, string stud_id, string group_id, string mode, string emp_id)
    {
        string str = "";
        str = "select * from m_std_studentacademic_tbl where ayid='" + ayid + "' and stud_id='" + stud_id + "' and del_flag=0";
        DataTable dt = cls1.fillDataTable(str);
        List<stud_tarnsfer> det = new List<stud_tarnsfer>();
        string str_up = "";
        if (mode == "transfer")
        {
            if (dt.Rows.Count > 0)
            {
                str_up = "update m_std_studentacademic_tbl set del_flag=0  where ayid='" + ayid + "' and stud_id='" + stud_id + "'";
            }
            else
            {

                str_up = "insert into m_std_studentacademic_tbl select '" + ayid + "',Subcourse_id,a.group_id,'" + stud_id + "',null,'NA',(select top(1) ID_no from m_std_studentacademic_tbl where stud_id='" + stud_id + "' and (ID_no is not null  or ID_no <> '')),null,sum(Amount),'0','0',null,null,null,null,'" + emp_id + "',getdate(),getdate(),'0',null,null from m_crs_subjectgroup_tbl as a,m_FeeMaster as b where  (b.Group_id=a.Group_id or b.group_id=substring(Group_title,0,3)) and b.ayid='" + ayid + "' and a.group_id='" + group_id + "' group by Subcourse_id,a.group_id ";
                str_up += " ;  update www_m_std_personaldetails_tbl set  flag='1' where ayid='" + ayid + "' and stud_id='" + stud_id + "'";
            }
        }
        else
        {
            str_up = "update m_std_studentacademic_tbl set del_flag=1  where ayid='" + ayid + "' and stud_id='" + stud_id + "' ";
        }

        if (cls1.DMLqueries(str_up) == true)
        {
            stud_tarnsfer fee = new stud_tarnsfer();

            fee.message = "Data Saved Successfully";
            det.Add(fee);
        }
        else
        {
            stud_tarnsfer fee = new stud_tarnsfer();

            fee.message = "Data Not Saved";
            det.Add(fee);
        }
        return det.ToArray();

    }

    public string check_seats(string ayid, string group_id)
    {
        string str = "";
        str = " select case when a.intake>b.filled then 'available' else 'full' end as seats from (select intake from m_intake where ayid='" + ayid + "' and group_id='" + group_id + "' and del_flag=0)a,(select COUNT(*) as filled from m_std_studentacademic_tbl where ayid='" + ayid + "' and group_id='" + group_id + "' and del_flag=0)b";
        DataTable dt = cls1.fillDataTable(str);
        string msg = "";
        if (dt.Rows.Count > 0)
        {
            msg = dt.Rows[0]["seats"].ToString();
        }
        else
        {
            msg = "Intake not defined";
        }
        return msg;
    }
    //-------------------------------------------------------
    //-------------------------------eligibility
    public List<ListItem> fillcourse(string group_ids)
    {

        string finalGrp = qryCls.splitGrp(group_ids);
        String qry = "select * From m_crs_course_tbl where course_id in (select course_id from m_crs_subcourse_tbl where subcourse_id in (select subcourse_id from m_crs_subjectgroup_tbl where  Group_id in (" + finalGrp + ") and del_flag=0) and del_flag=0) and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["course_id"].ToString(),
                            Text = sdr["course_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillsubcourse(string course_id)
    {


        String qry = "select * from m_crs_subcourse_tbl where course_id ='" + course_id + "'  and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString(),
                            Text = sdr["subcourse_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> filltogroup(string subcourse_id)
    {
        String qry = "select * from m_crs_subjectgroup_tbl where subcourse_id ='" + subcourse_id + "'  and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["group_id"].ToString(),
                            Text = sdr["group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public List<ListItem> fillfromgroup(string togroup)
    {
        String qry = "select b.Group_id,b.Group_title from Group_Mapping as a,m_crs_subjectgroup_tbl as b where a.Group_id='" + togroup + "' and a.Map_Group_Id=b.Group_id and b.del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["group_id"].ToString(),
                            Text = sdr["group_title"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public EligibilityClass[] changesubgroup_new(string ayid, string group_id, string subcourse_id, string subcrs_text, string stud_Id, string frm_rol, string to_rol, string to_yr)
    {
        string last = ayid.Substring(5, 2);
        string new_ay = Convert.ToString(Convert.ToInt32(last) + 1);
        string new_ayid = string.Concat("AYD00", new_ay);
        string query = "", getroll = "", course = "";
        if (frm_rol != "" && to_rol != "")
        {
            getroll = "a.Roll_no between " + frm_rol + " and " + to_rol + " and";
        }
        else { getroll = ""; }

        DataTable coursetype = cls1.fillDataTable("select Group_title from m_crs_subjectgroup_tbl where Group_id='" + group_id + "' and del_flag=0");
        if (coursetype.Rows.Count > 0)
        {
            course = coursetype.Rows[0]["Group_title"].ToString();
        }

        if (stud_Id != "")
        {
            DataTable dt1 = cls1.fillDataTable("select COUNT(*) from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "' and del_flag=0");
            if (int.Parse(dt1.Rows[0][0].ToString()) > 0)
            {
                if (course.ToString() != "PG")
                {
                    //update data
                    if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                        query = query + "  is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,";
                        query = query + "  cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join ";
                        query = query + "  (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                        query = query + "  and a.stud_id=p.stud_id and " + getroll + " c.stud_id=a.stud_id  and a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int) asc";
                    }
                    else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                        query = query + " c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                        query = query + "  is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,";
                        query = query + "  cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join ";
                        query = query + "  (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                        query = query + "  and a.stud_id=p.stud_id and " + getroll + " c.stud_id=a.stud_id  and a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int) asc";
                    }
                    else
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + "  case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + "  c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + "  else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                        query = query + "  c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + "  c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + "  else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                        query = query + "  c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                        query = query + "  c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                        query = query + "   else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                        query = query + "   is_eligible Status ,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type , cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,";
                        query = query + "   cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join ";
                        query = query + "   (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                        query = query + "   and a.stud_id=p.stud_id and " + getroll + " c.stud_id=a.stud_id  and a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int) asc";
                    }
                }
                else
                {
                    query = query + "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,'NA' as sem1_cg,'NA' as sem1_credit_earn,'NA' as sem1_credit,'NA' as sem1_SGPI,'NA' as sem2_cg,'NA' as sem2_credit_earn,'NA' as sem2_credit,'NA' as sem2_SGPI,case when e.is_eligible='0' then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and Stud_id='" + stud_Id + "') as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and a.stud_id=p.stud_id and " + getroll + " a.stud_id='" + stud_Id + "' order by cast(a.Roll_no as int)";
                }
            }
            else
            {
                if (course.ToString() != "PG")
                {
                    if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + "case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + "c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                        query = query + "case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,a.Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                        query = query + "a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id and a.stud_id='" + stud_Id + "'  order by p.stud_id";
                    }
                    else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                        query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                        query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,a.Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                        query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id and a.stud_id='" + stud_Id + "' order by p.stud_id";
                    }
                    else
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                        query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                        query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                        query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                        query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,a.Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                        query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id and a.stud_id='" + stud_Id + "' order by p.stud_id";
                    }
                }
                else
                {
                    query = query + "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,'NA' as sem1_cg,'NA' as sem1_credit_earn,'NA' as sem1_credit,'NA' as sem1_SGPI,'NA' as sem2_cg,'NA' as sem2_credit_earn,'NA' as sem2_credit,'NA' as sem2_SGPI,case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and  a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id  and a.stud_id='" + stud_Id + "' order by p.stud_id";
                }
            }
        }
        else
        {
            DataTable dt2 = cls1.fillDataTable("select COUNT(*) from www_Eligibility where to_year=(select max(ayid) from m_academic) and Group_id='" + group_id + "' and del_flag=0");
            if (int.Parse(dt2.Rows[0][0].ToString()) > 0)
            {
                if (course.ToString() != "PG")
                {
                    //update data
                    if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                    {
                        query="EXEC STUDELIGIBLE @AYID='"+ayid+"' ,@GRPID='"+group_id+"'";
                        //query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        //query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        //query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        //query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                        //query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 0 end as form_filled,case when e.Stud_id is null then 'insert' else  'update' end  type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit  from m_std_personaldetails_tbl as p,";
                        //query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join ";
                        //query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                        //query = query + " and " + getroll + "  a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                    }
                    else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                        query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                        query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 0 end as form_filled,case when e.Stud_id is null then 'insert' else  'update' end  type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,";
                        query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join ";
                        query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                        query = query + " and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                    }
                    else
                    {
                        query = "  select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                        query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                        query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                        query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                        query = query + " is_eligible Status ,case when f.Stud_id is null then 0 else 0 end as form_filled,case when e.Stud_id is null then 'insert' else  'update' end  type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit  from m_std_personaldetails_tbl as p,";
                        query = query + " cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join ";
                        query = query + " (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 ";
                        query = query + " and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                    }
                }
                else
                {
                    query = query + "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,'NA' as sem1_cg,'NA' as sem1_credit_earn,'NA' as sem1_credit,'NA' as sem1_SGPI,'NA' as sem2_cg,'NA' as sem2_credit_earn,'NA' as sem2_credit,'NA' as sem2_SGPI,case when e.is_eligible='0' then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'update' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic) ) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic )) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id  order by cast(a.Roll_no as int) asc";
                }
            }
            else
            {
                if (course.ToString() != "PG")
                {
                    if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + "case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + "c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + "else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,";
                        query = query + "case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit  from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                        query = query + "a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                    }
                    else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                        query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,";
                        query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit  from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                        query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id  order by cast(a.Roll_no as int) asc";
                    }
                    else
                    {
                        query = "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,c.sem1_cg,c.sem1_credit_earn,c.sem1_credit,";
                        query = query + " case when sem1_credit_earn =0 then 0 else cast((cast (c.sem1_cg as float)/cast (c.sem1_credit_earn as float)) as decimal(10,2)) end as sem1_SGPI,c.sem2_cg,";
                        query = query + " c.sem2_credit_earn,c.sem2_credit,case when sem2_credit_earn =0 then '0' else cast(cast(case when c.sem2_cg like '%#%' then cast((cast ((SUBSTRING(c.sem2_cg,1, DATALENGTH(c.sem2_cg)-2)) as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem2_cg as float)/cast (c.sem2_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem2_cg,LEN(c.sem2_cg)-1, 2) as varchar(max)) end as sem2_SGPI,c.sem3_cg,c.sem3_credit_earn,c.sem3_credit,";
                        query = query + " case when sem3_credit_earn =0 then 0 else cast((cast (c.sem3_cg as float)/cast (c.sem3_credit_earn as float)) as decimal(10,2)) end as sem3_SGPI,c.sem4_cg,";
                        query = query + " c.sem4_credit_earn,c.sem4_credit,case when sem4_credit_earn =0 then '0' else cast(cast(case when c.sem4_cg like '%#%' then cast((cast ((SUBSTRING(c.sem4_cg,1, DATALENGTH(c.sem4_cg)-2)) as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem4_cg as float)/cast (c.sem4_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem4_cg,LEN(c.sem4_cg)-1, 2) as varchar(max)) end as sem4_SGPI,c.sem5_cg,c.sem5_credit_earn,c.sem5_credit,";
                        query = query + " case when sem5_credit_earn =0 then 0 else cast((cast (c.sem5_cg as float)/cast (c.sem5_credit_earn as float)) as decimal(10,2)) end as sem5_SGPI,c.sem6_cg,";
                        query = query + " c.sem6_credit_earn,c.sem6_credit,case when sem6_credit_earn =0 then '0' else cast(case when c.sem6_cg like '%#%' then cast((cast ((SUBSTRING(c.sem6_cg,1, DATALENGTH(c.sem6_cg)-2)) as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2))";
                        query = query + " else cast((cast (c.sem6_cg as float)/cast (c.sem6_credit_earn as float)) as decimal(10,2)) end as varchar) + SUBSTRING(c.sem6_cg,LEN(c.sem6_cg)-1, 2) as varchar(max)) end as sem6_SGPI,";
                        query = query + " case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit  from m_std_personaldetails_tbl as p,cre_stud_academic as c,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and ";
                        query = query + " a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id and c.stud_id=a.stud_id order by cast(a.Roll_no as int) asc";
                    }
                }
                else
                {
                    query = query + "select distinct p.stud_id,isnull(p.stud_L_Name,'')+' ' +isnull(p.stud_F_Name,'')+' '+isnull(p.stud_M_Name,'') as Student_Name,'NA' as sem1_cg,'NA' as sem1_credit_earn,'NA' as sem1_credit,'NA' as sem1_SGPI,'NA' as sem2_cg,'NA' as sem2_credit_earn,'NA' as sem2_credit,'NA' as sem2_SGPI,case when e.Stud_id is null then 'False' else 'True' end as Status,case when f.Stud_id is null then 0 else 1 end as form_filled,'insert' type,cast(a.Roll_no as int)Roll_no,case when e.Stud_id in (select stud_id from m_std_studentacademic_tbl where ayid='" + to_yr + "') then 'admited' else 'no' end as admit from m_std_personaldetails_tbl as p,m_std_studentacademic_tbl as a left join (select * from www_Eligibility where to_year=(select max(ayid) from m_academic)) as e on a.stud_id=e.Stud_id left join (select * from www_m_std_personaldetails_tbl where ayid=(select max(ayid) from m_academic)) as f on a.stud_id=f.Stud_id where a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and a.ayid='" + ayid + "' and a.del_flag=0 and p.del_flag=0 and " + getroll + " a.stud_id=p.stud_id order by cast(a.Roll_no as int) asc";
                }
            }
        }



        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        List<EligibilityClass> details = new List<EligibilityClass>();
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(query))
            {
                        List<ListItem> listData = new List<ListItem>();
                        cmd.CommandType = CommandType.Text;
                        cmd.Connection = con;
                        cmd.CommandTimeout = 100;
                        con.Open();
                        SqlDataAdapter da = new SqlDataAdapter(cmd);
                        // da.Fill(ds);
                        da.Fill(dt);
                 foreach (DataRow dtrow in dt.Rows)
                            {
                                EligibilityClass elig = new EligibilityClass();
                                elig.studid = dtrow["stud_id"].ToString();
                                elig.name = dtrow["Student_Name"].ToString();
                                
                                elig.roll_no = dtrow["Roll_no"].ToString();
                                elig.type = dtrow["type"].ToString();
                                details.Add(elig);
                            }
                



                //        //string[] semArr = new string[0];
                //        //if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                //        //{
                //        //    semArr = new string[2];
                //        //    semArr[0] = "Sem-1";
                //        //    semArr[1] = "Sem-2";
                //        //    dt.Columns.Add("Sem1_KT");
                //        //    dt.Columns.Add("Sem2_KT");
                //        //    dt.Columns.Add("STATUS");
                //        //    // dt.Columns.Add("Form_filled");
                //        //}
                //        //else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                //        //{
                //        //    semArr = new string[4];
                //        //    semArr[0] = "Sem-1";
                //        //    semArr[1] = "Sem-2";
                //        //    semArr[2] = "Sem-3";
                //        //    semArr[3] = "Sem-4";
                //        //    dt.Columns.Add("Sem1_KT");
                //        //    dt.Columns.Add("Sem2_KT");
                //        //    dt.Columns.Add("Sem3_KT");
                //        //    dt.Columns.Add("Sem4_KT");
                //        //    dt.Columns.Add("STATUS");
                //        //    //dt.Columns.Add("Form_filled");
                //        //}
                //        //else if (subcrs_text.StartsWith("T"))
                //        //{
                //        //    semArr = new string[6];
                //        //    semArr[0] = "Sem-1";
                //        //    semArr[1] = "Sem-2";
                //        //    semArr[2] = "Sem-3";
                //        //    semArr[3] = "Sem-4";
                //        //    semArr[4] = "Sem-5";
                //        //    semArr[5] = "Sem-6";
                //        //    dt.Columns.Add("Sem1_KT");
                //        //    dt.Columns.Add("Sem2_KT");
                //        //    dt.Columns.Add("Sem3_KT");
                //        //    dt.Columns.Add("Sem4_KT");
                //        //    dt.Columns.Add("Sem5_KT");
                //        //    dt.Columns.Add("Sem6_KT");
                //        //    dt.Columns.Add("STATUS");
                //        //    //dt.Columns.Add("Form_filled");
                //        //}
                //        //else
                //        //{
                //        //    semArr = new string[6];
                //        //    semArr[0] = "Sem-1";
                //        //    semArr[1] = "Sem-2";
                //        //    semArr[2] = "Sem-3";
                //        //    semArr[3] = "Sem-4";
                //        //    semArr[4] = "Sem-5";
                //        //    semArr[5] = "Sem-6";
                //        //    dt.Columns.Add("Sem1_KT");
                //        //    dt.Columns.Add("Sem2_KT");
                //        //    dt.Columns.Add("Sem3_KT");
                //        //    dt.Columns.Add("Sem4_KT");
                //        //    dt.Columns.Add("Sem5_KT");
                //        //    dt.Columns.Add("Sem6_KT");
                //        //    dt.Columns.Add("STATUS");
                //        //    // dt.Columns.Add("Form_filled");
                //        //}
                //        DataSet ds1 = new DataSet();
                //        //cls1.fillDataset(qry);
                //        //for (int i = 0; i < dt.Rows.Count; i++)
                //        //{
                //        //    string qry;
                //        //    for (int j = 0; j < semArr.Length; j++)
                //        //    {
                //        //        //qry = "select case when count(ISNULL(c.remark,0))=0 then '' else COUNT(ISNULL(c.remark,0)) end as KT_Count from m_std_studentacademic_tbl as a,cre_marks_tbl as c ";
                //        //        //qry = qry + "where exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' order by curr_date DESC) and a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and ";
                //        //        //qry = qry + "a.stud_id=c.stud_id and c.stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and c.sem_id='" + semArr[j] + "' GROUP BY c.remark HAVING c.remark = 'UnSuccessful'";

                //        //        qry = "select case when count(ISNULL(c.remark,0))=0 then '' else COUNT(ISNULL(c.remark,0)) end as KT_Count from(select distinct c.* from m_std_studentacademic_tbl as a,cre_marks_tbl as c ";
                //        //        qry = qry + "where exam_code=(Select TOP 1 exam_code from cre_marks_tbl where stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and sem_id='" + semArr[j] + "' order by curr_date DESC) and a.group_id='" + group_id + "' and a.subcourse_Id='" + subcourse_id + "' and ";
                //        //        qry = qry + "a.stud_id=c.stud_id and c.stud_id='" + dt.Rows[i]["stud_id"].ToString() + "' and c.sem_id='" + semArr[j] + "') c GROUP BY c.remark HAVING c.remark = 'UnSuccessful'";


                //        //        ds1 = cls1.fillDataset(qry);
                //        //        if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("Part I"))
                //        //        {
                //        //            if (j == 0)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];

                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem1_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 1)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem2_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = 0;
                //        //                }
                //        //            }
                //        //        }
                //        //        else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II"))
                //        //        {
                //        //            if (j == 0)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem1_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 1)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem2_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 2)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem3_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem3_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 3)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem4_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem4_KT"] = 0;
                //        //                }
                //        //            }
                //        //        }
                //        //        else if (subcrs_text.StartsWith("T"))
                //        //        {
                //        //            if (j == 0)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem1_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 1)
                //        //            {
                //        //                if (j == 1 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem2_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 2)
                //        //            {
                //        //                if (j == 2 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem3_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem3_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 3)
                //        //            {
                //        //                if (j == 3 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem4_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem4_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 4)
                //        //            {
                //        //                if (j == 4 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem5_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem5_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem5_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem5_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 5)
                //        //            {
                //        //                if (j == 5 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem6_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 0)
                //        //                    {
                //        //                        dt.Rows[i]["sem1_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem6_KT"] = 0;
                //        //                }
                //        //            }
                //        //        }
                //        //        else
                //        //        {
                //        //            if (j == 0)
                //        //            {
                //        //                if (ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"]) > 1)
                //        //                    {
                //        //                        dt.Rows[i]["sem1_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem1_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 1)
                //        //            {
                //        //                if (j == 1 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem2_KT"]) > 1)
                //        //                    {
                //        //                        dt.Rows[i]["sem2_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem2_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 2)
                //        //            {
                //        //                if (j == 2 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem3_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"]) > 1)
                //        //                    {
                //        //                        dt.Rows[i]["sem3_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem3_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 3)
                //        //            {
                //        //                if (j == 3 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem4_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem4_KT"]) > 1)
                //        //                    {
                //        //                        dt.Rows[i]["sem4_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem4_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 4)
                //        //            {
                //        //                if (j == 4 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem5_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem5_KT"]) > 1)
                //        //                    {
                //        //                        dt.Rows[i]["sem5_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem5_KT"] = 0;
                //        //                }
                //        //            }
                //        //            else if (j == 5)
                //        //            {
                //        //                if (j == 5 && ds1.Tables[0].Rows.Count > 0)
                //        //                {
                //        //                    dt.Rows[i]["Sem6_KT"] = ds1.Tables[0].Rows[0]["KT_Count"];
                //        //                    if (Convert.ToInt32(dt.Rows[i]["Sem6_KT"]) > 1)
                //        //                    {
                //        //                        dt.Rows[i]["sem6_SGPI"] = 0;
                //        //                    }
                //        //                    else
                //        //                    {
                //        //                    }
                //        //                }
                //        //                else
                //        //                {
                //        //                    dt.Rows[i]["Sem6_KT"] = 0;
                //        //                }
                //        //            }
                //        //        }
                //        //    }

                //            //if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                //            //{
                //            //    if (string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_cg"])) == true)
                //            //    {
                //            //        dt.Rows[i]["STATUS"] = "No Data";
                //            //    }
                //            //    else
                //            //    {
                //            //        if (group_id == "GRP012" || group_id == "GRP012" || group_id == "GRP013" || group_id == "GRP145" || group_id == "GRP148" || group_id == "GRP149" || group_id == "GRP011" || group_id == "GRP147" || group_id == "GRP098" || group_id == "GRP150" || group_id == "GRP191" || group_id == "GRP206" || group_id == "GRP188")
                //            //        {
                //            //            if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 3 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 3)
                //            //            {
                //            //                if (dt.Rows[i]["admit"].ToString() == "admited")
                //            //                {
                //            //                    dt.Rows[i]["STATUS"] = "Admitted";
                //            //                }
                //            //                else
                //            //                {
                //            //                    dt.Rows[i]["STATUS"] = "Eligible";
                //            //                }

                //            //            }

                //            //            else
                //            //            {
                //            //                dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //            }
                //            //        }
                //            //        else
                //            //        {
                //            //            if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 2 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 2)
                //            //            {
                //            //                if (dt.Rows[i]["admit"].ToString() == "admited")
                //            //                {
                //            //                    dt.Rows[i]["STATUS"] = "Admitted";
                //            //                }
                //            //                else
                //            //                {
                //            //                    dt.Rows[i]["STATUS"] = "Eligible";
                //            //                }

                //            //            }
                //            //            else
                //            //            {
                //            //                dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //            }
                //            //        }
                //            //    }
                //            //}
                //            //else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith("II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                //            //{
                //            //    int yr1 = Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) + Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString());
                //            //    int yr2 = Convert.ToInt32(dt.Rows[i]["Sem3_KT"].ToString()) + Convert.ToInt32(dt.Rows[i]["Sem4_KT"].ToString());

                //            //    if (string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem1_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem2_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem3_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem3_cg"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem4_credit_earn"])) == true || string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["sem4_cg"])) == true)
                //            //    {
                //            //        dt.Rows[i]["STATUS"] = "No Data";
                //            //    }
                //            //    else
                //            //    {
                //            //        if (yr1 > 0 && yr2 > 0)
                //            //        {
                //            //            dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //        }
                //            //        else if (yr1 > 0 || yr2 > 0)
                //            //        {
                //            //            if (yr1 > 0)
                //            //            {
                //            //                if (group_id == "GRP166" || group_id == "GRP021" || group_id == "GRP168" || group_id == "GRP169" || group_id == "GRP170" || group_id == "GRP117" || group_id == "GRP012" || group_id == "GRP023" || group_id == "GRP024" || group_id == "GRP025" || group_id == "GRP171" || group_id == "GRP032" || group_id == "GRP111" || group_id == "GRP179" || group_id == "GRP186" || group_id == "GRP206" || group_id == "GRP188")
                //            //                {
                //            //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 3 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 3)
                //            //                    {
                //            //                        if (dt.Rows[i]["admit"].ToString() == "admited")
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Admitted";
                //            //                        }
                //            //                        else
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Eligible";
                //            //                        }
                //            //                    }
                //            //                    else
                //            //                    {
                //            //                        dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //                    }
                //            //                }
                //            //                else
                //            //                {
                //            //                    if (Convert.ToInt32(dt.Rows[i]["Sem1_KT"].ToString()) <= 2 && Convert.ToInt32(dt.Rows[i]["Sem2_KT"].ToString()) <= 2)
                //            //                    {
                //            //                        if (dt.Rows[i]["admit"].ToString() == "admited")
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Admitted";
                //            //                        }
                //            //                        else
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Eligible";
                //            //                        }
                //            //                    }
                //            //                    else
                //            //                    {
                //            //                        dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //                    }
                //            //                }
                //            //            }
                //            //            else if (yr2 > 0)
                //            //            {
                //            //                if (group_id == "GRP166" || group_id == "GRP021" || group_id == "GRP168" || group_id == "GRP169" || group_id == "GRP170" || group_id == "GRP117" || group_id == "GRP012" || group_id == "GRP023" || group_id == "GRP024" || group_id == "GRP025" || group_id == "GRP171" || group_id == "GRP032" || group_id == "GRP111" || group_id == "GRP179" || group_id == "GRP186" || group_id == "GRP188")
                //            //                {
                //            //                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"].ToString()) <= 3 && Convert.ToInt32(dt.Rows[i]["Sem4_KT"].ToString()) <= 3)
                //            //                    {
                //            //                        if (dt.Rows[i]["admit"].ToString() == "admited")
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Admitted";
                //            //                        }
                //            //                        else
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Eligible";
                //            //                        }
                //            //                    }
                //            //                    else
                //            //                    {
                //            //                        dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //                    }
                //            //                }
                //            //                else
                //            //                {
                //            //                    if (Convert.ToInt32(dt.Rows[i]["Sem3_KT"].ToString()) <= 2 && Convert.ToInt32(dt.Rows[i]["Sem4_KT"].ToString()) <= 2)
                //            //                    {
                //            //                        if (dt.Rows[i]["admit"].ToString() == "admited")
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Admitted";
                //            //                        }
                //            //                        else
                //            //                        {
                //            //                            dt.Rows[i]["STATUS"] = "Eligible";
                //            //                        }
                //            //                    }
                //            //                    else
                //            //                    {
                //            //                        dt.Rows[i]["STATUS"] = "Not Eligible";
                //            //                    }
                //            //                }
                //            //            }
                //            //        }
                //            //        else
                //            //        {
                //            //            dt.Rows[i]["STATUS"] = "Eligible";
                //            //        }
                //            //    }
                //            //}
                //            //else if (subcrs_text.StartsWith("T"))
                //            //{

                //            //}
                //            //else
                //            //{

                //            //}
                //        }


                //        //if (subcrs_text.StartsWith("F") || subcrs_text.EndsWith(" I") || subcrs_text.EndsWith("-I") || subcrs_text.EndsWith("Part I"))
                //        //{
                //        //    foreach (DataRow dtrow in dt.Rows)
                //        //    {
                //        //        EligibilityClass elig = new EligibilityClass();
                //        //        elig.studid = dtrow["stud_id"].ToString();
                //        //        elig.name = dtrow["Student_Name"].ToString();
                //        //        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                //        //        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                //        //        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                //        //        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                //        //        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                //        //        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                //        //        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                //        //        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                //        //        elig.Status = dtrow["STATUS"].ToString();
                //        //        elig.formfilled = dtrow["form_filled"].ToString();
                //        //        elig.exist = dtrow["Status"].ToString();
                //        //        elig.type = dtrow["type"].ToString();//Roll_no
                //        //        elig.roll_no = dtrow["Roll_no"].ToString();
                //        //        details.Add(elig);
                //        //    }
                //        //}
                //        //else if (subcrs_text.StartsWith("S") || subcrs_text.EndsWith(" II") || subcrs_text.StartsWith("PHY") || subcrs_text.StartsWith("CHEM") || subcrs_text.StartsWith("BOT"))
                //        //{
                //        //    foreach (DataRow dtrow in dt.Rows)
                //        //    {
                //        //        EligibilityClass elig = new EligibilityClass();
                //        //        elig.studid = dtrow["stud_id"].ToString();
                //        //        elig.name = dtrow["Student_Name"].ToString();
                //        //        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                //        //        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                //        //        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                //        //        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                //        //        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                //        //        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                //        //        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                //        //        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                //        //        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                //        //        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                //        //        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                //        //        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                //        //        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                //        //        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                //        //        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                //        //        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                //        //        elig.Status = dtrow["STATUS"].ToString();
                //        //        elig.formfilled = dtrow["form_filled"].ToString();
                //        //        elig.exist = dtrow["Status"].ToString();
                //        //        elig.type = dtrow["type"].ToString();
                //        //        elig.roll_no = dtrow["Roll_no"].ToString();
                //        //        details.Add(elig);
                //        //    }
                //        //}
                //        //else if (subcrs_text.StartsWith("T"))
                //        //{
                //        //    foreach (DataRow dtrow in dt.Rows)
                //        //    {
                //        //        EligibilityClass elig = new EligibilityClass();
                //        //        elig.studid = dtrow["stud_id"].ToString();
                //        //        elig.name = dtrow["Student_Name"].ToString();
                //        //        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                //        //        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                //        //        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                //        //        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                //        //        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                //        //        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                //        //        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                //        //        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                //        //        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                //        //        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                //        //        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                //        //        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                //        //        elig.sem5_cg = dtrow["sem5_cg"].ToString();
                //        //        elig.sem5_ce = dtrow["sem5_credit_earn"].ToString();
                //        //        elig.sem5_sgpi = dtrow["sem5_SGPI"].ToString();
                //        //        elig.sem6_cg = dtrow["sem6_cg"].ToString();
                //        //        elig.sem6_ce = dtrow["sem6_credit_earn"].ToString();
                //        //        elig.sem6_sgpi = dtrow["sem6_SGPI"].ToString();
                //        //        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                //        //        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                //        //        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                //        //        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                //        //        elig.sem5_KT = dtrow["Sem5_KT"].ToString();
                //        //        elig.sem6_KT = dtrow["Sem6_KT"].ToString();
                //        //        elig.Status = dtrow["STATUS"].ToString();
                //        //        elig.formfilled = dtrow["form_filled"].ToString();
                //        //        elig.exist = dtrow["Status"].ToString();
                //        //        elig.type = dtrow["type"].ToString();
                //        //        elig.roll_no = dtrow["Roll_no"].ToString();
                //        //        details.Add(elig);
                //        //    }
                //        //}
                //        //else
                //        //{
                //        //    foreach (DataRow dtrow in dt.Rows)
                //        //    {
                //        //        EligibilityClass elig = new EligibilityClass();
                //        //        elig.studid = dtrow["stud_id"].ToString();
                //        //        elig.name = dtrow["Student_Name"].ToString();
                //        //        elig.sem1_cg = dtrow["sem1_cg"].ToString();
                //        //        elig.sem1_ce = dtrow["sem1_credit_earn"].ToString();
                //        //        elig.sem1_sgpi = dtrow["sem1_SGPI"].ToString();
                //        //        elig.sem2_cg = dtrow["sem2_cg"].ToString();
                //        //        elig.sem2_ce = dtrow["sem2_credit_earn"].ToString();
                //        //        elig.sem2_sgpi = dtrow["sem2_SGPI"].ToString();
                //        //        elig.sem3_cg = dtrow["sem3_cg"].ToString();
                //        //        elig.sem3_ce = dtrow["sem3_credit_earn"].ToString();
                //        //        elig.sem3_sgpi = dtrow["sem3_SGPI"].ToString();
                //        //        elig.sem4_cg = dtrow["sem4_cg"].ToString();
                //        //        elig.sem4_ce = dtrow["sem4_credit_earn"].ToString();
                //        //        elig.sem4_sgpi = dtrow["sem4_SGPI"].ToString();
                //        //        elig.sem5_cg = dtrow["sem5_cg"].ToString();
                //        //        elig.sem5_ce = dtrow["sem5_credit_earn"].ToString();
                //        //        elig.sem5_sgpi = dtrow["sem5_SGPI"].ToString();
                //        //        elig.sem6_cg = dtrow["sem6_cg"].ToString();
                //        //        elig.sem6_ce = dtrow["sem6_credit_earn"].ToString();
                //        //        elig.sem6_sgpi = dtrow["sem6_SGPI"].ToString();
                //        //        elig.sem1_KT = dtrow["Sem1_KT"].ToString();
                //        //        elig.sem2_KT = dtrow["Sem2_KT"].ToString();
                //        //        elig.sem3_KT = dtrow["Sem3_KT"].ToString();
                //        //        elig.sem4_KT = dtrow["Sem4_KT"].ToString();
                //        //        elig.sem5_KT = dtrow["Sem5_KT"].ToString();
                //        //        elig.sem6_KT = dtrow["Sem6_KT"].ToString();
                //        //        elig.Status = dtrow["STATUS"].ToString();
                //        //        elig.formfilled = dtrow["form_filled"].ToString();
                //        //        elig.exist = dtrow["Status"].ToString();
                //        //        elig.type = dtrow["type"].ToString();
                //        //        elig.roll_no = dtrow["Roll_no"].ToString();
                //        //        details.Add(elig);
                //        //    }
                //        //}
            }
                con.Close();
                return details.ToArray();
            }
        }
    

    
    public string curr_year()
    {
        string str = "select * from m_academic where IsCurrent='1'";
        DataTable dt = cls.fillDataTable(str);
        string ayid = "";
        if (dt.Rows.Count > 0)
        {
            ayid = dt.Rows[0]["AYID"].ToString();
        }
        else
        {
            ayid = "NO";
        }
        return ayid;
    }

    //------------aishwarya
    //-----------aishwarya
    public List<ListItem> getfaculty_admission()
    {
        string str = "select faculty_id,faculty_name from m_crs_faculty where del_flag=0";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> getfaculty_admission = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        getfaculty_admission.Add(new ListItem
                        {
                            Value = sdr["faculty_id"].ToString().Trim(),
                            Text = sdr["faculty_name"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return getfaculty_admission;
            }
        }

        //  return details.ToArray();
    }
    public List<ListItem> getcourse_admission(string faculty_id)
    {
        string str = "select course_id,course_name from m_crs_course_tbl where faculty_id='" + faculty_id + "' and del_flag=0";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> getcourse_admission = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        getcourse_admission.Add(new ListItem
                        {
                            Value = sdr["course_id"].ToString().Trim(),
                            Text = sdr["course_name"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return getcourse_admission;
            }
        }

        //  return details.ToArray();
    }
    public List<ListItem> getsubcourse_admission(string course_id)
    {
        string str = "select subcourse_id,subcourse_name from m_crs_subcourse_tbl where course_id='" + course_id + "' and del_flag=0";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> getcourse_admission = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        getcourse_admission.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString().Trim(),
                            Text = sdr["subcourse_name"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return getcourse_admission;
            }
        }

        //  return details.ToArray();
    }
    public List<ListItem> getprefaculty_admission()
    {
        List<ListItem> getprefaculty_admission = new List<ListItem>();
        string[] faculty = { "Arts", "Commerce", "Science" };
        for (int i = 0; i < faculty.Length; i++)
        {
            getprefaculty_admission.Add(new ListItem
            {
                Value = faculty[i].ToString().Trim(),
                Text = faculty[i].ToString().Trim()
            });
        }
        return getprefaculty_admission;


    }
    public fill_admission_criteria_grid[] fill_admission_criteria_grid()
    {
        //return cls1.DMLqueries(query);

        List<fill_admission_criteria_grid> details = new List<fill_admission_criteria_grid>();
        string str = "select a.Eligibilty_id,a.Eligibilty_name,a.faculty_id,a.course_id,a.subcourse_id,b.subcourse_name,a.compulsory_subjects,a.previous_faculty,case when a.diploma='Diploma' then 'Compulsory' else 'Not Compulsory' end as diploma,case when a.firstAttempt=0 then 'Not Compulsory' else 'Compulsory' end as firstAttempt,a.previous_class,cast(a.min_percentage_gen as int) as min_percentage_gen,cast (a.min_percentage_res as int ) as min_percentage_res  from Admission_Eligibilty as a,m_crs_subcourse_tbl as b  where a.del_flag=0 and a.course_id=b.course_id and a.subcourse_id=b.subcourse_id";
        DataTable dtnew = cls1.fillDataTable(str);
        if (dtnew.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dtnew.Rows)
            {
                fill_admission_criteria_grid admission = new fill_admission_criteria_grid();
                admission.Eligibilty_id = dtrow["Eligibilty_id"].ToString().Trim();
                admission.Eligibilty_name = dtrow["Eligibilty_name"].ToString().Trim();
                admission.faculty = dtrow["faculty_id"].ToString().Trim();
                admission.course = dtrow["course_id"].ToString().Trim();
                admission.Sub_course = dtrow["subcourse_id"].ToString().Trim();
                admission.subcourse_name = dtrow["subcourse_name"].ToString().Trim();
                admission.compulsory_subjects = dtrow["compulsory_subjects"].ToString().Trim();
                admission.previous_faculty = dtrow["previous_faculty"].ToString().Trim();
                admission.diploma = dtrow["diploma"].ToString().Trim();
                admission.firstAttempt = dtrow["firstAttempt"].ToString().Trim();
                admission.previous_class = dtrow["previous_class"].ToString().Trim();
                admission.min_percentage_gen = dtrow["min_percentage_gen"].ToString().Trim();
                admission.min_percentage_res = dtrow["min_percentage_res"].ToString().Trim();
                details.Add(admission);
            }
        }

        return details.ToArray();
    }
    public saveData_admission_criteria[] saveData_admission_criteria(string faculty_id, string Sub_course, string course, string Eligibilty_name, string compulsory_subjects, string previous_faculty, string emp_id, string ayid, string diploma, string firstAttempt, string min_percentage_gen, string min_percentage_res)
    {
        //return cls1.DMLqueries(query);

        List<saveData_admission_criteria> details = new List<saveData_admission_criteria>();
        string str = "select dbo.Generate_eligibility_Id() as eligibility_id";
        DataTable dtnew = cls1.fillDataTable(str);
        //int id = Convert.ToInt32(dtnew.Rows[0]["Eligibilty_id"].ToString()) + 1;
        string e_id = dtnew.Rows[0]["eligibility_id"].ToString();
        if (dtnew.Rows.Count > 0)
        {
            string query = "insert into Admission_Eligibilty values('" + e_id + "','" + Eligibilty_name + "','" + faculty_id + "','" + course + "','" + Sub_course + "','" + compulsory_subjects + "','" + previous_faculty + "','" + diploma + "','" + firstAttempt + "','H.S.C','" + min_percentage_gen + "','" + min_percentage_res + "','" + emp_id + "','" + ayid + "',null,getdate(),null,0,null)";
            cls1.DMLqueries(query);

            saveData_admission_criteria saveflag = new saveData_admission_criteria();
            saveflag.msg = "Data Saved Sucessfully";
            details.Add(saveflag);
        }
        else
        {
            saveData_admission_criteria saveflag = new saveData_admission_criteria();
            saveflag.msg = "Data Already Saved";
            details.Add(saveflag);
        }
        return details.ToArray();
    }

    public UpdateData_admission_criteria[] UpdateData_admission_criteria(string eligibility_id, string faculty_id, string Sub_course, string course, string Eligibilty_name, string compulsory_subjects, string previous_faculty, string emp_id, string ayid, string diploma, string firstAttempt, string min_percentage_gen, string min_percentage_res)
    {
        //return cls1.DMLqueries(query);

        List<UpdateData_admission_criteria> details = new List<UpdateData_admission_criteria>();
        //string str = "select dbo.Generate_eligibility_Id() as eligibility_id";
        //DataTable dtnew = cls1.fillDataTable(str);
        ////int id = Convert.ToInt32(dtnew.Rows[0]["Eligibilty_id"].ToString()) + 1;
        //var e_id = ;
        //if (dtnew.Rows.Count > 0)
        //{
        string query = "update Admission_Eligibilty set Eligibilty_name='" + Eligibilty_name + "',faculty_id='" + faculty_id + "',course_id='" + course + "',subcourse_id='" + Sub_course + "',compulsory_subjects='" + compulsory_subjects + "',previous_faculty='" + previous_faculty + "',diploma='" + diploma + "',firstAttempt='" + firstAttempt + "',min_percentage_gen='" + min_percentage_gen + "',min_percentage_res='" + min_percentage_res + "',user_id=user_id+'" + emp_id + "',mod_dt=GETDATE() where Eligibilty_id='" + eligibility_id + "'";
        cls1.DMLqueries(query);

        UpdateData_admission_criteria saveflag = new UpdateData_admission_criteria();
        saveflag.msg = "Data Updated Sucessfully";
        details.Add(saveflag);
        //}
        //else
        //{
        //    UpdateData_admission_criteria saveflag = new UpdateData_admission_criteria();
        //    saveflag.msg = "Data Already Saved";
        //    details.Add(saveflag);
        //}
        return details.ToArray();
    }
    public List<ListItem> getcategory()
    {
        //string str = "select distinct Parent from State_category_details where Main='Reserved Category'";
        string str = "select distinct Parent from State_category_details where Main='Reserved Category' and Parent not like'%open%'";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> getcategory = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        getcategory.Add(new ListItem
                        {
                            Value = sdr["Parent"].ToString().Trim(),
                            Text = sdr["Parent"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return getcategory;
            }
        }

        //  return details.ToArray();
    }

    //public saveData_freeship_scholarship[] saveData_freeship_scholarship(string Sub_course, string Category, string Fees, string emp_id, string ayid, string flag)
    //{
    //    //return cls1.DMLqueries(query);

    //    List<saveData_freeship_scholarship> details = new List<saveData_freeship_scholarship>();
    //    string str = "select * from Freeship_Scholarship_fees where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and  category in ('" + Category.Replace(",", "','") + "') and del_flag=0";
    //    DataTable dtnew = cls1.fillDataTable(str);
    //    if (dtnew.Rows.Count == 0)
    //    {
    //        string[] field = Category.ToString().Split(',');
    //        for (int i = 0; i < field.Length; i++)
    //        {
    //            string query = "insert into Freeship_Scholarship_fees values('" + Sub_course + "','" + field[i] + "','" + Fees + "','" + emp_id + "',getdate(),null,0,'" + ayid + "','" + flag + "',null,null,null)";
    //            cls1.DMLqueries(query);
    //        }
    //        saveData_freeship_scholarship saveflag = new saveData_freeship_scholarship();
    //        saveflag.msg = "Data Saved Successfully";
    //        details.Add(saveflag);
    //    }
    //    else
    //    {
    //        saveData_freeship_scholarship saveflag = new saveData_freeship_scholarship();
    //        saveflag.msg = "Data Already Saved";
    //        details.Add(saveflag);
    //    }
    //    return details.ToArray();
    //}

    public List<ListItem> getfeesgroup(string subcourse_type)
    {
        //string str = "select distinct Parent from State_category_details where Main='Reserved Category'";
        string str = "select Group_id as 'Fieldid',Group_title as 'Text' from m_crs_subjectgroup_tbl where Course_type='" + subcourse_type + "'  and del_flag=0 and Admission_flag=0";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(str))
            {
                List<ListItem> getfeesgroup = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        getfeesgroup.Add(new ListItem
                        {
                            Value = sdr["Fieldid"].ToString().Trim(),
                            Text = sdr["Text"].ToString().Trim()
                        });
                    }
                }
                con.Close();
                return getfeesgroup;
            }
        }

        //  return details.ToArray();
    }
    //public UpdateData_freeship_scholarship[] UpdateData_freeship_scholarship(string Sub_course, string Category, string Fees, string emp_id, string ayid, string flag)
    //{
    //    //return cls1.DMLqueries(query);

    //    List<UpdateData_freeship_scholarship> details = new List<UpdateData_freeship_scholarship>();
    //    string[] field = Category.ToString().Split(',');
    //    for (int i = 0; i < field.Length; i++)
    //    {
    //        string str = "select * from Freeship_Scholarship_fees where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and  category='" + field[i] + "' and del_flag=0";
    //        DataTable dtnew = cls1.fillDataTable(str);
    //        if (dtnew.Rows.Count == 0)
    //        {
    //            string query = "insert into Freeship_Scholarship_fees values('" + Sub_course + "','" + field[i] + "','" + Fees + "','" + emp_id + "',getdate(),null,0,'" + ayid + "','" + flag + "',null,null,null)";
    //            cls1.DMLqueries(query);
    //        }
    //        else
    //        {
    //            string query = "update Freeship_Scholarship_fees set fees='" + Fees + "',mod_dt=getdate(),emp_id=emp_id+'," + emp_id + "',openflag='" + flag + "'  where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and category='" + field[i] + "' ";
    //            cls1.DMLqueries(query);
    //        }

    //    }
    //    UpdateData_freeship_scholarship saveflag = new UpdateData_freeship_scholarship();
    //    saveflag.msg = "Data Saved Successfully";
    //    details.Add(saveflag);
    //    return details.ToArray();
    //}

    public saveData_freeship_scholarship[] saveData_freeship_scholarship(string Sub_course, string Category, string Fees, string emp_id, string ayid, string flag, string group)
    {
        //return cls1.DMLqueries(query);

        List<saveData_freeship_scholarship> details = new List<saveData_freeship_scholarship>();
        //string str = "select * from Freeship_Scholarship_fees where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and  category in ('" + Category.Replace(",", "','") + "') and del_flag=0";
        //DataTable dtnew = cls1.fillDataTable(str);
        //if (dtnew.Rows.Count == 0)
        //{
        string[] field = Category.ToString().Split(',');
        for (int i = 0; i < field.Length; i++)
        {
            string[] groupdata = group.ToString().Split(',');
            for (int j = 0; j < groupdata.Length; j++)
            {
                string str1 = "select * from Freeship_Scholarship_fees where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and  category='" + field[i] + "' and ext3='" + groupdata[j] + "' and del_flag=0";
                DataTable dtnew1 = cls1.fillDataTable(str1);
                if (dtnew1.Rows.Count == 0)
                {
                    string query = "insert into Freeship_Scholarship_fees values('" + Sub_course + "','" + field[i] + "','" + Fees + "','" + emp_id + "',getdate(),null,0,'" + ayid + "','" + flag + "','" + groupdata[j] + "' ,null,null)";
                    cls1.DMLqueries(query);

                }
                else
                {
                    string query = "update Freeship_Scholarship_fees set fees='" + Fees + "',mod_dt=getdate(),emp_id=emp_id+'," + emp_id + "',openflag='" + flag + "'  where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and category='" + field[i] + "' and ext3='" + groupdata[j] + "' ";
                    cls1.DMLqueries(query);
                }


            }
        }
        saveData_freeship_scholarship saveflag = new saveData_freeship_scholarship();
        saveflag.msg = "Data Saved Successfully";
        details.Add(saveflag);
        //}
        //else
        //{
        //    saveData_freeship_scholarship saveflag = new saveData_freeship_scholarship();
        //    saveflag.msg = "Data Already Saved";
        //    details.Add(saveflag);
        //}
        return details.ToArray();
    }
    public UpdateData_freeship_scholarship[] UpdateData_freeship_scholarship(string Sub_course, string Category, string Fees, string emp_id, string ayid, string flag, string group)
    {
        //return cls1.DMLqueries(query);

        List<UpdateData_freeship_scholarship> details = new List<UpdateData_freeship_scholarship>();
        string[] field = Category.ToString().Split(',');
        for (int i = 0; i < field.Length; i++)
        {
            string[] groupdata = group.ToString().Split(',');
            for (int j = 0; j < groupdata.Length; j++)
            {
                string str = "select * from Freeship_Scholarship_fees where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and  category='" + field[i] + "' and ext3='" + groupdata[j] + "' and del_flag=0";
                DataTable dtnew = cls1.fillDataTable(str);
                if (dtnew.Rows.Count == 0)
                {
                    string query = "insert into Freeship_Scholarship_fees values('" + Sub_course + "','" + field[i] + "','" + Fees + "','" + emp_id + "',getdate(),null,0,'" + ayid + "','" + flag + "','" + groupdata[j] + "',null,null)";
                    cls1.DMLqueries(query);
                }
                else
                {
                    string query = "update Freeship_Scholarship_fees set fees='" + Fees + "',mod_dt=getdate(),emp_id=emp_id+'," + emp_id + "',openflag='" + flag + "'  where ayid='" + ayid + "' and Sub_course='" + Sub_course + "' and category='" + field[i] + "' and ext3='" + groupdata[j] + "' ";
                    cls1.DMLqueries(query);
                }

            }
        }
        UpdateData_freeship_scholarship saveflag = new UpdateData_freeship_scholarship();
        saveflag.msg = "Data Saved Successfully";
        details.Add(saveflag);
        return details.ToArray();
    }
    public fill_freeship_grid[] fill_freeship_grid(string ayid, string Sub_course)
    {
        //return cls1.DMLqueries(query);

        List<fill_freeship_grid> details = new List<fill_freeship_grid>();
        string str = "";
        if (Sub_course == "--Select--")
        {
            str = "select Sub_course,Category,Fees,openflag from Freeship_Scholarship_fees where ayid='" + ayid + "' and del_flag=0 ";
        }
        else
        {
            str = "select a.Sub_course,a.Category,a.Fees,a.openflag,(b.Group_id) as group_id,(b.Group_title) as group_name from Freeship_Scholarship_fees a ,m_crs_subjectgroup_tbl b where a.ayid='" + ayid + "' and a.del_flag=0 and b.del_flag=0  and a.Sub_course like'" + Sub_course + "%' and a.ext3=b.Group_id order by b.Group_title";
        }
        DataTable dtnew = cls1.fillDataTable(str);
        if (dtnew.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dtnew.Rows)
            {
                fill_freeship_grid fee = new fill_freeship_grid();
                fee.Sub_course = dtrow["Sub_course"].ToString().Trim();
                fee.Category = dtrow["Category"].ToString().Trim();
                fee.Fees = dtrow["Fees"].ToString().Trim();
                fee.group_id = dtrow["group_id"].ToString().Trim();
                fee.group_name = dtrow["group_name"].ToString().Trim();
                if (dtrow["openflag"].ToString().Trim().ToUpper() == "FALSE")
                {
                    fee.flag = "Admission Open";
                }
                else if (dtrow["openflag"].ToString().Trim().ToUpper() == "TRUE")
                {
                    fee.flag = "Admission Not Opened";
                }
                details.Add(fee);
            }
        }

        return details.ToArray();
    }

    //------------------------

    ///////////////////////////intake//////////////////siddhi_08-04-2021


    public List<ListItem> fillsubc(string branch)
    {
        String qry = "select subcourse_id,subcourse_name from m_crs_subcourse_tbl  where course_id='" + branch + "' and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["subcourse_id"].ToString(),
                            Text = sdr["subcourse_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public intake_capacity[] fillget(string subcourse, string ayid)
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        //String qry = "select distinct c.Group_id,c.Group_title,a.intake from  m_crs_subjectgroup_tbl as c LEFT JOIN m_intake as a on a.group_id=c.Group_id and c.del_flag=a.del_flag   where  c.subcourse_id='" + subcourse + "' and a.ayid='" + ayid + "' and c.del_flag=0     order by c.Group_title";
        String qry = "select distinct c.Group_id,c.Group_title,a.intake from  m_crs_subjectgroup_tbl as c left JOIN m_intake as a on c.del_flag=a.del_flag and a.subcourse_id=c.Subcourse_id and  c.Group_id like '%'+a.group_id+'%' and  a.ayid='" + ayid + "' where   c.subcourse_id='" + subcourse + "'  and c.del_flag=0     order by c.Group_title";
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);

        List<intake_capacity> details = new List<intake_capacity>();
        foreach (DataRow dtrow in dt.Rows)
        {
            intake_capacity modal = new intake_capacity();
            modal.id = dtrow["Group_id"].ToString();
            modal.title = dtrow["Group_title"].ToString();
            modal.intake_form = dtrow["intake"].ToString();
            details.Add(modal);
        }
        return details.ToArray();
    }

    public bool saveintake(string ayid, string subcourse, string txtintake, string group_id, string emp_id)
    {

        DataTable dt = new DataTable();
        dt = cls1.fillDataTable("select * from m_intake where group_id='" + group_id + "' and ayid='" + ayid + "' and subcourse_id='" + subcourse + "'");

        if (txtintake.ToString() != "")
        {
            if (dt.Rows.Count > 0)
            {

                bool value = false;
                //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
                String insqry = "update m_intake set intake='" + txtintake + "',mod_date=getdate(),user_id=user_id +','+'" + emp_id + "' where subcourse_id='" + subcourse + "' and group_id='" + group_id + "' and ayid='" + ayid + "'";
                value = cls1.DMLqueries(insqry);
                return value;

            }
            else
            {
                bool value = false;
                //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
                String insqry = "insert into m_intake values('" + ayid + "','" + subcourse + "','" + txtintake + "','" + group_id + "','" + emp_id + "',getdate(),null,0)";
                value = cls1.DMLqueries(insqry);
                return value;
            }

        }
        else
        {
            if (txtintake.ToString() == "")
            {
                txtintake = "0";
                bool value = false;
                //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
                String insqry = "insert into m_intake values('" + ayid + "','" + subcourse + "','" + txtintake + "','" + group_id + "','" + emp_id + "',getdate(),null,0)";
                value = cls1.DMLqueries(insqry);
                return value;
            }
            else
            {
                return false;
            }
        }


    }
    //public bool updateintake(string subcourse, string txtintake, string group_id)
    //{
    //    bool value = false;
    //    //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
    //    String insqry = "update m_intake set intake='" + txtintake + "' where subcourse_id='" + subcourse + "' and group_id='" + group_id + "'";
    //    value = cls1.DMLqueries(insqry);
    //    return value;
    //}


    ///////////////////////state-category ///////////////////siddhi
    public List<ListItem> fillmain()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select distinct main from State_category_details";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> state = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        state.Add(new ListItem
                        {
                            Value = sdr["main"].ToString(),
                            Text = sdr["main"].ToString()
                        });
                    }
                }
                con.Close();
                return state;
            }
        }
    }

    public List<ListItem> fillmain1()
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select distinct main from State_category_details where main='State '";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> state = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        state.Add(new ListItem
                        {
                            Value = sdr["main"].ToString(),
                            Text = sdr["main"].ToString()
                        });
                    }
                }
                con.Close();
                return state;
            }
        }
    }


    public List<ListItem> fillparent(string ddl_main)
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select distinct parent from State_category_details where Main='" + ddl_main + "'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> state = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        state.Add(new ListItem
                        {
                            Value = sdr["parent"].ToString(),
                            Text = sdr["parent"].ToString()
                        });
                    }
                }
                con.Close();
                return state;
            }
        }
    }

    public state[] fillgrid(string ddl_main, string ddl_parent)
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select id,main as [Type],parent as [sub_Type],child as [Board/University] from State_category_details where main='" + ddl_main + "' and parent='" + ddl_parent + "'";
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);

        List<state> details = new List<state>();
        foreach (DataRow dtrow in dt.Rows)
        {
            state modal = new state();
            modal.id = Convert.ToInt32(dtrow["id"].ToString());
            modal.Type = dtrow["Type"].ToString();
            modal.sub_Type = dtrow["sub_Type"].ToString();
            modal.Board = dtrow["Board/University"].ToString();
            details.Add(modal);
        }
        return details.ToArray();
    }

    public bool savechild(string ddl_main, string ddl_parent, string txtboard, string emp_id)
    {
        bool value = false;
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String insqry = "insert into State_category_details values('" + ddl_main + "','" + ddl_parent + "','" + txtboard + "','" + emp_id + "',getdate(),null,0)";
        value = cls1.DMLqueries(insqry);
        return value;
    }

    public bool updatechild(string ddl_main, string ddl_parent, string txtboard, string emp_id, string id)
    {
        bool value = false;
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String insqry = "update State_category_details set Main='" + ddl_main + "',Parent='" + ddl_parent + "',Child='" + txtboard + "',user_id=user_id +','+'" + emp_id + "',mod_date=getdate() where id='" + id + "'";
        value = cls1.DMLqueries(insqry);
        return value;
    }

    public bool savemain(string ddl_main1, string txtsub, string txtboard, string emp_id)
    {
        bool value = false;
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String insqry = "insert into State_category_details values('" + ddl_main1 + "','" + txtsub + "','" + txtboard + "','" + emp_id + "',getdate(),null,0)";
        value = cls1.DMLqueries(insqry);
        return value;
    }

    public bool deletestate(string id)
    {
        bool value = false;
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String insqry = "update State_category_details set del_flag=1,mod_date=getdate() where id='" + id + "'";
        value = cls1.DMLqueries(insqry);
        return value;
    }


    //--aishwarya
    public fill_hsc_data[] fill_hsc_data(string stud_id, string stud_name)
    {
        //return cls1.DMLqueries(query);

        List<fill_hsc_data> details = new List<fill_hsc_data>();
        string str = "";
        if (stud_id != "")
        {
            str = "select stud_id as [Student ID],hsc_seat_no as [HSC Seat Number],stud_F_Name as [First Name],stud_M_Name as [Middle Name],stud_L_Name as [Last Name],stud_mo_name as[Mother Name],convert (date,stud_DOB,103) as [Date of Birth],branch as [Previouse College],stud_Father_TelNo as [Father Mobile Number],stud_Mother_TelNo[Mother mobile Number],hsc_obtained as [Marks Obtain],hsc_outof as [Marks Outof] from hsc_previous_detail where stud_id='" + stud_id + "' and del_flag=0";
        }
        else if (stud_name != "")
        {
            str = "select stud_id as [Student ID],hsc_seat_no as [HSC Seat Number],stud_F_Name as [First Name],stud_M_Name as [Middle Name],stud_L_Name as [Last Name],stud_mo_name as[Mother Name],convert (date,stud_DOB,103) as [Date of Birth],branch as [Previouse College],stud_Father_TelNo as [Father Mobile Number],stud_Mother_TelNo[Mother mobile Number],hsc_obtained as [Marks Obtain],hsc_outof as [Marks Outof] from hsc_previous_detail where (stud_F_Name +' '+stud_M_Name+' '+stud_L_Name) like replace('%" + stud_name + "%',' ','%') and del_flag=0";
        }
        DataTable dtnew = cls1.fillDataTable(str);
        if (dtnew.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dtnew.Rows)
            {
                fill_hsc_data hscdata = new fill_hsc_data();
                hscdata.stud_id = dtrow["Student ID"].ToString().Trim();
                hscdata.hsc_seat_no = dtrow["HSC Seat Number"].ToString().Trim();
                hscdata.stud_F_Name = dtrow["First Name"].ToString().Trim();
                hscdata.stud_M_Name = dtrow["Middle Name"].ToString().Trim();
                hscdata.stud_L_Name = dtrow["Last Name"].ToString().Trim();
                hscdata.stud_mo_name = dtrow["Mother Name"].ToString().Trim();
                hscdata.stud_DOB = dtrow["Date of Birth"].ToString().Trim();
                hscdata.Previouse_College = dtrow["Previouse College"].ToString().Trim();
                hscdata.stud_Father_TelNo = dtrow["Father Mobile Number"].ToString().Trim();
                hscdata.stud_Mother_TelNo = dtrow["Mother mobile Number"].ToString().Trim();
                hscdata.hsc_obtained = dtrow["Marks Obtain"].ToString().Trim();
                hscdata.hsc_outof = dtrow["Marks Outof"].ToString().Trim();
                details.Add(hscdata);
            }
        }

        return details.ToArray();
    }
    public saveData_hsc_data_update[] saveData_hsc_data_update(string query)
    {
        //return cls1.DMLqueries(query);

        List<saveData_hsc_data_update> details = new List<saveData_hsc_data_update>();

        if (query != "")
        {

            cls1.DMLqueries(query);

            saveData_hsc_data_update saveflag = new saveData_hsc_data_update();
            saveflag.msg = "Data Saved Successfully";
            details.Add(saveflag);
        }
        else
        {
            saveData_hsc_data_update saveflag = new saveData_hsc_data_update();
            saveflag.msg = "Data Not Saved";
            details.Add(saveflag);
        }
        return details.ToArray();
    }






    public List<ListItem> fillfields()
    {
        string qry = " select 'Gender' as 'Fieldid','GENDER' as 'Text' union all select 'Category' as 'Fieldid','CATEGORY' as 'Text' union all select 'Caste' as 'Fieldid','CASTE' as 'Text'  union all select 'Format(DOB,''dd-MM-yyyy'') as DOB' as 'Fieldid','DATE OF BIRTH' as 'Text' union all select '(Address_line1 +''   ''+ Address_line2 +''   ''+ Address_line3) as Address' as 'Fieldid','ADDRESS' as 'Text' union all select 'pincode' as 'Fieldid','PINCODE' as 'Text' union all select 'state' as 'Fieldid','STATE' as 'Text' union all select 'Phone_No' as 'Fieldid','MOBILE NO.1' as 'Text' union all select 'Mob_No' as 'Fieldid','MOBILE NO.2' as 'Text'  union all select 'Email_id' as 'Fieldid','EMAIL ID' as 'Text' union all select 'birth_place' as 'Fieldid','BIRTH PLACE' as 'Text' union all select 'Father_contact_No' as 'Fieldid','FATHER CONTACT NO.' as 'Text' union all select 'Mother_contact_No' as 'Fieldid','MOTHER CONTACT NO.' as 'Text' union all select 'aadharcard_no' as 'Fieldid','AADHAR NO' as 'Text'  union all select 'Is_inhouse' as 'Fieldid','APPLICANT TYPE' as 'Text'";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> subgrp = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        subgrp.Add(new ListItem
                        {
                            Value = sdr["Fieldid"].ToString(),
                            Text = sdr["Text"].ToString()
                        });
                    }
                }
                con.Close();


                return subgrp;
            }
        }



    }

    public singlestudent[] fillgridsingle(string year, string formno)
    {

        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        String qry = "select distinct a.Form_no,a.Name,a.Group_title,b.stud_id,a.group_id,a.Phone_No  from (select (a.Form_no+SUBSTRING(b.group_id,4,3))as Form_no,Upper(ISNULL(a.F_name,'')+' '+ISNULL(a.M_name,'')+' '+ISNULL(a.L_name,'')+' '+ ISNULL(a.Mo_name,'++')) as Name,f.Group_title,f.Group_id,(a.Phone_No+','+a.Mob_No) as Phone_No  from d_adm_applicant as a, OLA_FY_adm_CourseSelection as b ,m_crs_subjectgroup_tbl as f where  a.Form_no=b.formno and b.group_id=f.Group_id and a.ACDID='" + year + "' and a.Form_no='" + formno + "' ) a ,OLA_FY_adm_CourseSelection b where SUBSTRING(a.Form_no,0,7)=b.formno and a.Group_id=b.group_id order by a.Group_title";
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);

        List<singlestudent> details = new List<singlestudent>();

        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dtrow in dt.Rows)
            {
                singlestudent ss = new singlestudent();
                ss.formno = dtrow["Form_no"].ToString().Trim();
                ss.name = dtrow["Name"].ToString().Trim();
                ss.group_title = dtrow["Group_title"].ToString().Trim();
                ss.stud_id = dtrow["stud_id"].ToString().Trim();
                ss.phone = dtrow["Phone_No"].ToString().Trim();

                details.Add(ss);
            }
        }

        return details.ToArray();
    }
    public studentformdet[] fillgrid(string year, string faculty, string course, string subcourse, string group, string field, string fieldheader)
    {


        String qry = "select (a.Form_no+SUBSTRING(b.group_id,4,3))as Form_no,a.stud_id,(ISNULL(a.F_name,'')+' '+ISNULL(a.M_name,'')+' '+ISNULL(a.L_name,'')+' '+ ISNULL(a.Mo_name,'++')) as Name " + field + "  from d_adm_applicant as a, OLA_FY_adm_CourseSelection as b ,m_crs_course_tbl as c,m_crs_subcourse_tbl as d,m_crs_subjectgroup_tbl as f ,m_crs_faculty as e where f.Subcourse_id=d.subcourse_id and c.course_id=d.course_id and e.faculty_id='" + faculty + "' and c.course_id='" + course + "' and d.subcourse_id='" + subcourse + "' and f.Group_id='" + group + "'and a.Form_no=b.formno and b.group_id=f.Group_id and a.ACDID='" + year + "' order by Form_no";
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);


        string[] arr = fieldheader.Split(',');


        List<studentformdet> details = new List<studentformdet>();
        studentformdet sfd = new studentformdet();
        List<formheader> formhed = new List<formheader>();
        if (fieldheader != "")
        {
            for (int i = 0; i < arr.Length; i++)
            {
                formheader fh = new formheader();
                fh.header = arr[i].ToString();

                formhed.Add(fh);
            }
            sfd.formh = formhed.ToArray();
        }

        List<formfields> formfield = new List<formfields>();



        foreach (DataRow dtrow in dt.Rows)
        {
            formfields ff = new formfields();
            DataColumnCollection columns = dt.Columns;


            ff.form_no = dtrow["Form_no"].ToString();
            ff.stud_id = dtrow["stud_id"].ToString();
            ff.stud_name = dtrow["Name"].ToString();


            if (columns.Contains("Gender"))
            {
                if (Convert.ToBoolean(dtrow["Gender"]) == true)
                {
                    ff.Gender = "Male";
                }
                else
                {
                    ff.Gender = "Female";
                }

            }
            if (columns.Contains("Category"))
            {

                ff.Category = dtrow["Category"].ToString();

            }
            if (columns.Contains("Caste"))
            {

                ff.Caste = dtrow["Caste"].ToString();

            }
            if (columns.Contains("DOB"))
            {
                ff.DOB = dtrow["DOB"].ToString();
            }
            if (columns.Contains("Address"))
            {
                ff.Address = dtrow["Address"].ToString();
            }
            if (columns.Contains("pincode"))
            {
                ff.pincode = dtrow["pincode"].ToString();
            }
            if (columns.Contains("state"))
            {
                ff.state = dtrow["state"].ToString();
            }
            if (columns.Contains("Phone_No"))
            {
                ff.Phone_No = dtrow["Phone_No"].ToString();
            }
            if (columns.Contains("Mob_No"))
            {
                ff.Mob_No = dtrow["Mob_No"].ToString();
            }
            if (columns.Contains("Email_id"))
            {
                ff.Email_id = dtrow["Email_id"].ToString();
            }
            if (columns.Contains("birth_place"))
            {
                ff.birth_place = dtrow["birth_place"].ToString();
            }
            if (columns.Contains("Father_contact_No"))
            {
                ff.Father_contact_No = dtrow["Father_contact_No"].ToString();
            }
            if (columns.Contains("Mother_contact_No"))
            {
                ff.Mother_contact_No = dtrow["Mother_contact_No"].ToString();
            }
            if (columns.Contains("aadharcard_no"))
            {
                ff.aadharcard_no = "'" + dtrow["aadharcard_no"].ToString();
            }
            if (columns.Contains("Is_inhouse"))
            {
                if (Convert.ToBoolean(dtrow["Is_inhouse"]) == false)
                {
                    ff.applicant_type = "Inhouse";

                }
                else
                {
                    ff.applicant_type = "Outsider";
                }

            }
            formfield.Add(ff);

        }
        sfd.formf = formfield.ToArray();


        details.Add(sfd);

        return details.ToArray();
    }


    public List<ListItem> getcourseapplicant(string fid)
    {
        string qry = "select Distinct Course_name,course_id from m_crs_course_tbl Where   Course_name <> '' And faculty_id='" + fid + "' and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["course_id"].ToString(),
                                Text = sdr["Course_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> getfacultyapplicant()
    {
        string qry = " select faculty_name,faculty_Id from m_crs_faculty Where faculty_name <> ''   and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["faculty_Id"].ToString(),
                                Text = sdr["faculty_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }
    public List<ListItem> getsubcourseapplicant(string course)
    {
        string qry = " select Distinct subcourse_name,subcourse_id from m_crs_subcourse_tbl Where subcourse_name <> '' And course_id='" + course + "' and del_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["subcourse_id"].ToString(),
                                Text = sdr["subcourse_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }
    public List<ListItem> getgroupapplicant(string subcourse)
    {
        string qry = "select Group_title,Group_id from m_crs_subjectgroup_tbl where subcourse_id='" + subcourse + "'  and del_flag=0 and Admission_flag=0";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Group_id"].ToString(),
                                Text = sdr["Group_title"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }


    /// billing new module 
    public bill_fields[] get_overall()
    {
        string qry = "";
        //        qry = "select x.emp_id,upper(Employee_Name) as Employee_Name,isnull([Junior Supervision],'0') as js,isnull([Senior Supervision],'0') as ss,isnull([Chief Conductor],'0') as cc , isnull([Assessment],'0')  as asses,"
        //+ " isnull([Moderation],'0') moder,isnull([Revalutaion],'0') as rev,isnull([Proof Corr],'0') as prf,isnull([Translaiton],'0') as trans,isnull([Paper Setting],'0') Paper_set,isnull([Internals],'0')  inter,"
        //+ " isnull([Practicals],'0') practs,isnull([Answer],'0') ans, sum(cast(isnull([Junior Supervision],0)as int)+cast(isnull([Senior Supervision],0) as int)+cast(isnull([Proof Corr],0) as int)+cast(isnull([Paper Setting],0) as int)+"
        //+ " cast(isnull([Assessment],0) as int)+ cast(isnull([Chief Conductor],0)  as int)+cast(isnull([Moderation],0) as int)+ cast(isnull([Internals],0) as int)+cast(isnull([Revalutaion],0) as int)+cast(isnull([Translaiton],0) "
        // + " as int)+cast(isnull([Practicals],0) as int)+cast(isnull([Answer],0) as int)) as Total_Bill, convert(varchar(11) ,getdate(),100) as datee,max(Account_No) as Account_No  from (select emp_id,Employee_Name,[Junior Supervision], [Senior Supervision],"
        // + " [Chief Conductor],[Paper Setting],[Proof Corr],[Assessment],[Moderation],[Revalutaion],[Translaiton],[Internals],[Practicals],[Answer],bank_acc_no as Account_No from"
        //  + " (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='jun_sup' then 'Junior Supervision'  when status='sen_sup' "
        //   + " then 'Senior Supervision'  when status='proof' then 'Proof Corr' when status='chief_con' then 'Chief Conductor' when status='asses' then 'Assessment' when status='moder' then 'Moderation' when status='inter'"
        //    + " then 'Internals' when status='paper_set' then 'Paper Setting' when status='practs' then 'Practicals' when status='reval' then 'Revalutaion'  when status='trans' then 'Translaiton' when status='ans' then 'Answer' when status='other' then ''"
        //     + " end as status_final,bank_acc_no from emp_billing_details_2020_online b,EmployeePersonal p  where  b.Emp_Id=p.emp_id and status not like '%other%' group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no) as t"
        //      + " pivot (max(amount) for status_final in ([Junior Supervision],[Senior Supervision],[Chief Conductor], [Paper Setting],[Revalutaion],[Translaiton],[Assessment],[Moderation],[Internals],[Practicals],[Proof Corr],[Answer])) pvt) "
        //      + " x  group by x.emp_id,employee_name,[Junior Supervision],[Senior Supervision],[Chief Conductor], [Paper Setting],[Assessment],[Moderation],[Internals],[Practicals], [Revalutaion],[Translaiton],[Proof Corr] ,[Answer],"
        //      + " Account_No order by emp_id,Employee_Name";

        qry = "select distinct x.emp_id,Employee_Name,isnull([Junior Supervision],'0') as js,isnull([Senior Supervision],'0') as ss,isnull([Chief Conductor],'0') as cc , isnull([Assessment],'0') as asses, isnull([Moderation],'0') moder,isnull([Revalutaion],'0') as rev,isnull([Translaiton],'0') as trans,isnull([Proof Corr],'0') as prf,isnull([Paper Setting],'0') Paper_set,isnull([Internals],'0') inter,isnull([Practicals],'0')  practs,isnull([Answer],'0') ans, isnull([Joint_cheif],'0') jn_chf,isnull([MCQ],'0') mcq_paper,isnull([UPLOAD],'0') upld_que,  sum(cast(isnull([Junior Supervision],0)as int)+cast(isnull([Senior Supervision],0) as int)+cast(isnull([Proof Corr],0) as int)+cast(isnull([Paper Setting],0) as int)+cast(isnull([Assessment],0) as int)+ cast(isnull([Chief Conductor],0)  as int)+cast(isnull([Moderation],0) as int)+ cast(isnull([Internals],0) as int)+cast(isnull([Revalutaion],0) as int)+cast(isnull([Translaiton],0)  as int)+cast(isnull([Practicals],0) as int)+cast(isnull([Answer],0) as int) +cast(isnull([Joint_cheif],0) as int)+cast(isnull([MCQ],0) as int)+cast(isnull([UPLOAD],0) as int)) as Total_Bill,convert(varchar(11) ,getdate(),100) as datee,Account_No   from (select emp_id,Employee_Name,[Junior Supervision], [Senior Supervision],[Chief Conductor],[Paper Setting],[Assessment],[Moderation],[Proof Corr],[Revalutaion],[Translaiton],[Internals],[Practicals],[Answer],[Joint_cheif],[MCQ],[UPLOAD],bank_acc_no as Account_No from (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='jun_sup' then 'Junior Supervision' when status='sen_sup' then 'Senior Supervision' when status='proof' then 'Proof Corr'  when status='chief_con' then 'Chief Conductor' when status='asses' then 'Assessment' when status='moder' then 'Moderation' when status='inter' then 'Internals' when status='paper_set' then 'Paper Setting' when status='practs' then 'Practicals' when status='reval' then 'Revalutaion'  when status='trans' then 'Translaiton'  when status='ans' then 'Answer' when status='chiefjoin_con' then 'Joint_cheif' when status='mcq_que' then 'MCQ' when status='upload_que' then 'UPLOAD' when status='other' then '' end as status_final,bank_acc_no from emp_billing_details_2020_online b,EmployeePersonal p  where  b.Emp_Id=p.emp_id and status not like  '%other%'  group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no) as t pivot (max(amount) for status_final in ([Junior Supervision],[Senior Supervision],[Chief Conductor],[Paper Setting],[Revalutaion],[Translaiton],[Assessment],[Moderation],[Proof Corr],[Internals],[Practicals],[Answer],[Joint_cheif],[MCQ],[UPLOAD])) pvt) x  group by x.emp_id,employee_name, [Junior Supervision],[Senior Supervision],[Chief Conductor],[Paper Setting],[Assessment],[Moderation],[Internals],[Practicals],[Proof Corr], [Revalutaion],[Translaiton],[Answer],[Joint_cheif],[MCQ],[UPLOAD],Account_No order by  emp_id,Employee_Name";
        DataSet ds = cls.fillDataset(qry);
        List<bill_fields> details = new List<bill_fields>();
        if (ds.Tables[0].Rows.Count > 0)
        {
            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                //overallbill ove = new overallbill();
                //ove.staff_id = drrow["emp_id"].ToString();
                //ove.emp_name = drrow["Employee_Name"].ToString();
                //ove.emp_acc = drrow["Account_No"].ToString();
                //ove.jun_sup = drrow["js"].ToString();
                //ove.sen_sup = drrow["ss"].ToString();
                //ove.chief_con = drrow["cc"].ToString();
                //ove.paper_set = drrow["Paper_set"].ToString();
                //ove.asses = drrow["asses"].ToString();
                //ove.reval = drrow["rev"].ToString();
                //ove.trans = drrow["trans"].ToString();
                //ove.moderation = drrow["moder"].ToString();
                //ove.inter = drrow["inter"].ToString();
                //ove.practs = drrow["practs"].ToString();
                //ove.proof = drrow["prf"].ToString();
                //ove.ans = drrow["ans"].ToString();
                //ove.totall = drrow["Total_Bill"].ToString();

                bill_fields bill = new bill_fields();
                bill.id = drrow["emp_id"].ToString();
                bill.name = drrow["Employee_Name"].ToString();
                bill.date = drrow["datee"].ToString();
                bill.chef_con = drrow["cc"].ToString();
                bill.join_chef = drrow["jn_chf"].ToString();
                bill.trans = drrow["trans"].ToString();
                bill.proff_corr = drrow["prf"].ToString();
                bill.ans = drrow["ans"].ToString();
                bill.mcq = drrow["mcq_paper"].ToString();
                bill.upload_que = drrow["upld_que"].ToString();
                bill.acc_no = drrow["Account_No"].ToString();
                bill.total = drrow["Total_Bill"].ToString();
                details.Add(bill);
            }

        }
        return details.ToArray();


    }

    public bill_working[] working(string emp_id, string course)
    {
        string qrylock = "", qrybill = "", chk = "", bill = "";
        qrybill = "select distinct bill_no from emp_billing_details_2020_online where emp_id='" + emp_id + "' and Course='" + course + "' ";
        DataSet dsbill = cls.fillDataset(qrybill);
        List<bill_working> details = new List<bill_working>();
        if (dsbill.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i < dsbill.Tables[0].Rows.Count; i++)
            {
                bill_working billwork = new bill_working();
                chk = "select * from bill_lock_2020_online where billno='" + dsbill.Tables[0].Rows[i]["bill_no"].ToString() + "' and emp_id='" + emp_id + "' and islock=1 and del_flag=0;"
                + "select distinct bank_acc_no from emp_billing_details_2020_online where emp_id='" + emp_id + "'";
                //+ "select * from emp_billing_details_2020_online where  bank_acc_no=(select distinct bank_acc_no from emp_billing_details_2020_online where emp_id='" + emp_id + "') and emp_id='';"
                DataSet dtchk = cls.fillDataset(chk);
                if (dtchk.Tables[1].Rows.Count > 1)
                {
                    billwork.msg = "multiple_acc";
                }
                else
                {
                    string err_chk = "select * from emp_billing_details_2020_online where  bank_acc_no=(select distinct bank_acc_no from emp_billing_details_2020_online where emp_id='" + emp_id + "') and emp_id=''";
                    DataSet ds_errchk = cls.fillDataset(err_chk);
                    if (ds_errchk.Tables[0].Rows.Count == 1)
                    {
                        billwork.msg = "issue";
                    }
                    else
                    {
                        if (dtchk.Tables[0].Rows.Count > 0)
                        {
                            bill = dsbill.Tables[0].Rows[i]["bill_no"].ToString();
                            qrylock = "update bill_lock_2020_online set islock=1 where billno='" + bill + "' and emp_id='" + emp_id + "'";
                            billwork.msg = "generated";
                        }
                        else
                        {
                            bill = dsbill.Tables[0].Rows[i]["bill_no"].ToString();
                            qrylock = "insert into bill_lock_2020_online values('" + bill + "','" + emp_id + "','1',getdate(),0,'','')";
                            billwork.msg = "";
                        }
                    }

                }

                cls.DMLqueries(qrylock);
                details.Add(billwork);
            }
        }
        return details.ToArray();
    }

    public bill_fields[] get_billdata(string emp_id)
    {
        string qry = "select x.emp_id,Employee_Name,isnull([Junior Supervision],'0') as js,isnull([Senior Supervision],'0') as ss,isnull([Chief Conductor],'0') as cc , isnull([Assessment],'0') as asses, isnull([Moderation],'0') moder,isnull([Revalutaion],'0') as rev,isnull([Translaiton],'0') as trans,isnull([Proof Corr],'0') as prf,isnull([Paper Setting],'0') Paper_set,isnull([Internals],'0') inter,isnull([Practicals],'0')  practs,isnull([Answer],'0') ans, isnull([Joint_cheif],'0') jn_chf,isnull([MCQ],'0') mcq_paper,isnull([UPLOAD],'0') upld_que, "
+ " sum(cast(isnull([Junior Supervision],0)as int)+cast(isnull([Senior Supervision],0) as int)+cast(isnull([Proof Corr],0) as int)+cast(isnull([Paper Setting],0) as int)+cast(isnull([Assessment],0) as int)+ cast(isnull([Chief Conductor],0)  as int)+cast(isnull([Moderation],0) as int)+ cast(isnull([Internals],0) as int)+cast(isnull([Revalutaion],0) as int)+cast(isnull([Translaiton],0)  as int)+cast(isnull([Practicals],0) as int)+cast(isnull([Answer],0) as int) +cast(isnull([Joint_cheif],0) as int)+cast(isnull([MCQ],0) as int)+cast(isnull([UPLOAD],0) as int)) as Total_Bill,convert(varchar(11) ,getdate(),100) as datee,Account_No ,Bill_No  from (select emp_id,Employee_Name,[Junior Supervision], [Senior Supervision],[Chief Conductor],[Paper Setting],[Assessment],[Moderation],[Proof Corr],[Revalutaion],[Translaiton],[Internals],[Practicals],[Answer],[Joint_cheif],[MCQ],[UPLOAD],bank_acc_no as Account_No, bill_no as Bill_No from (select p.emp_id,isnull(p.NAME,'')+' '+isnull(p.FATHER,'')+' '+isnull(p.SURNAME,'') as Employee_Name,sum(cast(net_tot as int)) as Amount,  case when status='jun_sup' then 'Junior Supervision' when status='sen_sup' then 'Senior Supervision' when status='proof' then 'Proof Corr'  when status='chief_con' then 'Chief Conductor' when status='asses' then 'Assessment' when status='moder' then 'Moderation' when status='inter' then 'Internals' when status='paper_set' then 'Paper Setting' when status='practs' then 'Practicals' when status='reval' then 'Revalutaion'  when status='trans' then 'Translaiton'  when status='ans' then 'Answer' when status='chiefjoin_con' then 'Joint_cheif' when status='mcq_que' then 'MCQ' when status='upload_que' then 'UPLOAD'"
+ " when status='other' then '' end as status_final,bank_acc_no,bill_no from emp_billing_details_2020_online b,EmployeePersonal p  where b.Emp_Id='" + emp_id + "' and b.Emp_Id=p.emp_id and status not like  '%other%' and bill_no not in (select billno from bill_lock_2020_online where islock=1)  group by status,p.emp_id,NAME,FATHER, SURNAME,bank_acc_no,bill_no) as t pivot (max(amount) for status_final in ([Junior Supervision],[Senior Supervision],[Chief Conductor],[Paper Setting],[Revalutaion],[Translaiton],[Assessment],[Moderation],[Proof Corr],[Internals],[Practicals],[Answer],[Joint_cheif],[MCQ],[UPLOAD])) pvt) x  group by x.emp_id,employee_name, [Junior Supervision],[Senior Supervision],[Chief Conductor],[Paper Setting],[Assessment],[Moderation],[Internals],[Practicals],[Proof Corr], [Revalutaion],[Translaiton],[Answer],[Joint_cheif],[MCQ],[UPLOAD],Account_No,Bill_No order by  emp_id,Employee_Name";
        DataSet ds = cls.fillDataset(qry);
        List<bill_fields> details = new List<bill_fields>();
        if (ds.Tables[0].Rows.Count > 0)
        {

            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                bill_fields bill = new bill_fields();
                bill.id = drrow["emp_id"].ToString();
                bill.name = drrow["Employee_Name"].ToString();
                bill.date = drrow["datee"].ToString();
                bill.billno = drrow["Bill_no"].ToString();
                bill.sen_sup = drrow["ss"].ToString();
                bill.jun_sup = drrow["js"].ToString();
                bill.chef_con = drrow["cc"].ToString();
                bill.join_chef = drrow["jn_chf"].ToString();
                bill.paper_set = drrow["Paper_set"].ToString();
                bill.asses = drrow["asses"].ToString();
                bill.reval = drrow["rev"].ToString();
                bill.trans = drrow["trans"].ToString();
                bill.moder = drrow["moder"].ToString();
                bill.inter = drrow["inter"].ToString();
                bill.practs = drrow["practs"].ToString();
                bill.proff_corr = drrow["prf"].ToString();
                bill.ans = drrow["ans"].ToString();
                bill.mcq = drrow["mcq_paper"].ToString();
                bill.upload_que = drrow["upld_que"].ToString();
                bill.acc_no = drrow["Account_No"].ToString();
                bill.total = drrow["Total_Bill"].ToString();
                details.Add(bill);
            }
        }
        return details.ToArray();
    }

    public billingsearch[] getdata_billsrch(string empid)
    {
        string qry = "select distinct group_title,exam,sem,bill_no,convert(varchar(11) ,a.curr_dt,100) as datee from [dbo].[emp_billing_details_2020_online] a,m_crs_subjectgroup_tbl b where a.group_id=b.Group_id and emp_id='" + empid + "' and bill_no not in(select billno from bill_lock_2020_online where islock=1)";
        DataSet ds = cls.fillDataset(qry);
        List<billingsearch> details = new List<billingsearch>();
        if (ds.Tables[0].Rows.Count > 0)
        {
            foreach (DataRow drrow in ds.Tables[0].Rows)
            {
                billingsearch ove = new billingsearch();
                ove.sem = drrow["sem"].ToString();
                ove.bill_no = drrow["bill_no"].ToString();
                ove.group = drrow["group_title"].ToString();
                ove.exam = drrow["exam"].ToString();
                ove.bill_dt = drrow["datee"].ToString();

                details.Add(ove);
            }

        }
        return details.ToArray();


    }

    public List<ListItem> fill_billcrs(string emp_id)
    {
        string qrycrs = "select distinct a.Course,b.course_name from emp_billing_details_2020_online a,m_crs_course_tbl b where a.Course=b.course_id and emp_id='" + emp_id + "' ";
        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qrycrs))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["Course"].ToString(),
                            Text = sdr["course_name"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    ////----------------Salary----------------------
    //public salarydetails empdetails(empsalary emp, string msg)
    //{
    //    string str = "select e.emp_id,isnull(emp_title,'')+ISNULL(name,'')+' '+ISNULL(FATHER,'')+' '+ISNULL(SURNAME,'') as name,convert(varchar,dob,103) as DOB,case when (s.doj is not null and s.doj!='') then s.doj else  convert(varchar,e.doj,103) end as DOJ,CURRENT_DESIGNATION as des,DATENAME(MONTH, DATEADD(MONTH, convert(int,from_month), '2000-12-01'))+' '+from_year as applicable,(select case when count(*)>0 then 1 else 0 end  from salary_monthly_record where emp_id=e.emp_id and del_flag=0 and id=s.id) as deleteflag,s.id,s.emp_type,s.qualification,s.payscale,s.dor,s.from_month as month,s.from_year as year,s.basic,s.agp,s.total,s.da,s.hra,s.ta,s.others_sp_allow,s.gross_salary,s.arrears,s.total_salary,s.pf_no,s.pf_emp,s.pf_trust,s.pt,s.tds,s.others_deduct,s.total_deduct,s.net_salary,s.total_pf,s.total_salary_emp,s.remark,status_flag,s.account_no from EmployeePersonal e left join salary_master s on e.emp_id=s.emp_id and s.del_flag=0 where e.emp_id='" + emp.emp_id + "' order by cast (from_year as int),cast(from_month as int)";

    //    DataTable dtnew = cls1.fillDataTable(str);
    //    salarydetails sal = new salarydetails();
    //    List<empsalary> empsal = new List<empsalary>();

    //    if (dtnew.Rows.Count > 0)
    //    {
    //        for (int i = 0; i < dtnew.Rows.Count; i++)
    //        {
    //            empsalary det = new empsalary();
    //            det.emp_id = dtnew.Rows[i]["emp_id"].ToString();
    //            det.emp_name = dtnew.Rows[i]["name"].ToString();
    //            det.designation = dtnew.Rows[i]["des"].ToString();
    //            det.qualification = dtnew.Rows[i]["qualification"].ToString();
    //            det.acno = dtnew.Rows[i]["account_no"].ToString();
    //            det.scale = dtnew.Rows[i]["payscale"].ToString();
    //            det.joining = dtnew.Rows[i]["DOJ"].ToString();
    //            det.birthdate = dtnew.Rows[i]["DOB"].ToString();
    //            det.retirement = dtnew.Rows[i]["dor"].ToString();
    //            det.month = dtnew.Rows[i]["month"].ToString();
    //            det.year = dtnew.Rows[i]["year"].ToString();
    //            det.status = dtnew.Rows[i]["status_flag"].ToString();
    //            det.emp_type = dtnew.Rows[i]["emp_type"].ToString();
    //            det.applicable = dtnew.Rows[i]["applicable"].ToString();
    //            det.delete = dtnew.Rows[i]["deleteflag"].ToString();
    //            det.id = dtnew.Rows[i]["id"].ToString();
    //            det.basic = dtnew.Rows[i]["basic"].ToString();
    //            det.agp = dtnew.Rows[i]["agp"].ToString();
    //            det.total = dtnew.Rows[i]["total"].ToString();
    //            det.da = dtnew.Rows[i]["da"].ToString();
    //            det.hra = dtnew.Rows[i]["hra"].ToString();
    //            det.ta = dtnew.Rows[i]["ta"].ToString();
    //            det.oth_sp_allow = dtnew.Rows[i]["others_sp_allow"].ToString();
    //            det.gross_salary = dtnew.Rows[i]["gross_salary"].ToString();
    //            det.arrears = dtnew.Rows[i]["arrears"].ToString();
    //            det.total_salary = dtnew.Rows[i]["total_salary"].ToString();
    //            det.pf_no = dtnew.Rows[i]["pf_no"].ToString();
    //            det.pf_emp = dtnew.Rows[i]["pf_emp"].ToString();
    //            det.pf_trust = dtnew.Rows[i]["pf_trust"].ToString();
    //            det.pt = dtnew.Rows[i]["pt"].ToString();
    //            det.tds = dtnew.Rows[i]["tds"].ToString();
    //            det.oth_deduct = dtnew.Rows[i]["others_deduct"].ToString();
    //            det.total_deduct = dtnew.Rows[i]["total_deduct"].ToString();
    //            det.net_salary = dtnew.Rows[i]["net_salary"].ToString();
    //            det.total_pf = dtnew.Rows[i]["total_pf"].ToString();
    //            det.total_salary_emp = dtnew.Rows[i]["total_salary_emp"].ToString();
    //            det.remark = dtnew.Rows[i]["remark"].ToString();
    //            det.process = msg.ToString();
    //            empsal.Add(det);
    //        }
    //        sal.emp_salary = empsal.ToArray();
    //    }
    //    else
    //    {
    //        empsalary det = new empsalary();
    //        det.process = "NO";
    //        empsal.Add(det);
    //        sal.emp_salary = empsal.ToArray();
    //    }
    //    return sal;
    //}

    //public salarydetails getmonthly(empsalary emp, string msg)
    //{
    //    string str = "";
    //    if (emp.process == "New")
    //    {
    //        str = "select emp_id,isnull(emp_title,'')+ISNULL(name,'')+' '+ISNULL(FATHER,'')+' '+ISNULL(SURNAME,'') as name,convert(varchar,dob,103) as DOB,CURRENT_DESIGNATION as des from EmployeePersonal where emp_id in (select emp_id from salary_master where emp_id in (select emp_id from employee_department_des where emp_dept_id='" + emp.department + "' and emp_del_flag=1 and emp_id not in (select emp_id from salary_monthly_record where month='" + emp.month + "' and year='" + emp.year + "' and del_flag=0 )) and status_flag=0 and del_flag=0 and emp_type='" + emp.emp_type + "') order by emp_id";
    //    }
    //    else if (emp.process == "Edit")
    //    {
    //        str = "select emp_id,isnull(emp_title,'')+ISNULL(name,'')+' '+ISNULL(FATHER,'')+' '+ISNULL(SURNAME,'') as name,convert(varchar,dob,103) as DOB,CURRENT_DESIGNATION as des from EmployeePersonal where emp_id in (select emp_id from salary_master where emp_id in (select emp_id from employee_department_des where emp_dept_id='" + emp.department + "' and emp_del_flag=1 and emp_id in (select emp_id from salary_monthly_record where month='" + emp.month + "' and year='" + emp.year + "' and del_flag=0 )) and status_flag=0 and del_flag=0 and emp_type='" + emp.emp_type + "') order by emp_id";
    //    }
    //    DataTable dtnew = cls1.fillDataTable(str);
    //    salarydetails sal = new salarydetails();
    //    List<empsalary> empsal = new List<empsalary>();
    //    if (dtnew.Rows.Count > 0)
    //    {
    //        for (int i = 0; i < dtnew.Rows.Count; i++)
    //        {
    //            if (emp.process == "New")
    //            {
    //                string qry = "select top(1) *,DATENAME(MONTH, DATEADD(MONTH, convert(int,from_month), '2000-12-01'))+' '+from_year as applicable from (select case when from_year<" + emp.year + "  then 1 when from_year=" + emp.year + " and from_month<=" + emp.month + " then 1 else 0 end as curr,* from salary_master where emp_id='" + dtnew.Rows[i]["emp_id"].ToString() + "' and del_flag=0)a where a.curr=1 order by cast(from_year as int) desc,cast(from_month as int) desc";
    //                DataTable dtsal = cls1.fillDataTable(qry);
    //                if (dtsal.Rows.Count > 0)
    //                {
    //                    empsalary det = new empsalary();
    //                    det.emp_id = dtnew.Rows[i]["emp_id"].ToString();
    //                    det.emp_name = dtnew.Rows[i]["name"].ToString();
    //                    det.designation = dtnew.Rows[i]["des"].ToString();
    //                    det.birthdate = dtnew.Rows[i]["DOB"].ToString();
    //                    det.acno = dtsal.Rows[0]["account_no"].ToString();
    //                    det.qualification = dtsal.Rows[0]["qualification"].ToString();
    //                    det.scale = dtsal.Rows[0]["payscale"].ToString();
    //                    det.joining = dtsal.Rows[0]["DOJ"].ToString();
    //                    det.retirement = dtsal.Rows[0]["dor"].ToString();
    //                    det.month = dtsal.Rows[0]["from_month"].ToString();
    //                    det.year = dtsal.Rows[0]["from_year"].ToString();
    //                    det.status = dtsal.Rows[0]["status_flag"].ToString();
    //                    det.emp_type = dtsal.Rows[0]["emp_type"].ToString();
    //                    det.applicable = dtsal.Rows[0]["applicable"].ToString();
    //                    det.id = dtsal.Rows[0]["id"].ToString();
    //                    det.basic = dtsal.Rows[0]["basic"].ToString();
    //                    det.agp = dtsal.Rows[0]["agp"].ToString();
    //                    det.total = dtsal.Rows[0]["total"].ToString();
    //                    det.da = dtsal.Rows[0]["da"].ToString();
    //                    det.hra = dtsal.Rows[0]["hra"].ToString();
    //                    det.ta = dtsal.Rows[0]["ta"].ToString();
    //                    det.oth_sp_allow = dtsal.Rows[0]["others_sp_allow"].ToString();
    //                    det.gross_salary = dtsal.Rows[0]["gross_salary"].ToString();
    //                    det.arrears = dtsal.Rows[0]["arrears"].ToString();
    //                    det.total_salary = dtsal.Rows[0]["total_salary"].ToString();
    //                    det.pf_no = dtsal.Rows[0]["pf_no"].ToString();
    //                    det.pf_emp = dtsal.Rows[0]["pf_emp"].ToString();
    //                    det.pf_trust = dtsal.Rows[0]["pf_trust"].ToString();
    //                    det.pt = dtsal.Rows[0]["pt"].ToString();
    //                    det.tds = dtsal.Rows[0]["tds"].ToString();
    //                    det.oth_deduct = dtsal.Rows[0]["others_deduct"].ToString();
    //                    det.total_deduct = dtsal.Rows[0]["total_deduct"].ToString();
    //                    det.net_salary = dtsal.Rows[0]["net_salary"].ToString();
    //                    det.total_pf = dtsal.Rows[0]["total_pf"].ToString();
    //                    det.total_salary_emp = dtsal.Rows[0]["total_salary_emp"].ToString();
    //                    det.remark = dtsal.Rows[0]["remark"].ToString();
    //                    det.process = msg.ToString();
    //                    empsal.Add(det);
    //                }
    //            }
    //            else if (emp.process == "Edit")
    //            {
    //                string qry = "select *,(select sum(no) from (select case when year>" + emp.year + " then 1 when year=" + emp.year + " and month>" + emp.month + " then 1 else 0 end as no from salary_monthly_record where emp_id='" + dtnew.Rows[i]["emp_id"].ToString() + "' and del_flag=0)a) as count from salary_monthly_record where emp_id='" + dtnew.Rows[i]["emp_id"].ToString() + "' and year=" + emp.year + " and month=" + emp.month + " and del_flag=0";
    //                DataTable dtsal = cls1.fillDataTable(qry);
    //                if (dtsal.Rows.Count > 0)
    //                {
    //                    empsalary det = new empsalary();
    //                    det.emp_id = dtnew.Rows[i]["emp_id"].ToString();
    //                    det.emp_name = dtnew.Rows[i]["name"].ToString();

    //                    det.delete = dtsal.Rows[0]["count"].ToString();
    //                    det.id = dtsal.Rows[0]["id"].ToString();
    //                    det.gross_salary = dtsal.Rows[0]["gross_salary"].ToString();
    //                    det.arrears = dtsal.Rows[0]["arrears"].ToString();
    //                    det.total_salary = dtsal.Rows[0]["total_salary"].ToString();
    //                    det.total_deduct = dtsal.Rows[0]["total_deduct"].ToString();
    //                    det.net_salary = dtsal.Rows[0]["net_salary"].ToString();
    //                    det.total_pf = dtsal.Rows[0]["total_pf"].ToString();
    //                    det.total_salary_emp = dtsal.Rows[0]["total_salary_emp"].ToString();
    //                    det.process = msg.ToString();
    //                    empsal.Add(det);
    //                }
    //            }
    //        }
    //        sal.emp_salary = empsal.ToArray();
    //    }
    //    else
    //    {
    //        empsalary det = new empsalary();
    //        det.process = "NO";
    //        empsal.Add(det);
    //        sal.emp_salary = empsal.ToArray();
    //    }
    //    return sal;
    //}

    //public string savesalary(empsalary emp)
    //{
    //    string str = "insert into salary_master(emp_id,emp_type,qualification,account_no,payscale,doj,dor,from_month,from_year,basic,agp,total,da,hra,ta,others_sp_allow,gross_salary,arrears,total_salary,pf_no,pf_emp,pf_trust,pt,tds,others_deduct,total_deduct,net_salary,total_pf,total_salary_emp,remark,curr_dt,user_id,del_flag,status_flag) values('" + emp.emp_id + "','" + emp.emp_type + "','" + emp.qualification.ToString().Replace("'", "\"") + "','" + emp.acno.ToString().Replace("'", "\"") + "','" + emp.scale.ToString().Replace("'", "\"") + "','" + emp.joining.ToString().Replace("'", "\"") + "','" + emp.retirement.ToString().Replace("'", "\"") + "','" + emp.month + "','" + emp.year + "','" + emp.basic + "','" + emp.agp + "','" + emp.total + "','" + emp.da + "','" + emp.hra + "','" + emp.ta + "','" + emp.oth_sp_allow + "','" + emp.gross_salary + "','" + emp.arrears + "','" + emp.total_salary + "','" + emp.pf_no + "','" + emp.pf_emp + "','" + emp.pf_trust + "','" + emp.pt + "','" + emp.tds + "','" + emp.oth_deduct + "','" + emp.total_deduct + "','" + emp.net_salary + "','" + emp.total_pf + "','" + emp.total_salary_emp + "','" + emp.remark.ToString().Replace("'", "\"") + "',GETDATE(),'" + emp.user_id + "',0,0)";
    //    bool msg = cls1.DMLqueries(str);
    //    if (msg == true)
    //    {
    //        return "saved";
    //    }
    //    else
    //    {
    //        return "failed";
    //    }
    //}

    //public string deleteuser(empsalary emp)
    //{
    //    string str = "";
    //    if (emp.process == "Delete")
    //    {
    //        str = "update m_employee_personal set del_flag=1 where emp_id='" + emp.emp_id + "';update salary_master set status_flag=1 where emp_id='" + emp.emp_id + "'";
    //    }
    //    else if (emp.process == "Recover")
    //    {
    //        str = "update m_employee_personal set del_flag=0 where emp_id='" + emp.emp_id + "';update salary_master set status_flag=0 where emp_id='" + emp.emp_id + "'";
    //    }
    //    bool msg = cls1.DMLqueries(str);
    //    if (msg == true)
    //    {
    //        return "deleted";
    //    }
    //    else
    //    {
    //        return "failed";
    //    }
    //}

    //public string deletesalary(empsalary emp)
    //{
    //    string str = "update salary_master set del_flag=1,del_dt=GETDATE() where emp_id='" + emp.emp_id + "' and id='" + emp.id + "'";
    //    bool msg = cls1.DMLqueries(str);
    //    if (msg == true)
    //    {
    //        return "deleted";
    //    }
    //    else
    //    {
    //        return "failed";
    //    }
    //}

    //public string updatesalary(empsalary emp)
    //{
    //    string str = "update salary_master set qualification='" + emp.qualification.ToString().Replace("'", "\"") + "',account_no='" + emp.acno.ToString().Replace("'", "\"") + "',payscale='" + emp.scale + "',doj='" + emp.joining + "',dor='" + emp.retirement + "',emp_type='" + emp.emp_type + "',remark='" + emp.remark + "',pf_no='" + emp.pf_no + "',mod_dt=GETDATE() where emp_id='" + emp.emp_id + "' and id='" + emp.id + "' and del_flag=0";
    //    bool msg = cls1.DMLqueries(str);
    //    if (msg == true)
    //    {
    //        return "updated";
    //    }
    //    else
    //    {
    //        return "failed";
    //    }
    //}

    //public salarydetails nodata()
    //{
    //    salarydetails sal = new salarydetails();
    //    List<empsalary> empsal = new List<empsalary>();
    //    empsalary det = new empsalary();
    //    det.process = "NO";
    //    empsal.Add(det);
    //    sal.emp_salary = empsal.ToArray();
    //    return sal;
    //}

    //public salarydetails getdept()
    //{
    //    string str = "select * from m_department where del_flag=0";
    //    DataTable dtnew = cls1.fillDataTable(str);
    //    salarydetails sal = new salarydetails();
    //    List<empsalary> empsal = new List<empsalary>();

    //    if (dtnew.Rows.Count > 0)
    //    {
    //        for (int i = 0; i < dtnew.Rows.Count; i++)
    //        {
    //            empsalary det = new empsalary();
    //            det.emp_id = dtnew.Rows[i]["Dept_id"].ToString();
    //            det.emp_name = dtnew.Rows[i]["Department_name"].ToString();
    //            empsal.Add(det);
    //        }
    //        sal.emp_salary = empsal.ToArray();
    //    }
    //    else
    //    {
    //        empsalary det = new empsalary();
    //        det.process = "NO";
    //        empsal.Add(det);
    //        sal.emp_salary = empsal.ToArray();
    //    }
    //    return sal;
    //}

    //public string savemonthly(salarydetails emp)
    //{
    //    string str = "";
    //    for (int i = 0; i < emp.emp_salary.Length; i++)
    //    {
    //        str += " insert into salary_monthly_record(id,emp_id,month,year,basic,agp,total,da,hra,ta,others_sp_allow,gross_salary,arrears,total_salary,pf_no,pf_emp,pf_trust,pt,tds,others_deduct,total_deduct,net_salary,total_pf,total_salary_emp,remark,curr_dt,user_id,del_flag) values('" + emp.emp_salary[i].id + "','" + emp.emp_salary[i].emp_id + "','" + emp.emp_salary[i].month + "','" + emp.emp_salary[i].year + "','" + emp.emp_salary[i].basic + "','" + emp.emp_salary[i].agp + "','" + emp.emp_salary[i].total + "','" + emp.emp_salary[i].da + "','" + emp.emp_salary[i].hra + "','" + emp.emp_salary[i].ta + "','" + emp.emp_salary[i].oth_sp_allow + "','" + emp.emp_salary[i].gross_salary + "','" + emp.emp_salary[i].arrears + "','" + emp.emp_salary[i].total_salary + "','" + emp.emp_salary[i].pf_no + "','" + emp.emp_salary[i].pf_emp + "','" + emp.emp_salary[i].pf_trust + "','" + emp.emp_salary[i].pt + "','" + emp.emp_salary[i].tds + "','" + emp.emp_salary[i].oth_deduct + "','" + emp.emp_salary[i].total_deduct + "','" + emp.emp_salary[i].net_salary + "','" + emp.emp_salary[i].total_pf + "','" + emp.emp_salary[i].total_salary_emp + "','" + emp.emp_salary[i].remark.ToString().Replace("'", "\"") + "',GETDATE(),'" + emp.emp_salary[i].user_id + "',0); ";
    //    }
    //    bool msg = cls1.DMLqueries(str);
    //    if (msg == true)
    //    {
    //        return "saved";
    //    }
    //    else
    //    {
    //        return "failed";
    //    }
    //}

    //public string deletemonthly(empsalary emp)
    //{
    //    string str = "update salary_monthly_record set del_flag=1,del_dt=GETDATE() where emp_id='" + emp.emp_id + "' and month=" + emp.month + " and year=" + emp.year + " and del_flag=0";
    //    bool msg = cls1.DMLqueries(str);
    //    if (msg == true)
    //    {
    //        return "deleted";
    //    }
    //    else
    //    {
    //        return "failed";
    //    }
    //}

    //public List<ListItem> getmonth(string year)
    //{
    //    string qry = "Select distinct cast(a.month as int) as month,DateName( month , DateAdd( month , cast(a.month as int), 0 ) - 1 ) mnth_name from salary_monthly_record a where a.year='" + year + "' order by cast(a.month as int) asc";

    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        using (SqlCommand cmd = new SqlCommand(qry))
    //        {
    //            List<ListItem> listData = new List<ListItem>();
    //            cmd.CommandType = CommandType.Text;
    //            cmd.Connection = con;
    //            con.Open();
    //            using (SqlDataReader sdr = cmd.ExecuteReader())
    //            {
    //                while (sdr.Read())
    //                {
    //                    if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
    //                    {
    //                        listData.Add(new ListItem
    //                        {
    //                            Value = sdr["month"].ToString(),
    //                            Text = sdr["mnth_name"].ToString()
    //                        });
    //                    }
    //                }
    //            }
    //            con.Close();
    //            return listData;
    //        }
    //    }
    //}

    //public List<ListItem> getyear()
    //{
    //    string qry = "select distinct cast(year as int) year from salary_monthly_record order by  cast(year as int) asc";

    //    string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
    //    using (SqlConnection con = new SqlConnection(constr))
    //    {
    //        using (SqlCommand cmd = new SqlCommand(qry))
    //        {
    //            List<ListItem> listData = new List<ListItem>();
    //            cmd.CommandType = CommandType.Text;
    //            cmd.Connection = con;
    //            con.Open();
    //            using (SqlDataReader sdr = cmd.ExecuteReader())
    //            {
    //                while (sdr.Read())
    //                {
    //                    if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
    //                    {
    //                        listData.Add(new ListItem
    //                        {
    //                            Value = sdr["year"].ToString(),
    //                            Text = sdr["year"].ToString()
    //                        });
    //                    }
    //                }
    //            }
    //            con.Close();
    //            return listData;
    //        }
    //    }
    //}
    //public empsalary[] getdata_sal(string month, string year, string role, string depart)
    //{
    //    int calmonth, calyear;
    //    string caldept = "";
    //    if (Convert.ToInt32(month) == 1)
    //    {
    //        calmonth = 12;
    //        calyear = Convert.ToInt32(year) - 1;
    //    }
    //    else
    //    {
    //        calmonth = Convert.ToInt32(month) - 1;
    //        calyear = Convert.ToInt32(year);
    //    }
    //    string[] department = depart.Split(',');

    //    foreach (string i in department)
    //    {
    //        if (caldept.ToString() == "")
    //        {
    //            caldept = "'" + i.ToString() + "'";
    //        }
    //        else
    //        {
    //            caldept = caldept + ",'" + i.ToString() + "'";
    //        }
    //    }
    //    string str = "select distinct (select net_salary from salary_monthly_record where month='" + calmonth + "' and year='" + calyear + "' and emp_id=a.emp_id and del_flag=0) as dif_cal,c.account_no,UPPER(isnull(a.NAME,'')+' '+isnull(a.FATHER,'')+' '+isnull(a.SURNAME,'')) as name,a.CURRENT_DESIGNATION as des,c.qualification,c.payscale,c.doj,convert(varchar(10),a.DOB,103) as DOB,c.dor,emp_dept_id,b.* from EmployeePersonal a,salary_monthly_record b,salary_master c where a.emp_id=b.emp_id and b.emp_id=c.emp_id and c.id=b.id  and a.del_flag=b.del_flag and b.del_flag=c.del_flag and b.del_flag=0 and b.month='" + month + "' and b.year='" + year + "' and c.emp_type='" + role + "' and emp_dept_id in (" + caldept.ToString() + ") order by emp_dept_id,emp_id";
    //    DataSet dtnew = cls1.fillDataset(str);
    //    List<empsalary> details = new List<empsalary>();
    //    if (dtnew.Tables[0].Rows.Count > 0)
    //    {
    //        foreach (DataRow dr in dtnew.Tables[0].Rows)
    //        {
    //            empsalary det = new empsalary();
    //            det.acno = dr["account_no"].ToString();
    //            det.emp_id = dr["emp_id"].ToString();
    //            det.emp_name = dr["name"].ToString();
    //            det.designation = dr["des"].ToString();
    //            det.qualification = dr["qualification"].ToString();
    //            det.scale = dr["payscale"].ToString();
    //            det.joining = dr["DOJ"].ToString();
    //            det.birthdate = dr["DOB"].ToString();
    //            det.retirement = dr["dor"].ToString();
    //            det.month = dr["month"].ToString();
    //            det.year = dr["year"].ToString();
    //            //det.emp_type = dr["emp_type"].ToString();
    //            //det.applicable = dr["applicable"].ToString();
    //            //det.delete = dr["deleteflag"].ToString();
    //            //det.id = dr["id"].ToString();
    //            det.basic = dr["basic"].ToString();
    //            det.agp = dr["agp"].ToString();
    //            det.total = dr["total"].ToString();
    //            det.da = dr["da"].ToString();
    //            det.hra = dr["hra"].ToString();
    //            det.ta = dr["ta"].ToString();
    //            det.oth_sp_allow = dr["others_sp_allow"].ToString();
    //            det.gross_salary = dr["gross_salary"].ToString();
    //            det.arrears = dr["arrears"].ToString();
    //            det.total_salary = dr["total_salary"].ToString();
    //            det.pf_no = dr["pf_no"].ToString();
    //            det.pf_emp = dr["pf_emp"].ToString();
    //            det.pf_trust = dr["pf_trust"].ToString();
    //            det.pt = dr["pt"].ToString();
    //            det.tds = dr["tds"].ToString();
    //            det.oth_deduct = dr["others_deduct"].ToString();
    //            det.total_deduct = dr["total_deduct"].ToString();
    //            det.net_salary = dr["net_salary"].ToString();
    //            det.total_pf = dr["total_pf"].ToString();
    //            det.total_salary_emp = dr["total_salary_emp"].ToString();
    //            det.remark = dr["remark"].ToString();
    //            det.diff = dr["dif_cal"].ToString();
    //            details.Add(det);
    //        }
    //        return details.ToArray();
    //    }
    //    return details.ToArray();
    //}

    ////----------------Salary----------------------


    ////------------certification ----------------------------
    //////certifyreport///

    public certification[] certifyreport(string ddlfromdate, string ddltodate)
    {

        String qry = "select distinct a.stud_id,upper(isnull(b.stud_F_Name,'')+' '+isnull(b.stud_M_Name,'')+' '+isnull(b.stud_l_Name,'')) as names,d.roll_no,b.stud_PermanentPhone,b.stud_Email,crs.subcourse_name, a.course_name,a.transaction_id,c.postingmmp_txn,c.postingbank_name,case when c.postingdiscriminator='DC' then 'Debit Cards' WHEN c.postingdiscriminator='CC' THEN 'Credit Cards' WHEN c.postingdiscriminator='NB' THEN 'Net Banking' WHEN c.postingdiscriminator='IM' THEN 'IMPS' WHEN c.postingdiscriminator='MX' THEN 'American Express Cards' ELSE c.postingdiscriminator END as Modeofpay,case when c.postingf_code='Ok' then 'Payment Successful' when c.postingf_code='F' THEN 'Payment Unsuccessful' else 'Cancelled' end as Payment_status ,a.amount,format(a.paid_date,'dd-MM-yyyy') as paid_date from m_std_personaldetails_tbl as b,certification_admission as a,processing_fees as c,m_std_studentacademic_tbl as d ,m_crs_subcourse_tbl crs where a.stud_id=b.stud_id and a.stud_id=d.stud_id and a.stud_id=c.form_no and a.transaction_id=c.postingmer_txn and a.paid_date between convert(date,'" + ddlfromdate + "',105) and convert(date,'" + ddltodate + "',105) and d.ayid=(select max(ayid) from m_std_studentacademic_tbl where stud_id=b.stud_id and b.stud_id=a.stud_id  and del_flag=0) and d.subcourse_Id=crs.subcourse_id ";

        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        int flag;
        List<certification> details = new List<certification>();
        foreach (DataRow dtrow in dt.Rows)
        {
            certification modal = new certification();
            modal.stud_id = dtrow["stud_id"].ToString();
            modal.Name = dtrow["names"].ToString();
            modal.roll_no = dtrow["roll_no"].ToString();
            modal.phone_no = dtrow["stud_PermanentPhone"].ToString();
            modal.stud_Email = dtrow["stud_Email"].ToString();
            modal.subcourse_name = dtrow["subcourse_name"].ToString();
            modal.course_name = dtrow["course_name"].ToString();
            modal.transaction_id = dtrow["transaction_id"].ToString();
            modal.postingmer_txn = dtrow["postingmmp_txn"].ToString();
            modal.mop = dtrow["Modeofpay"].ToString();
            modal.pay_status = dtrow["Payment_status"].ToString();
            modal.amount = dtrow["amount"].ToString();
            modal.bank_name = dtrow["postingbank_name"].ToString();
            modal.paid_date = dtrow["paid_date"].ToString();

            details.Add(modal);
        }

        return details.ToArray();


    }


    //--------certification master--------------

    public certification[] fillcertify()
    {

        String qry = "EXEC certification_master  @type = 'SELECT ',@course_id='',@course_code='',@course_name='',@course_fees='',@status_flag='',@course_duration='',@user_id=''";

        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        DataTable dt = new DataTable();
        dt = cls1.fillDataTable(qry);
        int flag;
        List<certification> details = new List<certification>();
        foreach (DataRow dtrow in dt.Rows)
        {
            certification modal = new certification();

            modal.course_id = dtrow["course_id"].ToString();
            modal.course_code = dtrow["course_code"].ToString();
            modal.course_name = dtrow["course_name"].ToString();
            modal.course_fees = dtrow["course_fees"].ToString();
            modal.status_flag = dtrow["status_flag"].ToString();
            modal.course_duration = dtrow["course_duration"].ToString();

            details.Add(modal);
        }

        return details.ToArray();


    }

    public bool deletecertify(string id)
    {
        bool value = false;
        String insqry = "EXEC certification_master  @type = 'Delete',@course_id='" + id + "',@course_code='',@course_name='',@course_fees='',@status_flag='',@course_duration='',@user_id=''";
        value = cls1.DMLqueries(insqry);
        return value;
    }
    public bool savecertify(string txtcode, string txtname, string txtamt, string txtduration, string emp_id)
    {
        bool value = false;
        String insqry = "EXEC certification_master  @type = 'Insert',@course_id='',@course_code='" + txtcode.ToUpper() + "',@course_name='" + txtname.ToUpper() + "',@course_fees='" + txtamt + "',@status_flag='0',@course_duration='" + txtduration.ToUpper() + "',@user_id='" + emp_id + "'";
        value = cls1.DMLqueries(insqry);
        return value;
    }
    public bool updatec(string id, string txtcode, string txtname, string txtamt, string txtduration, string emp_id)
    {
        bool value = false;
        String insqry = "EXEC certification_master  @type = 'update',@course_id='" + id + "',@course_code='" + txtcode.ToUpper() + "',@course_name='" + txtname.ToUpper() + "',@course_fees='" + txtamt + "',@status_flag='',@course_duration='" + txtduration.ToUpper() + "',@user_id='" + emp_id + "'";
        value = cls1.DMLqueries(insqry);
        return value;
    }
    public bool updatestatus(string id, string status_flag)
    {
        bool value = false;
        //String insqry = "EXEC certification_master  @type = 'updatestatus',@course_id='" + id + "',@course_code='',@course_name='',@course_fees='',@status_flag='" + status_flag + "',@course_duration='',@user_id=''";
        String insqry = "EXEC certification_master  @type = 'updatestatus',@course_id='" + id + "',@course_code='',@course_name='',@course_fees='',@status_flag=" + status_flag + ",@course_duration='',@user_id=''";
        value = cls1.DMLqueries(insqry);
        return value;
    }

    ////////////////////////////Fees Form
    public studentmodify[] searchstudentfee(string stud_id, string empid)
    {

        List<studentmodify> std_fees = new List<studentmodify>();
        //it checks whether entry is present in temp table 
        try
        {
            DataSet dst_fees_details = new DataSet();
            string query = "declare @group_id varchar(50); set @group_id=(select Group_id from m_std_studentacademic_tbl e where e.ayid in(select MAX(ayid)from dbo.m_std_studentacademic_tbl WHERE Stud_id='" + stud_id + "' and del_flag=0) and e.Stud_id='" + stud_id + "' and e.del_flag=0) ";
            query = query + " select acd.group_id as Group_Id, (select Group_title from dbo.m_crs_subjectgroup_tbl where   Group_id = acd.group_id) as [Group], per.stud_id , isnull(per.stud_l_name,'')  +' '+ isnull(per.stud_f_name,'') +' '+isnull(per.stud_m_name,'') as name ,(select course_name from dbo.m_crs_course_tbl  where course_id = (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id)) as Course, (select course_id from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) courseid,(select subcourse_name from m_crs_subcourse_tbl where subcourse_id = acd.subcourse_Id) as Class, acd.ayid,(select Duration from m_academic where ayid=acd.ayid ) as Duration,per.stud_Category from m_std_personaldetails_tbl as per inner join  m_std_studentacademic_tbl as acd on acd.stud_id=per.stud_id  ,(select group_ids  from web_tp_login where '1' =  dbo.fun_QueryCSVColumn (group_ids,',',@group_id ,'contains')and emp_id='" + empid + "') emp where   per.del_flag=0  and acd.del_flag = 0 and per.stud_id='" + stud_id + "' order by acd.group_id";
            // query = query + "select stud_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode,Struct_name,Amount,convert(varchar(10),Pay_date,103) as Pay_date,convert(varchar(23),Curr_dt,121) as Curr_dt,Recpt_no,convert(varchar(10),Recpt_Chq_dt,103) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Chq_status,Remark,Authorized_By from m_feeentry  as e where del_flag = 0 and  Chq_status = 'Clear'  and stud_id='"++"' and Ayid='"++"' order by stud_id,Ayid,Type,Recpt_mode";
            //query = query +  " select * from m_FeeEntry where  Stud_id='"+ stud_id +"'";
            dst_fees_details = cls1.fillDataset(query);
            //  studentmodify stm = new studentmodify();
            // string qyrfees = "select amount from dbo.m_FeeMaster where  group_id= '" + dst_fees_details.Tables[0].Rows[0]["Group"].ToString(); +"' and ayid = '" + +"' and struct_name = 'Fees'";
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {
                    studentmodify stm = new studentmodify();
                    stm.Courseid = dst_fees_details.Tables[0].Rows[i]["courseid"].ToString().ToUpper();
                    stm.Group_Name = dst_fees_details.Tables[0].Rows[i]["Group"].ToString().ToUpper();
                    stm.Group_Id = dst_fees_details.Tables[0].Rows[i]["Group_Id"].ToString().ToUpper();
                    stm.stud_id = dst_fees_details.Tables[0].Rows[i]["stud_id"].ToString().ToUpper();
                    stm.name = dst_fees_details.Tables[0].Rows[i]["name"].ToString().ToUpper();
                    stm.Course = dst_fees_details.Tables[0].Rows[i]["Course"].ToString().ToUpper();
                    stm.Class = dst_fees_details.Tables[0].Rows[i]["Class"].ToString().ToUpper();
                    stm.year = dst_fees_details.Tables[0].Rows[i]["ayid"].ToString().ToUpper();
                    stm.Duration = dst_fees_details.Tables[0].Rows[i]["Duration"].ToString().ToUpper();
                    stm.stud_Category = dst_fees_details.Tables[0].Rows[i]["stud_Category"].ToString().ToUpper();
                    std_fees.Add(stm);
                }
            }



            // }

        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }
    public STUDENTFEES[] getstudentfee(string stud_id, string group_id, string caste, string year)
    {
        //string strqry = "select LEFT(Group_title,2) as Group_name from m_crs_subjectgroup_tbl where Group_id='"+group_id+"'";
        string strqry = "select  case when group_name like 'FY%' or  group_name like 'SY%' then a.group_id when group_name='SE' and d.diploma_holder=1 and d.acdid=(select MAX(ayid) from m_academic) then 'DSE'  else group_name end as group_name,a.group_id from d_adm_applicant d,(select distinct left(group_title,3) as group_name ,a.group_id,stud_id from m_std_studentacademic_tbl a,m_crs_subjectgroup_tbl g where stud_id='" + stud_id + "' and a.ayid='" + year + "' and a.group_id=g.Group_id and a.del_flag=0) a where d.stud_id=a.stud_id ";
        DataTable dtgrp = cls1.fillDataTable(strqry);
        List<STUDENTFEES> details = new List<STUDENTFEES>();
        if (dtgrp.Rows.Count > 0)
        {
            if (group_id != "" && caste != "" && year != "")
            {
                if (caste.Contains("NT "))
                {
                    caste = caste.Substring(0, caste.Length - 1);
                }

                string str = "select a.Struct_name,a.Amount,a.group_id,a.Ayid,coalesce(b.Amount,'0') amt,  case when (coalesce(b.Difference,a.amount) like '%-%' and reamt is not null) then '0' else coalesce(b.Difference,a.amount) end as Difference,case when b.struct_name is null then '0' else '1' end 'flag'  from m_feemaster a left join (select stud_id,group_id,chk_ayid,struct_name,sum(amount) amount,amt,(amt-sum(amount)) 'Difference',case when k.reamt is null then 0 else k.reamt end as reamt "
                + " from(select distinct stud_id,'" + dtgrp.Rows[0]["Group_name"].ToString() + "' group_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode   ,e.Struct_name,e.Amount,f.Amount as amt,"
                + " (f.Amount - e.amount) as Differnce  from m_feeentry  as e  inner join  m_feemaster as f on f.Struct_name=e.struct_name   and e.ayid=f.ayid and e.del_flag = 0 and f.group_id='" + dtgrp.Rows[0]["Group_name"].ToString() + "' and f.del_flag=0 where e.del_flag = 0 and Chq_status = 'Clear' and stud_id='" + stud_id + "' and e.Ayid='" + year + "'  and e.del_flag=0 "
                + " ) a,(select sum(amount) as reamt from m_feeentry where stud_id='" + stud_id + "' and ayid='" + year + "' and struct_name like '%refund%') as k group by stud_id,group_id,chk_ayid,struct_name,amt,reamt) b  on a.ayid=b.chk_ayid and    a.group_id=b.group_id and a.Struct_name=b.Struct_name where a.group_id='" + dtgrp.Rows[0]["Group_name"].ToString() + "' and a.ayid='" + year + "' and a.del_flag=0  order by a.Amount desc";

                DataTable dt = cls1.fillDataTable(str);
                string refundamt = "";

                if (caste.Contains("OBC") || caste.Contains("EBC") || caste.Contains("SEBC") || caste.Contains("EWS"))
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                            {
                                double cstamt = (double)(Convert.ToInt32(dt.Rows[i]["Amount"]));
                                double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                                dt.Rows[i]["Amount"] = Convert.ToString(casttotal);

                                dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(casttotal) - Convert.ToInt32(dt.Rows[i]["amt"]));
                            }
                            else
                            {
                                double cstamt = (double)(Convert.ToInt32(dt.Rows[i]["Amount"])) / 2;
                                double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                                dt.Rows[i]["Amount"] = Convert.ToString(casttotal);

                                dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(casttotal) - Convert.ToInt32(dt.Rows[i]["amt"]));
                            }

                        }
                    }
                }
                else if (caste.Contains("NT-") || caste.Contains("TWFS") || caste.Contains("VJ/DT(A)") || caste.Contains("SBC"))
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                            {

                            }
                            else
                            {
                                dt.Rows[i]["Amount"] = 0;
                                dt.Rows[i]["Difference"] = 0;
                            }
                        }
                    }
                }
                else if (caste.Contains("SC") || caste.Contains("ST"))
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition") || dt.Rows[i]["Struct_name"].ToString() == "Development Fees" || dt.Rows[i]["Struct_name"].ToString().Contains("Development"))
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                            {

                            }
                            else
                            {
                                dt.Rows[i]["Amount"] = 0;
                                dt.Rows[i]["Difference"] = 0;
                            }

                        }
                    }
                }
                else
                {
                    //|| dt.Rows[i]["Struct_name"].ToString() != "Students Welfare Fund"
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                            {

                                double cstamt = (double)(Convert.ToInt32(dt.Rows[i]["Amount"]));
                                double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                                dt.Rows[i]["Amount"] = Convert.ToString(casttotal);

                                dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(casttotal) - Convert.ToInt32(dt.Rows[i]["amt"]));


                            }

                            else
                            {
                                //double cstamt = (double)(Convert.ToInt32(dt.Rows[i]["Amount"]));
                                //double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                                dt.Rows[i]["Amount"] = Convert.ToString(Convert.ToInt32(dt.Rows[i]["Amount"]));

                                dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(dt.Rows[i]["Amount"]) - Convert.ToInt32(dt.Rows[i]["amt"]));
                            }

                        }

                    }
                }


                string refstr = "select sum(amount) as refundamt from m_feeentry where stud_id='" + stud_id + "' and ayid='" + year + "' and struct_name like '%refund%'";
                DataTable dtrefun = cls1.fillDataTable(refstr);
                if (dtrefun.Rows.Count > 0)
                {
                    refundamt = dtrefun.Rows[0]["refundamt"].ToString();
                }

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        STUDENTFEES sn = new STUDENTFEES();
                        sn.STRUCTURE = dr["Struct_name"].ToString();
                        if (dr["amt"].ToString() != "0")
                        {
                            sn.AMOUNT = dr["Difference"].ToString();
                        }
                        else
                        {
                            sn.AMOUNT = dr["Amount"].ToString();
                        }
                        sn.CRSAMOUNT = dr["Amount"].ToString();
                        sn.DIFFERNCE = dr["Difference"].ToString();
                        sn.PAID = dr["amt"].ToString();

                        sn.message = "";
                        details.Add(sn);
                    }
                }
                else
                {
                    STUDENTFEES sn = new STUDENTFEES();
                    sn.message = "not define";
                    details.Add(sn);
                }
            }
        }
        return details.ToArray();
    }
    public STUDENTFEES[] getdropstudentfee(string stud_id, string group_id, string caste, string year, string dropyear)
    {
        // string strqry = "select LEFT(Group_title,2) as Group_name from m_crs_subjectgroup_tbl where Group_id='" + group_id + "'";
        string strqry = "select case when group_name like 'FY%' or  group_name like 'SY%' then a.group_id when group_name='SE' and d.diploma_holder=1 and d.acdid=(select MAX(ayid) from m_academic) then 'DSE'   else group_name end as group_name,a.group_id from d_adm_applicant d,(select distinct left(group_title,3) as group_name ,a.group_id,stud_id from m_std_studentacademic_tbl a,m_crs_subjectgroup_tbl g where stud_id='" + stud_id + "' and a.ayid='" + year + "' and a.group_id=g.Group_id and a.del_flag=0) a where d.stud_id=a.stud_id ";
        DataTable dtgrp = cls1.fillDataTable(strqry);
        List<STUDENTFEES> details = new List<STUDENTFEES>();
        if (dtgrp.Rows.Count > 0)
        {
            if (group_id != "" && caste != "" && year != "")
            {
                if (caste.Contains("NT "))
                {
                    caste = caste.Substring(0, caste.Length - 1);
                }

                string str = "select a.Struct_name,a.Amount,a.group_id,a.Ayid,coalesce(b.Amount,'0') amt,  case when (coalesce(b.Difference,a.amount) like '%-%' and reamt is not null) then '0' else coalesce(b.Difference,a.amount) end as Difference,case when b.struct_name is null then '0' else '1' end 'flag'  from m_feemaster a left join (select stud_id,group_id,chk_ayid,struct_name,sum(amount) amount,amt,(amt-sum(amount)) 'Difference',case when k.reamt is null then 0 else k.reamt end as reamt "
                + " from(select distinct stud_id,'" + dtgrp.Rows[0]["Group_name"].ToString() + "' group_id,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,Recpt_mode   ,e.Struct_name,e.Amount,f.Amount as amt,"
                + " (f.Amount - e.amount) as Differnce  from m_feeentry  as e  inner join  m_feemaster as f on f.Struct_name=e.struct_name   and e.ayid=f.ayid and e.del_flag = 0 and f.group_id='" + dtgrp.Rows[0]["Group_name"].ToString() + "' where e.del_flag = 0 and Chq_status = 'Clear' and stud_id='" + stud_id + "' and e.Ayid='" + year + "'  and e.del_flag=0 "
                + " ) a,(select sum(amount) as reamt from m_feeentry where stud_id='" + stud_id + "' and ayid='" + year + "' and struct_name like '%refund%') as k group by stud_id,group_id,chk_ayid,struct_name,amt,reamt) b  on a.ayid=b.chk_ayid and a.group_id=b.group_id and a.Struct_name=b.Struct_name where a.group_id='" + dtgrp.Rows[0]["Group_name"].ToString() + "' and a.ayid='" + year + "' order by a.Amount desc";

                DataTable dt = cls1.fillDataTable(str);
                string refundamt = "";

                if (dt.Rows.Count > 0)
                {
                    str = "";
                    if (dropyear.Contains("2016-2017") || dropyear.Contains("2017-2018"))
                    {
                        dropyear = "2019-2020";
                        str = "select Ayid,Group_id,Struct_name,Amount from m_FeeMaster where Group_id='" + dtgrp.Rows[0]["Group_name"].ToString() + "' and Ayid=(select AYID from m_academic where (RIGHT(SUBSTRING(duration,0,CHARINDEX('-',duration)),CHARINDEX('/',SUBSTRING(duration,0,CHARINDEX('-',duration)))+1))+'-'+"
    + " (Right(SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)),charindex('/',SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)))+1))='" + dropyear + "') and (Struct_name like '%tution%' or Struct_name like '%develop%') order by Struct_name desc";
                    }
                    else
                    { //8% hike on tution and development fees 
                        str = "select Ayid,Group_id,Struct_name,convert(decimal(10),cast(Amount as int)*1.08) as Amount from m_FeeMaster where Group_id='" + dtgrp.Rows[0]["Group_name"].ToString() + "' and Ayid=(select AYID from m_academic where (RIGHT(SUBSTRING(duration,0,CHARINDEX('-',duration)),CHARINDEX('/',SUBSTRING(duration,0,CHARINDEX('-',duration)))+1))+'-'+"
    + " (Right(SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)),charindex('/',SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)))+1))='" + dropyear + "') and (Struct_name like '%tution%' or Struct_name like '%tuition%' or Struct_name like '%develop%') order by Struct_name desc";
                    }

                    DataTable dtdrop = cls1.fillDataTable(str);
                    if (dtdrop.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtdrop.Rows.Count; j++)
                            {
                                if (dt.Rows[i]["Struct_name"].ToString().ToUpper() == dtdrop.Rows[j]["Struct_name"].ToString().ToUpper())
                                {
                                    dt.Rows[i]["Amount"] = dtdrop.Rows[j]["Amount"].ToString();
                                    dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(dt.Rows[i]["Amount"].ToString()) - Convert.ToInt32(dt.Rows[i]["amt"].ToString()));
                                }
                            }
                        }
                    }
                    else
                    {

                    }

                    if (caste.Contains("OBC") || caste.Contains("EBC") || caste.Contains("SEBC") || caste.Contains("EWS"))
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                            {
                                if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                                {
                                    double cstamt = (double)(Convert.ToInt32(dt.Rows[i]["Amount"]));
                                    double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                                    dt.Rows[i]["Amount"] = Convert.ToString(casttotal);

                                    dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(casttotal) - Convert.ToInt32(dt.Rows[i]["amt"]));
                                }
                                else
                                {
                                    double cstamt = (double)(Convert.ToInt32(dt.Rows[i]["Amount"])) / 2;
                                    double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                                    dt.Rows[i]["Amount"] = Convert.ToString(casttotal);

                                    dt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(casttotal) - Convert.ToInt32(dt.Rows[i]["amt"]));
                                }

                            }
                        }
                    }
                    else if (caste.Contains("NT-") || caste.Contains("TWFS") || caste.Contains("VJ/DT(A)") || caste.Contains("SBC"))
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                            {
                                if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                                {
                                }
                                else
                                {
                                    dt.Rows[i]["Amount"] = 0;
                                    dt.Rows[i]["Difference"] = 0;
                                }

                            }
                        }
                    }
                    else if (caste.Contains("SC") || caste.Contains("ST"))
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                            {
                                if (dt.Rows[i]["Struct_name"].ToString() == "Share Tuition Fees")
                                {
                                }
                                else
                                {
                                    dt.Rows[i]["Amount"] = 0;
                                    dt.Rows[i]["Difference"] = 0;
                                }
                            }
                        }
                    }
                    else
                    {

                    }


                    string refstr = "select sum(amount) as refundamt from m_feeentry where stud_id='" + stud_id + "' and ayid='" + year + "' and struct_name like '%refund%'";
                    DataTable dtrefun = cls1.fillDataTable(refstr);
                    if (dtrefun.Rows.Count > 0)
                    {
                        refundamt = dtrefun.Rows[0]["refundamt"].ToString();
                    }


                    foreach (DataRow dr in dt.Rows)
                    {
                        STUDENTFEES sn = new STUDENTFEES();
                        sn.STRUCTURE = dr["Struct_name"].ToString();
                        if (dr["amt"].ToString() != "0")
                        {
                            sn.AMOUNT = dr["Difference"].ToString();
                        }
                        else
                        {
                            sn.AMOUNT = dr["Amount"].ToString();
                        }
                        sn.CRSAMOUNT = dr["Amount"].ToString();
                        sn.DIFFERNCE = dr["Difference"].ToString();
                        sn.PAID = dr["amt"].ToString();

                        sn.message = "";
                        details.Add(sn);
                    }
                }
                else
                {
                    STUDENTFEES sn = new STUDENTFEES();
                    sn.message = "not define";
                    details.Add(sn);
                }
            }
        }
        return details.ToArray();
    }


    public STUDENTFEES[] StrudentFeeDetails(string stud_id, string year, string group_id)
    {

        List<STUDENTFEES> std_fees = new List<STUDENTFEES>();
        DataSet dst_fees_details = new DataSet();
        string addyear = "";
        int fee = 0;
        //it checks whether entry is present in temp table 
        try
        {

            string query = "";

            query = query + "SELECT distinct 'Other Fees' as st_all,a.Recpt_no ,stud_id,Recpt_mode, (select top(1)  coalesce(Remark ,'') as Remark from m_feeentry where stud_id=a.stud_id and ayid=a.ayid and recpt_no=a.recpt_no and recpt_no is not null and  recpt_no  not like  '' ) as Remark,convert(varchar,[Pay_date],103) as [PAYDATE] ,b.amt FROM m_FeeEntry  a inner join (select sum(amount) amt,Recpt_no FROM m_FeeEntry where stud_id='" + stud_id + "' and ayid='" + year + "' and del_flag=0 and (Struct_name NOT like 'tu%' AND  Struct_name not like 'dev%') group by Recpt_no ) as b on a.Recpt_no=b.Recpt_no where stud_id='" + stud_id + "' and ayid='" + year + "' and (Struct_name NOT like 'tu%' AND  Struct_name not like 'dev%') and del_flag=0 and b.amt not like '0' ";//group by a.Recpt_no,stud_id,Recpt_mode, Remark ,[Pay_date],Amount,b.amt";
            query = query + " union all SELECT distinct 'Tution Fees' as st_all,a.Recpt_no ,stud_id,Recpt_mode,(select top(1)  coalesce(Remark ,'') as Remark from m_feeentry where stud_id=a.stud_id and ayid=a.ayid and recpt_no=a.recpt_no and recpt_no is not null and  recpt_no not like  '' ) as Remark,convert(varchar,[Pay_date],103) as [PAYDATE] ,b.amt FROM m_FeeEntry  a inner join (select sum(amount) amt,Recpt_no FROM m_FeeEntry where stud_id='" + stud_id + "' and ayid='" + year + "' and del_flag=0  and (Struct_name  like 'tu%' or  Struct_name  like 'dev%') group by Recpt_no ) as b on a.Recpt_no=b.Recpt_no where stud_id='" + stud_id + "' and ayid='" + year + "' and (Struct_name  like 'tu%' or  Struct_name  like 'dev%') and del_flag=0 and b.amt not like '0'";
            dst_fees_details = cls1.fillDataset(query);

            int diff = 0;
            int chkdiff = 0;
            if (dst_fees_details.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i <= dst_fees_details.Tables[0].Rows.Count - 1; i++)
                {
                    STUDENTFEES stm = new STUDENTFEES();
                    int cnt = 0;

                    stm.RECIPTNO = (dst_fees_details.Tables[0].Rows[i]["Recpt_no"].ToString());
                    stm.RECIPTMODE = (dst_fees_details.Tables[0].Rows[i]["Recpt_mode"].ToString());
                    stm.PAYDATE = dst_fees_details.Tables[0].Rows[i]["PAYDATE"].ToString();
                    stm.REMARK = dst_fees_details.Tables[0].Rows[i]["Remark"].ToString();
                    stm.AMOUNT = dst_fees_details.Tables[0].Rows[i]["amt"].ToString();
                    stm.structype = dst_fees_details.Tables[0].Rows[i]["st_all"].ToString();
                    std_fees.Add(stm);
                }
            }



        }
        catch (Exception ex)
        {
            // Interaction.MsgBox(ex.Message);
        }
        return std_fees.ToArray();

    }
    public STUDENTFEES[] getreceiptno(string year, string type)
    {
        string strrec = "";
        strrec = "select cast((max(cast(Recpt_no as int))+1) as varchar) as Recpt_no from m_feeentry where ayid='" + year + "'";
        //}
        //else if (type == "N")
        //{
        //    strrec = "select 'N/'+ cast((max(cast(SUBSTRING(Recpt_no, CHARINDEX('/', Recpt_no) + 1,LEN(Recpt_no) - CHARINDEX('/', Recpt_no)) as int))+1) as varchar )   as Recpt_no from m_feeentry where ayid='" + year + "' and Recpt_no like 'N%' ";
        //}
        //else if (type == "C")
        //{
        //    strrec = "select 'C/'+ cast((max(cast(SUBSTRING(Recpt_no, CHARINDEX('/', Recpt_no) + 1,LEN(Recpt_no) - CHARINDEX('/', Recpt_no)) as int))+1) as varchar )    as Recpt_no from m_feeentry where ayid='" + year + "' and Recpt_no like 'C%' ";
        //}
        //else if (type == "R")
        //{
        //    strrec = "select 'R/'+ cast((max(cast(SUBSTRING(Recpt_no, CHARINDEX('/', Recpt_no) + 1,LEN(Recpt_no) - CHARINDEX('/', Recpt_no)) as int))+1) as varchar )    as Recpt_no from m_feeentry where ayid='" + year + "' and Recpt_no like 'R%' ";
        //}
        //else
        //{
        //    strrec = "select 'G/'+ cast((max(cast(SUBSTRING(Recpt_no, CHARINDEX('/', Recpt_no) + 1,LEN(Recpt_no) - CHARINDEX('/', Recpt_no)) as int))+1) as varchar )   as Recpt_no from m_feeentry where ayid='" + year + "' and Recpt_no like 'G%' ";
        //}

        List<STUDENTFEES> details = new List<STUDENTFEES>();
        DataTable dtrec = cls1.fillDataTable(strrec);

        if (dtrec.Rows.Count > 0 && !string.IsNullOrEmpty(dtrec.Rows[0]["Recpt_no"].ToString()))
        {
            foreach (DataRow dr in dtrec.Rows)
            {
                STUDENTFEES sn = new STUDENTFEES();
                sn.RECIPTNO = dr["Recpt_no"].ToString();
                details.Add(sn);
            }
        }
        else
        {
            string recpt_no = "";
            recpt_no = "1";

            STUDENTFEES sn = new STUDENTFEES();
            sn.RECIPTNO = recpt_no;
            details.Add(sn);
        }

        return details.ToArray();
    }

    public bool receipt_type(string stud_id, string year, string recipt_no)
    {
        string str = "";
        str = "select * from m_feeentry where stud_id='" + stud_id + "' and ayid='" + year + "' and recpt_no='" + recipt_no + "' and Struct_name not like '%Tu%' and Struct_name not like '%Tution%' and Struct_name not like 'develop%' and del_flag=0 and amount!=0";
        DataTable dt = cls1.fillDataTable(str);

        if (dt.Rows.Count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public STUDENTFEES[] getFeeDetails(string stud_id, string year, string recipt_no, string caste)
    {
        List<STUDENTFEES> details = new List<STUDENTFEES>();
        string query = "";
        string str = "";
        bool narrflag = false;
        //query = "select distinct left(group_title,3) as group_name ,a.group_id from m_std_studentacademic_tbl a,m_crs_subjectgroup_tbl g where stud_id='" + stud_id + "' and a.ayid='" + year + "' and a.group_id=g.Group_id and a.del_flag=0";
        query = "select case when group_name='SE' and d.diploma_holder=1 and d.acdid=(select MAX(ayid) from m_academic) then 'DSE' else group_name end as group_name,a.group_id from d_adm_applicant d,(select distinct left(group_title,3) as group_name ,a.group_id,stud_id from m_std_studentacademic_tbl a,m_crs_subjectgroup_tbl g where stud_id='" + stud_id + "' and a.ayid='" + year + "' and a.group_id=g.Group_id and a.del_flag=0) a where d.stud_id=a.stud_id ";
        DataTable dtgroup = cls1.fillDataTable(query);
        if (dtgroup.Rows.Count > 0)
        {

            if (recipt_no.Contains("R"))
            {
                str = "select struct_name,amount as amt,case when struct_name is null then '0' else '1' end  'flag',Ayid,Recpt_mode,Recpt_no,cast(Recpt_Chq_dt as date) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,case when remark is null then '' else remark end as remark,case when Authorized_By is null then '' else Authorized_By end as Authorized_By,Chq_status from m_feeentry where stud_id='" + stud_id + "' and recpt_no='" + recipt_no + "' and ayid='" + year + "'";
            }
            else
            {
                query = "";

                query = "select remark from m_feeentry where stud_id='" + stud_id + "' and ayid='" + year + "' and Recpt_no='" + recipt_no + "' and del_flag=0";
                DataTable dtnarr = cls1.fillDataTable(query);
                if (dtnarr.Rows.Count > 0)
                {
                    if (dtnarr.Rows[0]["remark"].ToString().Contains("BALANCED"))
                    {
                        narrflag = true;
                    }
                }

                if (narrflag == true)
                {
                    str = "select struct_name,amount as amt ,amount,cast(Pay_date as date) Pay_date,case when struct_name is null then '0' else '1' end  'flag',Ayid,Recpt_mode,Recpt_no,cast(Recpt_Chq_dt as date) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,case when remark is null then '' else remark end as remark,case when Authorized_By is null then '' else Authorized_By end as Authorized_By,Chq_status from m_feeentry where stud_id='" + stud_id + "' and recpt_no='" + recipt_no + "' and ayid='" + year + "'";
                }
                else
                {
                    str = "select a.Struct_name,a.Amount,a.group_id,Pay_date,a.Ayid,coalesce(b.Amount,'0') amt,  coalesce(b.Difference,a.amount) Difference,case when b.struct_name is null then '0' else '1' end "
                     + " 'flag',Recpt_mode,Recpt_no,cast(Recpt_Chq_dt as date) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,case when remark is null then '' else remark end as remark,case when Authorized_By is null then '' else Authorized_By end as Authorized_By,Chq_status  from m_feemaster a right join (select stud_id,group_id,Pay_date,chk_ayid,struct_name,sum(amount) amount,amt,(amt-sum(amount)) 'Difference',"
                     + "Recpt_mode,Recpt_no,cast(Recpt_Chq_dt as date) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,remark,Authorized_By,Chq_status,Recpt_Bnk_Branch from (select distinct stud_id,group_id,Pay_date,(select duration from m_academic as m where m.AYID = e.ayid) as Ayid,e.ayid as Chk_Ayid,Type,"
                     + "e.Struct_name,e.Amount,Recpt_mode,remark,Authorized_By,Chq_status,Recpt_no,cast(Recpt_Chq_dt as date) as Recpt_Chq_dt,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch, f.Amount as amt,(f.Amount - e.amount) as Differnce from m_feeentry  as e  inner join "
                     + " m_feemaster as f on f.Struct_name=e.struct_name   and e.ayid=f.ayid and e.del_flag = 0 and f.del_flag=0 and e.Recpt_no='" + recipt_no + "' "
                     + " and f.group_id in ('" + dtgroup.Rows[0]["group_name"].ToString() + "','" + dtgroup.Rows[0]["group_id"].ToString() + "') where e.del_flag = 0  and stud_id='" + stud_id + "' and "
                     + " e.Ayid='" + year + "'  and e.del_flag=0) a   group by stud_id,group_id,chk_ayid,struct_name,amt,Recpt_no,Recpt_Chq_dt,Recpt_mode,Recpt_Chq_No,Recpt_Bnk_Name,Recpt_Bnk_Branch,Pay_date,remark,Authorized_By,Chq_status) "
                     + "b  on a.ayid=b.chk_ayid and a.group_id=b.group_id and a.Struct_name=b.Struct_name where a.group_id in ('" + dtgroup.Rows[0]["group_name"].ToString() + "','" + dtgroup.Rows[0]["group_id"].ToString() + "') "
                     + " and a.ayid='" + year + "' order by a.Amount desc";
                }
            }
        }
        DataTable dtrecpt = cls1.fillDataTable(str);

        int countflag = 0;
        string paymentmode = "";
        string receiptno = "";
        string remark = "";
        string authorizedby = "";
        string cheque_date = "";
        string cheque_no = "";
        string bnkname = "";
        string bnkbranch = "";
        string refdet = "";
        string paydate = "";
        string authcaste = "";
        if (dtrecpt.Rows.Count > 0)
        {
            for (int i = 0; i < dtrecpt.Rows.Count; i++)
            {
                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Recpt_mode"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Recpt_mode"].ToString() != "")
                    {
                        paymentmode = dtrecpt.Rows[i]["Recpt_mode"].ToString();
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Recpt_no"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Recpt_no"].ToString() != "")
                    {
                        receiptno = dtrecpt.Rows[i]["Recpt_no"].ToString();
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["remark"].ToString()))
                {
                    if (dtrecpt.Rows[i]["remark"].ToString().Contains("|"))
                    {
                        String[] arr = new String[2];
                        arr = dtrecpt.Rows[i]["remark"].ToString().Split('|');
                        remark = arr[0];
                        refdet = arr[1];
                    }
                    else if (dtrecpt.Rows[i]["remark"].ToString().Contains(":"))
                    {
                        String[] arr = new String[2];
                        arr = dtrecpt.Rows[i]["remark"].ToString().Split(':');
                        remark = arr[0].TrimEnd();
                        refdet = arr[1].TrimStart();

                    }
                    else
                    {
                        if (dtrecpt.Rows[i]["remark"].ToString() != "")
                        {
                            remark = dtrecpt.Rows[i]["remark"].ToString();
                            refdet = "";
                        }
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Authorized_By"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Authorized_By"].ToString() != "")
                    {
                        if (dtrecpt.Rows[i]["Authorized_By"].ToString().Contains(":"))
                        {
                            string[] autharr = new string[0];
                            autharr = dtrecpt.Rows[i]["Authorized_By"].ToString().Split(':');
                            authorizedby = autharr[0];
                            authcaste = autharr[1];
                        }
                        else
                        {
                            authorizedby = dtrecpt.Rows[i]["Authorized_By"].ToString();
                        }
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Recpt_Chq_dt"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Recpt_Chq_dt"].ToString() != "")
                    {
                        cheque_date = dtrecpt.Rows[i]["Recpt_Chq_dt"].ToString();
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Recpt_Chq_No"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Recpt_Chq_No"].ToString() != "")
                    {
                        cheque_no = dtrecpt.Rows[i]["Recpt_Chq_No"].ToString();
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Recpt_Bnk_Name"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Recpt_Bnk_Name"].ToString() != "")
                    {
                        bnkname = dtrecpt.Rows[i]["Recpt_Bnk_Name"].ToString();
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Recpt_Bnk_Branch"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Recpt_Bnk_Branch"].ToString() != "")
                    {
                        bnkbranch = dtrecpt.Rows[i]["Recpt_Bnk_Branch"].ToString();
                    }
                }

                if (!string.IsNullOrEmpty(dtrecpt.Rows[i]["Pay_date"].ToString()))
                {
                    if (dtrecpt.Rows[i]["Pay_date"].ToString() != "")
                    {
                        paydate = dtrecpt.Rows[i]["Pay_date"].ToString();
                    }
                }
            }
        }

        str = "";
        //8% hike on tution and development fees 
        // str = "select Ayid,Group_id,Struct_name,convert(decimal(10),cast(Amount as int)*1.08) as Amount from m_FeeMaster where Group_id='" + dtgroup.Rows[0]["Group_name"].ToString() + "' and Ayid=(select AYID from m_academic where (RIGHT(SUBSTRING(duration,0,CHARINDEX('-',duration)),CHARINDEX('/',SUBSTRING(duration,0,CHARINDEX('-',duration)))+1))+'-'+"+ " (Right(SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)),charindex('/',SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)))+1))='" + authorizedby + "') and (Struct_name like '%tution%' or Struct_name like '%tuition%' or Struct_name like '%develop%') order by Struct_name desc";
        if (remark.Contains("Drop"))
        {
            if (authorizedby.Contains("2016-2017") || authorizedby.Contains("2017-2018"))
            {
                authorizedby = "2019-2020";
                str = "select Ayid,Group_id,Struct_name,Amount from m_FeeMaster where Group_id='" + dtgroup.Rows[0]["Group_name"].ToString() + "' and Ayid=(select AYID from m_academic where (RIGHT(SUBSTRING(duration,0,CHARINDEX('-',duration)),CHARINDEX('/',SUBSTRING(duration,0,CHARINDEX('-',duration)))+1))+'-'+"
    + " (Right(SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)),charindex('/',SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)))+1))='" + authorizedby + "') and (Struct_name like '%tution%' or Struct_name like 'Develop%') order by Struct_name desc";
            }
            else
            { //8% hike on tution and development fees 
                str = "select Ayid,Group_id,Struct_name,convert(decimal(10),cast(Amount as int)*1.08) as Amount from m_FeeMaster where Group_id='" + dtgroup.Rows[0]["Group_name"].ToString() + "' and Ayid=(select AYID from m_academic where (RIGHT(SUBSTRING(duration,0,CHARINDEX('-',duration)),CHARINDEX('/',SUBSTRING(duration,0,CHARINDEX('-',duration)))+1))+'-'+"
    + " (Right(SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)),charindex('/',SUBSTRING(duration,CHARINDEX('-',duration)+1,CHARINDEX('-',duration)))+1))='" + authorizedby + "') and (Struct_name like '%tution%' or Struct_name like '%tuition%' or Struct_name like 'Develop%') order by Struct_name desc";
            }


            DataTable dtdrop = cls1.fillDataTable(str);
            if (dtdrop.Rows.Count > 0)
            {
                for (int i = 0; i < dtrecpt.Rows.Count; i++)
                {
                    for (int j = 0; j < dtdrop.Rows.Count; j++)
                    {
                        if (dtrecpt.Rows[i]["Struct_name"].ToString().ToUpper() == dtdrop.Rows[j]["Struct_name"].ToString().ToUpper())
                        {
                            dtrecpt.Rows[i]["Amount"] = dtdrop.Rows[j]["Amount"].ToString();
                            dtrecpt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(dtrecpt.Rows[i]["Amount"].ToString()) - Convert.ToInt32(dtrecpt.Rows[i]["amt"].ToString()));
                        }
                    }
                }
            }
            else
            {

            }
        }

        if (authcaste.Contains("OBC") || authcaste.Contains("EBC") || authcaste.Contains("SEBC") || authcaste.Contains("EWS"))
        {
            for (int i = 0; i < dtrecpt.Rows.Count; i++)
            {
                if (dtrecpt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dtrecpt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dtrecpt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                {
                    double cstamt = (double)(Convert.ToInt32(dtrecpt.Rows[i]["Amount"])) / 2;
                    double casttotal = Math.Round(cstamt, 0, MidpointRounding.AwayFromZero);
                    dtrecpt.Rows[i]["Amount"] = Convert.ToString(casttotal);

                    dtrecpt.Rows[i]["Difference"] = Convert.ToString(Convert.ToInt32(casttotal) - Convert.ToInt32(dtrecpt.Rows[i]["amt"]));
                }
            }
        }
        else if (authcaste.Contains("NT-") || authcaste.Contains("TWFS") || authcaste.Contains("VJ/DT(A)") || authcaste.Contains("SBC"))
        {
            for (int i = 0; i < dtrecpt.Rows.Count; i++)
            {
                if (dtrecpt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dtrecpt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dtrecpt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                {
                    dtrecpt.Rows[i]["Amount"] = 0;
                    dtrecpt.Rows[i]["Difference"] = 0;
                }
            }
        }
        else if (authcaste.Contains("SC") || authcaste.Contains("ST"))
        {
            for (int i = 0; i < dtrecpt.Rows.Count; i++)
            {
                if (dtrecpt.Rows[i]["Struct_name"].ToString() == "TUTION FEES" || dtrecpt.Rows[i]["Struct_name"].ToString().Contains("Tution") || dtrecpt.Rows[i]["Struct_name"].ToString().Contains("Tuition"))
                {
                    dtrecpt.Rows[i]["Amount"] = 0;
                    dtrecpt.Rows[i]["Difference"] = 0;
                }
            }
        }
        else
        {

        }

        string narryear = "";
        if (narrflag == true)
        {
            if (refdet != "")
            {
                str = "";
                str = "select duration,AYID from m_academic where substring(cast(YEAR(SUBSTRING(duration,0,CHARINDEX('-', duration))) as varchar),3,LEN(cast(YEAR(SUBSTRING(duration,0,CHARINDEX('-', duration))) as varchar)))+'-'+"
                + " substring(cast(YEAR(SUBSTRING(duration,CHARINDEX('-', duration)+1,LEN(duration)-CHARINDEX('-', duration))) as varchar),3,LEN(cast(YEAR(SUBSTRING(duration,CHARINDEX('-', duration)+1,LEN(duration)-CHARINDEX('-', duration))) as varchar)))='" + refdet + "'";

                DataTable dtnarr = cls1.fillDataTable(str);
                if (dtnarr.Rows.Count > 0)
                {
                    narryear = dtnarr.Rows[0]["AYID"].ToString();
                }
            }
        }


        if (dtrecpt.Rows.Count > 0)
        {
            foreach (DataRow dr in dtrecpt.Rows)
            {
                STUDENTFEES sn = new STUDENTFEES();
                if (narrflag == true)
                {
                    sn.structype = "Narration";
                    sn.STRUCTURE = dr["Struct_name"].ToString();
                    sn.AMOUNT = dr["Amount"].ToString();
                    //sn.DIFFERNCE = dr["Difference"].ToString();
                    sn.PAID = dr["amt"].ToString();
                    sn.RECIPTNO = receiptno;
                    sn.Recpt_Bnk_Branch = bnkbranch;
                    sn.Recpt_Bnk_Name = bnkname;
                    sn.Recpt_Chq_No = cheque_no;
                    sn.Recpt_Chq_dt = cheque_date;
                    sn.narryear = narryear;
                    //sn.flagchk = Convert.ToInt32(dr["flag"].ToString());
                    sn.paymode = paymentmode;
                    sn.REMARK = remark;
                    sn.refdet = refdet;
                    sn.chqstatus = dr["chq_status"].ToString();
                    sn.AUTHORIZEDBY = authorizedby;
                    sn.PAYDATE = paydate;
                    sn.message = "";
                    //sn.authcaste = authcaste;
                }
                else
                {
                    sn.structype = "";
                    sn.STRUCTURE = dr["Struct_name"].ToString();
                    sn.AMOUNT = dr["Amount"].ToString();
                    sn.DIFFERNCE = dr["Difference"].ToString();
                    sn.PAID = dr["amt"].ToString();
                    sn.RECIPTNO = receiptno;
                    sn.Recpt_Bnk_Branch = bnkbranch;
                    sn.Recpt_Bnk_Name = bnkname;
                    sn.Recpt_Chq_No = cheque_no;
                    sn.Recpt_Chq_dt = cheque_date;
                    sn.flagchk = Convert.ToInt32(dr["flag"].ToString());
                    sn.paymode = paymentmode;
                    sn.REMARK = remark;
                    sn.refdet = refdet;
                    sn.chqstatus = dr["chq_status"].ToString();
                    sn.AUTHORIZEDBY = authorizedby;
                    sn.PAYDATE = paydate;
                    sn.message = "";
                    sn.authcaste = authcaste;
                }

                details.Add(sn);
            }
        }
        else
        {
            STUDENTFEES sn = new STUDENTFEES();
            sn.message = "No data found.";
            details.Add(sn);
        }
        return details.ToArray();
    }

    public List<ListItem> fillremark()
    {
        string qry = "select Remark from dbo.m_FeeRemark where Rem_Type='Fees'";

        string constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["Remark"].ToString(),
                                Text = sdr["Remark"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }
    //////////////////////////////////Fee Entry New
    ///

    //-------------------salary module-----------------------

    public salarydetails empdetails(empsalary emp, string msg)
    {
        string str = "select e.emp_id,isnull(emp_title,'')+ISNULL(name,'')+' '+ISNULL(FATHER,'')+' '+ISNULL(SURNAME,'') as name,convert(varchar,dob,103) as DOB,case when (s.doj is not null and s.doj!='') then s.doj else  convert(varchar,e.doj,103) end as DOJ,CURRENT_DESIGNATION as des,DATENAME(MONTH, DATEADD(MONTH, convert(int,from_month), '2000-12-01'))+' '+from_year as applicable,(select case when count(*)>0 then 1 else 0 end  from salary_monthly_record where emp_id=e.emp_id and del_flag=0 and id=s.id) as deleteflag,s.id,s.emp_type,s.qualification,s.payscale,s.dor,s.from_month as month,s.from_year as year,s.basic,s.agp,s.total,s.da,s.hra,s.ta,s.others_sp_allow,s.gross_salary,s.arrears,s.total_salary,s.pf_no,s.pf_emp,s.pf_trust,s.pt,s.tds,s.others_deduct,s.total_deduct,s.net_salary,s.total_pf,s.total_salary_emp,s.remark,status_flag,s.account_no from EmployeePersonal e left join salary_master s on e.emp_id=s.emp_id and s.del_flag=0 where e.emp_id='" + emp.emp_id + "' order by cast (from_year as int),cast(from_month as int)";

        DataTable dtnew = cls1.fillDataTable(str);
        salarydetails sal = new salarydetails();
        List<empsalary> empsal = new List<empsalary>();

        if (dtnew.Rows.Count > 0)
        {
            for (int i = 0; i < dtnew.Rows.Count; i++)
            {
                empsalary det = new empsalary();
                det.emp_id = dtnew.Rows[i]["emp_id"].ToString();
                det.emp_name = dtnew.Rows[i]["name"].ToString();
                det.designation = dtnew.Rows[i]["des"].ToString();
                det.qualification = dtnew.Rows[i]["qualification"].ToString();
                det.acno = dtnew.Rows[i]["account_no"].ToString();
                det.scale = dtnew.Rows[i]["payscale"].ToString();
                det.joining = dtnew.Rows[i]["DOJ"].ToString();
                det.birthdate = dtnew.Rows[i]["DOB"].ToString();
                det.retirement = dtnew.Rows[i]["dor"].ToString();
                det.month = dtnew.Rows[i]["month"].ToString();
                det.year = dtnew.Rows[i]["year"].ToString();
                det.status = dtnew.Rows[i]["status_flag"].ToString();
                det.emp_type = dtnew.Rows[i]["emp_type"].ToString();
                det.applicable = dtnew.Rows[i]["applicable"].ToString();
                det.delete = dtnew.Rows[i]["deleteflag"].ToString();
                det.id = dtnew.Rows[i]["id"].ToString();
                det.basic = dtnew.Rows[i]["basic"].ToString();
                det.agp = dtnew.Rows[i]["agp"].ToString();
                det.total = dtnew.Rows[i]["total"].ToString();
                det.da = dtnew.Rows[i]["da"].ToString();
                det.hra = dtnew.Rows[i]["hra"].ToString();
                det.ta = dtnew.Rows[i]["ta"].ToString();
                det.oth_sp_allow = dtnew.Rows[i]["others_sp_allow"].ToString();
                det.gross_salary = dtnew.Rows[i]["gross_salary"].ToString();
                det.arrears = dtnew.Rows[i]["arrears"].ToString();
                det.total_salary = dtnew.Rows[i]["total_salary"].ToString();
                det.pf_no = dtnew.Rows[i]["pf_no"].ToString();
                det.pf_emp = dtnew.Rows[i]["pf_emp"].ToString();
                det.pf_trust = dtnew.Rows[i]["pf_trust"].ToString();
                det.pt = dtnew.Rows[i]["pt"].ToString();
                det.tds = dtnew.Rows[i]["tds"].ToString();
                det.oth_deduct = dtnew.Rows[i]["others_deduct"].ToString();
                det.total_deduct = dtnew.Rows[i]["total_deduct"].ToString();
                det.net_salary = dtnew.Rows[i]["net_salary"].ToString();
                det.total_pf = dtnew.Rows[i]["total_pf"].ToString();
                det.total_salary_emp = dtnew.Rows[i]["total_salary_emp"].ToString();
                det.remark = dtnew.Rows[i]["remark"].ToString();
                det.process = msg.ToString();
                empsal.Add(det);
            }
            sal.emp_salary = empsal.ToArray();
        }
        else
        {
            empsalary det = new empsalary();
            det.process = "NO";
            empsal.Add(det);
            sal.emp_salary = empsal.ToArray();
        }
        return sal;
    }

    public string savesalary(empsalary emp)
    {
        string str = "insert into salary_master(emp_id,emp_type,qualification,account_no,payscale,doj,dor,from_month,from_year,basic,agp,total,da,hra,ta,others_sp_allow,gross_salary,arrears,total_salary,pf_no,pf_emp,pf_trust,pt,tds,others_deduct,total_deduct,net_salary,total_pf,total_salary_emp,remark,curr_dt,user_id,del_flag,status_flag) values('" + emp.emp_id + "','" + emp.emp_type + "','" + emp.qualification.ToString().Replace("'", "\"") + "','" + emp.acno.ToString().Replace("'", "\"") + "','" + emp.scale.ToString().Replace("'", "\"") + "','" + emp.joining.ToString().Replace("'", "\"") + "','" + emp.retirement.ToString().Replace("'", "\"") + "','" + emp.month + "','" + emp.year + "','" + emp.basic + "','" + emp.agp + "','" + emp.total + "','" + emp.da + "','" + emp.hra + "','" + emp.ta + "','" + emp.oth_sp_allow + "','" + emp.gross_salary + "','" + emp.arrears + "','" + emp.total_salary + "','" + emp.pf_no + "','" + emp.pf_emp + "','" + emp.pf_trust + "','" + emp.pt + "','" + emp.tds + "','" + emp.oth_deduct + "','" + emp.total_deduct + "','" + emp.net_salary + "','" + emp.total_pf + "','" + emp.total_salary_emp + "','" + emp.remark.ToString().Replace("'", "\"") + "',GETDATE(),'" + emp.user_id + "',0,0)";
        bool msg = cls1.DMLqueries(str);
        if (msg == true)
        {
            return "saved";
        }
        else
        {
            return "failed";
        }
    }

    public string deleteuser(empsalary emp)
    {
        string str = "";
        if (emp.process == "Delete")
        {
            str = "update m_employee_personal set del_flag=1 where emp_id='" + emp.emp_id + "';update salary_master set status_flag=1 where emp_id='" + emp.emp_id + "'";
        }
        else if (emp.process == "Recover")
        {
            str = "update m_employee_personal set del_flag=0 where emp_id='" + emp.emp_id + "';update salary_master set status_flag=0 where emp_id='" + emp.emp_id + "'";
        }
        bool msg = cls1.DMLqueries(str);
        if (msg == true)
        {
            return "deleted";
        }
        else
        {
            return "failed";
        }
    }

    public string deletesalary(empsalary emp)
    {
        string str = "update salary_master set del_flag=1,del_dt=GETDATE() where emp_id='" + emp.emp_id + "' and id='" + emp.id + "'";
        bool msg = cls1.DMLqueries(str);
        if (msg == true)
        {
            return "deleted";
        }
        else
        {
            return "failed";
        }
    }

    public string updatesalary(empsalary emp)
    {
        string str = "update salary_master set qualification='" + emp.qualification.ToString().Replace("'", "\"") + "',account_no='" + emp.acno.ToString().Replace("'", "\"") + "',payscale='" + emp.scale + "',doj='" + emp.joining + "',dor='" + emp.retirement + "',emp_type='" + emp.emp_type + "',remark='" + emp.remark + "',pf_no='" + emp.pf_no + "',mod_dt=GETDATE() where emp_id='" + emp.emp_id + "' and id='" + emp.id + "' and del_flag=0";
        bool msg = cls1.DMLqueries(str);
        if (msg == true)
        {
            return "updated";
        }
        else
        {
            return "failed";
        }
    }

    public salarydetails nodata()
    {
        salarydetails sal = new salarydetails();
        List<empsalary> empsal = new List<empsalary>();
        empsalary det = new empsalary();
        det.process = "NO";
        empsal.Add(det);
        sal.emp_salary = empsal.ToArray();
        return sal;
    }
    public salarydetails getdept()
    {
        string str = "select * from m_department where del_flag=0";
        DataTable dtnew = cls1.fillDataTable(str);
        salarydetails sal = new salarydetails();
        List<empsalary> empsal = new List<empsalary>();

        if (dtnew.Rows.Count > 0)
        {
            for (int i = 0; i < dtnew.Rows.Count; i++)
            {
                empsalary det = new empsalary();
                det.emp_id = dtnew.Rows[i]["Dept_id"].ToString();
                det.emp_name = dtnew.Rows[i]["Department_name"].ToString();
                empsal.Add(det);
            }
            sal.emp_salary = empsal.ToArray();
        }
        else
        {
            empsalary det = new empsalary();
            det.process = "NO";
            empsal.Add(det);
            sal.emp_salary = empsal.ToArray();
        }
        return sal;
    }
    public salarydetails getmonthly(empsalary emp, string msg)
    {
        string str = "";
        if (emp.process == "New")
        {
            str = "select emp_id,isnull(emp_title,'')+ISNULL(name,'')+' '+ISNULL(FATHER,'')+' '+ISNULL(SURNAME,'') as name,convert(varchar,dob,103) as DOB,CURRENT_DESIGNATION as des from EmployeePersonal where emp_id in (select emp_id from salary_master where emp_id in (select emp_id from employee_department_des where emp_dept_id='" + emp.department + "' and emp_del_flag=1 and emp_id not in (select emp_id from salary_monthly_record where month='" + emp.month + "' and year='" + emp.year + "' and del_flag=0 )) and status_flag=0 and del_flag=0 and emp_type='" + emp.emp_type + "') order by emp_id";
        }
        else if (emp.process == "Edit")
        {
            str = "select emp_id,isnull(emp_title,'')+ISNULL(name,'')+' '+ISNULL(FATHER,'')+' '+ISNULL(SURNAME,'') as name,convert(varchar,dob,103) as DOB,CURRENT_DESIGNATION as des from EmployeePersonal where emp_id in (select emp_id from salary_master where emp_id in (select emp_id from employee_department_des where emp_dept_id='" + emp.department + "' and emp_del_flag=1 and emp_id in (select emp_id from salary_monthly_record where month='" + emp.month + "' and year='" + emp.year + "' and del_flag=0 )) and status_flag=0 and del_flag=0 and emp_type='" + emp.emp_type + "') order by emp_id";
        }
        DataTable dtnew = cls1.fillDataTable(str);
        salarydetails sal = new salarydetails();
        List<empsalary> empsal = new List<empsalary>();
        if (dtnew.Rows.Count > 0)
        {
            for (int i = 0; i < dtnew.Rows.Count; i++)
            {
                if (emp.process == "New")
                {
                    string qry = "select top(1) *,DATENAME(MONTH, DATEADD(MONTH, convert(int,from_month), '2000-12-01'))+' '+from_year as applicable from (select case when from_year<" + emp.year + "  then 1 when from_year=" + emp.year + " and from_month<=" + emp.month + " then 1 else 0 end as curr,* from salary_master where emp_id='" + dtnew.Rows[i]["emp_id"].ToString() + "' and del_flag=0)a where a.curr=1 order by cast(from_year as int) desc,cast(from_month as int) desc";
                    DataTable dtsal = cls1.fillDataTable(qry);
                    if (dtsal.Rows.Count > 0)
                    {
                        empsalary det = new empsalary();
                        det.emp_id = dtnew.Rows[i]["emp_id"].ToString();
                        det.emp_name = dtnew.Rows[i]["name"].ToString();
                        det.designation = dtnew.Rows[i]["des"].ToString();
                        det.birthdate = dtnew.Rows[i]["DOB"].ToString();
                        det.acno = dtsal.Rows[0]["account_no"].ToString();
                        det.qualification = dtsal.Rows[0]["qualification"].ToString();
                        det.scale = dtsal.Rows[0]["payscale"].ToString();
                        det.joining = dtsal.Rows[0]["DOJ"].ToString();
                        det.retirement = dtsal.Rows[0]["dor"].ToString();
                        det.month = dtsal.Rows[0]["from_month"].ToString();
                        det.year = dtsal.Rows[0]["from_year"].ToString();
                        det.status = dtsal.Rows[0]["status_flag"].ToString();
                        det.emp_type = dtsal.Rows[0]["emp_type"].ToString();
                        det.applicable = dtsal.Rows[0]["applicable"].ToString();
                        det.id = dtsal.Rows[0]["id"].ToString();
                        det.basic = dtsal.Rows[0]["basic"].ToString();
                        det.agp = dtsal.Rows[0]["agp"].ToString();
                        det.total = dtsal.Rows[0]["total"].ToString();
                        det.da = dtsal.Rows[0]["da"].ToString();
                        det.hra = dtsal.Rows[0]["hra"].ToString();
                        det.ta = dtsal.Rows[0]["ta"].ToString();
                        det.oth_sp_allow = dtsal.Rows[0]["others_sp_allow"].ToString();
                        det.gross_salary = dtsal.Rows[0]["gross_salary"].ToString();
                        det.arrears = dtsal.Rows[0]["arrears"].ToString();
                        det.total_salary = dtsal.Rows[0]["total_salary"].ToString();
                        det.pf_no = dtsal.Rows[0]["pf_no"].ToString();
                        det.pf_emp = dtsal.Rows[0]["pf_emp"].ToString();
                        det.pf_trust = dtsal.Rows[0]["pf_trust"].ToString();
                        det.pt = dtsal.Rows[0]["pt"].ToString();
                        det.tds = dtsal.Rows[0]["tds"].ToString();
                        det.oth_deduct = dtsal.Rows[0]["others_deduct"].ToString();
                        det.total_deduct = dtsal.Rows[0]["total_deduct"].ToString();
                        det.net_salary = dtsal.Rows[0]["net_salary"].ToString();
                        det.total_pf = dtsal.Rows[0]["total_pf"].ToString();
                        det.total_salary_emp = dtsal.Rows[0]["total_salary_emp"].ToString();
                        det.remark = dtsal.Rows[0]["remark"].ToString();
                        det.process = msg.ToString();
                        empsal.Add(det);
                    }
                }
                else if (emp.process == "Edit")
                {
                    string qry = "select *,(select sum(no) from (select case when year>" + emp.year + " then 1 when year=" + emp.year + " and month>" + emp.month + " then 1 else 0 end as no from salary_monthly_record where emp_id='" + dtnew.Rows[i]["emp_id"].ToString() + "' and del_flag=0)a) as count from salary_monthly_record where emp_id='" + dtnew.Rows[i]["emp_id"].ToString() + "' and year=" + emp.year + " and month=" + emp.month + " and del_flag=0";
                    DataTable dtsal = cls1.fillDataTable(qry);
                    if (dtsal.Rows.Count > 0)
                    {
                        empsalary det = new empsalary();
                        det.emp_id = dtnew.Rows[i]["emp_id"].ToString();
                        det.emp_name = dtnew.Rows[i]["name"].ToString();

                        det.delete = dtsal.Rows[0]["count"].ToString();
                        det.id = dtsal.Rows[0]["id"].ToString();
                        det.gross_salary = dtsal.Rows[0]["gross_salary"].ToString();
                        det.arrears = dtsal.Rows[0]["arrears"].ToString();
                        det.total_salary = dtsal.Rows[0]["total_salary"].ToString();
                        det.total_deduct = dtsal.Rows[0]["total_deduct"].ToString();
                        det.net_salary = dtsal.Rows[0]["net_salary"].ToString();
                        det.total_pf = dtsal.Rows[0]["total_pf"].ToString();
                        det.total_salary_emp = dtsal.Rows[0]["total_salary_emp"].ToString();
                        det.process = msg.ToString();
                        empsal.Add(det);
                    }
                }
            }
            sal.emp_salary = empsal.ToArray();
        }
        else
        {
            empsalary det = new empsalary();
            det.process = "NO";
            empsal.Add(det);
            sal.emp_salary = empsal.ToArray();
        }
        return sal;
    }
    public string savemonthly(salarydetails emp)
    {
        string str = "";
        for (int i = 0; i < emp.emp_salary.Length; i++)
        {
            str += " insert into salary_monthly_record(id,emp_id,month,year,basic,agp,total,da,hra,ta,others_sp_allow,gross_salary,arrears,total_salary,pf_no,pf_emp,pf_trust,pt,tds,others_deduct,total_deduct,net_salary,total_pf,total_salary_emp,remark,curr_dt,user_id,del_flag) values('" + emp.emp_salary[i].id + "','" + emp.emp_salary[i].emp_id + "','" + emp.emp_salary[i].month + "','" + emp.emp_salary[i].year + "','" + emp.emp_salary[i].basic + "','" + emp.emp_salary[i].agp + "','" + emp.emp_salary[i].total + "','" + emp.emp_salary[i].da + "','" + emp.emp_salary[i].hra + "','" + emp.emp_salary[i].ta + "','" + emp.emp_salary[i].oth_sp_allow + "','" + emp.emp_salary[i].gross_salary + "','" + emp.emp_salary[i].arrears + "','" + emp.emp_salary[i].total_salary + "','" + emp.emp_salary[i].pf_no + "','" + emp.emp_salary[i].pf_emp + "','" + emp.emp_salary[i].pf_trust + "','" + emp.emp_salary[i].pt + "','" + emp.emp_salary[i].tds + "','" + emp.emp_salary[i].oth_deduct + "','" + emp.emp_salary[i].total_deduct + "','" + emp.emp_salary[i].net_salary + "','" + emp.emp_salary[i].total_pf + "','" + emp.emp_salary[i].total_salary_emp + "','" + emp.emp_salary[i].remark.ToString().Replace("'", "\"") + "',GETDATE(),'" + emp.emp_salary[i].user_id + "',0); ";
        }
        bool msg = cls1.DMLqueries(str);
        if (msg == true)
        {
            return "saved";
        }
        else
        {
            return "failed";
        }
    }

    public string deletemonthly(empsalary emp)
    {
        string str = "update salary_monthly_record set del_flag=1,del_dt=GETDATE() where emp_id='" + emp.emp_id + "' and month=" + emp.month + " and year=" + emp.year + " and del_flag=0";
        bool msg = cls1.DMLqueries(str);
        if (msg == true)
        {
            return "deleted";
        }
        else
        {
            return "failed";
        }
    }



    //''''''''''''''''''''''''''''''' LIBRARY --- Vaidehi '''''''''''''''''''''''''''''''''''//

    //--------BookmasterNew----------//

    public string[] LoadPublisher(string type, string connect)
    {

        string strquery = "select distinct general_name from dbo.ll_general_master where general_type='" + type + "' and not_in_use=0 order by general_name desc";
        string constr = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    constr = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { constr = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { constr = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMS")) { constr = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }
        constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        using (SqlConnection con = new SqlConnection(constr))
        {
            List<string> confirm = new List<string>();
            DataTable dt = new DataTable();
            SqlDataAdapter da = new SqlDataAdapter(strquery, constr);
            da.Fill(dt);
            //     cls1.fillDataTable(strquery);
            if (dt.Rows.Count > 0)
            {

                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    confirm.Add(dt.Rows[i]["general_name"].ToString());

                }


            }
            return confirm.ToArray();

        }
    }
    public lib_report[] book_search(string book_name, string author, string publisher, string keyword, string isbn, string accession_no, string connect)
    {
        List<lib_report> confirm = new List<lib_report>();

        string whr = ""; string strquerycd = "";
        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

        strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from lib_book_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";
        if (book_name != "")
        {
            whr = "title like N'%" + book_name + "%'";
        }
        if (author != "")
        {
            if (whr == "")
            {
                whr = "author like N'%" + author + "%'";
            }
            else
            {
                whr = whr + " and author like N'%" + author + "%'";
            }
        }
        if (publisher != "")
        {
            if (whr == "")
            {
                whr = "publisher like N'%" + publisher + "%'";
            }
            else
            {
                whr = whr + " and publisher like N'%" + publisher + "%'";
            }
        }
        if (keyword != "")
        {
            if (whr == "")
            {
                whr = "keyword like N'%" + keyword + "%'";
            }
            else
            {
                whr = whr + " and keyword like N'%" + keyword + "%'";
            }
        }
        if (isbn != "")
        {
            if (whr == "")
            {
                whr = "isbn like N'%" + isbn + "%'";
            }
            else
            {
                whr = whr + " and isbn like N'%" + isbn + "%'";
            }
        }
        if (accession_no != "")
        {
            if (whr == "")
            {
                whr = "accession_no like N'%" + accession_no + "%'";
            }
            else
            {
                whr = whr + " and accession_no like N'%" + accession_no + "%'";
            }
        }
        strquerycd = strquerycd + whr;
        string cs = "";
        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }


        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;


        SqlConnection con = new SqlConnection(cs);
        SqlDataAdapter da = new SqlDataAdapter(strquerycd, con);
        DataTable dt = new DataTable();
        da.Fill(dt);
        //DataTable dt = cls1.fillDataTable(strquerycd);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                SqlDataAdapter da1 = new SqlDataAdapter(str, con);
                DataTable dt1 = new DataTable();
                da1.Fill(dt1);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                SqlDataAdapter da11 = new SqlDataAdapter(str1, con);
                DataTable dt11 = new DataTable();
                da11.Fill(dt11);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);

                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }
    public lib_report[] CD_search(string book_name, string author, string publisher, string keyword, string isbn, string accession_no, string connect)
    {
        List<lib_report> confirm = new List<lib_report>();

        string whr = ""; string strquerycd = "";
        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";

        strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR from lib_cd_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";


        if (book_name != "")
        {
            whr = "title like N'" + book_name + "%'";
        }
        if (author != "")
        {
            if (whr == "")
            {
                whr = "author like N'" + author + "%'";
            }
            else
            {
                whr = whr + " and author like N'" + author + "%'";
            }
        }
        if (publisher != "")
        {
            if (whr == "")
            {
                whr = "publisher like N'" + publisher + "%'";
            }
            else
            {
                whr = whr + " and publisher like N'" + publisher + "%'";
            }
        }
        if (keyword != "")
        {
            if (whr == "")
            {
                whr = "keyword like N'" + keyword + "%'";
            }
            else
            {
                whr = whr + " and keyword like N'" + keyword + "%'";
            }
        }
        if (isbn != "")
        {
            if (whr == "")
            {
                whr = "isbn like N'" + isbn + "%'";
            }
            else
            {
                whr = whr + " and isbn like N'" + isbn + "%'";
            }
        }
        if (accession_no != "")
        {
            if (whr == "")
            {
                whr = "accession_no like N'%" + accession_no + "%'";
            }
            else
            {
                whr = whr + " and accession_no like N'%" + accession_no + "%'";
            }
        }
        strquerycd = strquerycd + whr;
        string cs = "";
        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }


        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        SqlConnection con = new SqlConnection(cs);
        SqlDataAdapter da = new SqlDataAdapter(strquerycd, con);
        DataTable dt = new DataTable();
        da.Fill(dt);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = "";
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                SqlDataAdapter da1 = new SqlDataAdapter(str, con);
                DataTable dt1 = new DataTable();
                da1.Fill(dt1);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                SqlDataAdapter da11 = new SqlDataAdapter(str1, con);
                DataTable dt11 = new DataTable();
                da11.Fill(dt11);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);

                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }
    public lib_report[] Map_search(string book_name, string author, string publisher, string keyword, string isbn, string accession_no, string connect)
    {
        List<lib_report> confirm = new List<lib_report>();

        string whr = ""; string strquerycd = "";
        //string strquerycd = "select * from lib_book_master where DEL_FLAG=0";


        strquerycd = "select distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from lib_book_master where del_flag='0' and ";// title like '" + book_name + "%' or author like '" + book_name + "%' or publisher like '" + book_name + "%' or keyword like '" + book_name + "%' or ISBN like '" + book_name + "%' ";        


        if (book_name != "")
        {
            whr = "title like N'" + book_name + "%'";
        }
        if (author != "")
        {
            if (whr == "")
            {
                whr = "author like N'" + author + "%'";
            }
            else
            {
                whr = whr + " and author like N'" + author + "%'";
            }
        }
        if (publisher != "")
        {
            if (whr == "")
            {
                whr = "publisher like N'" + publisher + "%'";
            }
            else
            {
                whr = whr + " and publisher like N'" + publisher + "%'";
            }
        }
        if (keyword != "")
        {
            if (whr == "")
            {
                whr = "keyword like N'" + keyword + "%'";
            }
            else
            {
                whr = whr + " and keyword like N'" + keyword + "%'";
            }
        }
        if (isbn != "")
        {
            if (whr == "")
            {
                whr = "isbn like N'" + isbn + "%'";
            }
            else
            {
                whr = whr + " and isbn like N'" + isbn + "%'";
            }
        }
        if (accession_no != "")
        {
            if (whr == "")
            {
                whr = "accession_no like N'%" + accession_no + "%'";
            }
            else
            {
                whr = whr + " and accession_no like N'%" + accession_no + "%'";
            }
        }
        strquerycd = strquerycd + whr;
        string cs = "";
        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }


        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }
        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        SqlConnection con = new SqlConnection(cs);
        SqlDataAdapter da = new SqlDataAdapter(strquerycd, con);
        DataTable dt = new DataTable();
        da.Fill(dt);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();
                // sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                //sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                string str = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                SqlDataAdapter da1 = new SqlDataAdapter(str, con);
                DataTable dt1 = new DataTable();
                da1.Fill(dt1);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                SqlDataAdapter da11 = new SqlDataAdapter(str1, con);
                DataTable dt11 = new DataTable();
                da11.Fill(dt11);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();
                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);

                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }
    public lib_report[] Adv_book_search(string book_name, string author, string publisher, string flagKey1, string flagKey2, string flagKey3, string flagLogic, string flagLogic1, string type, string connect)
    {
        List<lib_report> confirm = new List<lib_report>();
        string tblname = "";
        string str = "";
        if (type == "CD")
        {
            tblname = "lib_cd_master";
            str = "select  distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR from " + tblname + " where del_flag='0' and ";
        }
        else if (type == "BOOK")
        {
            tblname = "lib_book_master";
            str = "select  distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from " + tblname + " where del_flag='0' and ";
        }
        else
        {

            tblname = "lib_book_master";
            str = "select  distinct TITLE,AUTHOR,ISBN,LANG,KEYWORD,PUBLISHER,YEAR,CALLNO from " + tblname + " where del_flag='0' and ";
        }


        if (flagKey1 != "")
        {
            str += flagKey1 + " like '%" + book_name.Trim() + "%' ";
        }
        if (flagKey2 != "" && book_name != "")
        {
            if (flagKey1 != flagKey2)
            {
                if (flagLogic != "NOT")
                {
                    str += " " + flagLogic + " " + flagKey2 + " like '%" + author.Trim() + "%' ";
                }
                else if (flagLogic == "NOT")
                {
                    if (book_name != "")
                    {

                        str += " and " + flagKey2 + " not like '%" + author.Trim() + "%' ";
                    }
                    else
                    {
                        str += " " + flagKey2 + " not like '%" + author.Trim() + "%' ";
                    }
                }

            }
            else
            {
                if (flagLogic != "NOT")
                {
                    str += " or  " + flagKey2 + " like '%" + author.Trim() + "%' ";
                }
                else if (flagLogic == "NOT")
                {
                    str += " and " + flagKey2 + " not like '%" + author.Trim() + "%' ";
                }
            }

        }
        if (flagKey3 != "" && author != "")
        {
            if (flagKey3 != flagKey1 && flagKey3 != flagKey2)
            {
                if (flagLogic1 != "NOT")
                {
                    str += " " + flagLogic1 + " " + flagKey3 + " like '%" + publisher.Trim() + "%' ";
                }
                else if (flagLogic1 == "NOT")
                {
                    str += " and " + flagKey3 + " not like '%" + publisher.Trim() + "%' ";
                }
            }
            else
            {
                if (flagLogic1 != "NOT")
                {
                    str += " or  " + flagKey3 + " like '%" + publisher.Trim() + "%' ";
                }
                else if (flagLogic1 == "NOT")
                {
                    str += " and " + flagKey3 + " not like '%" + publisher.Trim() + "%' ";
                }
            }


        }
        str += " order by title";


        string cs = "";
        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["connect_imr"].ConnectionString; }


        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        SqlConnection con = new SqlConnection(cs);
        SqlDataAdapter da = new SqlDataAdapter(str, con);
        DataTable dt = new DataTable();
        da.Fill(dt);

        //   DataTable dt = cls1.fillDataTable(str);

        if (dt.Rows.Count > 0)
        {

            for (int i = 0; i <= dt.Rows.Count - 1; i++)
            {
                lib_report sdb = new lib_report();
                //  sdb.ID = dt.Rows[i]["ID"].ToString();
                sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                sdb.LANG = dt.Rows[i]["LANG"].ToString();

                sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                //  sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                //sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                //sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();

                string str2 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO from lib_book_master t1 where t1.TITLE=N'" + dt.Rows[i]["TITLE"].ToString().Replace("'", "''") + "'";
                SqlDataAdapter da1 = new SqlDataAdapter(str2, con);
                DataTable dt1 = new DataTable();
                da1.Fill(dt1);
                //  DataTable dt1 = cls1.fillDataTable(str2);
                string str1 = "select * from ll_issue_return where accession_id in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') and issue_return='0'";
                SqlDataAdapter da2 = new SqlDataAdapter(str1, con);
                DataTable dt11 = new DataTable();
                da2.Fill(dt11);

                //DataTable dt11 = cls1.fillDataTable(str1);
                string[] tot_iss = dt1.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                int ava = Convert.ToInt32(tot_iss.Length) - Convert.ToInt32(dt11.Rows.Count);
                sdb.ACCESSION_NO = dt1.Rows[0]["ACCESSION_NO"].ToString();

                sdb.issued = Convert.ToString(dt11.Rows.Count);
                sdb.available = Convert.ToString(ava);
                sdb.cnt = Convert.ToString(dt.Rows.Count);


                string str22 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where   t1.del_flag=1 and t1.remark like '%Withdraw%' and t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO  from lib_book_Master t1 where Accession_No in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "')";
                SqlDataAdapter da22 = new SqlDataAdapter(str22, con);
                DataTable dt22 = new DataTable();
                da22.Fill(dt22);

                // DataTable dt22 = cls1.fillDataTable(str22);
                if (dt22.Rows[0]["ACCESSION_NO"].ToString() != "")
                {
                    string[] tot_wid = dt22.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                    int aval = Convert.ToInt32(tot_wid.Length);
                    sdb.REMARK = Convert.ToString(aval);
                }
                else
                {
                    int aval = 0;
                    sdb.REMARK = Convert.ToString(aval);
                }
                sdb.SUBJ = dt22.Rows[0]["ACCESSION_NO"].ToString();
                string str33 = "select distinct stuff((select ', ' + CAST(t2.accession_no as nvarchar(max)) from lib_book_master t2 where  t1.del_flag=1 and t1.remark like '%Missing%' and t1.TITLE = t2.TITLE for xml path('')),1,1,'') ACCESSION_NO  from lib_book_Master t1 where Accession_No in ('" + dt1.Rows[0]["ACCESSION_NO"].ToString().Trim().Replace(",", "','").Replace(" ", "") + "') ";
                SqlDataAdapter da33 = new SqlDataAdapter(str33, con);
                DataTable dt33 = new DataTable();
                da33.Fill(dt33);

                //     DataTable dt33 = cls1.fillDataTable(str33);
                if (dt33.Rows[0]["ACCESSION_NO"].ToString() != "")
                {
                    string[] tot_miss = dt33.Rows[0]["ACCESSION_NO"].ToString().Split(',');
                    int avala = Convert.ToInt32(tot_miss.Length);

                    sdb.ISSUE_TYPE = Convert.ToString(avala);
                }
                else
                {
                    int avala = 0;

                    sdb.ISSUE_TYPE = Convert.ToString(avala);
                }
                sdb.REG_DT = dt33.Rows[0]["ACCESSION_NO"].ToString();
                //sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                //sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                //sdb.MRP = dt.Rows[i]["MRP"].ToString();
                //sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                //sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                //sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                //sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                //sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                confirm.Add(sdb);
            }

        }
        return confirm.ToArray();


    }

    public bool AuthorInsert(string generalid, string generaltype, string generalname, string contact1, string contact2, string email, string location, string address, string not_in_use, string userid, string connect)
    {
        bool Author = false;
        string str = "";
        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        string str1 = "select  [dbo].[getIdOf]('ll_general_master')";
        DataTable dt = new DataTable();
        SqlConnection con1 = new SqlConnection(cs);
        SqlDataAdapter ds = new SqlDataAdapter(str1, con1);
        ds.Fill(dt);
        // dt = cls1.fillDataTable(str1);
        //string str2 = "";
        //if (dt.Rows.Count > 0)
        //{
        //    str2 = "update Master_System_T set runningvalue = runningvalue + 1 where tablename='ll_general_master'";
        //}


        str = "pro_ll_general_insert";
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(str, con))
            {
                con.Open();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@type", "insert");
                cmd.Parameters.AddWithValue("@general_id", dt.Rows[0][0].ToString());
                cmd.Parameters.AddWithValue("@general_type", generaltype);
                cmd.Parameters.AddWithValue("@general_name", generalname);
                cmd.Parameters.AddWithValue("@contact_1", contact1);
                cmd.Parameters.AddWithValue("@contact_2", contact2);
                cmd.Parameters.AddWithValue("@email", email);
                cmd.Parameters.AddWithValue("@location", location);
                cmd.Parameters.AddWithValue("@address ", address);
                cmd.Parameters.AddWithValue("@not_in_use", not_in_use);
                cmd.Parameters.AddWithValue("@user_id", userid);
                string message = Convert.ToString(cmd.ExecuteScalar());
                if (message != "")
                {
                    Author = true;
                    if (message == "TRANSACTION SUCCESSFULL")
                    {
                        //cls1.DMLqueries(str2);
                    }
                }

                return Author;

            }
        }
    }


    public book_master[] Get_book_Title(string type, string connect)
    {
        string strquery = "";
        if (type == "book")
        {
            strquery = "select distinct rtrim(ltrim(TITLE)) as book_title from lib_book_master where del_flag=0";
        }
        else if (type == "Ebook")
        {
            strquery = "select distinct rtrim(ltrim(TITLE)) as book_title from lib_Ebook_master where del_flag=0";
        }
        else
        {
            strquery = "select distinct rtrim(ltrim(TITLE)) as book_title from lib_MAP_MASTER where del_flag=0";

        }
        string constr = "";//ConfigurationManager.ConnectionStrings["connect"].ConnectionString;
        //if (connect.StartsWith("Viva Engg"))
        //{
        //    constr = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { constr = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { constr = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else { constr = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString; }

        constr = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        List<book_master> confirm = new List<book_master>();
        using (SqlConnection con = new SqlConnection(constr))
        {

            DataTable dt = new DataTable();
            SqlDataAdapter da = new SqlDataAdapter(strquery, con);
            da.Fill(dt);
            //cls1.fillDataTable(strquery);




            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    book_master sdb = new book_master();

                    // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                    sdb.id = dt.Rows[i]["book_title"].ToString();
                    sdb.title = dt.Rows[i]["book_title"].ToString();
                    confirm.Add(sdb);

                }




            }
        }
        return confirm.ToArray();
    }

    public bookmasternew[] get_cd_data(string cd, string cd_name, string type, string connect)
    {
        List<bookmasternew> confirm = new List<bookmasternew>();
        if (cd != "")
        {
            string str = "";
            string id = "";
            id = cd.Replace(",", "','");
            if (cd.Contains(","))
            {
                if (type == "cd")
                {
                    str = "select distinct TITLE,author from lib_CD_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                }
                else if (type == "book")
                {

                    str = "select distinct TITLE,author from lib_book_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                }
                else if (type == "Ebook")
                {

                    str = "select distinct TITLE,author from lib_Ebook_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                }
                else
                {
                    str = "select distinct TITLE,author from lib_MAP_MASTER where ACCESSION_NO in ('" + id + "') and del_flag=0";

                }
            }
            else
            {
                if (type == "cd")
                {
                    str = "select distinct TITLE,author from lib_CD_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                }
                else if (type == "book")
                {

                    str = "select distinct TITLE,author from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                }
                else if (type == "Ebook")
                {

                    str = "select distinct TITLE,author from lib_Ebook_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                }
                else
                {
                    str = "select distinct TITLE,author from lib_MAP_MASTER where ACCESSION_NO='" + cd + "' and del_flag=0";

                }
            }
            string cs = "";


            //if (connect.StartsWith("Viva Engg"))
            //{
            //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
            //}
            //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
            //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
            //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
            //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

            cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

            DataTable dt_tit = new DataTable();
            SqlConnection con1 = new SqlConnection(cs);
            SqlDataAdapter ds = new SqlDataAdapter(str, con1);
            ds.Fill(dt_tit);
            //DataTable dt_tit = new DataTable();
            //dt_tit = cls1.fillDataTable(str);
            if (dt_tit.Rows.Count == 1)
            {
                string strquery = "";
                if (type == "cd")
                {
                    if (id.Contains(","))
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + new_id + "') and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            //    if (cd.Contains(","))
                            //    {
                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                            //}
                            //else
                            //{
                            //    strquery = "select * ,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";
                            //}
                        }

                    }
                    else
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + new_id + "') and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_CD_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                        }
                    }

                }
                else if (type == "book")
                {
                    if (id.Contains(","))
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_book_master where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_book_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                        }


                    }
                    else
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_book_master where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0 ";
                        }
                        //  strquery = "select * from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                    }
                    // strquery = "select * from lib_book_master where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";
                }
                else if (type == "Ebook")
                {
                    if (id.Contains(","))
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_Ebook_master where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_Ebook_master where ACCESSION_NO in ('" + id + "') and del_flag=0";
                        }


                    }
                    else
                    {
                        if (cd != "" && cd_name != "")
                        {
                            string new_id = "";
                            new_id = cd_name.Replace(",", "','");

                            strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_Ebook_master where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                        }
                        else
                        {
                            strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from lib_Ebook_master where ACCESSION_NO='" + cd + "' and del_flag=0 ";
                        }
                        //  strquery = "select * from lib_book_master where ACCESSION_NO='" + cd + "' and del_flag=0";
                    }
                    // strquery = "select * from lib_book_master where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";
                }
                else
                {
                    if (cd != "" && cd_name != "")
                    {
                        string new_id = "";
                        new_id = cd_name.Replace(",", "','");

                        strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix  from lib_MAP_MASTER where ACCESSION_NO in ('" + new_id + "')  and del_flag=0 order by (CASE WHEN ACCESSION_NO = '" + cd + "' THEN 0 ELSE 1 END)";
                    }
                    else
                    {
                        strquery = "select *,case when bill_dt like '%1900%' then convert(varchar(10),getdate(),105) else convert(varchar(10),bill_dt,105) end bill_dt1,substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1, (len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix from from lib_MAP_MASTER where TITLE='" + dt_tit.Rows[0][0].ToString() + "' and del_flag=0";

                    }


                }

                using (SqlConnection con = new SqlConnection(cs))
                {

                    DataTable dt = new DataTable();
                    SqlConnection con11 = new SqlConnection(cs);
                    SqlDataAdapter ds1 = new SqlDataAdapter(strquery, con11);
                    ds1.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {

                        for (int i = 0; i <= dt.Rows.Count - 1; i++)
                        {

                            bookmasternew sdb = new bookmasternew();

                            DataTable auth_dt = new DataTable();


                            if (type == "book")
                            {
                                sdb.cd_id = dt.Rows[0]["ID"].ToString();
                                sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                                sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                                sdb.bookedition = dt.Rows[0]["EDITION"].ToString();
                                sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                                sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                                sdb.bookcallno = dt.Rows[0]["CALLNO"].ToString();
                                sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                                sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                                sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                                sdb.booknoofpages = dt.Rows[0]["NOOFPAGES"].ToString();
                                sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                                sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                                sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                                sdb.bookcatogary = dt.Rows[0]["CATOGARY"].ToString();
                                sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                                sdb.bookbound = dt.Rows[0]["BOUND"].ToString();
                                sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();


                                sdb.prefix = dt.Rows[i]["prefix"].ToString();
                                sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                                sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                                sdb.cd_BILL_DT = dt.Rows[i]["BILL_DT1"].ToString();
                                sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                                sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                                sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                                sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                                sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                                sdb.cd_REG_DT = dt.Rows[i]["REG_DT"].ToString();
                                sdb.cd_PURCHASE_DT = dt.Rows[i]["PURCHASE_DATE"].ToString();
                                sdb.cd_ORDER_NO = dt.Rows[i]["ORDER_NO"].ToString();


                            }
                            if (type == "cd")
                            {
                                sdb.cd_id = dt.Rows[0]["ID"].ToString();
                                sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                                sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                                sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                                sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                                sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                                sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                                sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                                sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                                sdb.cd_DURATION = dt.Rows[0]["DURATION"].ToString();
                                sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                                sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                                sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                                sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();
                                sdb.cd_DEPARTMENT = dt.Rows[0]["DEPARTMENT"].ToString();

                                sdb.prefix = dt.Rows[i]["prefix"].ToString();
                                sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                                sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                                sdb.cd_BILL_DT = dt.Rows[i]["BILL_DT1"].ToString();
                                sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                                sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                                sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                                sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                                sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                                sdb.cd_REG_DT = dt.Rows[i]["REG_DT"].ToString();

                            }
                            else
                            {
                                sdb.cd_DURATION = "";
                                sdb.CALLNO = dt.Rows[0]["CALLNO"].ToString();
                            }
                            if (type != "book" && type != "Ebook" && type != "cd")
                            {
                                sdb.cd_id = dt.Rows[0]["ID"].ToString();
                                sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                                sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                                sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                                sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                                sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                                sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                                sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                                sdb.CALLNO = dt.Rows[0]["CALLNO"].ToString();
                                sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                                sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                                sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                                sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                                sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();
                                sdb.cd_DEPARTMENT = dt.Rows[0]["DEPARTMENT"].ToString();


                                sdb.prefix = dt.Rows[i]["prefix"].ToString();
                                sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                                sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                                sdb.cd_BILL_DT = dt.Rows[i]["BILL_DT1"].ToString();
                                sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                                sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                                sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                                sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                                sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                                sdb.cd_REG_DT = dt.Rows[i]["REG_DT"].ToString();

                            }


                            if (type == "Ebook")
                            {
                                sdb.cd_id = dt.Rows[0]["ID"].ToString();
                                sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                                sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                                sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                                sdb.booknoofpages = dt.Rows[0]["NOOFPAGES"].ToString();
                                sdb.bookcallno = dt.Rows[0]["CALLNO"].ToString();
                                sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                                sdb.bookbound = dt.Rows[0]["BOUND"].ToString();
                                sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                                sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();

                            }




                            sdb.cd_msg = "get";
                            confirm.Add(sdb);

                        }



                    }

                }
            }
            else if (dt_tit.Rows.Count > 1)
            {
                bookmasternew sdb = new bookmasternew();
                sdb.cd_msg = "multiple";
                string tit = ""; string mis_id = ""; string first_auth = ""; string auth_mis_id = "";
                string[] cd_arr = cd.Split(',');
                for (int j = 0; j < cd_arr.Length; j++)
                {
                    string cd_chk_str = "";
                    if (type == "cd")
                    {
                        cd_chk_str = "select distinct TITLE,author from lib_CD_master where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";
                    }
                    else if (type == "book")
                    {

                        cd_chk_str = "select distinct TITLE,author from lib_book_master where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";
                    }
                    else if (type == "Ebook")
                    {

                        cd_chk_str = "select distinct TITLE,author from lib_Ebook_master where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";
                    }
                    else
                    {
                        cd_chk_str = "select distinct TITLE,author from lib_MAP_MASTER where ACCESSION_NO='" + cd_arr[j] + "' and del_flag=0";

                    }
                    DataTable dt_cd_arr = new DataTable();
                    SqlConnection con11 = new SqlConnection(cs);
                    SqlDataAdapter ds1 = new SqlDataAdapter(cd_chk_str, con11);
                    ds1.Fill(dt_cd_arr);

                    if (j == 0)
                    {
                        tit = dt_cd_arr.Rows[0][0].ToString();
                        first_auth = dt_cd_arr.Rows[0][1].ToString();

                    }

                    if (dt_cd_arr.Rows[0][0].ToString() != tit)
                    {
                        if (mis_id == "")
                        {
                            mis_id = Convert.ToString(cd_arr[j]);
                        }
                        else
                        {
                            mis_id = mis_id + "," + Convert.ToString(cd_arr[j]);
                        }

                    }
                    if (dt_cd_arr.Rows[0][1].ToString() != first_auth)
                    {
                        if (auth_mis_id == "")
                        {
                            auth_mis_id = Convert.ToString(cd_arr[j]);
                        }
                        else
                        {
                            auth_mis_id = auth_mis_id + "," + Convert.ToString(cd_arr[j]);
                        }
                    }
                }
                sdb.cd_id = mis_id;
                sdb.Auth_cd_id = auth_mis_id;
                confirm.Add(sdb);


            }
            else
            {
                bookmasternew sdb = new bookmasternew();
                sdb.cd_msg = "";
                confirm.Add(sdb);
            }
        }
        else
        {
            string strquery = "";
            if (type == "cd")
            {
                strquery = "select * ,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_CD_master where TITLE=N'" + cd_name + "' and del_flag=0";
            }
            else if (type == "book")
            {
                strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_book_master where TITLE=N'" + cd_name + "' and del_flag=0";

            }
            else if (type == "Ebook")
            {
                strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_Ebook_master where TITLE=N'" + cd_name + "' and del_flag=0";

            }
            else
            {
                strquery = "select *,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_MAP_MASTER where TITLE=N'" + cd_name + "' and del_flag=0";

            }
            string cs = "";

            //if (connect.StartsWith("Viva Engg"))
            //{
            //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
            //}
            //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
            //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
            //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
            //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

            cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;


            using (SqlConnection con = new SqlConnection(cs))
            {
                DataTable dt = new DataTable();
                SqlConnection con1 = new SqlConnection(cs);
                SqlDataAdapter ds = new SqlDataAdapter(strquery, con1);
                ds.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i <= dt.Rows.Count - 1; i++)
                    {

                        bookmasternew sdb = new bookmasternew();

                        DataTable auth_dt = new DataTable();

                        if (type == "book")
                        {
                            sdb.cd_id = dt.Rows[0]["ID"].ToString();
                            sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                            sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                            sdb.bookedition = dt.Rows[0]["EDITION"].ToString();
                            sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                            sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                            sdb.bookcallno = dt.Rows[0]["CALLNO"].ToString();
                            sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                            sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                            sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                            sdb.booknoofpages = dt.Rows[0]["NOOFPAGES"].ToString();
                            sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                            sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                            sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                            sdb.bookcatogary = dt.Rows[0]["CATOGARY"].ToString();
                            sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                            sdb.bookbound = dt.Rows[0]["BOUND"].ToString();
                            sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();


                            sdb.prefix = dt.Rows[i]["prefix"].ToString();
                            sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                            sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                            sdb.cd_BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                            sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                            sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                            sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                            sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                            sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                            sdb.cd_REG_DT = dt.Rows[i]["REG_DT"].ToString();
                            sdb.cd_PURCHASE_DT = dt.Rows[i]["PURCHASE_DATE"].ToString();
                            sdb.cd_ORDER_NO = dt.Rows[i]["ORDER_NO"].ToString();


                        }
                        if (type == "cd")
                        {
                            sdb.cd_id = dt.Rows[0]["ID"].ToString();
                            sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                            sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                            sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                            sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                            sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                            sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                            sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                            sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                            sdb.cd_DURATION = dt.Rows[0]["DURATION"].ToString();
                            sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                            sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                            sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                            sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();
                            sdb.cd_DEPARTMENT = dt.Rows[0]["DEPARTMENT"].ToString();

                            sdb.prefix = dt.Rows[i]["prefix"].ToString();
                            sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                            sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                            sdb.cd_BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                            sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                            sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                            sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                            sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                            sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                            sdb.cd_REG_DT = dt.Rows[i]["REG_DT"].ToString();

                        }
                        else
                        {
                            sdb.cd_DURATION = "";
                            sdb.CALLNO = dt.Rows[0]["CALLNO"].ToString();
                        }
                        if (type != "book" && type != "Ebook" && type != "cd")
                        {
                            sdb.cd_id = dt.Rows[0]["ID"].ToString();
                            sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                            sdb.cd_ISBN = dt.Rows[0]["ISBN"].ToString();
                            sdb.cd_YEAR = dt.Rows[0]["YEAR"].ToString();
                            sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                            sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                            sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                            sdb.cd_SUBJ = dt.Rows[0]["SUBJ"].ToString();
                            sdb.CALLNO = dt.Rows[0]["CALLNO"].ToString();
                            sdb.cd_ACC_MATERIALS = dt.Rows[0]["ACC_MATERIALS"].ToString();
                            sdb.cd_REMARK = dt.Rows[0]["REMARK"].ToString();
                            sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                            sdb.cd_PUBLISHER = dt.Rows[0]["PUBLISHER"].ToString();
                            sdb.cd_DONOR_ID = dt.Rows[0]["DONOR_ID"].ToString();
                            sdb.cd_DEPARTMENT = dt.Rows[0]["DEPARTMENT"].ToString();


                            sdb.prefix = dt.Rows[i]["prefix"].ToString();
                            sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                            sdb.cd_BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                            sdb.cd_BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                            sdb.cd_MRP = dt.Rows[i]["MRP"].ToString();
                            sdb.cd_DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                            sdb.cd_PRICE = dt.Rows[i]["PRICE"].ToString();
                            sdb.dis_type = dt.Rows[0]["Discount_type"].ToString();
                            sdb.cd_VENDOR = dt.Rows[i]["VENDOR"].ToString();
                            sdb.cd_REG_DT = dt.Rows[i]["REG_DT"].ToString();

                        }


                        if (type == "Ebook")
                        {
                            sdb.cd_id = dt.Rows[0]["ID"].ToString();
                            sdb.cd_TITLE = dt.Rows[0]["TITLE"].ToString();
                            sdb.cd_AUTHOR = dt.Rows[0]["AUTHOR"].ToString();
                            sdb.cd_KEYWORD = dt.Rows[0]["KEYWORD"].ToString();
                            sdb.booknoofpages = dt.Rows[0]["NOOFPAGES"].ToString();
                            sdb.bookcallno = dt.Rows[0]["CALLNO"].ToString();
                            sdb.cd_ISSUE_TYPE = dt.Rows[0]["ISSUE_TYPE"].ToString();
                            sdb.bookbound = dt.Rows[0]["BOUND"].ToString();
                            sdb.cd_LANG = dt.Rows[0]["LANG"].ToString();
                            sdb.cd_ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();

                        }



                        sdb.cd_msg = "get";
                        confirm.Add(sdb);

                    }



                }

            }
        }

        return confirm.ToArray();
    }

    public bookmasternew[] Get_cd_Title(string connect)
    {

        string strquery = "select distinct TITLE from lib_cd_master";
        //   string constr = ConfigurationManager.ConnectionStrings["connect"].ConnectionString;
        List<bookmasternew> confirm = new List<bookmasternew>();
        string cs = "";

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }
        //else
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        using (SqlConnection con = new SqlConnection(cs))
        {
            DataTable dt = new DataTable();
            SqlConnection con1 = new SqlConnection(cs);
            SqlDataAdapter ds = new SqlDataAdapter(strquery, con1);
            ds.Fill(dt);


            //   DataTable dt = cls1.fillDataTable(strquery);




            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {

                    bookmasternew sdb = new bookmasternew();

                    // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                    // sdb.cd_id = dt.Rows[i]["cd_id"].ToString();
                    sdb.cd_name = dt.Rows[i]["TITLE"].ToString();
                    confirm.Add(sdb);

                }




            }
        }
        return confirm.ToArray();
    }
    public List<ListItem> cd_dept(string connect)
    {
        string qry = "select * from m_crs_course_tbl where del_flag=0";

        string cs = "";

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(sdr[0])))
                        {
                            listData.Add(new ListItem
                            {
                                Value = sdr["course_id"].ToString(),
                                Text = sdr["course_name"].ToString()
                            });
                        }
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public bool saveData_newspaper(string qry, string connect)
    {
        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        SqlConnection con = new SqlConnection(cs);


        return cls1.DMLqueries_newspaper(qry, con);
    }

    public MAP[] LoadMap(string accession, string connect)
    {
        string strquerycd = "select a.*,substring(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO )), 1, (len(SUBSTRING( ACCESSION_NO ,1,PATINDEX('%[0-9]%', ACCESSION_NO ))) - 1)) prefix from lib_MAP_MASTER a where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        //string strquerycd = "select a.* from lib_MAP_MASTER a where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        string cs = "";

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;


        using (SqlConnection con = new SqlConnection(cs))
        {
            List<MAP> confirm = new List<MAP>();
            DataTable dt = new DataTable();
            SqlConnection con1 = new SqlConnection(cs);
            SqlDataAdapter ds = new SqlDataAdapter(strquerycd, con1);
            ds.Fill(dt);
            //  DataTable dt = cls1.fillDataTable(strquerycd);
            string auth_name = "";
            string pub_name = "";
            string don_name = "";

            //if (dt.Rows.Count > 0)
            //{
            //    string auth_id = "'" + dt.Rows[0]["AUTHOR"].ToString().Replace(",", "','") + "'";
            //    string aut_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + auth_id + ") and general_type='A') T1 FOR XML PATH('')),1,1,'') ";
            //    DataTable auth_dt = cls1.fillDataTable(aut_str);
            //    if (auth_dt.Rows.Count > 0)
            //    {
            //        auth_name = auth_dt.Rows[0][0].ToString();
            //    }


            //    ///pub///
            //    ///
            //    string pub_id = "'" + dt.Rows[0]["PUBLISHER"].ToString().Replace(",", "','") + "'";

            //    string pub_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + pub_id + ") and general_type='p') T1 FOR XML PATH('')),1,1,'') ";
            //    DataTable pub_dt = cls1.fillDataTable(pub_str);

            //    if (pub_dt.Rows.Count > 0)
            //    {
            //        pub_name = pub_dt.Rows[0][0].ToString();
            //    }

            //    //donor

            //    string don_id = "'" + dt.Rows[0]["DONOR_ID"].ToString().Replace(",", "','") + "'";

            //    string don_str = "select distinct STUFF((Select ','+general_name from (select * from ll_general_master as b where b.general_id in (" + don_id + ") and general_type='D') T1 FOR XML PATH('')),1,1,'') ";
            //    DataTable don_dt = cls1.fillDataTable(don_str);
            //    if (don_dt.Rows.Count > 0)
            //    {
            //        don_name = don_dt.Rows[0][0].ToString();
            //    }
            //}
            if (dt.Rows.Count > 0)
            {
                MAP sdb = new MAP();
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    sdb.ID = dt.Rows[i]["ID"].ToString();
                    sdb.TITLE = dt.Rows[i]["TITLE"].ToString();
                    sdb.AUTHOR = dt.Rows[i]["AUTHOR"].ToString();
                    sdb.ISBN = dt.Rows[i]["ISBN"].ToString();
                    sdb.LANG = dt.Rows[i]["LANG"].ToString();
                    sdb.ISSUE_TYPE = dt.Rows[i]["ISSUE_TYPE"].ToString();
                    sdb.KEYWORD = dt.Rows[i]["KEYWORD"].ToString();
                    sdb.PUBLISHER = dt.Rows[i]["PUBLISHER"].ToString();
                    sdb.YEAR = dt.Rows[i]["YEAR"].ToString();
                    sdb.CALLNO = dt.Rows[i]["CALLNO"].ToString();
                    sdb.DEPARTMENT = dt.Rows[i]["DEPARTMENT"].ToString();
                    sdb.ACC_MATERIALS = dt.Rows[i]["ACC_MATERIALS"].ToString();
                    sdb.SUBJ = dt.Rows[i]["SUBJ"].ToString();
                    sdb.REMARK = dt.Rows[i]["REMARK"].ToString();
                    sdb.ACCESSION_NO = dt.Rows[i]["ACCESSION_NO"].ToString();
                    sdb.BILL_NO = dt.Rows[i]["BILL_NO"].ToString();
                    sdb.BILL_DT = dt.Rows[i]["BILL_DT"].ToString();
                    sdb.MRP = dt.Rows[i]["MRP"].ToString();
                    sdb.DISCOUNT = dt.Rows[i]["DISCOUNT"].ToString();
                    sdb.PRICE = dt.Rows[i]["PRICE"].ToString();
                    sdb.VENDOR = dt.Rows[i]["VENDOR"].ToString();
                    sdb.REG_DT = dt.Rows[i]["REG_DT"].ToString();
                    sdb.DONOR_ID = dt.Rows[i]["DONOR_ID"].ToString(); ;
                    sdb.prefix = dt.Rows[i]["prefix"].ToString();

                }
                confirm.Add(sdb);
            }
            return confirm.ToArray();

        }
    }

    public MAP[] load_cd_book(string accession, string type, string connect)
    {
        string strquerycd = "";
        if (type == "cd")
        {
            strquerycd = "select *,case when bill_dt like '%1900%' then getdate() else bill_dt end bill_dt1 from lib_cd_master where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        }
        else if (type == "book")
        {
            strquerycd = "select *,case when bill_dt like '%1900%' then getdate() else bill_dt end bill_dt1 from lib_book_master where ACCESSION_NO='" + accession + "' and DEL_FLAG=0";
        }
        string cs = "";

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMS")) { cs = ConfigurationManager.ConnectionStrings["connect_ims"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;



        using (SqlConnection con = new SqlConnection(cs))
        {
            List<MAP> confirm = new List<MAP>();
            //   DataTable dt = cls1.fillDataTable(strquerycd);
            DataTable dt = new DataTable();
            SqlConnection con1 = new SqlConnection(cs);
            SqlDataAdapter ds = new SqlDataAdapter(strquerycd, con1);
            ds.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                MAP sdb = new MAP();
                for (int i = 0; i <= dt.Rows.Count - 1; i++)
                {
                    sdb.ID = dt.Rows[i]["ID"].ToString();


                }
                confirm.Add(sdb);
            }
            return confirm.ToArray();

        }
    }

    public List<ListItem> fillDropdown(string connect)
    {
        string qry = "select * from ll_language_master order by Language asc ";
        //var txtaddlanguage = "";

        //string qry = "if not exists (select * from ll_language_master where language='" + txtaddlanguage + "')begin insert into ll_language_master values('" + txtaddlanguage + "')end";

        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //        cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;
        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> listData = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        listData.Add(new ListItem
                        {
                            Value = sdr["id"].ToString(),
                            Text = sdr["language"].ToString()
                        });
                    }
                }
                con.Close();
                return listData;
            }
        }
    }

    public List<ListItem> LoadPrefix(string type, string connect)
    {
        String qry = "";
        //string finalGrp = qryCls.splitGrp(Convert.ToString(HttpContext.Current.Session["group_ids"]));
        if (type == "map")
        {
            qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix   from lib_MAP_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and  substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%',ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%',ACCESSION_NO ) end )) - 1)) <>''  order by 1";
        }
        else if (type == "cd")
        {
            qry = "select distinct  substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix  from lib_CD_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and  substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%',ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%',ACCESSION_NO ) end )) - 1)) <>''  order by 1";
        }
        else
        {
            qry = "select distinct   substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1)) prefix  from lib_book_MASTER where ( ACCESSION_NO is not null or  ACCESSION_NO <>'' ) and substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%',ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%',ACCESSION_NO ) end )) - 1)) <>''  order by 1";

        }
        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;



        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                List<ListItem> course = new List<ListItem>();
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        course.Add(new ListItem
                        {
                            Value = sdr["prefix"].ToString(),
                            Text = sdr["prefix"].ToString()
                        });
                    }
                }
                con.Close();
                return course;
            }
        }
    }

    public string getMaxAccession(string accession, string type, string connect)
    {
        String qry = "";
        if (type == "map")
        {
            qry = "select  top 1  ACCESSION_NO,SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as acc from lib_map_MASTER where substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1))='" + accession + "' group by ACCESSION_NO order by SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) desc";

        }
        else if (type == "cd")
        {
            qry = "select  top 1  ACCESSION_NO,SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as acc from lib_CD_MASTER where substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1))='" + accession + "' group by ACCESSION_NO order by SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) desc";

        }
        else
        {
            //qry = "select  top 1  ACCESSION_NO,SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as acc from lib_book_MASTER where substring(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end ), 1,(len(SUBSTRING( ACCESSION_NO ,1,case when PATINDEX('%[0-9]%', ACCESSION_NO )='0' then '1' else PATINDEX('%[0-9]%', ACCESSION_NO ) end )) - 1))='" + accession + "' group by ACCESSION_NO order by SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) desc";
            qry = "select  top 1 max(ACCESSION_NO) as ACCESSION_NO,max(cast(SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as int)) as acc from lib_book_master where ACCESSION_NO like '%" + accession + "%'  group by ACCESSION_NO order by max(cast(SUBSTRING( ACCESSION_NO ,PATINDEX('%[0-9]%', ACCESSION_NO ),LEN(ACCESSION_NO)-1) as int)) desc";

        }
        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;


        using (SqlConnection con = new SqlConnection(cs))
        {
            using (SqlCommand cmd = new SqlCommand(qry))
            {
                string acc = "";
                cmd.CommandType = CommandType.Text;
                cmd.Connection = con;
                con.Open();
                using (SqlDataReader sdr = cmd.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        acc = sdr["acc"].ToString() + '|' + sdr["ACCESSION_NO"].ToString();
                    }
                }
                con.Close();
                return acc;
            }
        }
    }

    public book_master[] CheckAlready(string booktitle, string edition, string author, string publisher, string accession, string connect)
    {
        string strquery = "";

        //   strquery = "select * from lib_book_master where TITLE='" + booktitle + "' and EDITION='" + edition + "' and AUTHOR='" + author + "' and PUBLISHER='" + publisher + "' and accession_no in ('" + accession + "')  ";
        strquery = "select * from lib_book_master where  accession_no in ('" + accession + "')  ";

        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }

        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;

        List<book_master> confirm = new List<book_master>();
        using (SqlConnection con = new SqlConnection(cs))
        {
            book_master sdb = new book_master();

            DataTable dt = new DataTable();
            SqlDataAdapter da = new SqlDataAdapter(strquery, con);
            da.Fill(dt);
            //cls1.fillDataTable(strquery);
            if (dt.Rows.Count > 0)
            {


                // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                sdb.id = "1";
            }
            else
            {

                sdb.id = "0";



            }
            confirm.Add(sdb);
        }
        return confirm.ToArray();
    }

    public book_master[] CheckAlreadyebook(string accession, string connect)
    {
        string strquery = "";

        strquery = "select * from lib_Ebook_master where  accession_no in ('" + accession + "')  ";

        string cs = "";// ConfigurationManager.ConnectionStrings["connect"].ConnectionString;

        //if (connect.StartsWith("Viva Engg"))
        //{
        //    cs = ConfigurationManager.ConnectionStrings["connect_engg"].ConnectionString;
        //}
        //else if (connect.StartsWith("MCA")) { cs = ConfigurationManager.ConnectionStrings["connect_mca"].ConnectionString; }
        //else if (connect.StartsWith("pharmacy")) { cs = ConfigurationManager.ConnectionStrings["connect_pha"].ConnectionString; }
        //else if (connect.StartsWith("Viva IMR")) { cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString; }
        cs = ConfigurationManager.ConnectionStrings["dbconnection"].ConnectionString;


        List<book_master> confirm = new List<book_master>();
        using (SqlConnection con = new SqlConnection(cs))
        {
            book_master sdb = new book_master();

            DataTable dt = new DataTable();
            SqlDataAdapter da = new SqlDataAdapter(strquery, con);
            da.Fill(dt);
            //cls1.fillDataTable(strquery);
            if (dt.Rows.Count > 0)
            {


                // sdb.book_id = dt.Rows[i]["book_id"].ToString();
                sdb.id = "1";
            }
            else
            {

                sdb.id = "0";



            }
            confirm.Add(sdb);
        }
        return confirm.ToArray();
    }


    //  working access
    public masterpage[] moduleAccess(string emp_id)
    {
        string qry = "";
        DateTime date = DateTime.Now;

        List<masterpage> details = new List<masterpage>();
        string arrlst = "";
        string str = "select distinct stuff((select distinct ','+ b.Module_name from Register_Form as a,ModuleForm as b where a.mod_id=b.mod_id and  a.form_id in (select x.Item as col2 from web_tp_login t cross apply (select Item from dbo.SplitString(t.col2,',') ) x where t.emp_id='" + emp_id + "'   union all select y.Item as form_name from web_tp_roletype r cross apply (select Item from dbo.SplitString(r.form_name,',') ) y where r.role_id in (select role_id from web_tp_login where emp_id ='" + emp_id + "' )) for xml path('')),1,1,'') as module from  Register_Form";
        DataTable dtfill = cls1.fillDataTable(str);
        if (dtfill.Rows.Count > 0)
        {
            string[] arr = dtfill.Rows[0]["module"].ToString().Split(',');

            for (int a = 0; a < arr.Length; a++)
            {
                masterpage retval = new masterpage();
                retval.module_name = arr[a].ToString();


                details.Add(retval);
            }

        }

        return details.ToArray();
    }

    public masterpage[] formAccess(string emp_id)
    {
        string qry = "";
        DateTime date = DateTime.Now;

        List<masterpage> details = new List<masterpage>();

        string str = "select Form_Name as form from Register_Form where form_id in (select x.Item as col2 from web_tp_login t cross apply (select Item from dbo.SplitString(t.col2,',') ) x where t.emp_id='" + emp_id + "'  union all select y.Item as form_name from web_tp_roletype r cross apply (select Item from dbo.SplitString(r.form_name,',') ) y where r.role_id in (select role_id from web_tp_login where emp_id ='" + emp_id + "' ))";
        DataTable dtfill = cls1.fillDataTable(str);
        if (dtfill.Rows.Count > 0)
        {
            string[] arr1 = new string[dtfill.Rows.Count];
            string temp = "";
            //  string[] arr = dtfill.Rows[0]["form"].ToString().Split(',');
            for (int a = 0; a < dtfill.Rows.Count; a++)
            {
                arr1[a] = dtfill.Rows[a]["form"].ToString();
                masterpage retval = new masterpage();
                retval.form_name = arr1[a].ToString();
                details.Add(retval);
            }

        }

        return details.ToArray();
    }


}